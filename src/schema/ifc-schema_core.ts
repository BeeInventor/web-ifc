export const IFCURIREFERENCE = 950732822;
export const IFCTIME = 4075327185;
export const IFCTEMPERATURERATEOFCHANGEMEASURE = 1209108979;
export const IFCSOUNDPRESSURELEVELMEASURE = 3457685358;
export const IFCSOUNDPOWERLEVELMEASURE = 4157543285;
export const IFCPROPERTYSETDEFINITIONSET = 2798247006;
export const IFCPOSITIVEINTEGER = 1790229001;
export const IFCNONNEGATIVELENGTHMEASURE = 525895558;
export const IFCLINEINDEX = 1774176899;
export const IFCLANGUAGEID = 1275358634;
export const IFCDURATION = 2541165894;
export const IFCDAYINWEEKNUMBER = 3701338814;
export const IFCDATETIME = 2195413836;
export const IFCDATE = 937566702;
export const IFCCARDINALPOINTREFERENCE = 1683019596;
export const IFCBINARY = 2314439260;
export const IFCAREADENSITYMEASURE = 1500781891;
export const IFCARCINDEX = 3683503648;
export const IFCYEARNUMBER = 4065007721;
export const IFCWARPINGMOMENTMEASURE = 1718600412;
export const IFCWARPINGCONSTANTMEASURE = 51269191;
export const IFCVOLUMETRICFLOWRATEMEASURE = 2593997549;
export const IFCVOLUMEMEASURE = 3458127941;
export const IFCVAPORPERMEABILITYMEASURE = 3345633955;
export const IFCTORQUEMEASURE = 1278329552;
export const IFCTIMESTAMP = 2591213694;
export const IFCTIMEMEASURE = 2726807636;
export const IFCTHERMODYNAMICTEMPERATUREMEASURE = 743184107;
export const IFCTHERMALTRANSMITTANCEMEASURE = 2016195849;
export const IFCTHERMALRESISTANCEMEASURE = 857959152;
export const IFCTHERMALEXPANSIONCOEFFICIENTMEASURE = 2281867870;
export const IFCTHERMALCONDUCTIVITYMEASURE = 2645777649;
export const IFCTHERMALADMITTANCEMEASURE = 232962298;
export const IFCTEXTTRANSFORMATION = 296282323;
export const IFCTEXTFONTNAME = 603696268;
export const IFCTEXTDECORATION = 3490877962;
export const IFCTEXTALIGNMENT = 1460886941;
export const IFCTEXT = 2801250643;
export const IFCTEMPERATUREGRADIENTMEASURE = 58845555;
export const IFCSPECULARROUGHNESS = 361837227;
export const IFCSPECULAREXPONENT = 2757832317;
export const IFCSPECIFICHEATCAPACITYMEASURE = 3477203348;
export const IFCSOUNDPRESSUREMEASURE = 993287707;
export const IFCSOUNDPOWERMEASURE = 846465480;
export const IFCSOLIDANGLEMEASURE = 3471399674;
export const IFCSHEARMODULUSMEASURE = 408310005;
export const IFCSECTIONALAREAINTEGRALMEASURE = 2190458107;
export const IFCSECTIONMODULUSMEASURE = 3467162246;
export const IFCSECONDINMINUTE = 2766185779;
export const IFCROTATIONALSTIFFNESSMEASURE = 3211557302;
export const IFCROTATIONALMASSMEASURE = 1755127002;
export const IFCROTATIONALFREQUENCYMEASURE = 2133746277;
export const IFCREAL = 200335297;
export const IFCRATIOMEASURE = 96294661;
export const IFCRADIOACTIVITYMEASURE = 3972513137;
export const IFCPRESSUREMEASURE = 3665567075;
export const IFCPRESENTABLETEXT = 2169031380;
export const IFCPOWERMEASURE = 1364037233;
export const IFCPOSITIVERATIOMEASURE = 1245737093;
export const IFCPOSITIVEPLANEANGLEMEASURE = 3054510233;
export const IFCPOSITIVELENGTHMEASURE = 2815919920;
export const IFCPLANEANGLEMEASURE = 4042175685;
export const IFCPLANARFORCEMEASURE = 2642773653;
export const IFCPARAMETERVALUE = 2260317790;
export const IFCPHMEASURE = 929793134;
export const IFCNUMERICMEASURE = 2395907400;
export const IFCNORMALISEDRATIOMEASURE = 2095195183;
export const IFCMONTHINYEARNUMBER = 765770214;
export const IFCMONETARYMEASURE = 2615040989;
export const IFCMOMENTOFINERTIAMEASURE = 3114022597;
export const IFCMOLECULARWEIGHTMEASURE = 1648970520;
export const IFCMOISTUREDIFFUSIVITYMEASURE = 3177669450;
export const IFCMODULUSOFSUBGRADEREACTIONMEASURE = 1753493141;
export const IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE = 1052454078;
export const IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE = 2173214787;
export const IFCMODULUSOFELASTICITYMEASURE = 3341486342;
export const IFCMINUTEINHOUR = 102610177;
export const IFCMASSPERLENGTHMEASURE = 3531705166;
export const IFCMASSMEASURE = 3124614049;
export const IFCMASSFLOWRATEMEASURE = 4017473158;
export const IFCMASSDENSITYMEASURE = 1477762836;
export const IFCMAGNETICFLUXMEASURE = 2486716878;
export const IFCMAGNETICFLUXDENSITYMEASURE = 286949696;
export const IFCLUMINOUSINTENSITYMEASURE = 151039812;
export const IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE = 2755797622;
export const IFCLUMINOUSFLUXMEASURE = 2095003142;
export const IFCLOGICAL = 503418787;
export const IFCLINEARVELOCITYMEASURE = 3086160713;
export const IFCLINEARSTIFFNESSMEASURE = 1307019551;
export const IFCLINEARMOMENTMEASURE = 2128979029;
export const IFCLINEARFORCEMEASURE = 191860431;
export const IFCLENGTHMEASURE = 1243674935;
export const IFCLABEL = 3258342251;
export const IFCKINEMATICVISCOSITYMEASURE = 2054016361;
export const IFCISOTHERMALMOISTURECAPACITYMEASURE = 3192672207;
export const IFCIONCONCENTRATIONMEASURE = 3686016028;
export const IFCINTEGERCOUNTRATEMEASURE = 3809634241;
export const IFCINTEGER = 1939436016;
export const IFCINDUCTANCEMEASURE = 2679005408;
export const IFCILLUMINANCEMEASURE = 3358199106;
export const IFCIDENTIFIER = 983778844;
export const IFCHOURINDAY = 2589826445;
export const IFCHEATINGVALUEMEASURE = 1158859006;
export const IFCHEATFLUXDENSITYMEASURE = 3113092358;
export const IFCGLOBALLYUNIQUEID = 3064340077;
export const IFCFREQUENCYMEASURE = 3044325142;
export const IFCFORCEMEASURE = 1361398929;
export const IFCFONTWEIGHT = 2590844177;
export const IFCFONTVARIANT = 2715512545;
export const IFCFONTSTYLE = 1102727119;
export const IFCENERGYMEASURE = 2078135608;
export const IFCELECTRICVOLTAGEMEASURE = 2506197118;
export const IFCELECTRICRESISTANCEMEASURE = 2951915441;
export const IFCELECTRICCURRENTMEASURE = 3790457270;
export const IFCELECTRICCONDUCTANCEMEASURE = 2093906313;
export const IFCELECTRICCHARGEMEASURE = 3818826038;
export const IFCELECTRICCAPACITANCEMEASURE = 1827137117;
export const IFCDYNAMICVISCOSITYMEASURE = 69416015;
export const IFCDOSEEQUIVALENTMEASURE = 524656162;
export const IFCDIMENSIONCOUNT = 4134073009;
export const IFCDESCRIPTIVEMEASURE = 1514641115;
export const IFCDAYLIGHTSAVINGHOUR = 300323983;
export const IFCDAYINMONTHNUMBER = 86635668;
export const IFCCURVATUREMEASURE = 94842927;
export const IFCCOUNTMEASURE = 1778710042;
export const IFCCONTEXTDEPENDENTMEASURE = 3238673880;
export const IFCCOMPOUNDPLANEANGLEMEASURE = 3812528620;
export const IFCCOMPLEXNUMBER = 2991860651;
export const IFCBOXALIGNMENT = 1867003952;
export const IFCBOOLEAN = 2735952531;
export const IFCAREAMEASURE = 2650437152;
export const IFCANGULARVELOCITYMEASURE = 632304761;
export const IFCAMOUNTOFSUBSTANCEMEASURE = 360377573;
export const IFCACCELERATIONMEASURE = 4182062534;
export const IFCABSORBEDDOSEMEASURE = 3699917729;
export const IFCBEAMSTANDARDCASE = 2906023776;
export const IFCWINDOWSTANDARDCASE = 486154966;
export const IFCWALLELEMENTEDCASE = 4156078855;
export const IFCSLABSTANDARDCASE = 3027962421;
export const IFCSLABELEMENTEDCASE = 3127900445;
export const IFCPLATESTANDARDCASE = 1156407060;
export const IFCMEMBERSTANDARDCASE = 1911478936;
export const IFCDOORSTANDARDCASE = 3242481149;
export const IFCCOLUMNSTANDARDCASE = 905975707;
export const IFCOPENINGSTANDARDCASE = 3079942009;
export const IFCCONTROLLER = 25142252;
export const IFCALARM = 3087945054;
export const IFCACTUATOR = 4288193352;
export const IFCUNITARYCONTROLELEMENT = 630975310;
export const IFCSENSOR = 4086658281;
export const IFCPROTECTIVEDEVICETRIPPINGUNIT = 2295281155;
export const IFCGEOSLICE = 1971632696;
export const IFCGEOMODEL = 2680139844;
export const IFCFLOWINSTRUMENT = 182646315;
export const IFCFIRESUPPRESSIONTERMINAL = 1426591983;
export const IFCFILTER = 819412036;
export const IFCFAN = 3415622556;
export const IFCELECTRICTIMECONTROL = 1003880860;
export const IFCELECTRICMOTOR = 402227799;
export const IFCELECTRICGENERATOR = 264262732;
export const IFCELECTRICFLOWTREATMENTDEVICE = 24726584;
export const IFCELECTRICFLOWSTORAGEDEVICE = 3310460725;
export const IFCELECTRICDISTRIBUTIONBOARD = 862014818;
export const IFCELECTRICAPPLIANCE = 1904799276;
export const IFCDUCTSILENCER = 1360408905;
export const IFCDUCTSEGMENT = 3518393246;
export const IFCDUCTFITTING = 342316401;
export const IFCDISTRIBUTIONCIRCUIT = 562808652;
export const IFCDISTRIBUTIONBOARD = 3693000487;
export const IFCDAMPER = 4074379575;
export const IFCCOOLINGTOWER = 3640358203;
export const IFCCOOLEDBEAM = 4136498852;
export const IFCCONVEYORSEGMENT = 3460952963;
export const IFCCONDENSER = 2272882330;
export const IFCCOMPRESSOR = 3571504051;
export const IFCCOMMUNICATIONSAPPLIANCE = 3221913625;
export const IFCCOIL = 639361253;
export const IFCCHILLER = 3902619387;
export const IFCCAISSONFOUNDATION = 3999819293;
export const IFCCABLESEGMENT = 4217484030;
export const IFCCABLEFITTING = 1051757585;
export const IFCCABLECARRIERSEGMENT = 3758799889;
export const IFCCABLECARRIERFITTING = 635142910;
export const IFCBURNER = 2938176219;
export const IFCBOREHOLE = 3314249567;
export const IFCBOILER = 32344328;
export const IFCBEARING = 4196446775;
export const IFCAUDIOVISUALAPPLIANCE = 277319702;
export const IFCALIGNMENT = 325726236;
export const IFCAIRTOAIRHEATRECOVERY = 2056796094;
export const IFCAIRTERMINALBOX = 177149247;
export const IFCAIRTERMINAL = 1634111441;
export const IFCWASTETERMINAL = 4237592921;
export const IFCVALVE = 4207607924;
export const IFCUNITARYEQUIPMENT = 4292641817;
export const IFCUNITARYCONTROLELEMENTTYPE = 3179687236;
export const IFCTUBEBUNDLE = 3026737570;
export const IFCTRANSFORMER = 3825984169;
export const IFCTRACKELEMENT = 3425753595;
export const IFCTANK = 812556717;
export const IFCSWITCHINGDEVICE = 1162798199;
export const IFCSTRUCTURALLOADCASE = 385403989;
export const IFCSTACKTERMINAL = 1404847402;
export const IFCSPACEHEATER = 1999602285;
export const IFCSOLARDEVICE = 3420628829;
export const IFCSIGNAL = 991950508;
export const IFCSHADINGDEVICE = 1329646415;
export const IFCSANITARYTERMINAL = 3053780830;
export const IFCREINFORCINGBARTYPE = 2572171363;
export const IFCREINFORCEDSOIL = 3798194928;
export const IFCRATIONALBSPLINECURVEWITHKNOTS = 1232101972;
export const IFCRAIL = 3290496277;
export const IFCPUMP = 90941305;
export const IFCPROTECTIVEDEVICETRIPPINGUNITTYPE = 655969474;
export const IFCPROTECTIVEDEVICE = 738039164;
export const IFCPIPESEGMENT = 3612865200;
export const IFCPIPEFITTING = 310824031;
export const IFCPAVEMENT = 1383356374;
export const IFCOUTLET = 3694346114;
export const IFCOUTERBOUNDARYCURVE = 144952367;
export const IFCNAVIGATIONELEMENT = 2182337498;
export const IFCMOTORCONNECTION = 2474470126;
export const IFCMOORINGDEVICE = 234836483;
export const IFCMOBILETELECOMMUNICATIONSAPPLIANCE = 2078563270;
export const IFCMEDICALDEVICE = 1437502449;
export const IFCLIQUIDTERMINAL = 1638804497;
export const IFCLINEARPOSITIONINGELEMENT = 1154579445;
export const IFCLIGHTFIXTURE = 629592764;
export const IFCLAMP = 76236018;
export const IFCKERB = 2696325953;
export const IFCJUNCTIONBOX = 2176052936;
export const IFCINTERCEPTOR = 4175244083;
export const IFCHUMIDIFIER = 2068733104;
export const IFCHEATEXCHANGER = 3319311131;
export const IFCGEOTECHNICALASSEMBLY = 2713699986;
export const IFCFLOWMETER = 2188021234;
export const IFCEXTERNALSPATIALELEMENT = 1209101575;
export const IFCEVAPORATOR = 484807127;
export const IFCEVAPORATIVECOOLER = 3747195512;
export const IFCENGINE = 2814081492;
export const IFCELECTRICFLOWTREATMENTDEVICETYPE = 2142170206;
export const IFCELECTRICDISTRIBUTIONBOARDTYPE = 2417008758;
export const IFCEARTHWORKSFILL = 3376911765;
export const IFCEARTHWORKSELEMENT = 1077100507;
export const IFCEARTHWORKSCUT = 3071239417;
export const IFCDISTRIBUTIONSYSTEM = 3205830791;
export const IFCDISTRIBUTIONBOARDTYPE = 479945903;
export const IFCDEEPFOUNDATION = 3426335179;
export const IFCCOURSE = 1502416096;
export const IFCCONVEYORSEGMENTTYPE = 2940368186;
export const IFCCOMMUNICATIONSAPPLIANCETYPE = 400855858;
export const IFCCIVILELEMENT = 1677625105;
export const IFCCHIMNEY = 3296154744;
export const IFCCAISSONFOUNDATIONTYPE = 3203706013;
export const IFCCABLEFITTINGTYPE = 2674252688;
export const IFCBURNERTYPE = 2188180465;
export const IFCBUILTSYSTEM = 3862327254;
export const IFCBUILTELEMENT = 1876633798;
export const IFCBUILDINGSYSTEM = 1177604601;
export const IFCBUILDINGELEMENTPARTTYPE = 39481116;
export const IFCBRIDGEPART = 963979645;
export const IFCBRIDGE = 644574406;
export const IFCBOUNDARYCURVE = 1136057603;
export const IFCBEARINGTYPE = 3649138523;
export const IFCBSPLINECURVEWITHKNOTS = 2461110595;
export const IFCAUDIOVISUALAPPLIANCETYPE = 1532957894;
export const IFCALIGNMENTVERTICAL = 1662888072;
export const IFCALIGNMENTSEGMENT = 317615605;
export const IFCALIGNMENTHORIZONTAL = 1545765605;
export const IFCALIGNMENTCANT = 4266260250;
export const IFCWORKCALENDAR = 4088093105;
export const IFCWINDOWTYPE = 4009809668;
export const IFCVOIDINGFEATURE = 926996030;
export const IFCVIBRATIONISOLATOR = 2391383451;
export const IFCVIBRATIONDAMPERTYPE = 3956297820;
export const IFCVIBRATIONDAMPER = 1530820697;
export const IFCVEHICLE = 840318589;
export const IFCTRANSPORTATIONDEVICE = 1953115116;
export const IFCTRACKELEMENTTYPE = 618700268;
export const IFCTENDONTYPE = 2415094496;
export const IFCTENDONCONDUITTYPE = 2281632017;
export const IFCTENDONCONDUIT = 3663046924;
export const IFCTENDONANCHORTYPE = 3081323446;
export const IFCSYSTEMFURNITUREELEMENT = 413509423;
export const IFCSURFACEFEATURE = 3101698114;
export const IFCSTRUCTURALSURFACEACTION = 3657597509;
export const IFCSTRUCTURALCURVEREACTION = 2757150158;
export const IFCSTRUCTURALCURVEACTION = 1004757350;
export const IFCSTAIRTYPE = 338393293;
export const IFCSOLARDEVICETYPE = 1072016465;
export const IFCSINESPIRAL = 42703149;
export const IFCSIGNALTYPE = 1894708472;
export const IFCSIGNTYPE = 3599934289;
export const IFCSIGN = 33720170;
export const IFCSHADINGDEVICETYPE = 4074543187;
export const IFCSEVENTHORDERPOLYNOMIALSPIRAL = 1027922057;
export const IFCSEGMENTEDREFERENCECURVE = 544395925;
export const IFCSECONDORDERPOLYNOMIALSPIRAL = 3649235739;
export const IFCSEAMCURVE = 2157484638;
export const IFCROOFTYPE = 2781568857;
export const IFCROADPART = 550521510;
export const IFCROAD = 146592293;
export const IFCRELADHERESTOELEMENT = 3818125796;
export const IFCREINFORCINGMESHTYPE = 2310774935;
export const IFCREINFORCINGELEMENTTYPE = 964333572;
export const IFCREFERENT = 4021432810;
export const IFCRATIONALBSPLINESURFACEWITHKNOTS = 683857671;
export const IFCRAMPTYPE = 1469900589;
export const IFCRAILWAYPART = 1891881377;
export const IFCRAILWAY = 3992365140;
export const IFCRAILTYPE = 1763565496;
export const IFCPOSITIONINGELEMENT = 1946335990;
export const IFCPOLYGONALFACESET = 2839578677;
export const IFCPILETYPE = 1158309216;
export const IFCPAVEMENTTYPE = 514975943;
export const IFCNAVIGATIONELEMENTTYPE = 506776471;
export const IFCMOORINGDEVICETYPE = 710110818;
export const IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE = 1950438474;
export const IFCMEDICALDEVICETYPE = 1114901282;
export const IFCMARINEPART = 976884017;
export const IFCMARINEFACILITY = 525669439;
export const IFCLIQUIDTERMINALTYPE = 1770583370;
export const IFCLINEARELEMENT = 2176059722;
export const IFCKERBTYPE = 679976338;
export const IFCINTERSECTIONCURVE = 3113134337;
export const IFCINTERCEPTORTYPE = 3946677679;
export const IFCINDEXEDPOLYCURVE = 2571569899;
export const IFCIMPACTPROTECTIONDEVICETYPE = 3948183225;
export const IFCIMPACTPROTECTIONDEVICE = 2568555532;
export const IFCGRADIENTCURVE = 2898700619;
export const IFCGEOTECHNICALSTRATUM = 1594536857;
export const IFCGEOTECHNICALELEMENT = 4230923436;
export const IFCGEOGRAPHICELEMENT = 3493046030;
export const IFCFURNITURE = 1509553395;
export const IFCFOOTINGTYPE = 1893162501;
export const IFCFACILITYPARTCOMMON = 4228831410;
export const IFCFACILITYPART = 1310830890;
export const IFCFACILITY = 24185140;
export const IFCEXTERNALSPATIALSTRUCTUREELEMENT = 2853485674;
export const IFCEVENT = 4148101412;
export const IFCENGINETYPE = 132023988;
export const IFCELEMENTASSEMBLYTYPE = 2397081782;
export const IFCDOORTYPE = 2323601079;
export const IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID = 4234616927;
export const IFCDEEPFOUNDATIONTYPE = 1306400036;
export const IFCCYLINDRICALSURFACE = 1213902940;
export const IFCCOURSETYPE = 4189326743;
export const IFCCOSINESPIRAL = 2000195564;
export const IFCCONSTRUCTIONPRODUCTRESOURCETYPE = 1525564444;
export const IFCCONSTRUCTIONMATERIALRESOURCETYPE = 4105962743;
export const IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE = 2185764099;
export const IFCCOMPOSITECURVEONSURFACE = 15328376;
export const IFCCOMPLEXPROPERTYTEMPLATE = 3875453745;
export const IFCCLOTHOID = 3497074424;
export const IFCCIVILELEMENTTYPE = 3893394355;
export const IFCCHIMNEYTYPE = 2197970202;
export const IFCBUILTELEMENTTYPE = 1626504194;
export const IFCBSPLINESURFACEWITHKNOTS = 167062518;
export const IFCBSPLINESURFACE = 2887950389;
export const IFCADVANCEDBREPWITHVOIDS = 2603310189;
export const IFCADVANCEDBREP = 1635779807;
export const IFCVEHICLETYPE = 3651464721;
export const IFCTRIANGULATEDIRREGULARNETWORK = 1229763772;
export const IFCTRIANGULATEDFACESET = 2916149573;
export const IFCTRANSPORTATIONDEVICETYPE = 3665877780;
export const IFCTOROIDALSURFACE = 1935646853;
export const IFCTHIRDORDERPOLYNOMIALSPIRAL = 782932809;
export const IFCTESSELLATEDFACESET = 2387106220;
export const IFCTASKTYPE = 3206491090;
export const IFCSURFACECURVE = 699246055;
export const IFCSUBCONTRACTRESOURCETYPE = 4095615324;
export const IFCSTRUCTURALSURFACEREACTION = 603775116;
export const IFCSPIRAL = 2735484536;
export const IFCSPHERICALSURFACE = 4015995234;
export const IFCSPATIALZONETYPE = 2481509218;
export const IFCSPATIALZONE = 463610769;
export const IFCSPATIALELEMENTTYPE = 710998568;
export const IFCSPATIALELEMENT = 1412071761;
export const IFCSIMPLEPROPERTYTEMPLATE = 3663146110;
export const IFCSECTIONEDSURFACE = 1356537516;
export const IFCSECTIONEDSOLIDHORIZONTAL = 1290935644;
export const IFCSECTIONEDSOLID = 1862484736;
export const IFCREVOLVEDAREASOLIDTAPERED = 3243963512;
export const IFCREPARAMETRISEDCOMPOSITECURVESEGMENT = 816062949;
export const IFCRELSPACEBOUNDARY2NDLEVEL = 1521410863;
export const IFCRELSPACEBOUNDARY1STLEVEL = 3523091289;
export const IFCRELPOSITIONS = 1441486842;
export const IFCRELINTERFERESELEMENTS = 427948657;
export const IFCRELDEFINESBYTEMPLATE = 307848117;
export const IFCRELDEFINESBYOBJECT = 1462361463;
export const IFCRELDECLARES = 2565941209;
export const IFCRELASSOCIATESPROFILEDEF = 1033248425;
export const IFCRELASSIGNSTOGROUPBYFACTOR = 1027710054;
export const IFCPROPERTYTEMPLATE = 3521284610;
export const IFCPROPERTYSETTEMPLATE = 492091185;
export const IFCPROJECTLIBRARY = 653396225;
export const IFCPROCEDURETYPE = 569719735;
export const IFCPREDEFINEDPROPERTYSET = 3967405729;
export const IFCPOLYNOMIALCURVE = 3381221214;
export const IFCPCURVE = 1682466193;
export const IFCOFFSETCURVEBYDISTANCES = 2485787929;
export const IFCOFFSETCURVE = 590820931;
export const IFCLABORRESOURCETYPE = 428585644;
export const IFCINDEXEDPOLYGONALTEXTUREMAP = 3465909080;
export const IFCINDEXEDPOLYGONALFACEWITHVOIDS = 2294589976;
export const IFCINDEXEDPOLYGONALFACE = 178912537;
export const IFCGEOGRAPHICELEMENTTYPE = 4095422895;
export const IFCFIXEDREFERENCESWEPTAREASOLID = 2652556860;
export const IFCEXTRUDEDAREASOLIDTAPERED = 2804161546;
export const IFCEVENTTYPE = 4024345920;
export const IFCDIRECTRIXCURVESWEPTAREASOLID = 593015953;
export const IFCCURVESEGMENT = 4212018352;
export const IFCCURVEBOUNDEDSURFACE = 2629017746;
export const IFCCREWRESOURCETYPE = 1815067380;
export const IFCCONTEXT = 3419103109;
export const IFCCONSTRUCTIONRESOURCETYPE = 2574617495;
export const IFCCARTESIANPOINTLIST3D = 2059837836;
export const IFCCARTESIANPOINTLIST2D = 1675464909;
export const IFCCARTESIANPOINTLIST = 574549367;
export const IFCAXIS2PLACEMENTLINEAR = 3425423356;
export const IFCADVANCEDFACE = 3406155212;
export const IFCTYPERESOURCE = 3698973494;
export const IFCTYPEPROCESS = 3736923433;
export const IFCTESSELLATEDITEM = 901063453;
export const IFCSWEPTDISKSOLIDPOLYGONAL = 1096409881;
export const IFCSEGMENT = 823603102;
export const IFCRESOURCETIME = 1042787934;
export const IFCRESOURCECONSTRAINTRELATIONSHIP = 1608871552;
export const IFCRESOURCEAPPROVALRELATIONSHIP = 2943643501;
export const IFCQUANTITYSET = 2090586900;
export const IFCPROPERTYTEMPLATEDEFINITION = 1482703590;
export const IFCPREDEFINEDPROPERTIES = 3778827333;
export const IFCPOINTBYDISTANCEEXPRESSION = 2165702409;
export const IFCOPENCROSSPROFILEDEF = 182550632;
export const IFCMIRROREDPROFILEDEF = 2998442950;
export const IFCMATERIALRELATIONSHIP = 853536259;
export const IFCMATERIALPROFILESETUSAGETAPERING = 3404854881;
export const IFCMATERIALPROFILESETUSAGE = 3079605661;
export const IFCMATERIALCONSTITUENTSET = 2852063980;
export const IFCMATERIALCONSTITUENT = 3708119000;
export const IFCLINEARPLACEMENT = 388784114;
export const IFCLAGTIME = 1585845231;
export const IFCINDEXEDTRIANGLETEXTUREMAP = 2133299955;
export const IFCINDEXEDTEXTUREMAP = 1437953363;
export const IFCINDEXEDCOLOURMAP = 3570813810;
export const IFCEXTERNALREFERENCERELATIONSHIP = 1437805879;
export const IFCEXTENDEDPROPERTIES = 297599258;
export const IFCEVENTTIME = 211053100;
export const IFCCONVERSIONBASEDUNITWITHOFFSET = 2713554722;
export const IFCCOLOURRGBLIST = 3285139300;
export const IFCALIGNMENTHORIZONTALSEGMENT = 536804194;
export const IFCALIGNMENTCANTSEGMENT = 3752311538;
export const IFCWORKTIME = 1236880293;
export const IFCTIMEPERIOD = 1199560280;
export const IFCTEXTUREVERTEXLIST = 3611470254;
export const IFCTEXTURECOORDINATEINDICESWITHVOIDS = 1010789467;
export const IFCTEXTURECOORDINATEINDICES = 222769930;
export const IFCTASKTIMERECURRING = 2771591690;
export const IFCTASKTIME = 1549132990;
export const IFCTABLECOLUMN = 2043862942;
export const IFCSURFACEREINFORCEMENTAREA = 2934153892;
export const IFCSTRUCTURALLOADORRESULT = 609421318;
export const IFCSTRUCTURALLOADCONFIGURATION = 3478079324;
export const IFCSCHEDULINGTIME = 1054537805;
export const IFCRESOURCELEVELRELATIONSHIP = 2439245199;
export const IFCREFERENCE = 2433181523;
export const IFCRECURRENCEPATTERN = 3915482550;
export const IFCQUANTITYNUMBER = 2691318326;
export const IFCPROPERTYABSTRACTION = 986844984;
export const IFCPROJECTEDCRS = 3843373140;
export const IFCPRESENTATIONITEM = 677532197;
export const IFCMATERIALUSAGEDEFINITION = 1507914824;
export const IFCMATERIALPROFILEWITHOFFSETS = 552965576;
export const IFCMATERIALPROFILESET = 164193824;
export const IFCMATERIALPROFILE = 2235152071;
export const IFCMATERIALLAYERWITHOFFSETS = 1847252529;
export const IFCMATERIALDEFINITION = 760658860;
export const IFCMAPCONVERSION = 3057273783;
export const IFCEXTERNALINFORMATION = 4294318154;
export const IFCCOORDINATEREFERENCESYSTEM = 1466758467;
export const IFCCOORDINATEOPERATION = 1785450214;
export const IFCCONNECTIONVOLUMEGEOMETRY = 775493141;
export const IFCALIGNMENTVERTICALSEGMENT = 3633395639;
export const IFCALIGNMENTPARAMETERSEGMENT = 2879124712;
export const IFCREINFORCINGBAR = 979691226;
export const IFCELECTRICDISTRIBUTIONPOINT = 3700593921;
export const IFCDISTRIBUTIONCONTROLELEMENT = 1062813311;
export const IFCDISTRIBUTIONCHAMBERELEMENT = 1052013943;
export const IFCCONTROLLERTYPE = 578613899;
export const IFCCHAMFEREDGEFEATURE = 2454782716;
export const IFCBEAM = 753842376;
export const IFCALARMTYPE = 3001207471;
export const IFCACTUATORTYPE = 2874132201;
export const IFCWINDOW = 3304561284;
export const IFCWALLSTANDARDCASE = 3512223829;
export const IFCWALL = 2391406946;
export const IFCVIBRATIONISOLATORTYPE = 3313531582;
export const IFCTENDONANCHOR = 2347447852;
export const IFCTENDON = 3824725483;
export const IFCSTRUCTURALANALYSISMODEL = 2515109513;
export const IFCSTAIRFLIGHT = 4252922144;
export const IFCSTAIR = 331165859;
export const IFCSLAB = 1529196076;
export const IFCSENSORTYPE = 1783015770;
export const IFCROUNDEDEDGEFEATURE = 1376911519;
export const IFCROOF = 2016517767;
export const IFCREINFORCINGMESH = 2320036040;
export const IFCREINFORCINGELEMENT = 3027567501;
export const IFCRATIONALBEZIERCURVE = 3055160366;
export const IFCRAMPFLIGHT = 3283111854;
export const IFCRAMP = 3024970846;
export const IFCRAILING = 2262370178;
export const IFCPLATE = 3171933400;
export const IFCPILE = 1687234759;
export const IFCMEMBER = 1073191201;
export const IFCFOOTING = 900683007;
export const IFCFLOWTREATMENTDEVICE = 3508470533;
export const IFCFLOWTERMINAL = 2223149337;
export const IFCFLOWSTORAGEDEVICE = 707683696;
export const IFCFLOWSEGMENT = 987401354;
export const IFCFLOWMOVINGDEVICE = 3132237377;
export const IFCFLOWINSTRUMENTTYPE = 4037862832;
export const IFCFLOWFITTING = 4278956645;
export const IFCFLOWCONTROLLER = 2058353004;
export const IFCFIRESUPPRESSIONTERMINALTYPE = 4222183408;
export const IFCFILTERTYPE = 1810631287;
export const IFCFANTYPE = 346874300;
export const IFCENERGYCONVERSIONDEVICE = 1658829314;
export const IFCELECTRICALELEMENT = 857184966;
export const IFCELECTRICALCIRCUIT = 1634875225;
export const IFCELECTRICTIMECONTROLTYPE = 712377611;
export const IFCELECTRICMOTORTYPE = 1217240411;
export const IFCELECTRICHEATERTYPE = 1365060375;
export const IFCELECTRICGENERATORTYPE = 1534661035;
export const IFCELECTRICFLOWSTORAGEDEVICETYPE = 3277789161;
export const IFCELECTRICAPPLIANCETYPE = 663422040;
export const IFCEDGEFEATURE = 855621170;
export const IFCDUCTSILENCERTYPE = 2030761528;
export const IFCDUCTSEGMENTTYPE = 3760055223;
export const IFCDUCTFITTINGTYPE = 869906466;
export const IFCDOOR = 395920057;
export const IFCDISTRIBUTIONPORT = 3041715199;
export const IFCDISTRIBUTIONFLOWELEMENT = 3040386961;
export const IFCDISTRIBUTIONELEMENT = 1945004755;
export const IFCDISTRIBUTIONCONTROLELEMENTTYPE = 2063403501;
export const IFCDISTRIBUTIONCHAMBERELEMENTTYPE = 1599208980;
export const IFCDISCRETEACCESSORYTYPE = 2635815018;
export const IFCDISCRETEACCESSORY = 1335981549;
export const IFCDIAMETERDIMENSION = 4147604152;
export const IFCDAMPERTYPE = 3961806047;
export const IFCCURTAINWALL = 3495092785;
export const IFCCOVERING = 1973544240;
export const IFCCOOLINGTOWERTYPE = 2954562838;
export const IFCCOOLEDBEAMTYPE = 335055490;
export const IFCCONSTRUCTIONPRODUCTRESOURCE = 488727124;
export const IFCCONSTRUCTIONMATERIALRESOURCE = 1060000209;
export const IFCCONSTRUCTIONEQUIPMENTRESOURCE = 3898045240;
export const IFCCONDITIONCRITERION = 1163958913;
export const IFCCONDITION = 2188551683;
export const IFCCONDENSERTYPE = 2816379211;
export const IFCCOMPRESSORTYPE = 3850581409;
export const IFCCOLUMN = 843113511;
export const IFCCOILTYPE = 2301859152;
export const IFCCIRCLE = 2611217952;
export const IFCCHILLERTYPE = 2951183804;
export const IFCCABLESEGMENTTYPE = 1285652485;
export const IFCCABLECARRIERSEGMENTTYPE = 3293546465;
export const IFCCABLECARRIERFITTINGTYPE = 395041908;
export const IFCBUILDINGELEMENTPROXYTYPE = 1909888760;
export const IFCBUILDINGELEMENTPROXY = 1095909175;
export const IFCBUILDINGELEMENTPART = 2979338954;
export const IFCBUILDINGELEMENTCOMPONENT = 52481810;
export const IFCBUILDINGELEMENT = 3299480353;
export const IFCBOILERTYPE = 231477066;
export const IFCBEZIERCURVE = 1916977116;
export const IFCBEAMTYPE = 819618141;
export const IFCBSPLINECURVE = 1967976161;
export const IFCASSET = 3460190687;
export const IFCANGULARDIMENSION = 2470393545;
export const IFCAIRTOAIRHEATRECOVERYTYPE = 1871374353;
export const IFCAIRTERMINALTYPE = 3352864051;
export const IFCAIRTERMINALBOXTYPE = 1411407467;
export const IFCACTIONREQUEST = 3821786052;
export const IFC2DCOMPOSITECURVE = 1213861670;
export const IFCZONE = 1033361043;
export const IFCWORKSCHEDULE = 3342526732;
export const IFCWORKPLAN = 4218914973;
export const IFCWORKCONTROL = 1028945134;
export const IFCWASTETERMINALTYPE = 1133259667;
export const IFCWALLTYPE = 1898987631;
export const IFCVIRTUALELEMENT = 2769231204;
export const IFCVALVETYPE = 728799441;
export const IFCUNITARYEQUIPMENTTYPE = 1911125066;
export const IFCTUBEBUNDLETYPE = 1600972822;
export const IFCTRIMMEDCURVE = 3593883385;
export const IFCTRANSPORTELEMENT = 1620046519;
export const IFCTRANSFORMERTYPE = 1692211062;
export const IFCTIMESERIESSCHEDULE = 1637806684;
export const IFCTANKTYPE = 5716631;
export const IFCSYSTEM = 2254336722;
export const IFCSWITCHINGDEVICETYPE = 2315554128;
export const IFCSUBCONTRACTRESOURCE = 148013059;
export const IFCSTRUCTURALSURFACECONNECTION = 1975003073;
export const IFCSTRUCTURALRESULTGROUP = 2986769608;
export const IFCSTRUCTURALPOINTREACTION = 1235345126;
export const IFCSTRUCTURALPOINTCONNECTION = 734778138;
export const IFCSTRUCTURALPOINTACTION = 2082059205;
export const IFCSTRUCTURALPLANARACTIONVARYING = 3987759626;
export const IFCSTRUCTURALPLANARACTION = 1621171031;
export const IFCSTRUCTURALLOADGROUP = 1252848954;
export const IFCSTRUCTURALLINEARACTIONVARYING = 1721250024;
export const IFCSTRUCTURALLINEARACTION = 1807405624;
export const IFCSTRUCTURALCURVEMEMBERVARYING = 2445595289;
export const IFCSTRUCTURALCURVEMEMBER = 214636428;
export const IFCSTRUCTURALCURVECONNECTION = 4243806635;
export const IFCSTRUCTURALCONNECTION = 1179482911;
export const IFCSTRUCTURALACTION = 682877961;
export const IFCSTAIRFLIGHTTYPE = 1039846685;
export const IFCSTACKTERMINALTYPE = 3112655638;
export const IFCSPACETYPE = 3812236995;
export const IFCSPACEPROGRAM = 652456506;
export const IFCSPACEHEATERTYPE = 1305183839;
export const IFCSPACE = 3856911033;
export const IFCSLABTYPE = 2533589738;
export const IFCSITE = 4097777520;
export const IFCSERVICELIFE = 4105383287;
export const IFCSCHEDULETIMECONTROL = 3517283431;
export const IFCSANITARYTERMINALTYPE = 1768891740;
export const IFCRELASSIGNSTASKS = 2863920197;
export const IFCRELAGGREGATES = 160246688;
export const IFCRAMPFLIGHTTYPE = 2324767716;
export const IFCRAILINGTYPE = 2893384427;
export const IFCRADIUSDIMENSION = 3248260540;
export const IFCPUMPTYPE = 2250791053;
export const IFCPROTECTIVEDEVICETYPE = 1842657554;
export const IFCPROJECTIONELEMENT = 3651124850;
export const IFCPROJECTORDERRECORD = 3642467123;
export const IFCPROJECTORDER = 2904328755;
export const IFCPROCEDURE = 2744685151;
export const IFCPORT = 3740093272;
export const IFCPOLYLINE = 3724593414;
export const IFCPLATETYPE = 4017108033;
export const IFCPIPESEGMENTTYPE = 4231323485;
export const IFCPIPEFITTINGTYPE = 804291784;
export const IFCPERMIT = 3327091369;
export const IFCPERFORMANCEHISTORY = 2382730787;
export const IFCOUTLETTYPE = 2837617999;
export const IFCORDERACTION = 3425660407;
export const IFCOPENINGELEMENT = 3588315303;
export const IFCOCCUPANT = 4143007308;
export const IFCMOVE = 1916936684;
export const IFCMOTORCONNECTIONTYPE = 977012517;
export const IFCMEMBERTYPE = 3181161470;
export const IFCMECHANICALFASTENERTYPE = 2108223431;
export const IFCMECHANICALFASTENER = 377706215;
export const IFCLINEARDIMENSION = 2506943328;
export const IFCLIGHTFIXTURETYPE = 1161773419;
export const IFCLAMPTYPE = 1051575348;
export const IFCLABORRESOURCE = 3827777499;
export const IFCJUNCTIONBOXTYPE = 4288270099;
export const IFCINVENTORY = 2391368822;
export const IFCHUMIDIFIERTYPE = 1806887404;
export const IFCHEATEXCHANGERTYPE = 1251058090;
export const IFCGROUP = 2706460486;
export const IFCGRID = 3009204131;
export const IFCGASTERMINALTYPE = 200128114;
export const IFCFURNITURESTANDARD = 814719939;
export const IFCFURNISHINGELEMENT = 263784265;
export const IFCFLOWTREATMENTDEVICETYPE = 3009222698;
export const IFCFLOWTERMINALTYPE = 2297155007;
export const IFCFLOWSTORAGEDEVICETYPE = 1339347760;
export const IFCFLOWSEGMENTTYPE = 1834744321;
export const IFCFLOWMOVINGDEVICETYPE = 1482959167;
export const IFCFLOWMETERTYPE = 3815607619;
export const IFCFLOWFITTINGTYPE = 3198132628;
export const IFCFLOWCONTROLLERTYPE = 3907093117;
export const IFCFEATUREELEMENTSUBTRACTION = 1287392070;
export const IFCFEATUREELEMENTADDITION = 2143335405;
export const IFCFEATUREELEMENT = 2827207264;
export const IFCFASTENERTYPE = 2489546625;
export const IFCFASTENER = 647756555;
export const IFCFACETEDBREPWITHVOIDS = 3737207727;
export const IFCFACETEDBREP = 807026263;
export const IFCEVAPORATORTYPE = 3390157468;
export const IFCEVAPORATIVECOOLERTYPE = 3174744832;
export const IFCEQUIPMENTSTANDARD = 3272907226;
export const IFCEQUIPMENTELEMENT = 1962604670;
export const IFCENERGYCONVERSIONDEVICETYPE = 2107101300;
export const IFCELLIPSE = 1704287377;
export const IFCELEMENTCOMPONENTTYPE = 2590856083;
export const IFCELEMENTCOMPONENT = 1623761950;
export const IFCELEMENTASSEMBLY = 4123344466;
export const IFCELEMENT = 1758889154;
export const IFCELECTRICALBASEPROPERTIES = 360485395;
export const IFCDISTRIBUTIONFLOWELEMENTTYPE = 3849074793;
export const IFCDISTRIBUTIONELEMENTTYPE = 3256556792;
export const IFCDIMENSIONCURVEDIRECTEDCALLOUT = 681481545;
export const IFCCURTAINWALLTYPE = 1457835157;
export const IFCCREWRESOURCE = 3295246426;
export const IFCCOVERINGTYPE = 1916426348;
export const IFCCOSTSCHEDULE = 1419761937;
export const IFCCOSTITEM = 3895139033;
export const IFCCONTROL = 3293443760;
export const IFCCONSTRUCTIONRESOURCE = 2559216714;
export const IFCCONIC = 2510884976;
export const IFCCOMPOSITECURVE = 3732776249;
export const IFCCOLUMNTYPE = 300633059;
export const IFCCIRCLEHOLLOWPROFILEDEF = 2937912522;
export const IFCBUILDINGSTOREY = 3124254112;
export const IFCBUILDINGELEMENTTYPE = 1950629157;
export const IFCBUILDING = 4031249490;
export const IFCBOUNDEDCURVE = 1260505505;
export const IFCBOOLEANCLIPPINGRESULT = 3649129432;
export const IFCBLOCK = 1334484129;
export const IFCASYMMETRICISHAPEPROFILEDEF = 3207858831;
export const IFCANNOTATION = 1674181508;
export const IFCACTOR = 2296667514;
export const IFCTRANSPORTELEMENTTYPE = 2097647324;
export const IFCTASK = 3473067441;
export const IFCSYSTEMFURNITUREELEMENTTYPE = 1580310250;
export const IFCSURFACEOFREVOLUTION = 4124788165;
export const IFCSURFACEOFLINEAREXTRUSION = 2809605785;
export const IFCSURFACECURVESWEPTAREASOLID = 2028607225;
export const IFCSTRUCTUREDDIMENSIONCALLOUT = 4070609034;
export const IFCSTRUCTURALSURFACEMEMBERVARYING = 2218152070;
export const IFCSTRUCTURALSURFACEMEMBER = 3979015343;
export const IFCSTRUCTURALREACTION = 3689010777;
export const IFCSTRUCTURALMEMBER = 530289379;
export const IFCSTRUCTURALITEM = 3136571912;
export const IFCSTRUCTURALACTIVITY = 3544373492;
export const IFCSPHERE = 451544542;
export const IFCSPATIALSTRUCTUREELEMENTTYPE = 3893378262;
export const IFCSPATIALSTRUCTUREELEMENT = 2706606064;
export const IFCRIGHTCIRCULARCYLINDER = 3626867408;
export const IFCRIGHTCIRCULARCONE = 4158566097;
export const IFCREVOLVEDAREASOLID = 1856042241;
export const IFCRESOURCE = 2914609552;
export const IFCRELVOIDSELEMENT = 1401173127;
export const IFCRELSPACEBOUNDARY = 3451746338;
export const IFCRELSERVICESBUILDINGS = 366585022;
export const IFCRELSEQUENCE = 4122056220;
export const IFCRELSCHEDULESCOSTITEMS = 1058617721;
export const IFCRELREFERENCEDINSPATIALSTRUCTURE = 1245217292;
export const IFCRELPROJECTSELEMENT = 750771296;
export const IFCRELOVERRIDESPROPERTIES = 202636808;
export const IFCRELOCCUPIESSPACES = 2051452291;
export const IFCRELNESTS = 3268803585;
export const IFCRELINTERACTIONREQUIREMENTS = 4189434867;
export const IFCRELFLOWCONTROLELEMENTS = 279856033;
export const IFCRELFILLSELEMENT = 3940055652;
export const IFCRELDEFINESBYTYPE = 781010003;
export const IFCRELDEFINESBYPROPERTIES = 4186316022;
export const IFCRELDEFINES = 693640335;
export const IFCRELDECOMPOSES = 2551354335;
export const IFCRELCOVERSSPACES = 2802773753;
export const IFCRELCOVERSBLDGELEMENTS = 886880790;
export const IFCRELCONTAINEDINSPATIALSTRUCTURE = 3242617779;
export const IFCRELCONNECTSWITHREALIZINGELEMENTS = 3678494232;
export const IFCRELCONNECTSWITHECCENTRICITY = 504942748;
export const IFCRELCONNECTSSTRUCTURALMEMBER = 1638771189;
export const IFCRELCONNECTSSTRUCTURALELEMENT = 3912681535;
export const IFCRELCONNECTSSTRUCTURALACTIVITY = 2127690289;
export const IFCRELCONNECTSPORTS = 3190031847;
export const IFCRELCONNECTSPORTTOELEMENT = 4201705270;
export const IFCRELCONNECTSPATHELEMENTS = 3945020480;
export const IFCRELCONNECTSELEMENTS = 1204542856;
export const IFCRELCONNECTS = 826625072;
export const IFCRELASSOCIATESPROFILEPROPERTIES = 2851387026;
export const IFCRELASSOCIATESMATERIAL = 2655215786;
export const IFCRELASSOCIATESLIBRARY = 3840914261;
export const IFCRELASSOCIATESDOCUMENT = 982818633;
export const IFCRELASSOCIATESCONSTRAINT = 2728634034;
export const IFCRELASSOCIATESCLASSIFICATION = 919958153;
export const IFCRELASSOCIATESAPPROVAL = 4095574036;
export const IFCRELASSOCIATESAPPLIEDVALUE = 1327628568;
export const IFCRELASSOCIATES = 1865459582;
export const IFCRELASSIGNSTORESOURCE = 205026976;
export const IFCRELASSIGNSTOPROJECTORDER = 3372526763;
export const IFCRELASSIGNSTOPRODUCT = 2857406711;
export const IFCRELASSIGNSTOPROCESS = 4278684876;
export const IFCRELASSIGNSTOGROUP = 1307041759;
export const IFCRELASSIGNSTOCONTROL = 2495723537;
export const IFCRELASSIGNSTOACTOR = 1683148259;
export const IFCRELASSIGNS = 3939117080;
export const IFCRECTANGULARTRIMMEDSURFACE = 3454111270;
export const IFCRECTANGULARPYRAMID = 2798486643;
export const IFCRECTANGLEHOLLOWPROFILEDEF = 2770003689;
export const IFCPROXY = 3219374653;
export const IFCPROPERTYSET = 1451395588;
export const IFCPROJECTIONCURVE = 4194566429;
export const IFCPROJECT = 103090709;
export const IFCPRODUCT = 4208778838;
export const IFCPROCESS = 2945172077;
export const IFCPLANE = 220341763;
export const IFCPLANARBOX = 603570806;
export const IFCPERMEABLECOVERINGPROPERTIES = 3566463478;
export const IFCOFFSETCURVE3D = 3505215534;
export const IFCOFFSETCURVE2D = 3388369263;
export const IFCOBJECT = 3888040117;
export const IFCMANIFOLDSOLIDBREP = 1425443689;
export const IFCLINE = 1281925730;
export const IFCLSHAPEPROFILEDEF = 572779678;
export const IFCISHAPEPROFILEDEF = 1484403080;
export const IFCGEOMETRICCURVESET = 987898635;
export const IFCFURNITURETYPE = 1268542332;
export const IFCFURNISHINGELEMENTTYPE = 4238390223;
export const IFCFLUIDFLOWPROPERTIES = 3455213021;
export const IFCFILLAREASTYLETILES = 315944413;
export const IFCFILLAREASTYLETILESYMBOLWITHSTYLE = 4203026998;
export const IFCFILLAREASTYLEHATCHING = 374418227;
export const IFCFACEBASEDSURFACEMODEL = 2047409740;
export const IFCEXTRUDEDAREASOLID = 477187591;
export const IFCENERGYPROPERTIES = 80994333;
export const IFCELLIPSEPROFILEDEF = 2835456948;
export const IFCELEMENTARYSURFACE = 2777663545;
export const IFCELEMENTTYPE = 339256511;
export const IFCELEMENTQUANTITY = 1883228015;
export const IFCEDGELOOP = 1472233963;
export const IFCDRAUGHTINGPREDEFINEDCURVEFONT = 4006246654;
export const IFCDRAUGHTINGPREDEFINEDCOLOUR = 445594917;
export const IFCDRAUGHTINGCALLOUT = 3073041342;
export const IFCDOORSTYLE = 526551008;
export const IFCDOORPANELPROPERTIES = 1714330368;
export const IFCDOORLININGPROPERTIES = 2963535650;
export const IFCDIRECTION = 32440307;
export const IFCDIMENSIONCURVETERMINATOR = 4054601972;
export const IFCDIMENSIONCURVE = 606661476;
export const IFCDEFINEDSYMBOL = 693772133;
export const IFCCURVEBOUNDEDPLANE = 2827736869;
export const IFCCURVE = 2601014836;
export const IFCCSGSOLID = 2147822146;
export const IFCCSGPRIMITIVE3D = 2506170314;
export const IFCCRANERAILFSHAPEPROFILEDEF = 194851669;
export const IFCCRANERAILASHAPEPROFILEDEF = 4133800736;
export const IFCCOMPOSITECURVESEGMENT = 2485617015;
export const IFCCLOSEDSHELL = 2205249479;
export const IFCCIRCLEPROFILEDEF = 1383045692;
export const IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM = 1416205885;
export const IFCCARTESIANTRANSFORMATIONOPERATOR3D = 3331915920;
export const IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM = 3486308946;
export const IFCCARTESIANTRANSFORMATIONOPERATOR2D = 3749851601;
export const IFCCARTESIANTRANSFORMATIONOPERATOR = 59481748;
export const IFCCARTESIANPOINT = 1123145078;
export const IFCCSHAPEPROFILEDEF = 2898889636;
export const IFCBOXEDHALFSPACE = 2713105998;
export const IFCBOUNDINGBOX = 2581212453;
export const IFCBOUNDEDSURFACE = 4182860854;
export const IFCBOOLEANRESULT = 2736907675;
export const IFCAXIS2PLACEMENT3D = 2740243338;
export const IFCAXIS2PLACEMENT2D = 3125803723;
export const IFCAXIS1PLACEMENT = 4261334040;
export const IFCANNOTATIONSURFACE = 1302238472;
export const IFCANNOTATIONFILLAREAOCCURRENCE = 2265737646;
export const IFCANNOTATIONFILLAREA = 669184980;
export const IFCANNOTATIONCURVEOCCURRENCE = 3288037868;
export const IFCZSHAPEPROFILEDEF = 2543172580;
export const IFCWINDOWSTYLE = 1299126871;
export const IFCWINDOWPANELPROPERTIES = 512836454;
export const IFCWINDOWLININGPROPERTIES = 336235671;
export const IFCVERTEXLOOP = 2759199220;
export const IFCVECTOR = 1417489154;
export const IFCUSHAPEPROFILEDEF = 427810014;
export const IFCTYPEPRODUCT = 2347495698;
export const IFCTYPEOBJECT = 1628702193;
export const IFCTWODIRECTIONREPEATFACTOR = 1345879162;
export const IFCTRAPEZIUMPROFILEDEF = 2715220739;
export const IFCTEXTLITERALWITHEXTENT = 3124975700;
export const IFCTEXTLITERAL = 4282788508;
export const IFCTERMINATORSYMBOL = 3028897424;
export const IFCTSHAPEPROFILEDEF = 3071757647;
export const IFCSWEPTSURFACE = 230924584;
export const IFCSWEPTDISKSOLID = 1260650574;
export const IFCSWEPTAREASOLID = 2247615214;
export const IFCSURFACESTYLERENDERING = 1878645084;
export const IFCSURFACE = 2513912981;
export const IFCSUBEDGE = 2233826070;
export const IFCSTRUCTURALSTEELPROFILEPROPERTIES = 3653947884;
export const IFCSTRUCTURALPROFILEPROPERTIES = 3843319758;
export const IFCSTRUCTURALLOADSINGLEFORCEWARPING = 1190533807;
export const IFCSTRUCTURALLOADSINGLEFORCE = 1597423693;
export const IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION = 1973038258;
export const IFCSTRUCTURALLOADSINGLEDISPLACEMENT = 2473145415;
export const IFCSTRUCTURALLOADPLANARFORCE = 2668620305;
export const IFCSTRUCTURALLOADLINEARFORCE = 1595516126;
export const IFCSPACETHERMALLOADPROPERTIES = 390701378;
export const IFCSOUNDVALUE = 1202362311;
export const IFCSOUNDPROPERTIES = 2485662743;
export const IFCSOLIDMODEL = 723233188;
export const IFCSLIPPAGECONNECTIONCONDITION = 2609359061;
export const IFCSHELLBASEDSURFACEMODEL = 4124623270;
export const IFCSERVICELIFEFACTOR = 2411513650;
export const IFCSECTIONEDSPINE = 1509187699;
export const IFCROUNDEDRECTANGLEPROFILEDEF = 2778083089;
export const IFCRELATIONSHIP = 478536968;
export const IFCREINFORCEMENTDEFINITIONPROPERTIES = 3765753017;
export const IFCREGULARTIMESERIES = 3413951693;
export const IFCRECTANGLEPROFILEDEF = 3615266464;
export const IFCPROPERTYTABLEVALUE = 110355661;
export const IFCPROPERTYSINGLEVALUE = 3650150729;
export const IFCPROPERTYSETDEFINITION = 3357820518;
export const IFCPROPERTYREFERENCEVALUE = 941946838;
export const IFCPROPERTYLISTVALUE = 2752243245;
export const IFCPROPERTYENUMERATEDVALUE = 4166981789;
export const IFCPROPERTYDEFINITION = 1680319473;
export const IFCPROPERTYBOUNDEDVALUE = 871118103;
export const IFCPRODUCTDEFINITIONSHAPE = 673634403;
export const IFCPREDEFINEDPOINTMARKERSYMBOL = 179317114;
export const IFCPREDEFINEDDIMENSIONSYMBOL = 433424934;
export const IFCPREDEFINEDCURVEFONT = 2559016684;
export const IFCPREDEFINEDCOLOUR = 759155922;
export const IFCPOLYGONALBOUNDEDHALFSPACE = 2775532180;
export const IFCPOLYLOOP = 2924175390;
export const IFCPOINTONSURFACE = 1423911732;
export const IFCPOINTONCURVE = 4022376103;
export const IFCPOINT = 2067069095;
export const IFCPLANAREXTENT = 1663979128;
export const IFCPLACEMENT = 2004835150;
export const IFCPIXELTEXTURE = 597895409;
export const IFCPHYSICALCOMPLEXQUANTITY = 3021840470;
export const IFCPATH = 2519244187;
export const IFCPARAMETERIZEDPROFILEDEF = 2529465313;
export const IFCORIENTEDEDGE = 1029017970;
export const IFCOPENSHELL = 2665983363;
export const IFCONEDIRECTIONREPEATFACTOR = 2833995503;
export const IFCOBJECTDEFINITION = 219451334;
export const IFCMECHANICALCONCRETEMATERIALPROPERTIES = 1430189142;
export const IFCMATERIALDEFINITIONREPRESENTATION = 2022407955;
export const IFCMAPPEDITEM = 2347385850;
export const IFCLOOP = 1008929658;
export const IFCLOCALPLACEMENT = 2624227202;
export const IFCLIGHTSOURCESPOT = 3422422726;
export const IFCLIGHTSOURCEPOSITIONAL = 1520743889;
export const IFCLIGHTSOURCEGONIOMETRIC = 4266656042;
export const IFCLIGHTSOURCEDIRECTIONAL = 2604431987;
export const IFCLIGHTSOURCEAMBIENT = 125510826;
export const IFCLIGHTSOURCE = 1402838566;
export const IFCIRREGULARTIMESERIES = 3741457305;
export const IFCIMAGETEXTURE = 3905492369;
export const IFCHYGROSCOPICMATERIALPROPERTIES = 2445078500;
export const IFCHALFSPACESOLID = 812098782;
export const IFCGRIDPLACEMENT = 178086475;
export const IFCGEOMETRICSET = 3590301190;
export const IFCGEOMETRICREPRESENTATIONSUBCONTEXT = 4142052618;
export const IFCGEOMETRICREPRESENTATIONITEM = 2453401579;
export const IFCGEOMETRICREPRESENTATIONCONTEXT = 3448662350;
export const IFCGENERALPROFILEPROPERTIES = 1446786286;
export const IFCGENERALMATERIALPROPERTIES = 803998398;
export const IFCFUELPROPERTIES = 3857492461;
export const IFCFILLAREASTYLE = 738692330;
export const IFCFAILURECONNECTIONCONDITION = 4219587988;
export const IFCFACESURFACE = 3008276851;
export const IFCFACEOUTERBOUND = 803316827;
export const IFCFACEBOUND = 1809719519;
export const IFCFACE = 2556980723;
export const IFCEXTENDEDMATERIALPROPERTIES = 1860660968;
export const IFCEDGECURVE = 476780140;
export const IFCEDGE = 3900360178;
export const IFCDRAUGHTINGPREDEFINEDTEXTFONT = 4170525392;
export const IFCDOCUMENTREFERENCE = 3732053477;
export const IFCDIMENSIONPAIR = 1694125774;
export const IFCDIMENSIONCALLOUTRELATIONSHIP = 2273265877;
export const IFCDERIVEDPROFILEDEF = 3632507154;
export const IFCCURVESTYLE = 3800577675;
export const IFCCONVERSIONBASEDUNIT = 2889183280;
export const IFCCONTEXTDEPENDENTUNIT = 3050246964;
export const IFCCONNECTIONPOINTECCENTRICITY = 45288368;
export const IFCCONNECTIONCURVEGEOMETRY = 1981873012;
export const IFCCONNECTEDFACESET = 370225590;
export const IFCCOMPOSITEPROFILEDEF = 1485152156;
export const IFCCOMPLEXPROPERTY = 2542286263;
export const IFCCOLOURRGB = 776857604;
export const IFCCLASSIFICATIONREFERENCE = 647927063;
export const IFCCENTERLINEPROFILEDEF = 3150382593;
export const IFCBLOBTEXTURE = 616511568;
export const IFCARBITRARYPROFILEDEFWITHVOIDS = 2705031697;
export const IFCARBITRARYOPENPROFILEDEF = 1310608509;
export const IFCARBITRARYCLOSEDPROFILEDEF = 3798115385;
export const IFCANNOTATIONTEXTOCCURRENCE = 2297822566;
export const IFCANNOTATIONSYMBOLOCCURRENCE = 3612888222;
export const IFCANNOTATIONSURFACEOCCURRENCE = 962685235;
export const IFCANNOTATIONOCCURRENCE = 2442683028;
export const IFCWATERPROPERTIES = 1065908215;
export const IFCVIRTUALGRIDINTERSECTION = 891718957;
export const IFCVERTEXPOINT = 1907098498;
export const IFCVERTEXBASEDTEXTUREMAP = 3304826586;
export const IFCVERTEX = 2799835756;
export const IFCUNITASSIGNMENT = 180925521;
export const IFCTOPOLOGYREPRESENTATION = 1735638870;
export const IFCTOPOLOGICALREPRESENTATIONITEM = 1377556343;
export const IFCTIMESERIESVALUE = 581633288;
export const IFCTIMESERIESREFERENCERELATIONSHIP = 1718945513;
export const IFCTIMESERIES = 3101149627;
export const IFCTHERMALMATERIALPROPERTIES = 3317419933;
export const IFCTEXTUREVERTEX = 1210645708;
export const IFCTEXTUREMAP = 2552916305;
export const IFCTEXTURECOORDINATEGENERATOR = 1742049831;
export const IFCTEXTURECOORDINATE = 280115917;
export const IFCTEXTSTYLEWITHBOXCHARACTERISTICS = 1484833681;
export const IFCTEXTSTYLETEXTMODEL = 1640371178;
export const IFCTEXTSTYLEFORDEFINEDFONT = 2636378356;
export const IFCTEXTSTYLEFONTMODEL = 1983826977;
export const IFCTEXTSTYLE = 1447204868;
export const IFCTELECOMADDRESS = 912023232;
export const IFCTABLEROW = 531007025;
export const IFCTABLE = 985171141;
export const IFCSYMBOLSTYLE = 1290481447;
export const IFCSURFACETEXTURE = 626085974;
export const IFCSURFACESTYLEWITHTEXTURES = 1351298697;
export const IFCSURFACESTYLESHADING = 846575682;
export const IFCSURFACESTYLEREFRACTION = 1607154358;
export const IFCSURFACESTYLELIGHTING = 3303107099;
export const IFCSURFACESTYLE = 1300840506;
export const IFCSTYLEDREPRESENTATION = 3049322572;
export const IFCSTYLEDITEM = 3958052878;
export const IFCSTYLEMODEL = 2830218821;
export const IFCSTRUCTURALLOADTEMPERATURE = 3408363356;
export const IFCSTRUCTURALLOADSTATIC = 2525727697;
export const IFCSTRUCTURALLOAD = 2162789131;
export const IFCSTRUCTURALCONNECTIONCONDITION = 2273995522;
export const IFCSIMPLEPROPERTY = 3692461612;
export const IFCSHAPEREPRESENTATION = 4240577450;
export const IFCSHAPEMODEL = 3982875396;
export const IFCSHAPEASPECT = 867548509;
export const IFCSECTIONREINFORCEMENTPROPERTIES = 4165799628;
export const IFCSECTIONPROPERTIES = 2042790032;
export const IFCSIUNIT = 448429030;
export const IFCROOT = 2341007311;
export const IFCRIBPLATEPROFILEPROPERTIES = 3679540991;
export const IFCREPRESENTATIONMAP = 1660063152;
export const IFCREPRESENTATIONITEM = 3008791417;
export const IFCREPRESENTATIONCONTEXT = 3377609919;
export const IFCREPRESENTATION = 1076942058;
export const IFCRELAXATION = 1222501353;
export const IFCREINFORCEMENTBARPROPERTIES = 1580146022;
export const IFCREFERENCESVALUEDOCUMENT = 2692823254;
export const IFCQUANTITYWEIGHT = 825690147;
export const IFCQUANTITYVOLUME = 2405470396;
export const IFCQUANTITYTIME = 3252649465;
export const IFCQUANTITYLENGTH = 931644368;
export const IFCQUANTITYCOUNT = 2093928680;
export const IFCQUANTITYAREA = 2044713172;
export const IFCPROPERTYENUMERATION = 3710013099;
export const IFCPROPERTYDEPENDENCYRELATIONSHIP = 148025276;
export const IFCPROPERTYCONSTRAINTRELATIONSHIP = 3896028662;
export const IFCPROPERTY = 2598011224;
export const IFCPROFILEPROPERTIES = 2802850158;
export const IFCPROFILEDEF = 3958567839;
export const IFCPRODUCTSOFCOMBUSTIONPROPERTIES = 2267347899;
export const IFCPRODUCTREPRESENTATION = 2095639259;
export const IFCPRESENTATIONSTYLEASSIGNMENT = 2417041796;
export const IFCPRESENTATIONSTYLE = 3119450353;
export const IFCPRESENTATIONLAYERWITHSTYLE = 1304840413;
export const IFCPRESENTATIONLAYERASSIGNMENT = 2022622350;
export const IFCPREDEFINEDTEXTFONT = 1775413392;
export const IFCPREDEFINEDTERMINATORSYMBOL = 3213052703;
export const IFCPREDEFINEDSYMBOL = 990879717;
export const IFCPREDEFINEDITEM = 3727388367;
export const IFCPOSTALADDRESS = 3355820592;
export const IFCPHYSICALSIMPLEQUANTITY = 2226359599;
export const IFCPHYSICALQUANTITY = 2483315170;
export const IFCPERSONANDORGANIZATION = 101040310;
export const IFCPERSON = 2077209135;
export const IFCOWNERHISTORY = 1207048766;
export const IFCORGANIZATIONRELATIONSHIP = 1411181986;
export const IFCORGANIZATION = 4251960020;
export const IFCOPTICALMATERIALPROPERTIES = 1227763645;
export const IFCOBJECTIVE = 2251480897;
export const IFCOBJECTPLACEMENT = 3701648758;
export const IFCNAMEDUNIT = 1918398963;
export const IFCMONETARYUNIT = 2706619895;
export const IFCMETRIC = 3368373690;
export const IFCMECHANICALSTEELMATERIALPROPERTIES = 677618848;
export const IFCMECHANICALMATERIALPROPERTIES = 4256014907;
export const IFCMEASUREWITHUNIT = 2597039031;
export const IFCMATERIALPROPERTIES = 3265635763;
export const IFCMATERIALLIST = 2199411900;
export const IFCMATERIALLAYERSETUSAGE = 1303795690;
export const IFCMATERIALLAYERSET = 3303938423;
export const IFCMATERIALLAYER = 248100487;
export const IFCMATERIALCLASSIFICATIONRELATIONSHIP = 1847130766;
export const IFCMATERIAL = 1838606355;
export const IFCLOCALTIME = 30780891;
export const IFCLIGHTINTENSITYDISTRIBUTION = 1566485204;
export const IFCLIGHTDISTRIBUTIONDATA = 4162380809;
export const IFCLIBRARYREFERENCE = 3452421091;
export const IFCLIBRARYINFORMATION = 2655187982;
export const IFCIRREGULARTIMESERIESVALUE = 3020489413;
export const IFCGRIDAXIS = 852622518;
export const IFCEXTERNALLYDEFINEDTEXTFONT = 3548104201;
export const IFCEXTERNALLYDEFINEDSYMBOL = 3207319532;
export const IFCEXTERNALLYDEFINEDSURFACESTYLE = 1040185647;
export const IFCEXTERNALLYDEFINEDHATCHSTYLE = 2242383968;
export const IFCEXTERNALREFERENCE = 3200245327;
export const IFCENVIRONMENTALIMPACTVALUE = 1648886627;
export const IFCDRAUGHTINGCALLOUTRELATIONSHIP = 3796139169;
export const IFCDOCUMENTINFORMATIONRELATIONSHIP = 770865208;
export const IFCDOCUMENTINFORMATION = 1154170062;
export const IFCDOCUMENTELECTRONICFORMAT = 1376555844;
export const IFCDIMENSIONALEXPONENTS = 2949456006;
export const IFCDERIVEDUNITELEMENT = 1045800335;
export const IFCDERIVEDUNIT = 1765591967;
export const IFCDATEANDTIME = 1072939445;
export const IFCCURVESTYLEFONTPATTERN = 3510044353;
export const IFCCURVESTYLEFONTANDSCALING = 2367409068;
export const IFCCURVESTYLEFONT = 1105321065;
export const IFCCURRENCYRELATIONSHIP = 539742890;
export const IFCCOSTVALUE = 602808272;
export const IFCCOORDINATEDUNIVERSALTIMEOFFSET = 1065062679;
export const IFCCONSTRAINTRELATIONSHIP = 347226245;
export const IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP = 613356794;
export const IFCCONSTRAINTAGGREGATIONRELATIONSHIP = 1658513725;
export const IFCCONSTRAINT = 1959218052;
export const IFCCONNECTIONSURFACEGEOMETRY = 2732653382;
export const IFCCONNECTIONPORTGEOMETRY = 4257277454;
export const IFCCONNECTIONPOINTGEOMETRY = 2614616156;
export const IFCCONNECTIONGEOMETRY = 2859738748;
export const IFCCOLOURSPECIFICATION = 3264961684;
export const IFCCLASSIFICATIONNOTATIONFACET = 3639012971;
export const IFCCLASSIFICATIONNOTATION = 938368621;
export const IFCCLASSIFICATIONITEMRELATIONSHIP = 1098599126;
export const IFCCLASSIFICATIONITEM = 1767535486;
export const IFCCLASSIFICATION = 747523909;
export const IFCCALENDARDATE = 622194075;
export const IFCBOUNDARYNODECONDITIONWARPING = 2069777674;
export const IFCBOUNDARYNODECONDITION = 1387855156;
export const IFCBOUNDARYFACECONDITION = 3367102660;
export const IFCBOUNDARYEDGECONDITION = 1560379544;
export const IFCBOUNDARYCONDITION = 4037036970;
export const IFCAPPROVALRELATIONSHIP = 3869604511;
export const IFCAPPROVALPROPERTYRELATIONSHIP = 390851274;
export const IFCAPPROVALACTORRELATIONSHIP = 2080292479;
export const IFCAPPROVAL = 130549933;
export const IFCAPPLIEDVALUERELATIONSHIP = 1110488051;
export const IFCAPPLIEDVALUE = 411424972;
export const IFCAPPLICATION = 639542469;
export const IFCADDRESS = 618182010;
export const IFCACTORROLE = 3630933823;
export const FILE_DESCRIPTION = 599546466;
export const FILE_NAME = 1390159747;
export const FILE_SCHEMA = 1109904537;
// This is a generated file, please see: gen_functional_types.js
export interface RawLineData { ID: number; type: number; arguments: any[]};
export class Reference<_> { type: number=5; constructor(public value: number) {}}
export const FromRawLineData: any = {};
export const InversePropertyDef: any = {};
export const InheritanceDef: any = {};
export const Constructors: any = {};
export const ToRawLineData: any = {};
export const TypeInitialisers: any = {};
export abstract class IfcLineObject { type: number=0; constructor(public expressID: number) {}}
function TypeInitialiser(schema:string,tapeItem:any) {
	if (tapeItem.typecode) return TypeInitialisers[schema][tapeItem.typecode](tapeItem.value); else return tapeItem.value;
}
function Labelise(tapeItem:any) {
	tapeItem.valueType=tapeItem.type; tapeItem.type=2; tapeItem.label=tapeItem.constructor.name.toUpperCase();
	return tapeItem;
}
import * as IFC2X3 from './ifc-schema_IFC2X3';
FromRawLineData['IFC2X3'] = {};
Constructors['IFC2X3'] = {};
InversePropertyDef['IFC2X3'] = {};
InheritanceDef['IFC2X3'] = {};
ToRawLineData['IFC2X3'] = {};
TypeInitialisers['IFC2X3'] = {};
TypeInitialisers['IFC2X3'][96294661] = (v: any) => { return new IFC2X3.IfcRatioMeasure(v); }
TypeInitialisers['IFC2X3'][2615040989] = (v: any) => { return new IFC2X3.IfcMonetaryMeasure(v); }
TypeInitialisers['IFC2X3'][2095195183] = (v: any) => { return new IFC2X3.IfcNormalisedRatioMeasure(v); }
TypeInitialisers['IFC2X3'][3258342251] = (v: any) => { return new IFC2X3.IfcLabel(v); }
TypeInitialisers['IFC2X3'][2593997549] = (v: any) => { return new IFC2X3.IfcVolumetricFlowRateMeasure(v); }
TypeInitialisers['IFC2X3'][2591213694] = (v: any) => { return new IFC2X3.IfcTimeStamp(v); }
TypeInitialisers['IFC2X3'][2016195849] = (v: any) => { return new IFC2X3.IfcThermalTransmittanceMeasure(v); }
TypeInitialisers['IFC2X3'][857959152] = (v: any) => { return new IFC2X3.IfcThermalResistanceMeasure(v); }
TypeInitialisers['IFC2X3'][232962298] = (v: any) => { return new IFC2X3.IfcThermalAdmittanceMeasure(v); }
TypeInitialisers['IFC2X3'][3665567075] = (v: any) => { return new IFC2X3.IfcPressureMeasure(v); }
TypeInitialisers['IFC2X3'][1364037233] = (v: any) => { return new IFC2X3.IfcPowerMeasure(v); }
TypeInitialisers['IFC2X3'][4017473158] = (v: any) => { return new IFC2X3.IfcMassFlowRateMeasure(v); }
TypeInitialisers['IFC2X3'][1477762836] = (v: any) => { return new IFC2X3.IfcMassDensityMeasure(v); }
TypeInitialisers['IFC2X3'][3086160713] = (v: any) => { return new IFC2X3.IfcLinearVelocityMeasure(v); }
TypeInitialisers['IFC2X3'][2054016361] = (v: any) => { return new IFC2X3.IfcKinematicViscosityMeasure(v); }
TypeInitialisers['IFC2X3'][3809634241] = (v: any) => { return new IFC2X3.IfcIntegerCountRateMeasure(v); }
TypeInitialisers['IFC2X3'][3113092358] = (v: any) => { return new IFC2X3.IfcHeatFluxDensityMeasure(v); }
TypeInitialisers['IFC2X3'][3044325142] = (v: any) => { return new IFC2X3.IfcFrequencyMeasure(v); }
TypeInitialisers['IFC2X3'][2078135608] = (v: any) => { return new IFC2X3.IfcEnergyMeasure(v); }
TypeInitialisers['IFC2X3'][2506197118] = (v: any) => { return new IFC2X3.IfcElectricVoltageMeasure(v); }
TypeInitialisers['IFC2X3'][69416015] = (v: any) => { return new IFC2X3.IfcDynamicViscosityMeasure(v); }
TypeInitialisers['IFC2X3'][3812528620] = (v: any) => { return new IFC2X3.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC2X3'][632304761] = (v: any) => { return new IFC2X3.IfcAngularVelocityMeasure(v); }
TypeInitialisers['IFC2X3'][2645777649] = (v: any) => { return new IFC2X3.IfcThermalConductivityMeasure(v); }
TypeInitialisers['IFC2X3'][1648970520] = (v: any) => { return new IFC2X3.IfcMolecularWeightMeasure(v); }
TypeInitialisers['IFC2X3'][3345633955] = (v: any) => { return new IFC2X3.IfcVaporPermeabilityMeasure(v); }
TypeInitialisers['IFC2X3'][3177669450] = (v: any) => { return new IFC2X3.IfcMoistureDiffusivityMeasure(v); }
TypeInitialisers['IFC2X3'][3192672207] = (v: any) => { return new IFC2X3.IfcIsothermalMoistureCapacityMeasure(v); }
TypeInitialisers['IFC2X3'][3477203348] = (v: any) => { return new IFC2X3.IfcSpecificHeatCapacityMeasure(v); }
TypeInitialisers['IFC2X3'][286949696] = (v: any) => { return new IFC2X3.IfcMagneticFluxDensityMeasure(v); }
TypeInitialisers['IFC2X3'][2486716878] = (v: any) => { return new IFC2X3.IfcMagneticFluxMeasure(v); }
TypeInitialisers['IFC2X3'][2095003142] = (v: any) => { return new IFC2X3.IfcLuminousFluxMeasure(v); }
TypeInitialisers['IFC2X3'][1361398929] = (v: any) => { return new IFC2X3.IfcForceMeasure(v); }
TypeInitialisers['IFC2X3'][2679005408] = (v: any) => { return new IFC2X3.IfcInductanceMeasure(v); }
TypeInitialisers['IFC2X3'][3358199106] = (v: any) => { return new IFC2X3.IfcIlluminanceMeasure(v); }
TypeInitialisers['IFC2X3'][2951915441] = (v: any) => { return new IFC2X3.IfcElectricResistanceMeasure(v); }
TypeInitialisers['IFC2X3'][2093906313] = (v: any) => { return new IFC2X3.IfcElectricConductanceMeasure(v); }
TypeInitialisers['IFC2X3'][3818826038] = (v: any) => { return new IFC2X3.IfcElectricChargeMeasure(v); }
TypeInitialisers['IFC2X3'][524656162] = (v: any) => { return new IFC2X3.IfcDoseEquivalentMeasure(v); }
TypeInitialisers['IFC2X3'][1827137117] = (v: any) => { return new IFC2X3.IfcElectricCapacitanceMeasure(v); }
TypeInitialisers['IFC2X3'][3699917729] = (v: any) => { return new IFC2X3.IfcAbsorbedDoseMeasure(v); }
TypeInitialisers['IFC2X3'][3972513137] = (v: any) => { return new IFC2X3.IfcRadioActivityMeasure(v); }
TypeInitialisers['IFC2X3'][2133746277] = (v: any) => { return new IFC2X3.IfcRotationalFrequencyMeasure(v); }
TypeInitialisers['IFC2X3'][1278329552] = (v: any) => { return new IFC2X3.IfcTorqueMeasure(v); }
TypeInitialisers['IFC2X3'][4182062534] = (v: any) => { return new IFC2X3.IfcAccelerationMeasure(v); }
TypeInitialisers['IFC2X3'][191860431] = (v: any) => { return new IFC2X3.IfcLinearForceMeasure(v); }
TypeInitialisers['IFC2X3'][1307019551] = (v: any) => { return new IFC2X3.IfcLinearStiffnessMeasure(v); }
TypeInitialisers['IFC2X3'][1753493141] = (v: any) => { return new IFC2X3.IfcModulusOfSubgradeReactionMeasure(v); }
TypeInitialisers['IFC2X3'][3341486342] = (v: any) => { return new IFC2X3.IfcModulusOfElasticityMeasure(v); }
TypeInitialisers['IFC2X3'][3114022597] = (v: any) => { return new IFC2X3.IfcMomentOfInertiaMeasure(v); }
TypeInitialisers['IFC2X3'][2642773653] = (v: any) => { return new IFC2X3.IfcPlanarForceMeasure(v); }
TypeInitialisers['IFC2X3'][3211557302] = (v: any) => { return new IFC2X3.IfcRotationalStiffnessMeasure(v); }
TypeInitialisers['IFC2X3'][408310005] = (v: any) => { return new IFC2X3.IfcShearModulusMeasure(v); }
TypeInitialisers['IFC2X3'][2128979029] = (v: any) => { return new IFC2X3.IfcLinearMomentMeasure(v); }
TypeInitialisers['IFC2X3'][2755797622] = (v: any) => { return new IFC2X3.IfcLuminousIntensityDistributionMeasure(v); }
TypeInitialisers['IFC2X3'][94842927] = (v: any) => { return new IFC2X3.IfcCurvatureMeasure(v); }
TypeInitialisers['IFC2X3'][3531705166] = (v: any) => { return new IFC2X3.IfcMassPerLengthMeasure(v); }
TypeInitialisers['IFC2X3'][2173214787] = (v: any) => { return new IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure(v); }
TypeInitialisers['IFC2X3'][1052454078] = (v: any) => { return new IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure(v); }
TypeInitialisers['IFC2X3'][1755127002] = (v: any) => { return new IFC2X3.IfcRotationalMassMeasure(v); }
TypeInitialisers['IFC2X3'][2190458107] = (v: any) => { return new IFC2X3.IfcSectionalAreaIntegralMeasure(v); }
TypeInitialisers['IFC2X3'][3467162246] = (v: any) => { return new IFC2X3.IfcSectionModulusMeasure(v); }
TypeInitialisers['IFC2X3'][58845555] = (v: any) => { return new IFC2X3.IfcTemperatureGradientMeasure(v); }
TypeInitialisers['IFC2X3'][2281867870] = (v: any) => { return new IFC2X3.IfcThermalExpansionCoefficientMeasure(v); }
TypeInitialisers['IFC2X3'][51269191] = (v: any) => { return new IFC2X3.IfcWarpingConstantMeasure(v); }
TypeInitialisers['IFC2X3'][1718600412] = (v: any) => { return new IFC2X3.IfcWarpingMomentMeasure(v); }
TypeInitialisers['IFC2X3'][846465480] = (v: any) => { return new IFC2X3.IfcSoundPowerMeasure(v); }
TypeInitialisers['IFC2X3'][993287707] = (v: any) => { return new IFC2X3.IfcSoundPressureMeasure(v); }
TypeInitialisers['IFC2X3'][1158859006] = (v: any) => { return new IFC2X3.IfcHeatingValueMeasure(v); }
TypeInitialisers['IFC2X3'][929793134] = (v: any) => { return new IFC2X3.IfcPHMeasure(v); }
TypeInitialisers['IFC2X3'][3686016028] = (v: any) => { return new IFC2X3.IfcIonConcentrationMeasure(v); }
TypeInitialisers['IFC2X3'][2815919920] = (v: any) => { return new IFC2X3.IfcPositiveLengthMeasure(v); }
TypeInitialisers['IFC2X3'][3458127941] = (v: any) => { return new IFC2X3.IfcVolumeMeasure(v); }
TypeInitialisers['IFC2X3'][2726807636] = (v: any) => { return new IFC2X3.IfcTimeMeasure(v); }
TypeInitialisers['IFC2X3'][743184107] = (v: any) => { return new IFC2X3.IfcThermodynamicTemperatureMeasure(v); }
TypeInitialisers['IFC2X3'][3471399674] = (v: any) => { return new IFC2X3.IfcSolidAngleMeasure(v); }
TypeInitialisers['IFC2X3'][1245737093] = (v: any) => { return new IFC2X3.IfcPositiveRatioMeasure(v); }
TypeInitialisers['IFC2X3'][3054510233] = (v: any) => { return new IFC2X3.IfcPositivePlaneAngleMeasure(v); }
TypeInitialisers['IFC2X3'][4042175685] = (v: any) => { return new IFC2X3.IfcPlaneAngleMeasure(v); }
TypeInitialisers['IFC2X3'][2260317790] = (v: any) => { return new IFC2X3.IfcParameterValue(v); }
TypeInitialisers['IFC2X3'][2395907400] = (v: any) => { return new IFC2X3.IfcNumericMeasure(v); }
TypeInitialisers['IFC2X3'][3124614049] = (v: any) => { return new IFC2X3.IfcMassMeasure(v); }
TypeInitialisers['IFC2X3'][1243674935] = (v: any) => { return new IFC2X3.IfcLengthMeasure(v); }
TypeInitialisers['IFC2X3'][3790457270] = (v: any) => { return new IFC2X3.IfcElectricCurrentMeasure(v); }
TypeInitialisers['IFC2X3'][1514641115] = (v: any) => { return new IFC2X3.IfcDescriptiveMeasure(v); }
TypeInitialisers['IFC2X3'][1778710042] = (v: any) => { return new IFC2X3.IfcCountMeasure(v); }
TypeInitialisers['IFC2X3'][3238673880] = (v: any) => { return new IFC2X3.IfcContextDependentMeasure(v); }
TypeInitialisers['IFC2X3'][2650437152] = (v: any) => { return new IFC2X3.IfcAreaMeasure(v); }
TypeInitialisers['IFC2X3'][360377573] = (v: any) => { return new IFC2X3.IfcAmountOfSubstanceMeasure(v); }
TypeInitialisers['IFC2X3'][151039812] = (v: any) => { return new IFC2X3.IfcLuminousIntensityMeasure(v); }
TypeInitialisers['IFC2X3'][2991860651] = (v: any) => { return new IFC2X3.IfcComplexNumber(v); }
TypeInitialisers['IFC2X3'][2801250643] = (v: any) => { return new IFC2X3.IfcText(v); }
TypeInitialisers['IFC2X3'][1939436016] = (v: any) => { return new IFC2X3.IfcInteger(v); }
TypeInitialisers['IFC2X3'][200335297] = (v: any) => { return new IFC2X3.IfcReal(v); }
TypeInitialisers['IFC2X3'][2735952531] = (v: any) => { return new IFC2X3.IfcBoolean(v); }
TypeInitialisers['IFC2X3'][983778844] = (v: any) => { return new IFC2X3.IfcIdentifier(v); }
TypeInitialisers['IFC2X3'][503418787] = (v: any) => { return new IFC2X3.IfcLogical(v); }
TypeInitialisers['IFC2X3'][2757832317] = (v: any) => { return new IFC2X3.IfcSpecularExponent(v); }
TypeInitialisers['IFC2X3'][361837227] = (v: any) => { return new IFC2X3.IfcSpecularRoughness(v); }
TypeInitialisers['IFC2X3'][2991860651] = (v: any) => { return new IFC2X3.IfcComplexNumber(v); }
TypeInitialisers['IFC2X3'][3812528620] = (v: any) => { return new IFC2X3.IfcCompoundPlaneAngleMeasure(v); }
FromRawLineData['IFC2X3'][IFCACTORROLE] = (d: RawLineData) => { new IFC2X3.IfcActorRole(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcText(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCACTORROLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcActorRole(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCACTORROLE] = (i:IFC2X3.IfcActorRole):unknown[] => { return [i.Role, i.UserDefinedRole, i.Description]; }
FromRawLineData['IFC2X3'][IFCADDRESS] = (d: RawLineData) => { new IFC2X3.IfcAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCADDRESS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAddress(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCADDRESS] = (i:IFC2X3.IfcAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose]; }
InheritanceDef['IFC2X3'][IFCADDRESS] = [IFCTELECOMADDRESS,IFCPOSTALADDRESS];
InversePropertyDef['IFC2X3'][IFCADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC2X3'][IFCAPPLICATION] = (d: RawLineData) => { new IFC2X3.IfcApplication(d.ID, new Reference<IFC2X3.IfcOrganization>(d.arguments[0].value), new IFC2X3.IfcLabel(d.arguments[1].value), new IFC2X3.IfcLabel(d.arguments[2].value), new IFC2X3.IfcIdentifier(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCAPPLICATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcApplication(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCAPPLICATION] = (i:IFC2X3.IfcApplication):unknown[] => { return [i.ApplicationDeveloper, i.Version, i.ApplicationFullName, i.ApplicationIdentifier]; }
FromRawLineData['IFC2X3'][IFCAPPLIEDVALUE] = (d: RawLineData) => { new IFC2X3.IfcAppliedValue(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCAPPLIEDVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAppliedValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCAPPLIEDVALUE] = (i:IFC2X3.IfcAppliedValue):unknown[] => { return [i.Name, i.Description, i.AppliedValue, i.UnitBasis, i.ApplicableDate, i.FixedUntilDate]; }
InheritanceDef['IFC2X3'][IFCAPPLIEDVALUE] = [IFCENVIRONMENTALIMPACTVALUE,IFCCOSTVALUE];
InversePropertyDef['IFC2X3'][IFCAPPLIEDVALUE] = [['ValuesReferenced',IFCREFERENCESVALUEDOCUMENT,1,true],['ValueOfComponents',IFCAPPLIEDVALUERELATIONSHIP,0,true],['IsComponentIn',IFCAPPLIEDVALUERELATIONSHIP,1,true],];
FromRawLineData['IFC2X3'][IFCAPPLIEDVALUERELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcAppliedValueRelationship(d.ID, new Reference<IFC2X3.IfcAppliedValue>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcAppliedValue>(p.value)), d.arguments[2], !d.arguments[3] ? null :new IFC2X3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcText(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCAPPLIEDVALUERELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAppliedValueRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCAPPLIEDVALUERELATIONSHIP] = (i:IFC2X3.IfcAppliedValueRelationship):unknown[] => { return [i.ComponentOfTotal, i.Components, i.ArithmeticOperator, i.Name, i.Description]; }
FromRawLineData['IFC2X3'][IFCAPPROVAL] = (d: RawLineData) => { new IFC2X3.IfcApproval(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcText(d.arguments[0].value), new Reference(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcText(d.arguments[4].value), new IFC2X3.IfcLabel(d.arguments[5].value), new IFC2X3.IfcIdentifier(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCAPPROVAL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcApproval(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCAPPROVAL] = (i:IFC2X3.IfcApproval):unknown[] => { return [i.Description, i.ApprovalDateTime, i.ApprovalStatus, i.ApprovalLevel, i.ApprovalQualifier, i.Name, i.Identifier]; }
InversePropertyDef['IFC2X3'][IFCAPPROVAL] = [['Actors',IFCAPPROVALACTORRELATIONSHIP,1,true],['IsRelatedWith',IFCAPPROVALRELATIONSHIP,0,true],['Relates',IFCAPPROVALRELATIONSHIP,1,true],];
FromRawLineData['IFC2X3'][IFCAPPROVALACTORRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcApprovalActorRelationship(d.ID, new Reference(d.arguments[0].value), new Reference<IFC2X3.IfcApproval>(d.arguments[1].value), new Reference<IFC2X3.IfcActorRole>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCAPPROVALACTORRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcApprovalActorRelationship(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCAPPROVALACTORRELATIONSHIP] = (i:IFC2X3.IfcApprovalActorRelationship):unknown[] => { return [i.Actor, i.Approval, i.Role]; }
FromRawLineData['IFC2X3'][IFCAPPROVALPROPERTYRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcApprovalPropertyRelationship(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcProperty>(p.value)), new Reference<IFC2X3.IfcApproval>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCAPPROVALPROPERTYRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcApprovalPropertyRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCAPPROVALPROPERTYRELATIONSHIP] = (i:IFC2X3.IfcApprovalPropertyRelationship):unknown[] => { return [i.ApprovedProperties, i.Approval]; }
FromRawLineData['IFC2X3'][IFCAPPROVALRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcApprovalRelationship(d.ID, new Reference<IFC2X3.IfcApproval>(d.arguments[0].value), new Reference<IFC2X3.IfcApproval>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcText(d.arguments[2].value), new IFC2X3.IfcLabel(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCAPPROVALRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcApprovalRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCAPPROVALRELATIONSHIP] = (i:IFC2X3.IfcApprovalRelationship):unknown[] => { return [i.RelatedApproval, i.RelatingApproval, i.Description, i.Name]; }
FromRawLineData['IFC2X3'][IFCBOUNDARYCONDITION] = (d: RawLineData) => { new IFC2X3.IfcBoundaryCondition(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCBOUNDARYCONDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBoundaryCondition(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCBOUNDARYCONDITION] = (i:IFC2X3.IfcBoundaryCondition):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCBOUNDARYCONDITION] = [IFCBOUNDARYNODECONDITIONWARPING,IFCBOUNDARYNODECONDITION,IFCBOUNDARYFACECONDITION,IFCBOUNDARYEDGECONDITION];
FromRawLineData['IFC2X3'][IFCBOUNDARYEDGECONDITION] = (d: RawLineData) => { new IFC2X3.IfcBoundaryEdgeCondition(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcModulusOfLinearSubgradeReactionMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcModulusOfRotationalSubgradeReactionMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCBOUNDARYEDGECONDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBoundaryEdgeCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCBOUNDARYEDGECONDITION] = (i:IFC2X3.IfcBoundaryEdgeCondition):unknown[] => { return [i.Name, i.LinearStiffnessByLengthX, i.LinearStiffnessByLengthY, i.LinearStiffnessByLengthZ, i.RotationalStiffnessByLengthX, i.RotationalStiffnessByLengthY, i.RotationalStiffnessByLengthZ]; }
FromRawLineData['IFC2X3'][IFCBOUNDARYFACECONDITION] = (d: RawLineData) => { new IFC2X3.IfcBoundaryFaceCondition(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcModulusOfSubgradeReactionMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcModulusOfSubgradeReactionMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcModulusOfSubgradeReactionMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCBOUNDARYFACECONDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBoundaryFaceCondition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCBOUNDARYFACECONDITION] = (i:IFC2X3.IfcBoundaryFaceCondition):unknown[] => { return [i.Name, i.LinearStiffnessByAreaX, i.LinearStiffnessByAreaY, i.LinearStiffnessByAreaZ]; }
FromRawLineData['IFC2X3'][IFCBOUNDARYNODECONDITION] = (d: RawLineData) => { new IFC2X3.IfcBoundaryNodeCondition(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLinearStiffnessMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLinearStiffnessMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLinearStiffnessMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcRotationalStiffnessMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcRotationalStiffnessMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcRotationalStiffnessMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCBOUNDARYNODECONDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBoundaryNodeCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCBOUNDARYNODECONDITION] = (i:IFC2X3.IfcBoundaryNodeCondition):unknown[] => { return [i.Name, i.LinearStiffnessX, i.LinearStiffnessY, i.LinearStiffnessZ, i.RotationalStiffnessX, i.RotationalStiffnessY, i.RotationalStiffnessZ]; }
InheritanceDef['IFC2X3'][IFCBOUNDARYNODECONDITION] = [IFCBOUNDARYNODECONDITIONWARPING];
FromRawLineData['IFC2X3'][IFCBOUNDARYNODECONDITIONWARPING] = (d: RawLineData) => { new IFC2X3.IfcBoundaryNodeConditionWarping(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLinearStiffnessMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLinearStiffnessMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLinearStiffnessMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcRotationalStiffnessMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcRotationalStiffnessMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcRotationalStiffnessMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcWarpingMomentMeasure(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCBOUNDARYNODECONDITIONWARPING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBoundaryNodeConditionWarping(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCBOUNDARYNODECONDITIONWARPING] = (i:IFC2X3.IfcBoundaryNodeConditionWarping):unknown[] => { return [i.Name, i.LinearStiffnessX, i.LinearStiffnessY, i.LinearStiffnessZ, i.RotationalStiffnessX, i.RotationalStiffnessY, i.RotationalStiffnessZ, i.WarpingStiffness]; }
FromRawLineData['IFC2X3'][IFCCALENDARDATE] = (d: RawLineData) => { new IFC2X3.IfcCalendarDate(d.ID, new IFC2X3.IfcDayInMonthNumber(d.arguments[0].value), new IFC2X3.IfcMonthInYearNumber(d.arguments[1].value), new IFC2X3.IfcYearNumber(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCCALENDARDATE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCalendarDate(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCCALENDARDATE] = (i:IFC2X3.IfcCalendarDate):unknown[] => { return [i.DayComponent, i.MonthComponent, i.YearComponent]; }
FromRawLineData['IFC2X3'][IFCCLASSIFICATION] = (d: RawLineData) => { new IFC2X3.IfcClassification(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcCalendarDate>(d.arguments[2].value), new IFC2X3.IfcLabel(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCCLASSIFICATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcClassification(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCLASSIFICATION] = (i:IFC2X3.IfcClassification):unknown[] => { return [i.Source, i.Edition, i.EditionDate, i.Name]; }
InversePropertyDef['IFC2X3'][IFCCLASSIFICATION] = [['Contains',IFCCLASSIFICATIONITEM,1,true],];
FromRawLineData['IFC2X3'][IFCCLASSIFICATIONITEM] = (d: RawLineData) => { new IFC2X3.IfcClassificationItem(d.ID, new Reference<IFC2X3.IfcClassificationNotationFacet>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcClassification>(d.arguments[1].value), new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCCLASSIFICATIONITEM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcClassificationItem(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCCLASSIFICATIONITEM] = (i:IFC2X3.IfcClassificationItem):unknown[] => { return [i.Notation, i.ItemOf, i.Title]; }
InversePropertyDef['IFC2X3'][IFCCLASSIFICATIONITEM] = [['IsClassifiedItemIn',IFCCLASSIFICATIONITEMRELATIONSHIP,1,true],['IsClassifyingItemIn',IFCCLASSIFICATIONITEMRELATIONSHIP,0,true],];
FromRawLineData['IFC2X3'][IFCCLASSIFICATIONITEMRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcClassificationItemRelationship(d.ID, new Reference<IFC2X3.IfcClassificationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcClassificationItem>(p.value))); }
Constructors['IFC2X3'][IFCCLASSIFICATIONITEMRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcClassificationItemRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCLASSIFICATIONITEMRELATIONSHIP] = (i:IFC2X3.IfcClassificationItemRelationship):unknown[] => { return [i.RelatingItem, i.RelatedItems]; }
FromRawLineData['IFC2X3'][IFCCLASSIFICATIONNOTATION] = (d: RawLineData) => { new IFC2X3.IfcClassificationNotation(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcClassificationNotationFacet>(p.value))); }
Constructors['IFC2X3'][IFCCLASSIFICATIONNOTATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcClassificationNotation(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCLASSIFICATIONNOTATION] = (i:IFC2X3.IfcClassificationNotation):unknown[] => { return [i.NotationFacets]; }
FromRawLineData['IFC2X3'][IFCCLASSIFICATIONNOTATIONFACET] = (d: RawLineData) => { new IFC2X3.IfcClassificationNotationFacet(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCCLASSIFICATIONNOTATIONFACET] = (expressID:number, args: any[]) => { return new IFC2X3.IfcClassificationNotationFacet(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCLASSIFICATIONNOTATIONFACET] = (i:IFC2X3.IfcClassificationNotationFacet):unknown[] => { return [i.NotationValue]; }
FromRawLineData['IFC2X3'][IFCCOLOURSPECIFICATION] = (d: RawLineData) => { new IFC2X3.IfcColourSpecification(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCCOLOURSPECIFICATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcColourSpecification(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCOLOURSPECIFICATION] = (i:IFC2X3.IfcColourSpecification):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCCOLOURSPECIFICATION] = [IFCCOLOURRGB];
FromRawLineData['IFC2X3'][IFCCONNECTIONGEOMETRY] = (d: RawLineData) => { new IFC2X3.IfcConnectionGeometry(d.ID, ); }
Constructors['IFC2X3'][IFCCONNECTIONGEOMETRY] = (expressID:number, _:any) => { return new IFC2X3.IfcConnectionGeometry(expressID, ); }
ToRawLineData['IFC2X3'][IFCCONNECTIONGEOMETRY] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCCONNECTIONGEOMETRY] = [IFCCONNECTIONCURVEGEOMETRY,IFCCONNECTIONSURFACEGEOMETRY,IFCCONNECTIONPORTGEOMETRY,IFCCONNECTIONPOINTECCENTRICITY,IFCCONNECTIONPOINTGEOMETRY];
FromRawLineData['IFC2X3'][IFCCONNECTIONPOINTGEOMETRY] = (d: RawLineData) => { new IFC2X3.IfcConnectionPointGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCCONNECTIONPOINTGEOMETRY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConnectionPointGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCONNECTIONPOINTGEOMETRY] = (i:IFC2X3.IfcConnectionPointGeometry):unknown[] => { return [i.PointOnRelatingElement, i.PointOnRelatedElement]; }
InheritanceDef['IFC2X3'][IFCCONNECTIONPOINTGEOMETRY] = [IFCCONNECTIONPOINTECCENTRICITY];
FromRawLineData['IFC2X3'][IFCCONNECTIONPORTGEOMETRY] = (d: RawLineData) => { new IFC2X3.IfcConnectionPortGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value), new Reference<IFC2X3.IfcProfileDef>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCCONNECTIONPORTGEOMETRY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConnectionPortGeometry(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCCONNECTIONPORTGEOMETRY] = (i:IFC2X3.IfcConnectionPortGeometry):unknown[] => { return [i.LocationAtRelatingElement, i.LocationAtRelatedElement, i.ProfileOfPort]; }
FromRawLineData['IFC2X3'][IFCCONNECTIONSURFACEGEOMETRY] = (d: RawLineData) => { new IFC2X3.IfcConnectionSurfaceGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCCONNECTIONSURFACEGEOMETRY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConnectionSurfaceGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCONNECTIONSURFACEGEOMETRY] = (i:IFC2X3.IfcConnectionSurfaceGeometry):unknown[] => { return [i.SurfaceOnRelatingElement, i.SurfaceOnRelatedElement]; }
FromRawLineData['IFC2X3'][IFCCONSTRAINT] = (d: RawLineData) => { new IFC2X3.IfcConstraint(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC2X3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCCONSTRAINT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConstraint(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCCONSTRAINT] = (i:IFC2X3.IfcConstraint):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade]; }
InheritanceDef['IFC2X3'][IFCCONSTRAINT] = [IFCOBJECTIVE,IFCMETRIC];
InversePropertyDef['IFC2X3'][IFCCONSTRAINT] = [['ClassifiedAs',IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP,0,true],['RelatesConstraints',IFCCONSTRAINTRELATIONSHIP,2,true],['IsRelatedWith',IFCCONSTRAINTRELATIONSHIP,3,true],['PropertiesForConstraint',IFCPROPERTYCONSTRAINTRELATIONSHIP,0,true],['Aggregates',IFCCONSTRAINTAGGREGATIONRELATIONSHIP,2,true],['IsAggregatedIn',IFCCONSTRAINTAGGREGATIONRELATIONSHIP,3,true],];
FromRawLineData['IFC2X3'][IFCCONSTRAINTAGGREGATIONRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcConstraintAggregationRelationship(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference<IFC2X3.IfcConstraint>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcConstraint>(p.value)), d.arguments[4]); }
Constructors['IFC2X3'][IFCCONSTRAINTAGGREGATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConstraintAggregationRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCONSTRAINTAGGREGATIONRELATIONSHIP] = (i:IFC2X3.IfcConstraintAggregationRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingConstraint, i.RelatedConstraints, i.LogicalAggregator]; }
FromRawLineData['IFC2X3'][IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcConstraintClassificationRelationship(d.ID, new Reference<IFC2X3.IfcConstraint>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConstraintClassificationRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP] = (i:IFC2X3.IfcConstraintClassificationRelationship):unknown[] => { return [i.ClassifiedConstraint, i.RelatedClassifications]; }
FromRawLineData['IFC2X3'][IFCCONSTRAINTRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcConstraintRelationship(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference<IFC2X3.IfcConstraint>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcConstraint>(p.value))); }
Constructors['IFC2X3'][IFCCONSTRAINTRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConstraintRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCONSTRAINTRELATIONSHIP] = (i:IFC2X3.IfcConstraintRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingConstraint, i.RelatedConstraints]; }
FromRawLineData['IFC2X3'][IFCCOORDINATEDUNIVERSALTIMEOFFSET] = (d: RawLineData) => { new IFC2X3.IfcCoordinatedUniversalTimeOffset(d.ID, new IFC2X3.IfcHourInDay(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcMinuteInHour(d.arguments[1].value), d.arguments[2]); }
Constructors['IFC2X3'][IFCCOORDINATEDUNIVERSALTIMEOFFSET] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCoordinatedUniversalTimeOffset(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCCOORDINATEDUNIVERSALTIMEOFFSET] = (i:IFC2X3.IfcCoordinatedUniversalTimeOffset):unknown[] => { return [i.HourOffset, i.MinuteOffset, i.Sense]; }
FromRawLineData['IFC2X3'][IFCCOSTVALUE] = (d: RawLineData) => { new IFC2X3.IfcCostValue(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcText(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCCOSTVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCostValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCCOSTVALUE] = (i:IFC2X3.IfcCostValue):unknown[] => { return [i.Name, i.Description, i.AppliedValue, i.UnitBasis, i.ApplicableDate, i.FixedUntilDate, i.CostType, i.Condition]; }
InversePropertyDef['IFC2X3'][IFCCOSTVALUE] = [['ValuesReferenced',IFCREFERENCESVALUEDOCUMENT,1,true],['ValueOfComponents',IFCAPPLIEDVALUERELATIONSHIP,0,true],['IsComponentIn',IFCAPPLIEDVALUERELATIONSHIP,1,true],];
FromRawLineData['IFC2X3'][IFCCURRENCYRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcCurrencyRelationship(d.ID, new Reference<IFC2X3.IfcMonetaryUnit>(d.arguments[0].value), new Reference<IFC2X3.IfcMonetaryUnit>(d.arguments[1].value), new IFC2X3.IfcPositiveRatioMeasure(d.arguments[2].value), new Reference<IFC2X3.IfcDateAndTime>(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC2X3.IfcLibraryInformation>(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCCURRENCYRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCurrencyRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCURRENCYRELATIONSHIP] = (i:IFC2X3.IfcCurrencyRelationship):unknown[] => { return [i.RelatingMonetaryUnit, i.RelatedMonetaryUnit, i.ExchangeRate, i.RateDateTime, i.RateSource]; }
FromRawLineData['IFC2X3'][IFCCURVESTYLEFONT] = (d: RawLineData) => { new IFC2X3.IfcCurveStyleFont(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcCurveStyleFontPattern>(p.value))); }
Constructors['IFC2X3'][IFCCURVESTYLEFONT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCurveStyleFont(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCURVESTYLEFONT] = (i:IFC2X3.IfcCurveStyleFont):unknown[] => { return [i.Name, i.PatternList]; }
FromRawLineData['IFC2X3'][IFCCURVESTYLEFONTANDSCALING] = (d: RawLineData) => { new IFC2X3.IfcCurveStyleFontAndScaling(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new Reference(d.arguments[1].value), new IFC2X3.IfcPositiveRatioMeasure(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCCURVESTYLEFONTANDSCALING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCurveStyleFontAndScaling(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCCURVESTYLEFONTANDSCALING] = (i:IFC2X3.IfcCurveStyleFontAndScaling):unknown[] => { return [i.Name, i.CurveFont, i.CurveFontScaling]; }
FromRawLineData['IFC2X3'][IFCCURVESTYLEFONTPATTERN] = (d: RawLineData) => { new IFC2X3.IfcCurveStyleFontPattern(d.ID, new IFC2X3.IfcLengthMeasure(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCCURVESTYLEFONTPATTERN] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCurveStyleFontPattern(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCURVESTYLEFONTPATTERN] = (i:IFC2X3.IfcCurveStyleFontPattern):unknown[] => { return [i.VisibleSegmentLength, i.InvisibleSegmentLength]; }
FromRawLineData['IFC2X3'][IFCDATEANDTIME] = (d: RawLineData) => { new IFC2X3.IfcDateAndTime(d.ID, new Reference<IFC2X3.IfcCalendarDate>(d.arguments[0].value), new Reference<IFC2X3.IfcLocalTime>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCDATEANDTIME] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDateAndTime(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCDATEANDTIME] = (i:IFC2X3.IfcDateAndTime):unknown[] => { return [i.DateComponent, i.TimeComponent]; }
FromRawLineData['IFC2X3'][IFCDERIVEDUNIT] = (d: RawLineData) => { new IFC2X3.IfcDerivedUnit(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcDerivedUnitElement>(p.value)), d.arguments[1], !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCDERIVEDUNIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDerivedUnit(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCDERIVEDUNIT] = (i:IFC2X3.IfcDerivedUnit):unknown[] => { return [i.Elements, i.UnitType, i.UserDefinedType]; }
FromRawLineData['IFC2X3'][IFCDERIVEDUNITELEMENT] = (d: RawLineData) => { new IFC2X3.IfcDerivedUnitElement(d.ID, new Reference<IFC2X3.IfcNamedUnit>(d.arguments[0].value), d.arguments[1].value); }
Constructors['IFC2X3'][IFCDERIVEDUNITELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDerivedUnitElement(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCDERIVEDUNITELEMENT] = (i:IFC2X3.IfcDerivedUnitElement):unknown[] => { return [i.Unit, i.Exponent]; }
FromRawLineData['IFC2X3'][IFCDIMENSIONALEXPONENTS] = (d: RawLineData) => { new IFC2X3.IfcDimensionalExponents(d.ID, d.arguments[0].value, d.arguments[1].value, d.arguments[2].value, d.arguments[3].value, d.arguments[4].value, d.arguments[5].value, d.arguments[6].value); }
Constructors['IFC2X3'][IFCDIMENSIONALEXPONENTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDimensionalExponents(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCDIMENSIONALEXPONENTS] = (i:IFC2X3.IfcDimensionalExponents):unknown[] => { return [i.LengthExponent, i.MassExponent, i.TimeExponent, i.ElectricCurrentExponent, i.ThermodynamicTemperatureExponent, i.AmountOfSubstanceExponent, i.LuminousIntensityExponent]; }
FromRawLineData['IFC2X3'][IFCDOCUMENTELECTRONICFORMAT] = (d: RawLineData) => { new IFC2X3.IfcDocumentElectronicFormat(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCDOCUMENTELECTRONICFORMAT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDocumentElectronicFormat(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCDOCUMENTELECTRONICFORMAT] = (i:IFC2X3.IfcDocumentElectronicFormat):unknown[] => { return [i.FileExtension, i.MimeContentType, i.MimeSubtype]; }
FromRawLineData['IFC2X3'][IFCDOCUMENTINFORMATION] = (d: RawLineData) => { new IFC2X3.IfcDocumentInformation(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcText(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcDocumentReference>(p.value)), !d.arguments[4] ? null :new IFC2X3.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcText(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new Reference(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference(p.value)), !d.arguments[10] ? null :new Reference<IFC2X3.IfcDateAndTime>(d.arguments[10].value), !d.arguments[11] ? null :new Reference<IFC2X3.IfcDateAndTime>(d.arguments[11].value), !d.arguments[12] ? null :new Reference<IFC2X3.IfcDocumentElectronicFormat>(d.arguments[12].value), !d.arguments[13] ? null :new Reference<IFC2X3.IfcCalendarDate>(d.arguments[13].value), !d.arguments[14] ? null :new Reference<IFC2X3.IfcCalendarDate>(d.arguments[14].value), d.arguments[15], d.arguments[16]); }
Constructors['IFC2X3'][IFCDOCUMENTINFORMATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDocumentInformation(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC2X3'][IFCDOCUMENTINFORMATION] = (i:IFC2X3.IfcDocumentInformation):unknown[] => { return [i.DocumentId, i.Name, i.Description, i.DocumentReferences, i.Purpose, i.IntendedUse, i.Scope, i.Revision, i.DocumentOwner, i.Editors, i.CreationTime, i.LastRevisionTime, i.ElectronicFormat, i.ValidFrom, i.ValidUntil, i.Confidentiality, i.Status]; }
InversePropertyDef['IFC2X3'][IFCDOCUMENTINFORMATION] = [['IsPointedTo',IFCDOCUMENTINFORMATIONRELATIONSHIP,1,true],['IsPointer',IFCDOCUMENTINFORMATIONRELATIONSHIP,0,true],];
FromRawLineData['IFC2X3'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcDocumentInformationRelationship(d.ID, new Reference<IFC2X3.IfcDocumentInformation>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcDocumentInformation>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDocumentInformationRelationship(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (i:IFC2X3.IfcDocumentInformationRelationship):unknown[] => { return [i.RelatingDocument, i.RelatedDocuments, i.RelationshipType]; }
FromRawLineData['IFC2X3'][IFCDRAUGHTINGCALLOUTRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcDraughtingCalloutRelationship(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference<IFC2X3.IfcDraughtingCallout>(d.arguments[2].value), new Reference<IFC2X3.IfcDraughtingCallout>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCDRAUGHTINGCALLOUTRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDraughtingCalloutRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCDRAUGHTINGCALLOUTRELATIONSHIP] = (i:IFC2X3.IfcDraughtingCalloutRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingDraughtingCallout, i.RelatedDraughtingCallout]; }
InheritanceDef['IFC2X3'][IFCDRAUGHTINGCALLOUTRELATIONSHIP] = [IFCDIMENSIONPAIR,IFCDIMENSIONCALLOUTRELATIONSHIP];
FromRawLineData['IFC2X3'][IFCENVIRONMENTALIMPACTVALUE] = (d: RawLineData) => { new IFC2X3.IfcEnvironmentalImpactValue(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCENVIRONMENTALIMPACTVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEnvironmentalImpactValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCENVIRONMENTALIMPACTVALUE] = (i:IFC2X3.IfcEnvironmentalImpactValue):unknown[] => { return [i.Name, i.Description, i.AppliedValue, i.UnitBasis, i.ApplicableDate, i.FixedUntilDate, i.ImpactType, i.Category, i.UserDefinedCategory]; }
InversePropertyDef['IFC2X3'][IFCENVIRONMENTALIMPACTVALUE] = [['ValuesReferenced',IFCREFERENCESVALUEDOCUMENT,1,true],['ValueOfComponents',IFCAPPLIEDVALUERELATIONSHIP,0,true],['IsComponentIn',IFCAPPLIEDVALUERELATIONSHIP,1,true],];
FromRawLineData['IFC2X3'][IFCEXTERNALREFERENCE] = (d: RawLineData) => { new IFC2X3.IfcExternalReference(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCEXTERNALREFERENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcExternalReference(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCEXTERNALREFERENCE] = (i:IFC2X3.IfcExternalReference):unknown[] => { return [i.Location, i.ItemReference, i.Name]; }
InheritanceDef['IFC2X3'][IFCEXTERNALREFERENCE] = [IFCDOCUMENTREFERENCE,IFCCLASSIFICATIONREFERENCE,IFCLIBRARYREFERENCE,IFCEXTERNALLYDEFINEDTEXTFONT,IFCEXTERNALLYDEFINEDSYMBOL,IFCEXTERNALLYDEFINEDSURFACESTYLE,IFCEXTERNALLYDEFINEDHATCHSTYLE];
FromRawLineData['IFC2X3'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (d: RawLineData) => { new IFC2X3.IfcExternallyDefinedHatchStyle(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcExternallyDefinedHatchStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (i:IFC2X3.IfcExternallyDefinedHatchStyle):unknown[] => { return [i.Location, i.ItemReference, i.Name]; }
FromRawLineData['IFC2X3'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (d: RawLineData) => { new IFC2X3.IfcExternallyDefinedSurfaceStyle(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcExternallyDefinedSurfaceStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (i:IFC2X3.IfcExternallyDefinedSurfaceStyle):unknown[] => { return [i.Location, i.ItemReference, i.Name]; }
FromRawLineData['IFC2X3'][IFCEXTERNALLYDEFINEDSYMBOL] = (d: RawLineData) => { new IFC2X3.IfcExternallyDefinedSymbol(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCEXTERNALLYDEFINEDSYMBOL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcExternallyDefinedSymbol(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCEXTERNALLYDEFINEDSYMBOL] = (i:IFC2X3.IfcExternallyDefinedSymbol):unknown[] => { return [i.Location, i.ItemReference, i.Name]; }
FromRawLineData['IFC2X3'][IFCEXTERNALLYDEFINEDTEXTFONT] = (d: RawLineData) => { new IFC2X3.IfcExternallyDefinedTextFont(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCEXTERNALLYDEFINEDTEXTFONT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcExternallyDefinedTextFont(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCEXTERNALLYDEFINEDTEXTFONT] = (i:IFC2X3.IfcExternallyDefinedTextFont):unknown[] => { return [i.Location, i.ItemReference, i.Name]; }
FromRawLineData['IFC2X3'][IFCGRIDAXIS] = (d: RawLineData) => { new IFC2X3.IfcGridAxis(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new Reference<IFC2X3.IfcCurve>(d.arguments[1].value), new IFC2X3.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCGRIDAXIS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGridAxis(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCGRIDAXIS] = (i:IFC2X3.IfcGridAxis):unknown[] => { return [i.AxisTag, i.AxisCurve, i.SameSense]; }
InversePropertyDef['IFC2X3'][IFCGRIDAXIS] = [['PartOfW',IFCGRID,9,true],['PartOfV',IFCGRID,8,true],['PartOfU',IFCGRID,7,true],['HasIntersections',IFCVIRTUALGRIDINTERSECTION,0,true],];
FromRawLineData['IFC2X3'][IFCIRREGULARTIMESERIESVALUE] = (d: RawLineData) => { new IFC2X3.IfcIrregularTimeSeriesValue(d.ID, new Reference(d.arguments[0].value), d.arguments[1].map((p:any) => TypeInitialiser('IFC2X3',p))); }
Constructors['IFC2X3'][IFCIRREGULARTIMESERIESVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcIrregularTimeSeriesValue(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCIRREGULARTIMESERIESVALUE] = (i:IFC2X3.IfcIrregularTimeSeriesValue):unknown[] => { return [i.TimeStamp, i.ListValues.map((p:any) => Labelise(p))]; }
FromRawLineData['IFC2X3'][IFCLIBRARYINFORMATION] = (d: RawLineData) => { new IFC2X3.IfcLibraryInformation(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcOrganization>(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC2X3.IfcCalendarDate>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcLibraryReference>(p.value))); }
Constructors['IFC2X3'][IFCLIBRARYINFORMATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLibraryInformation(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCLIBRARYINFORMATION] = (i:IFC2X3.IfcLibraryInformation):unknown[] => { return [i.Name, i.Version, i.Publisher, i.VersionDate, i.LibraryReference]; }
FromRawLineData['IFC2X3'][IFCLIBRARYREFERENCE] = (d: RawLineData) => { new IFC2X3.IfcLibraryReference(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCLIBRARYREFERENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLibraryReference(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCLIBRARYREFERENCE] = (i:IFC2X3.IfcLibraryReference):unknown[] => { return [i.Location, i.ItemReference, i.Name]; }
InversePropertyDef['IFC2X3'][IFCLIBRARYREFERENCE] = [['ReferenceIntoLibrary',IFCLIBRARYINFORMATION,4,true],];
FromRawLineData['IFC2X3'][IFCLIGHTDISTRIBUTIONDATA] = (d: RawLineData) => { new IFC2X3.IfcLightDistributionData(d.ID, new IFC2X3.IfcPlaneAngleMeasure(d.arguments[0].value), d.arguments[1].map((p:any) => new IFC2X3.IfcPlaneAngleMeasure(p.value)), d.arguments[2].map((p:any) => new IFC2X3.IfcLuminousIntensityDistributionMeasure(p.value))); }
Constructors['IFC2X3'][IFCLIGHTDISTRIBUTIONDATA] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightDistributionData(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCLIGHTDISTRIBUTIONDATA] = (i:IFC2X3.IfcLightDistributionData):unknown[] => { return [i.MainPlaneAngle, i.SecondaryPlaneAngle, i.LuminousIntensity]; }
FromRawLineData['IFC2X3'][IFCLIGHTINTENSITYDISTRIBUTION] = (d: RawLineData) => { new IFC2X3.IfcLightIntensityDistribution(d.ID, d.arguments[0], d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcLightDistributionData>(p.value))); }
Constructors['IFC2X3'][IFCLIGHTINTENSITYDISTRIBUTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightIntensityDistribution(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCLIGHTINTENSITYDISTRIBUTION] = (i:IFC2X3.IfcLightIntensityDistribution):unknown[] => { return [i.LightDistributionCurve, i.DistributionData]; }
FromRawLineData['IFC2X3'][IFCLOCALTIME] = (d: RawLineData) => { new IFC2X3.IfcLocalTime(d.ID, new IFC2X3.IfcHourInDay(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcMinuteInHour(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcSecondInMinute(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC2X3.IfcCoordinatedUniversalTimeOffset>(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcDaylightSavingHour(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCLOCALTIME] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLocalTime(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCLOCALTIME] = (i:IFC2X3.IfcLocalTime):unknown[] => { return [i.HourComponent, i.MinuteComponent, i.SecondComponent, i.Zone, i.DaylightSavingOffset]; }
FromRawLineData['IFC2X3'][IFCMATERIAL] = (d: RawLineData) => { new IFC2X3.IfcMaterial(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCMATERIAL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMaterial(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCMATERIAL] = (i:IFC2X3.IfcMaterial):unknown[] => { return [i.Name]; }
InversePropertyDef['IFC2X3'][IFCMATERIAL] = [['HasRepresentation',IFCMATERIALDEFINITIONREPRESENTATION,3,true],['ClassifiedAs',IFCMATERIALCLASSIFICATIONRELATIONSHIP,1,true],];
FromRawLineData['IFC2X3'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcMaterialClassificationRelationship(d.ID, d.arguments[0].map((p:any) => new Reference(p.value)), new Reference<IFC2X3.IfcMaterial>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMaterialClassificationRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (i:IFC2X3.IfcMaterialClassificationRelationship):unknown[] => { return [i.MaterialClassifications, i.ClassifiedMaterial]; }
FromRawLineData['IFC2X3'][IFCMATERIALLAYER] = (d: RawLineData) => { new IFC2X3.IfcMaterialLayer(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLogical(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCMATERIALLAYER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMaterialLayer(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCMATERIALLAYER] = (i:IFC2X3.IfcMaterialLayer):unknown[] => { return [i.Material, i.LayerThickness, i.IsVentilated]; }
InversePropertyDef['IFC2X3'][IFCMATERIALLAYER] = [['ToMaterialLayerSet',IFCMATERIALLAYERSET,0,false],];
FromRawLineData['IFC2X3'][IFCMATERIALLAYERSET] = (d: RawLineData) => { new IFC2X3.IfcMaterialLayerSet(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcMaterialLayer>(p.value)), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCMATERIALLAYERSET] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMaterialLayerSet(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCMATERIALLAYERSET] = (i:IFC2X3.IfcMaterialLayerSet):unknown[] => { return [i.MaterialLayers, i.LayerSetName]; }
FromRawLineData['IFC2X3'][IFCMATERIALLAYERSETUSAGE] = (d: RawLineData) => { new IFC2X3.IfcMaterialLayerSetUsage(d.ID, new Reference<IFC2X3.IfcMaterialLayerSet>(d.arguments[0].value), d.arguments[1], d.arguments[2], new IFC2X3.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCMATERIALLAYERSETUSAGE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMaterialLayerSetUsage(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCMATERIALLAYERSETUSAGE] = (i:IFC2X3.IfcMaterialLayerSetUsage):unknown[] => { return [i.ForLayerSet, i.LayerSetDirection, i.DirectionSense, i.OffsetFromReferenceLine]; }
FromRawLineData['IFC2X3'][IFCMATERIALLIST] = (d: RawLineData) => { new IFC2X3.IfcMaterialList(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcMaterial>(p.value))); }
Constructors['IFC2X3'][IFCMATERIALLIST] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMaterialList(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCMATERIALLIST] = (i:IFC2X3.IfcMaterialList):unknown[] => { return [i.Materials]; }
FromRawLineData['IFC2X3'][IFCMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMaterialProperties(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCMATERIALPROPERTIES] = (i:IFC2X3.IfcMaterialProperties):unknown[] => { return [i.Material]; }
InheritanceDef['IFC2X3'][IFCMATERIALPROPERTIES] = [IFCHYGROSCOPICMATERIALPROPERTIES,IFCGENERALMATERIALPROPERTIES,IFCFUELPROPERTIES,IFCEXTENDEDMATERIALPROPERTIES,IFCWATERPROPERTIES,IFCTHERMALMATERIALPROPERTIES,IFCPRODUCTSOFCOMBUSTIONPROPERTIES,IFCOPTICALMATERIALPROPERTIES,IFCMECHANICALCONCRETEMATERIALPROPERTIES,IFCMECHANICALSTEELMATERIALPROPERTIES,IFCMECHANICALMATERIALPROPERTIES];
FromRawLineData['IFC2X3'][IFCMEASUREWITHUNIT] = (d: RawLineData) => { new IFC2X3.IfcMeasureWithUnit(d.ID, TypeInitialiser('IFC2X3',d.arguments[0]), new Reference(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCMEASUREWITHUNIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMeasureWithUnit(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCMEASUREWITHUNIT] = (i:IFC2X3.IfcMeasureWithUnit):unknown[] => { return [Labelise(i.ValueComponent), i.UnitComponent]; }
FromRawLineData['IFC2X3'][IFCMECHANICALMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcMechanicalMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcDynamicViscosityMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcModulusOfElasticityMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcModulusOfElasticityMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcThermalExpansionCoefficientMeasure(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCMECHANICALMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMechanicalMaterialProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCMECHANICALMATERIALPROPERTIES] = (i:IFC2X3.IfcMechanicalMaterialProperties):unknown[] => { return [i.Material, i.DynamicViscosity, i.YoungModulus, i.ShearModulus, i.PoissonRatio, i.ThermalExpansionCoefficient]; }
InheritanceDef['IFC2X3'][IFCMECHANICALMATERIALPROPERTIES] = [IFCMECHANICALCONCRETEMATERIALPROPERTIES,IFCMECHANICALSTEELMATERIALPROPERTIES];
FromRawLineData['IFC2X3'][IFCMECHANICALSTEELMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcMechanicalSteelMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcDynamicViscosityMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcModulusOfElasticityMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcModulusOfElasticityMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcThermalExpansionCoefficientMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPressureMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPressureMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcModulusOfElasticityMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcPressureMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[11].value), !d.arguments[12] ? null :d.arguments[12].map((p:any) => new Reference<IFC2X3.IfcRelaxation>(p.value))); }
Constructors['IFC2X3'][IFCMECHANICALSTEELMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMechanicalSteelMaterialProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC2X3'][IFCMECHANICALSTEELMATERIALPROPERTIES] = (i:IFC2X3.IfcMechanicalSteelMaterialProperties):unknown[] => { return [i.Material, i.DynamicViscosity, i.YoungModulus, i.ShearModulus, i.PoissonRatio, i.ThermalExpansionCoefficient, i.YieldStress, i.UltimateStress, i.UltimateStrain, i.HardeningModule, i.ProportionalStress, i.PlasticStrain, i.Relaxations]; }
FromRawLineData['IFC2X3'][IFCMETRIC] = (d: RawLineData) => { new IFC2X3.IfcMetric(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC2X3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), new Reference(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCMETRIC] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMetric(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCMETRIC] = (i:IFC2X3.IfcMetric):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade, i.Benchmark, i.ValueSource, i.DataValue]; }
InversePropertyDef['IFC2X3'][IFCMETRIC] = [['ClassifiedAs',IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP,0,true],['RelatesConstraints',IFCCONSTRAINTRELATIONSHIP,2,true],['IsRelatedWith',IFCCONSTRAINTRELATIONSHIP,3,true],['PropertiesForConstraint',IFCPROPERTYCONSTRAINTRELATIONSHIP,0,true],['Aggregates',IFCCONSTRAINTAGGREGATIONRELATIONSHIP,2,true],['IsAggregatedIn',IFCCONSTRAINTAGGREGATIONRELATIONSHIP,3,true],];
FromRawLineData['IFC2X3'][IFCMONETARYUNIT] = (d: RawLineData) => { new IFC2X3.IfcMonetaryUnit(d.ID, d.arguments[0]); }
Constructors['IFC2X3'][IFCMONETARYUNIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMonetaryUnit(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCMONETARYUNIT] = (i:IFC2X3.IfcMonetaryUnit):unknown[] => { return [i.Currency]; }
FromRawLineData['IFC2X3'][IFCNAMEDUNIT] = (d: RawLineData) => { new IFC2X3.IfcNamedUnit(d.ID, new Reference<IFC2X3.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1]); }
Constructors['IFC2X3'][IFCNAMEDUNIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcNamedUnit(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCNAMEDUNIT] = (i:IFC2X3.IfcNamedUnit):unknown[] => { return [i.Dimensions, i.UnitType]; }
InheritanceDef['IFC2X3'][IFCNAMEDUNIT] = [IFCCONVERSIONBASEDUNIT,IFCCONTEXTDEPENDENTUNIT,IFCSIUNIT];
FromRawLineData['IFC2X3'][IFCOBJECTPLACEMENT] = (d: RawLineData) => { new IFC2X3.IfcObjectPlacement(d.ID, ); }
Constructors['IFC2X3'][IFCOBJECTPLACEMENT] = (expressID:number, _:any) => { return new IFC2X3.IfcObjectPlacement(expressID, ); }
ToRawLineData['IFC2X3'][IFCOBJECTPLACEMENT] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCOBJECTPLACEMENT] = [IFCLOCALPLACEMENT,IFCGRIDPLACEMENT];
InversePropertyDef['IFC2X3'][IFCOBJECTPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCLOCALPLACEMENT,0,true],];
FromRawLineData['IFC2X3'][IFCOBJECTIVE] = (d: RawLineData) => { new IFC2X3.IfcObjective(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC2X3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcMetric>(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC2X3.IfcMetric>(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC2X3.IfcLabel(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCOBJECTIVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcObjective(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCOBJECTIVE] = (i:IFC2X3.IfcObjective):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade, i.BenchmarkValues, i.ResultValues, i.ObjectiveQualifier, i.UserDefinedQualifier]; }
InversePropertyDef['IFC2X3'][IFCOBJECTIVE] = [['ClassifiedAs',IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP,0,true],['RelatesConstraints',IFCCONSTRAINTRELATIONSHIP,2,true],['IsRelatedWith',IFCCONSTRAINTRELATIONSHIP,3,true],['PropertiesForConstraint',IFCPROPERTYCONSTRAINTRELATIONSHIP,0,true],['Aggregates',IFCCONSTRAINTAGGREGATIONRELATIONSHIP,2,true],['IsAggregatedIn',IFCCONSTRAINTAGGREGATIONRELATIONSHIP,3,true],];
FromRawLineData['IFC2X3'][IFCOPTICALMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcOpticalMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCOPTICALMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOpticalMaterialProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCOPTICALMATERIALPROPERTIES] = (i:IFC2X3.IfcOpticalMaterialProperties):unknown[] => { return [i.Material, i.VisibleTransmittance, i.SolarTransmittance, i.ThermalIrTransmittance, i.ThermalIrEmissivityBack, i.ThermalIrEmissivityFront, i.VisibleReflectanceBack, i.VisibleReflectanceFront, i.SolarReflectanceFront, i.SolarReflectanceBack]; }
FromRawLineData['IFC2X3'][IFCORGANIZATION] = (d: RawLineData) => { new IFC2X3.IfcOrganization(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcIdentifier(d.arguments[0].value), new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcText(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcActorRole>(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcAddress>(p.value))); }
Constructors['IFC2X3'][IFCORGANIZATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOrganization(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCORGANIZATION] = (i:IFC2X3.IfcOrganization):unknown[] => { return [i.Id, i.Name, i.Description, i.Roles, i.Addresses]; }
InversePropertyDef['IFC2X3'][IFCORGANIZATION] = [['IsRelatedBy',IFCORGANIZATIONRELATIONSHIP,3,true],['Relates',IFCORGANIZATIONRELATIONSHIP,2,true],['Engages',IFCPERSONANDORGANIZATION,1,true],];
FromRawLineData['IFC2X3'][IFCORGANIZATIONRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcOrganizationRelationship(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference<IFC2X3.IfcOrganization>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcOrganization>(p.value))); }
Constructors['IFC2X3'][IFCORGANIZATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOrganizationRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCORGANIZATIONRELATIONSHIP] = (i:IFC2X3.IfcOrganizationRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingOrganization, i.RelatedOrganizations]; }
FromRawLineData['IFC2X3'][IFCOWNERHISTORY] = (d: RawLineData) => { new IFC2X3.IfcOwnerHistory(d.ID, new Reference<IFC2X3.IfcPersonAndOrganization>(d.arguments[0].value), new Reference<IFC2X3.IfcApplication>(d.arguments[1].value), d.arguments[2], d.arguments[3], !d.arguments[4] ? null :new IFC2X3.IfcTimeStamp(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcPersonAndOrganization>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcApplication>(d.arguments[6].value), new IFC2X3.IfcTimeStamp(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCOWNERHISTORY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOwnerHistory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCOWNERHISTORY] = (i:IFC2X3.IfcOwnerHistory):unknown[] => { return [i.OwningUser, i.OwningApplication, i.State, i.ChangeAction, i.LastModifiedDate, i.LastModifyingUser, i.LastModifyingApplication, i.CreationDate]; }
FromRawLineData['IFC2X3'][IFCPERSON] = (d: RawLineData) => { new IFC2X3.IfcPerson(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC2X3.IfcLabel(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC2X3.IfcLabel(p.value)), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new IFC2X3.IfcLabel(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcActorRole>(p.value)), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcAddress>(p.value))); }
Constructors['IFC2X3'][IFCPERSON] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPerson(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCPERSON] = (i:IFC2X3.IfcPerson):unknown[] => { return [i.Id, i.FamilyName, i.GivenName, i.MiddleNames, i.PrefixTitles, i.SuffixTitles, i.Roles, i.Addresses]; }
InversePropertyDef['IFC2X3'][IFCPERSON] = [['EngagedIn',IFCPERSONANDORGANIZATION,0,true],];
FromRawLineData['IFC2X3'][IFCPERSONANDORGANIZATION] = (d: RawLineData) => { new IFC2X3.IfcPersonAndOrganization(d.ID, new Reference<IFC2X3.IfcPerson>(d.arguments[0].value), new Reference<IFC2X3.IfcOrganization>(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new Reference<IFC2X3.IfcActorRole>(p.value))); }
Constructors['IFC2X3'][IFCPERSONANDORGANIZATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPersonAndOrganization(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPERSONANDORGANIZATION] = (i:IFC2X3.IfcPersonAndOrganization):unknown[] => { return [i.ThePerson, i.TheOrganization, i.Roles]; }
FromRawLineData['IFC2X3'][IFCPHYSICALQUANTITY] = (d: RawLineData) => { new IFC2X3.IfcPhysicalQuantity(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCPHYSICALQUANTITY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPhysicalQuantity(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCPHYSICALQUANTITY] = (i:IFC2X3.IfcPhysicalQuantity):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCPHYSICALQUANTITY] = [IFCPHYSICALCOMPLEXQUANTITY,IFCQUANTITYWEIGHT,IFCQUANTITYVOLUME,IFCQUANTITYTIME,IFCQUANTITYLENGTH,IFCQUANTITYCOUNT,IFCQUANTITYAREA,IFCPHYSICALSIMPLEQUANTITY];
InversePropertyDef['IFC2X3'][IFCPHYSICALQUANTITY] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCPHYSICALSIMPLEQUANTITY] = (d: RawLineData) => { new IFC2X3.IfcPhysicalSimpleQuantity(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcNamedUnit>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCPHYSICALSIMPLEQUANTITY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPhysicalSimpleQuantity(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPHYSICALSIMPLEQUANTITY] = (i:IFC2X3.IfcPhysicalSimpleQuantity):unknown[] => { return [i.Name, i.Description, i.Unit]; }
InheritanceDef['IFC2X3'][IFCPHYSICALSIMPLEQUANTITY] = [IFCQUANTITYWEIGHT,IFCQUANTITYVOLUME,IFCQUANTITYTIME,IFCQUANTITYLENGTH,IFCQUANTITYCOUNT,IFCQUANTITYAREA];
InversePropertyDef['IFC2X3'][IFCPHYSICALSIMPLEQUANTITY] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCPOSTALADDRESS] = (d: RawLineData) => { new IFC2X3.IfcPostalAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC2X3.IfcLabel(p.value)), !d.arguments[5] ? null :new IFC2X3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcLabel(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCPOSTALADDRESS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPostalAddress(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCPOSTALADDRESS] = (i:IFC2X3.IfcPostalAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose, i.InternalLocation, i.AddressLines, i.PostalBox, i.Town, i.Region, i.PostalCode, i.Country]; }
InversePropertyDef['IFC2X3'][IFCPOSTALADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC2X3'][IFCPREDEFINEDITEM] = (d: RawLineData) => { new IFC2X3.IfcPreDefinedItem(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPREDEFINEDITEM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPreDefinedItem(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPREDEFINEDITEM] = (i:IFC2X3.IfcPreDefinedItem):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCPREDEFINEDITEM] = [IFCDRAUGHTINGPREDEFINEDCURVEFONT,IFCPREDEFINEDCURVEFONT,IFCDRAUGHTINGPREDEFINEDCOLOUR,IFCPREDEFINEDCOLOUR,IFCDRAUGHTINGPREDEFINEDTEXTFONT,IFCTEXTSTYLEFONTMODEL,IFCPREDEFINEDTEXTFONT,IFCPREDEFINEDPOINTMARKERSYMBOL,IFCPREDEFINEDDIMENSIONSYMBOL,IFCPREDEFINEDTERMINATORSYMBOL,IFCPREDEFINEDSYMBOL];
FromRawLineData['IFC2X3'][IFCPREDEFINEDSYMBOL] = (d: RawLineData) => { new IFC2X3.IfcPreDefinedSymbol(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPREDEFINEDSYMBOL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPreDefinedSymbol(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPREDEFINEDSYMBOL] = (i:IFC2X3.IfcPreDefinedSymbol):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCPREDEFINEDSYMBOL] = [IFCPREDEFINEDPOINTMARKERSYMBOL,IFCPREDEFINEDDIMENSIONSYMBOL,IFCPREDEFINEDTERMINATORSYMBOL];
FromRawLineData['IFC2X3'][IFCPREDEFINEDTERMINATORSYMBOL] = (d: RawLineData) => { new IFC2X3.IfcPreDefinedTerminatorSymbol(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPREDEFINEDTERMINATORSYMBOL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPreDefinedTerminatorSymbol(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPREDEFINEDTERMINATORSYMBOL] = (i:IFC2X3.IfcPreDefinedTerminatorSymbol):unknown[] => { return [i.Name]; }
FromRawLineData['IFC2X3'][IFCPREDEFINEDTEXTFONT] = (d: RawLineData) => { new IFC2X3.IfcPreDefinedTextFont(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPREDEFINEDTEXTFONT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPreDefinedTextFont(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPREDEFINEDTEXTFONT] = (i:IFC2X3.IfcPreDefinedTextFont):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCPREDEFINEDTEXTFONT] = [IFCDRAUGHTINGPREDEFINEDTEXTFONT,IFCTEXTSTYLEFONTMODEL];
FromRawLineData['IFC2X3'][IFCPRESENTATIONLAYERASSIGNMENT] = (d: RawLineData) => { new IFC2X3.IfcPresentationLayerAssignment(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference(p.value)), !d.arguments[3] ? null :new IFC2X3.IfcIdentifier(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPRESENTATIONLAYERASSIGNMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPresentationLayerAssignment(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPRESENTATIONLAYERASSIGNMENT] = (i:IFC2X3.IfcPresentationLayerAssignment):unknown[] => { return [i.Name, i.Description, i.AssignedItems, i.Identifier]; }
InheritanceDef['IFC2X3'][IFCPRESENTATIONLAYERASSIGNMENT] = [IFCPRESENTATIONLAYERWITHSTYLE];
FromRawLineData['IFC2X3'][IFCPRESENTATIONLAYERWITHSTYLE] = (d: RawLineData) => { new IFC2X3.IfcPresentationLayerWithStyle(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference(p.value)), !d.arguments[3] ? null :new IFC2X3.IfcIdentifier(d.arguments[3].value), d.arguments[4].value, d.arguments[5].value, d.arguments[6].value, d.arguments[7].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCPRESENTATIONLAYERWITHSTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPresentationLayerWithStyle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCPRESENTATIONLAYERWITHSTYLE] = (i:IFC2X3.IfcPresentationLayerWithStyle):unknown[] => { return [i.Name, i.Description, i.AssignedItems, i.Identifier, i.LayerOn, i.LayerFrozen, i.LayerBlocked, i.LayerStyles]; }
FromRawLineData['IFC2X3'][IFCPRESENTATIONSTYLE] = (d: RawLineData) => { new IFC2X3.IfcPresentationStyle(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPRESENTATIONSTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPresentationStyle(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPRESENTATIONSTYLE] = (i:IFC2X3.IfcPresentationStyle):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCPRESENTATIONSTYLE] = [IFCFILLAREASTYLE,IFCCURVESTYLE,IFCTEXTSTYLE,IFCSYMBOLSTYLE,IFCSURFACESTYLE];
FromRawLineData['IFC2X3'][IFCPRESENTATIONSTYLEASSIGNMENT] = (d: RawLineData) => { new IFC2X3.IfcPresentationStyleAssignment(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCPRESENTATIONSTYLEASSIGNMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPresentationStyleAssignment(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPRESENTATIONSTYLEASSIGNMENT] = (i:IFC2X3.IfcPresentationStyleAssignment):unknown[] => { return [i.Styles]; }
FromRawLineData['IFC2X3'][IFCPRODUCTREPRESENTATION] = (d: RawLineData) => { new IFC2X3.IfcProductRepresentation(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC2X3.IfcRepresentation>(p.value))); }
Constructors['IFC2X3'][IFCPRODUCTREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProductRepresentation(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPRODUCTREPRESENTATION] = (i:IFC2X3.IfcProductRepresentation):unknown[] => { return [i.Name, i.Description, i.Representations]; }
InheritanceDef['IFC2X3'][IFCPRODUCTREPRESENTATION] = [IFCPRODUCTDEFINITIONSHAPE,IFCMATERIALDEFINITIONREPRESENTATION];
FromRawLineData['IFC2X3'][IFCPRODUCTSOFCOMBUSTIONPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcProductsOfCombustionProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcSpecificHeatCapacityMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCPRODUCTSOFCOMBUSTIONPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProductsOfCombustionProperties(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCPRODUCTSOFCOMBUSTIONPROPERTIES] = (i:IFC2X3.IfcProductsOfCombustionProperties):unknown[] => { return [i.Material, i.SpecificHeatCapacity, i.N20Content, i.COContent, i.CO2Content]; }
FromRawLineData['IFC2X3'][IFCPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProfileDef(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCPROFILEDEF] = (i:IFC2X3.IfcProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName]; }
InheritanceDef['IFC2X3'][IFCPROFILEDEF] = [IFCLSHAPEPROFILEDEF,IFCASYMMETRICISHAPEPROFILEDEF,IFCISHAPEPROFILEDEF,IFCELLIPSEPROFILEDEF,IFCCRANERAILFSHAPEPROFILEDEF,IFCCRANERAILASHAPEPROFILEDEF,IFCCIRCLEHOLLOWPROFILEDEF,IFCCIRCLEPROFILEDEF,IFCCSHAPEPROFILEDEF,IFCZSHAPEPROFILEDEF,IFCUSHAPEPROFILEDEF,IFCTRAPEZIUMPROFILEDEF,IFCTSHAPEPROFILEDEF,IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF,IFCRECTANGLEPROFILEDEF,IFCPARAMETERIZEDPROFILEDEF,IFCDERIVEDPROFILEDEF,IFCCOMPOSITEPROFILEDEF,IFCCENTERLINEPROFILEDEF,IFCARBITRARYOPENPROFILEDEF,IFCARBITRARYPROFILEDEFWITHVOIDS,IFCARBITRARYCLOSEDPROFILEDEF];
FromRawLineData['IFC2X3'][IFCPROFILEPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcProfileProperties(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcProfileDef>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCPROFILEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProfileProperties(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCPROFILEPROPERTIES] = (i:IFC2X3.IfcProfileProperties):unknown[] => { return [i.ProfileName, i.ProfileDefinition]; }
InheritanceDef['IFC2X3'][IFCPROFILEPROPERTIES] = [IFCSTRUCTURALSTEELPROFILEPROPERTIES,IFCSTRUCTURALPROFILEPROPERTIES,IFCGENERALPROFILEPROPERTIES,IFCRIBPLATEPROFILEPROPERTIES];
FromRawLineData['IFC2X3'][IFCPROPERTY] = (d: RawLineData) => { new IFC2X3.IfcProperty(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCPROPERTY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProperty(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCPROPERTY] = (i:IFC2X3.IfcProperty):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCPROPERTY] = [IFCCOMPLEXPROPERTY,IFCPROPERTYTABLEVALUE,IFCPROPERTYSINGLEVALUE,IFCPROPERTYREFERENCEVALUE,IFCPROPERTYLISTVALUE,IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYBOUNDEDVALUE,IFCSIMPLEPROPERTY];
InversePropertyDef['IFC2X3'][IFCPROPERTY] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYCONSTRAINTRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcPropertyConstraintRelationship(d.ID, new Reference<IFC2X3.IfcConstraint>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcProperty>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPROPERTYCONSTRAINTRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyConstraintRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPROPERTYCONSTRAINTRELATIONSHIP] = (i:IFC2X3.IfcPropertyConstraintRelationship):unknown[] => { return [i.RelatingConstraint, i.RelatedProperties, i.Name, i.Description]; }
FromRawLineData['IFC2X3'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcPropertyDependencyRelationship(d.ID, new Reference<IFC2X3.IfcProperty>(d.arguments[0].value), new Reference<IFC2X3.IfcProperty>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcText(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyDependencyRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (i:IFC2X3.IfcPropertyDependencyRelationship):unknown[] => { return [i.DependingProperty, i.DependantProperty, i.Name, i.Description, i.Expression]; }
FromRawLineData['IFC2X3'][IFCPROPERTYENUMERATION] = (d: RawLineData) => { new IFC2X3.IfcPropertyEnumeration(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => TypeInitialiser('IFC2X3',p)), !d.arguments[2] ? null :new Reference(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCPROPERTYENUMERATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyEnumeration(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPROPERTYENUMERATION] = (i:IFC2X3.IfcPropertyEnumeration):unknown[] => { return [i.Name, i.EnumerationValues.map((p:any) => Labelise(p)), i.Unit]; }
FromRawLineData['IFC2X3'][IFCQUANTITYAREA] = (d: RawLineData) => { new IFC2X3.IfcQuantityArea(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcNamedUnit>(d.arguments[2].value), new IFC2X3.IfcAreaMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCQUANTITYAREA] = (expressID:number, args: any[]) => { return new IFC2X3.IfcQuantityArea(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCQUANTITYAREA] = (i:IFC2X3.IfcQuantityArea):unknown[] => { return [i.Name, i.Description, i.Unit, i.AreaValue]; }
InversePropertyDef['IFC2X3'][IFCQUANTITYAREA] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCQUANTITYCOUNT] = (d: RawLineData) => { new IFC2X3.IfcQuantityCount(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcNamedUnit>(d.arguments[2].value), new IFC2X3.IfcCountMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCQUANTITYCOUNT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcQuantityCount(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCQUANTITYCOUNT] = (i:IFC2X3.IfcQuantityCount):unknown[] => { return [i.Name, i.Description, i.Unit, i.CountValue]; }
InversePropertyDef['IFC2X3'][IFCQUANTITYCOUNT] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCQUANTITYLENGTH] = (d: RawLineData) => { new IFC2X3.IfcQuantityLength(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcNamedUnit>(d.arguments[2].value), new IFC2X3.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCQUANTITYLENGTH] = (expressID:number, args: any[]) => { return new IFC2X3.IfcQuantityLength(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCQUANTITYLENGTH] = (i:IFC2X3.IfcQuantityLength):unknown[] => { return [i.Name, i.Description, i.Unit, i.LengthValue]; }
InversePropertyDef['IFC2X3'][IFCQUANTITYLENGTH] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCQUANTITYTIME] = (d: RawLineData) => { new IFC2X3.IfcQuantityTime(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcNamedUnit>(d.arguments[2].value), new IFC2X3.IfcTimeMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCQUANTITYTIME] = (expressID:number, args: any[]) => { return new IFC2X3.IfcQuantityTime(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCQUANTITYTIME] = (i:IFC2X3.IfcQuantityTime):unknown[] => { return [i.Name, i.Description, i.Unit, i.TimeValue]; }
InversePropertyDef['IFC2X3'][IFCQUANTITYTIME] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCQUANTITYVOLUME] = (d: RawLineData) => { new IFC2X3.IfcQuantityVolume(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcNamedUnit>(d.arguments[2].value), new IFC2X3.IfcVolumeMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCQUANTITYVOLUME] = (expressID:number, args: any[]) => { return new IFC2X3.IfcQuantityVolume(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCQUANTITYVOLUME] = (i:IFC2X3.IfcQuantityVolume):unknown[] => { return [i.Name, i.Description, i.Unit, i.VolumeValue]; }
InversePropertyDef['IFC2X3'][IFCQUANTITYVOLUME] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCQUANTITYWEIGHT] = (d: RawLineData) => { new IFC2X3.IfcQuantityWeight(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcNamedUnit>(d.arguments[2].value), new IFC2X3.IfcMassMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCQUANTITYWEIGHT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcQuantityWeight(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCQUANTITYWEIGHT] = (i:IFC2X3.IfcQuantityWeight):unknown[] => { return [i.Name, i.Description, i.Unit, i.WeightValue]; }
InversePropertyDef['IFC2X3'][IFCQUANTITYWEIGHT] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCREFERENCESVALUEDOCUMENT] = (d: RawLineData) => { new IFC2X3.IfcReferencesValueDocument(d.ID, new Reference(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcAppliedValue>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCREFERENCESVALUEDOCUMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcReferencesValueDocument(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCREFERENCESVALUEDOCUMENT] = (i:IFC2X3.IfcReferencesValueDocument):unknown[] => { return [i.ReferencedDocument, i.ReferencingValues, i.Name, i.Description]; }
FromRawLineData['IFC2X3'][IFCREINFORCEMENTBARPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcReinforcementBarProperties(d.ID, new IFC2X3.IfcAreaMeasure(d.arguments[0].value), new IFC2X3.IfcLabel(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcCountMeasure(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCREINFORCEMENTBARPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcReinforcementBarProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCREINFORCEMENTBARPROPERTIES] = (i:IFC2X3.IfcReinforcementBarProperties):unknown[] => { return [i.TotalCrossSectionArea, i.SteelGrade, i.BarSurface, i.EffectiveDepth, i.NominalBarDiameter, i.BarCount]; }
FromRawLineData['IFC2X3'][IFCRELAXATION] = (d: RawLineData) => { new IFC2X3.IfcRelaxation(d.ID, new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[0].value), new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCRELAXATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelaxation(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCRELAXATION] = (i:IFC2X3.IfcRelaxation):unknown[] => { return [i.RelaxationValue, i.InitialStress]; }
FromRawLineData['IFC2X3'][IFCREPRESENTATION] = (d: RawLineData) => { new IFC2X3.IfcRepresentation(d.ID, new Reference<IFC2X3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcRepresentationItem>(p.value))); }
Constructors['IFC2X3'][IFCREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCREPRESENTATION] = (i:IFC2X3.IfcRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC2X3'][IFCREPRESENTATION] = [IFCSTYLEDREPRESENTATION,IFCSTYLEMODEL,IFCTOPOLOGYREPRESENTATION,IFCSHAPEREPRESENTATION,IFCSHAPEMODEL];
InversePropertyDef['IFC2X3'][IFCREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC2X3'][IFCREPRESENTATIONCONTEXT] = (d: RawLineData) => { new IFC2X3.IfcRepresentationContext(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCREPRESENTATIONCONTEXT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRepresentationContext(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCREPRESENTATIONCONTEXT] = (i:IFC2X3.IfcRepresentationContext):unknown[] => { return [i.ContextIdentifier, i.ContextType]; }
InheritanceDef['IFC2X3'][IFCREPRESENTATIONCONTEXT] = [IFCGEOMETRICREPRESENTATIONSUBCONTEXT,IFCGEOMETRICREPRESENTATIONCONTEXT];
InversePropertyDef['IFC2X3'][IFCREPRESENTATIONCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],];
FromRawLineData['IFC2X3'][IFCREPRESENTATIONITEM] = (d: RawLineData) => { new IFC2X3.IfcRepresentationItem(d.ID, ); }
Constructors['IFC2X3'][IFCREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC2X3.IfcRepresentationItem(expressID, ); }
ToRawLineData['IFC2X3'][IFCREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCREPRESENTATIONITEM] = [IFCMAPPEDITEM,IFCFILLAREASTYLETILES,IFCFILLAREASTYLETILESYMBOLWITHSTYLE,IFCFILLAREASTYLEHATCHING,IFCFACEBASEDSURFACEMODEL,IFCDIAMETERDIMENSION,IFCANGULARDIMENSION,IFCRADIUSDIMENSION,IFCLINEARDIMENSION,IFCDIMENSIONCURVEDIRECTEDCALLOUT,IFCSTRUCTUREDDIMENSIONCALLOUT,IFCDRAUGHTINGCALLOUT,IFCDIRECTION,IFCDEFINEDSYMBOL,IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBEZIERCURVE,IFCBEZIERCURVE,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFC2DCOMPOSITECURVE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCLINE,IFCCURVE,IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID,IFCCSGPRIMITIVE3D,IFCCOMPOSITECURVESEGMENT,IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D,IFCCARTESIANTRANSFORMATIONOPERATOR,IFCBOUNDINGBOX,IFCBOOLEANCLIPPINGRESULT,IFCBOOLEANRESULT,IFCANNOTATIONSURFACE,IFCANNOTATIONFILLAREA,IFCVECTOR,IFCTEXTLITERALWITHEXTENT,IFCTEXTLITERAL,IFCPLANE,IFCELEMENTARYSURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE,IFCSURFACE,IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLID,IFCSURFACECURVESWEPTAREASOLID,IFCREVOLVEDAREASOLID,IFCEXTRUDEDAREASOLID,IFCSWEPTAREASOLID,IFCSOLIDMODEL,IFCSHELLBASEDSURFACEMODEL,IFCSECTIONEDSPINE,IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE,IFCPOINT,IFCPLANARBOX,IFCPLANAREXTENT,IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT,IFCPLACEMENT,IFCTWODIRECTIONREPEATFACTOR,IFCONEDIRECTIONREPEATFACTOR,IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT,IFCLIGHTSOURCE,IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE,IFCHALFSPACESOLID,IFCGEOMETRICCURVESET,IFCGEOMETRICSET,IFCGEOMETRICREPRESENTATIONITEM,IFCPATH,IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP,IFCLOOP,IFCFACEOUTERBOUND,IFCFACEBOUND,IFCFACESURFACE,IFCFACE,IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE,IFCEDGE,IFCCLOSEDSHELL,IFCOPENSHELL,IFCCONNECTEDFACESET,IFCVERTEXPOINT,IFCVERTEX,IFCTOPOLOGICALREPRESENTATIONITEM,IFCANNOTATIONFILLAREAOCCURRENCE,IFCPROJECTIONCURVE,IFCDIMENSIONCURVE,IFCANNOTATIONCURVEOCCURRENCE,IFCANNOTATIONTEXTOCCURRENCE,IFCDIMENSIONCURVETERMINATOR,IFCTERMINATORSYMBOL,IFCANNOTATIONSYMBOLOCCURRENCE,IFCANNOTATIONSURFACEOCCURRENCE,IFCANNOTATIONOCCURRENCE,IFCSTYLEDITEM];
InversePropertyDef['IFC2X3'][IFCREPRESENTATIONITEM] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCREPRESENTATIONMAP] = (d: RawLineData) => { new IFC2X3.IfcRepresentationMap(d.ID, new Reference(d.arguments[0].value), new Reference<IFC2X3.IfcRepresentation>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCREPRESENTATIONMAP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRepresentationMap(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCREPRESENTATIONMAP] = (i:IFC2X3.IfcRepresentationMap):unknown[] => { return [i.MappingOrigin, i.MappedRepresentation]; }
InversePropertyDef['IFC2X3'][IFCREPRESENTATIONMAP] = [['MapUsage',IFCMAPPEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCRIBPLATEPROFILEPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcRibPlateProfileProperties(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcProfileDef>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), d.arguments[6]); }
Constructors['IFC2X3'][IFCRIBPLATEPROFILEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRibPlateProfileProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRIBPLATEPROFILEPROPERTIES] = (i:IFC2X3.IfcRibPlateProfileProperties):unknown[] => { return [i.ProfileName, i.ProfileDefinition, i.Thickness, i.RibHeight, i.RibWidth, i.RibSpacing, i.Direction]; }
FromRawLineData['IFC2X3'][IFCROOT] = (d: RawLineData) => { new IFC2X3.IfcRoot(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCROOT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRoot(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCROOT] = (i:IFC2X3.IfcRoot):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCROOT] = [IFCRELDEFINESBYTYPE,IFCRELOVERRIDESPROPERTIES,IFCRELDEFINESBYPROPERTIES,IFCRELDEFINES,IFCRELAGGREGATES,IFCRELNESTS,IFCRELDECOMPOSES,IFCRELVOIDSELEMENT,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELPROJECTSELEMENT,IFCRELINTERACTIONREQUIREMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALELEMENT,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS,IFCRELCONNECTS,IFCRELASSOCIATESPROFILEPROPERTIES,IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL,IFCRELASSOCIATESAPPLIEDVALUE,IFCRELASSOCIATES,IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTASKS,IFCRELSCHEDULESCOSTITEMS,IFCRELASSIGNSTOPROJECTORDER,IFCRELASSIGNSTOCONTROL,IFCRELOCCUPIESSPACES,IFCRELASSIGNSTOACTOR,IFCRELASSIGNS,IFCRELATIONSHIP,IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCFLUIDFLOWPROPERTIES,IFCELECTRICALBASEPROPERTIES,IFCENERGYPROPERTIES,IFCELEMENTQUANTITY,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCSPACETHERMALLOADPROPERTIES,IFCSOUNDVALUE,IFCSOUNDPROPERTIES,IFCSERVICELIFEFACTOR,IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCPROPERTYSETDEFINITION,IFCPROPERTYDEFINITION,IFCCONDITION,IFCASSET,IFCZONE,IFCSTRUCTURALANALYSISMODEL,IFCELECTRICALCIRCUIT,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCCONDITIONCRITERION,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCTIMESERIESSCHEDULE,IFCSPACEPROGRAM,IFCSERVICELIFE,IFCSCHEDULETIMECONTROL,IFCPROJECTORDERRECORD,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCFURNITURESTANDARD,IFCEQUIPMENTSTANDARD,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCPROJECT,IFCDISTRIBUTIONPORT,IFCPORT,IFCGRID,IFCELECTRICALELEMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFLOWTREATMENTDEVICE,IFCFLOWTERMINAL,IFCFLOWSTORAGEDEVICE,IFCFLOWSEGMENT,IFCFLOWMOVINGDEVICE,IFCFLOWFITTING,IFCELECTRICDISTRIBUTIONPOINT,IFCFLOWCONTROLLER,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATE,IFCPILE,IFCMEMBER,IFCFOOTING,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMN,IFCBUILDINGELEMENTPROXY,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCBUILDINGELEMENTPART,IFCBUILDINGELEMENTCOMPONENT,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCFURNISHINGELEMENT,IFCCHAMFEREDGEFEATURE,IFCROUNDEDEDGEFEATURE,IFCEDGEFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCEQUIPMENTELEMENT,IFCDISCRETEACCESSORY,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALPLANARACTIONVARYING,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALLINEARACTIONVARYING,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT,IFCPROXY,IFCPRODUCT,IFCPROCEDURE,IFCORDERACTION,IFCMOVE,IFCTASK,IFCPROCESS,IFCOBJECT,IFCVIBRATIONISOLATORTYPE,IFCDISCRETEACCESSORYTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCSENSORTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICHEATERTYPE,IFCELECTRICAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCGASTERMINALTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSPACEHEATERTYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWALLTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCMEMBERTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCDOORSTYLE,IFCWINDOWSTYLE,IFCTYPEPRODUCT,IFCTYPEOBJECT,IFCOBJECTDEFINITION];
FromRawLineData['IFC2X3'][IFCSIUNIT] = (d: RawLineData) => { new IFC2X3.IfcSIUnit(d.ID, d.arguments[0], d.arguments[1], d.arguments[2]); }
Constructors['IFC2X3'][IFCSIUNIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSIUnit(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCSIUNIT] = (i:IFC2X3.IfcSIUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Prefix, i.Name]; }
FromRawLineData['IFC2X3'][IFCSECTIONPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcSectionProperties(d.ID, d.arguments[0], new Reference<IFC2X3.IfcProfileDef>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcProfileDef>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCSECTIONPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSectionProperties(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCSECTIONPROPERTIES] = (i:IFC2X3.IfcSectionProperties):unknown[] => { return [i.SectionType, i.StartProfile, i.EndProfile]; }
FromRawLineData['IFC2X3'][IFCSECTIONREINFORCEMENTPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcSectionReinforcementProperties(d.ID, new IFC2X3.IfcLengthMeasure(d.arguments[0].value), new IFC2X3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[2].value), d.arguments[3], new Reference<IFC2X3.IfcSectionProperties>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcReinforcementBarProperties>(p.value))); }
Constructors['IFC2X3'][IFCSECTIONREINFORCEMENTPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSectionReinforcementProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCSECTIONREINFORCEMENTPROPERTIES] = (i:IFC2X3.IfcSectionReinforcementProperties):unknown[] => { return [i.LongitudinalStartPosition, i.LongitudinalEndPosition, i.TransversePosition, i.ReinforcementRole, i.SectionDefinition, i.CrossSectionReinforcementDefinitions]; }
FromRawLineData['IFC2X3'][IFCSHAPEASPECT] = (d: RawLineData) => { new IFC2X3.IfcShapeAspect(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcShapeModel>(p.value)), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcText(d.arguments[2].value), d.arguments[3].value, new Reference<IFC2X3.IfcProductDefinitionShape>(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCSHAPEASPECT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcShapeAspect(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCSHAPEASPECT] = (i:IFC2X3.IfcShapeAspect):unknown[] => { return [i.ShapeRepresentations, i.Name, i.Description, i.ProductDefinitional, i.PartOfProductDefinitionShape]; }
FromRawLineData['IFC2X3'][IFCSHAPEMODEL] = (d: RawLineData) => { new IFC2X3.IfcShapeModel(d.ID, new Reference<IFC2X3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcRepresentationItem>(p.value))); }
Constructors['IFC2X3'][IFCSHAPEMODEL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcShapeModel(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSHAPEMODEL] = (i:IFC2X3.IfcShapeModel):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC2X3'][IFCSHAPEMODEL] = [IFCTOPOLOGYREPRESENTATION,IFCSHAPEREPRESENTATION];
InversePropertyDef['IFC2X3'][IFCSHAPEMODEL] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC2X3'][IFCSHAPEREPRESENTATION] = (d: RawLineData) => { new IFC2X3.IfcShapeRepresentation(d.ID, new Reference<IFC2X3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcRepresentationItem>(p.value))); }
Constructors['IFC2X3'][IFCSHAPEREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcShapeRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSHAPEREPRESENTATION] = (i:IFC2X3.IfcShapeRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC2X3'][IFCSHAPEREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC2X3'][IFCSIMPLEPROPERTY] = (d: RawLineData) => { new IFC2X3.IfcSimpleProperty(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCSIMPLEPROPERTY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSimpleProperty(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCSIMPLEPROPERTY] = (i:IFC2X3.IfcSimpleProperty):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCSIMPLEPROPERTY] = [IFCPROPERTYTABLEVALUE,IFCPROPERTYSINGLEVALUE,IFCPROPERTYREFERENCEVALUE,IFCPROPERTYLISTVALUE,IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYBOUNDEDVALUE];
InversePropertyDef['IFC2X3'][IFCSIMPLEPROPERTY] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALCONNECTIONCONDITION] = (d: RawLineData) => { new IFC2X3.IfcStructuralConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALCONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralConnectionCondition(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALCONNECTIONCONDITION] = (i:IFC2X3.IfcStructuralConnectionCondition):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALCONNECTIONCONDITION] = [IFCSLIPPAGECONNECTIONCONDITION,IFCFAILURECONNECTIONCONDITION];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOAD] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoad(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOAD] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoad(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOAD] = (i:IFC2X3.IfcStructuralLoad):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALLOAD] = [IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADTEMPERATURE,IFCSTRUCTURALLOADSTATIC];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADSTATIC] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadStatic(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADSTATIC] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadStatic(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADSTATIC] = (i:IFC2X3.IfcStructuralLoadStatic):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALLOADSTATIC] = [IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADTEMPERATURE];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADTEMPERATURE] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadTemperature(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADTEMPERATURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadTemperature(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADTEMPERATURE] = (i:IFC2X3.IfcStructuralLoadTemperature):unknown[] => { return [i.Name, i.DeltaT_Constant, i.DeltaT_Y, i.DeltaT_Z]; }
FromRawLineData['IFC2X3'][IFCSTYLEMODEL] = (d: RawLineData) => { new IFC2X3.IfcStyleModel(d.ID, new Reference<IFC2X3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcRepresentationItem>(p.value))); }
Constructors['IFC2X3'][IFCSTYLEMODEL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStyleModel(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSTYLEMODEL] = (i:IFC2X3.IfcStyleModel):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC2X3'][IFCSTYLEMODEL] = [IFCSTYLEDREPRESENTATION];
InversePropertyDef['IFC2X3'][IFCSTYLEMODEL] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC2X3'][IFCSTYLEDITEM] = (d: RawLineData) => { new IFC2X3.IfcStyledItem(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCSTYLEDITEM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStyledItem(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCSTYLEDITEM] = (i:IFC2X3.IfcStyledItem):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InheritanceDef['IFC2X3'][IFCSTYLEDITEM] = [IFCANNOTATIONFILLAREAOCCURRENCE,IFCPROJECTIONCURVE,IFCDIMENSIONCURVE,IFCANNOTATIONCURVEOCCURRENCE,IFCANNOTATIONTEXTOCCURRENCE,IFCDIMENSIONCURVETERMINATOR,IFCTERMINATORSYMBOL,IFCANNOTATIONSYMBOLOCCURRENCE,IFCANNOTATIONSURFACEOCCURRENCE,IFCANNOTATIONOCCURRENCE];
InversePropertyDef['IFC2X3'][IFCSTYLEDITEM] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSTYLEDREPRESENTATION] = (d: RawLineData) => { new IFC2X3.IfcStyledRepresentation(d.ID, new Reference<IFC2X3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcRepresentationItem>(p.value))); }
Constructors['IFC2X3'][IFCSTYLEDREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStyledRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSTYLEDREPRESENTATION] = (i:IFC2X3.IfcStyledRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC2X3'][IFCSTYLEDREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC2X3'][IFCSURFACESTYLE] = (d: RawLineData) => { new IFC2X3.IfcSurfaceStyle(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), d.arguments[1], d.arguments[2].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCSURFACESTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCSURFACESTYLE] = (i:IFC2X3.IfcSurfaceStyle):unknown[] => { return [i.Name, i.Side, i.Styles]; }
FromRawLineData['IFC2X3'][IFCSURFACESTYLELIGHTING] = (d: RawLineData) => { new IFC2X3.IfcSurfaceStyleLighting(d.ID, new Reference<IFC2X3.IfcColourRgb>(d.arguments[0].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[1].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[2].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCSURFACESTYLELIGHTING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceStyleLighting(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSURFACESTYLELIGHTING] = (i:IFC2X3.IfcSurfaceStyleLighting):unknown[] => { return [i.DiffuseTransmissionColour, i.DiffuseReflectionColour, i.TransmissionColour, i.ReflectanceColour]; }
FromRawLineData['IFC2X3'][IFCSURFACESTYLEREFRACTION] = (d: RawLineData) => { new IFC2X3.IfcSurfaceStyleRefraction(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcReal(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcReal(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCSURFACESTYLEREFRACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceStyleRefraction(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCSURFACESTYLEREFRACTION] = (i:IFC2X3.IfcSurfaceStyleRefraction):unknown[] => { return [i.RefractionIndex, i.DispersionFactor]; }
FromRawLineData['IFC2X3'][IFCSURFACESTYLESHADING] = (d: RawLineData) => { new IFC2X3.IfcSurfaceStyleShading(d.ID, new Reference<IFC2X3.IfcColourRgb>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCSURFACESTYLESHADING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceStyleShading(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCSURFACESTYLESHADING] = (i:IFC2X3.IfcSurfaceStyleShading):unknown[] => { return [i.SurfaceColour]; }
InheritanceDef['IFC2X3'][IFCSURFACESTYLESHADING] = [IFCSURFACESTYLERENDERING];
FromRawLineData['IFC2X3'][IFCSURFACESTYLEWITHTEXTURES] = (d: RawLineData) => { new IFC2X3.IfcSurfaceStyleWithTextures(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcSurfaceTexture>(p.value))); }
Constructors['IFC2X3'][IFCSURFACESTYLEWITHTEXTURES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceStyleWithTextures(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCSURFACESTYLEWITHTEXTURES] = (i:IFC2X3.IfcSurfaceStyleWithTextures):unknown[] => { return [i.Textures]; }
FromRawLineData['IFC2X3'][IFCSURFACETEXTURE] = (d: RawLineData) => { new IFC2X3.IfcSurfaceTexture(d.ID, d.arguments[0].value, d.arguments[1].value, d.arguments[2], !d.arguments[3] ? null :new Reference<IFC2X3.IfcCartesianTransformationOperator2D>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCSURFACETEXTURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceTexture(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSURFACETEXTURE] = (i:IFC2X3.IfcSurfaceTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.TextureType, i.TextureTransform]; }
InheritanceDef['IFC2X3'][IFCSURFACETEXTURE] = [IFCPIXELTEXTURE,IFCIMAGETEXTURE,IFCBLOBTEXTURE];
FromRawLineData['IFC2X3'][IFCSYMBOLSTYLE] = (d: RawLineData) => { new IFC2X3.IfcSymbolStyle(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), TypeInitialiser('IFC2X3',d.arguments[1])); }
Constructors['IFC2X3'][IFCSYMBOLSTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSymbolStyle(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCSYMBOLSTYLE] = (i:IFC2X3.IfcSymbolStyle):unknown[] => { return [i.Name, Labelise(i.StyleOfSymbol)]; }
FromRawLineData['IFC2X3'][IFCTABLE] = (d: RawLineData) => { new IFC2X3.IfcTable(d.ID, d.arguments[0].value, d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcTableRow>(p.value))); }
Constructors['IFC2X3'][IFCTABLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTable(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCTABLE] = (i:IFC2X3.IfcTable):unknown[] => { return [i.Name, i.Rows]; }
FromRawLineData['IFC2X3'][IFCTABLEROW] = (d: RawLineData) => { new IFC2X3.IfcTableRow(d.ID, d.arguments[0].map((p:any) => TypeInitialiser('IFC2X3',p)), d.arguments[1].value); }
Constructors['IFC2X3'][IFCTABLEROW] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTableRow(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCTABLEROW] = (i:IFC2X3.IfcTableRow):unknown[] => { return [i.RowCells.map((p:any) => Labelise(p)), i.IsHeading]; }
InversePropertyDef['IFC2X3'][IFCTABLEROW] = [['OfTable',IFCTABLE,1,false],];
FromRawLineData['IFC2X3'][IFCTELECOMADDRESS] = (d: RawLineData) => { new IFC2X3.IfcTelecomAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC2X3.IfcLabel(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC2X3.IfcLabel(p.value)), !d.arguments[5] ? null :new IFC2X3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new IFC2X3.IfcLabel(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCTELECOMADDRESS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTelecomAddress(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCTELECOMADDRESS] = (i:IFC2X3.IfcTelecomAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose, i.TelephoneNumbers, i.FacsimileNumbers, i.PagerNumber, i.ElectronicMailAddresses, i.WWWHomePageURL]; }
InversePropertyDef['IFC2X3'][IFCTELECOMADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC2X3'][IFCTEXTSTYLE] = (d: RawLineData) => { new IFC2X3.IfcTextStyle(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), new Reference(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCTEXTSTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextStyle(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCTEXTSTYLE] = (i:IFC2X3.IfcTextStyle):unknown[] => { return [i.Name, i.TextCharacterAppearance, i.TextStyle, i.TextFontStyle]; }
FromRawLineData['IFC2X3'][IFCTEXTSTYLEFONTMODEL] = (d: RawLineData) => { new IFC2X3.IfcTextStyleFontModel(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC2X3.IfcTextFontName(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcFontStyle(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcFontVariant(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcFontWeight(d.arguments[4].value), TypeInitialiser('IFC2X3',d.arguments[5])); }
Constructors['IFC2X3'][IFCTEXTSTYLEFONTMODEL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextStyleFontModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCTEXTSTYLEFONTMODEL] = (i:IFC2X3.IfcTextStyleFontModel):unknown[] => { return [i.Name, i.FontFamily, i.FontStyle, i.FontVariant, i.FontWeight, Labelise(i.FontSize)]; }
FromRawLineData['IFC2X3'][IFCTEXTSTYLEFORDEFINEDFONT] = (d: RawLineData) => { new IFC2X3.IfcTextStyleForDefinedFont(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCTEXTSTYLEFORDEFINEDFONT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextStyleForDefinedFont(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCTEXTSTYLEFORDEFINEDFONT] = (i:IFC2X3.IfcTextStyleForDefinedFont):unknown[] => { return [i.Colour, i.BackgroundColour]; }
FromRawLineData['IFC2X3'][IFCTEXTSTYLETEXTMODEL] = (d: RawLineData) => { new IFC2X3.IfcTextStyleTextModel(d.ID, !d.arguments[0] ? null :TypeInitialiser('IFC2X3',d.arguments[0]), !d.arguments[1] ? null :new IFC2X3.IfcTextAlignment(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcTextDecoration(d.arguments[2].value), !d.arguments[3] ? null :TypeInitialiser('IFC2X3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC2X3',d.arguments[4]), !d.arguments[5] ? null :new IFC2X3.IfcTextTransformation(d.arguments[5].value), !d.arguments[6] ? null :TypeInitialiser('IFC2X3',d.arguments[6])); }
Constructors['IFC2X3'][IFCTEXTSTYLETEXTMODEL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextStyleTextModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCTEXTSTYLETEXTMODEL] = (i:IFC2X3.IfcTextStyleTextModel):unknown[] => { return [!i.TextIndent ? null :Labelise(i.TextIndent), i.TextAlign, i.TextDecoration, !i.LetterSpacing ? null :Labelise(i.LetterSpacing), !i.WordSpacing ? null :Labelise(i.WordSpacing), i.TextTransform, !i.LineHeight ? null :Labelise(i.LineHeight)]; }
FromRawLineData['IFC2X3'][IFCTEXTSTYLEWITHBOXCHARACTERISTICS] = (d: RawLineData) => { new IFC2X3.IfcTextStyleWithBoxCharacteristics(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[3].value), !d.arguments[4] ? null :TypeInitialiser('IFC2X3',d.arguments[4])); }
Constructors['IFC2X3'][IFCTEXTSTYLEWITHBOXCHARACTERISTICS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextStyleWithBoxCharacteristics(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCTEXTSTYLEWITHBOXCHARACTERISTICS] = (i:IFC2X3.IfcTextStyleWithBoxCharacteristics):unknown[] => { return [i.BoxHeight, i.BoxWidth, i.BoxSlantAngle, i.BoxRotateAngle, !i.CharacterSpacing ? null :Labelise(i.CharacterSpacing)]; }
FromRawLineData['IFC2X3'][IFCTEXTURECOORDINATE] = (d: RawLineData) => { new IFC2X3.IfcTextureCoordinate(d.ID, ); }
Constructors['IFC2X3'][IFCTEXTURECOORDINATE] = (expressID:number, _:any) => { return new IFC2X3.IfcTextureCoordinate(expressID, ); }
ToRawLineData['IFC2X3'][IFCTEXTURECOORDINATE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCTEXTURECOORDINATE] = [IFCTEXTUREMAP,IFCTEXTURECOORDINATEGENERATOR];
InversePropertyDef['IFC2X3'][IFCTEXTURECOORDINATE] = [['AnnotatedSurface',IFCANNOTATIONSURFACE,1,true],];
FromRawLineData['IFC2X3'][IFCTEXTURECOORDINATEGENERATOR] = (d: RawLineData) => { new IFC2X3.IfcTextureCoordinateGenerator(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => TypeInitialiser('IFC2X3',p))); }
Constructors['IFC2X3'][IFCTEXTURECOORDINATEGENERATOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextureCoordinateGenerator(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCTEXTURECOORDINATEGENERATOR] = (i:IFC2X3.IfcTextureCoordinateGenerator):unknown[] => { return [i.Mode, i.Parameter.map((p:any) => Labelise(p))]; }
InversePropertyDef['IFC2X3'][IFCTEXTURECOORDINATEGENERATOR] = [['AnnotatedSurface',IFCANNOTATIONSURFACE,1,true],];
FromRawLineData['IFC2X3'][IFCTEXTUREMAP] = (d: RawLineData) => { new IFC2X3.IfcTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcVertexBasedTextureMap>(p.value))); }
Constructors['IFC2X3'][IFCTEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextureMap(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCTEXTUREMAP] = (i:IFC2X3.IfcTextureMap):unknown[] => { return [i.TextureMaps]; }
InversePropertyDef['IFC2X3'][IFCTEXTUREMAP] = [['AnnotatedSurface',IFCANNOTATIONSURFACE,1,true],];
FromRawLineData['IFC2X3'][IFCTEXTUREVERTEX] = (d: RawLineData) => { new IFC2X3.IfcTextureVertex(d.ID, d.arguments[0].map((p:any) => new IFC2X3.IfcParameterValue(p.value))); }
Constructors['IFC2X3'][IFCTEXTUREVERTEX] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextureVertex(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCTEXTUREVERTEX] = (i:IFC2X3.IfcTextureVertex):unknown[] => { return [i.Coordinates]; }
FromRawLineData['IFC2X3'][IFCTHERMALMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcThermalMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcSpecificHeatCapacityMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcThermalConductivityMeasure(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCTHERMALMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcThermalMaterialProperties(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCTHERMALMATERIALPROPERTIES] = (i:IFC2X3.IfcThermalMaterialProperties):unknown[] => { return [i.Material, i.SpecificHeatCapacity, i.BoilingPoint, i.FreezingPoint, i.ThermalConductivity]; }
FromRawLineData['IFC2X3'][IFCTIMESERIES] = (d: RawLineData) => { new IFC2X3.IfcTimeSeries(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference(d.arguments[2].value), new Reference(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCTIMESERIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCTIMESERIES] = (i:IFC2X3.IfcTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit]; }
InheritanceDef['IFC2X3'][IFCTIMESERIES] = [IFCREGULARTIMESERIES,IFCIRREGULARTIMESERIES];
InversePropertyDef['IFC2X3'][IFCTIMESERIES] = [['DocumentedBy',IFCTIMESERIESREFERENCERELATIONSHIP,0,true],];
FromRawLineData['IFC2X3'][IFCTIMESERIESREFERENCERELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcTimeSeriesReferenceRelationship(d.ID, new Reference<IFC2X3.IfcTimeSeries>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCTIMESERIESREFERENCERELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTimeSeriesReferenceRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCTIMESERIESREFERENCERELATIONSHIP] = (i:IFC2X3.IfcTimeSeriesReferenceRelationship):unknown[] => { return [i.ReferencedTimeSeries, i.TimeSeriesReferences]; }
FromRawLineData['IFC2X3'][IFCTIMESERIESVALUE] = (d: RawLineData) => { new IFC2X3.IfcTimeSeriesValue(d.ID, d.arguments[0].map((p:any) => TypeInitialiser('IFC2X3',p))); }
Constructors['IFC2X3'][IFCTIMESERIESVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTimeSeriesValue(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCTIMESERIESVALUE] = (i:IFC2X3.IfcTimeSeriesValue):unknown[] => { return [i.ListValues.map((p:any) => Labelise(p))]; }
FromRawLineData['IFC2X3'][IFCTOPOLOGICALREPRESENTATIONITEM] = (d: RawLineData) => { new IFC2X3.IfcTopologicalRepresentationItem(d.ID, ); }
Constructors['IFC2X3'][IFCTOPOLOGICALREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC2X3.IfcTopologicalRepresentationItem(expressID, ); }
ToRawLineData['IFC2X3'][IFCTOPOLOGICALREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCTOPOLOGICALREPRESENTATIONITEM] = [IFCPATH,IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP,IFCLOOP,IFCFACEOUTERBOUND,IFCFACEBOUND,IFCFACESURFACE,IFCFACE,IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE,IFCEDGE,IFCCLOSEDSHELL,IFCOPENSHELL,IFCCONNECTEDFACESET,IFCVERTEXPOINT,IFCVERTEX];
InversePropertyDef['IFC2X3'][IFCTOPOLOGICALREPRESENTATIONITEM] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCTOPOLOGYREPRESENTATION] = (d: RawLineData) => { new IFC2X3.IfcTopologyRepresentation(d.ID, new Reference<IFC2X3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcRepresentationItem>(p.value))); }
Constructors['IFC2X3'][IFCTOPOLOGYREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTopologyRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCTOPOLOGYREPRESENTATION] = (i:IFC2X3.IfcTopologyRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC2X3'][IFCTOPOLOGYREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC2X3'][IFCUNITASSIGNMENT] = (d: RawLineData) => { new IFC2X3.IfcUnitAssignment(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCUNITASSIGNMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcUnitAssignment(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCUNITASSIGNMENT] = (i:IFC2X3.IfcUnitAssignment):unknown[] => { return [i.Units]; }
FromRawLineData['IFC2X3'][IFCVERTEX] = (d: RawLineData) => { new IFC2X3.IfcVertex(d.ID, ); }
Constructors['IFC2X3'][IFCVERTEX] = (expressID:number, _:any) => { return new IFC2X3.IfcVertex(expressID, ); }
ToRawLineData['IFC2X3'][IFCVERTEX] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCVERTEX] = [IFCVERTEXPOINT];
InversePropertyDef['IFC2X3'][IFCVERTEX] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCVERTEXBASEDTEXTUREMAP] = (d: RawLineData) => { new IFC2X3.IfcVertexBasedTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcTextureVertex>(p.value)), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcCartesianPoint>(p.value))); }
Constructors['IFC2X3'][IFCVERTEXBASEDTEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcVertexBasedTextureMap(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCVERTEXBASEDTEXTUREMAP] = (i:IFC2X3.IfcVertexBasedTextureMap):unknown[] => { return [i.TextureVertices, i.TexturePoints]; }
FromRawLineData['IFC2X3'][IFCVERTEXPOINT] = (d: RawLineData) => { new IFC2X3.IfcVertexPoint(d.ID, new Reference<IFC2X3.IfcPoint>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCVERTEXPOINT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcVertexPoint(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCVERTEXPOINT] = (i:IFC2X3.IfcVertexPoint):unknown[] => { return [i.VertexGeometry]; }
InversePropertyDef['IFC2X3'][IFCVERTEXPOINT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCVIRTUALGRIDINTERSECTION] = (d: RawLineData) => { new IFC2X3.IfcVirtualGridIntersection(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcGridAxis>(p.value)), d.arguments[1].map((p:any) => new IFC2X3.IfcLengthMeasure(p.value))); }
Constructors['IFC2X3'][IFCVIRTUALGRIDINTERSECTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcVirtualGridIntersection(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCVIRTUALGRIDINTERSECTION] = (i:IFC2X3.IfcVirtualGridIntersection):unknown[] => { return [i.IntersectingAxes, i.OffsetDistances]; }
FromRawLineData['IFC2X3'][IFCWATERPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcWaterProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].value, !d.arguments[2] ? null :new IFC2X3.IfcIonConcentrationMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcIonConcentrationMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcIonConcentrationMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPHMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCWATERPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWaterProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCWATERPROPERTIES] = (i:IFC2X3.IfcWaterProperties):unknown[] => { return [i.Material, i.IsPotable, i.Hardness, i.AlkalinityConcentration, i.AcidityConcentration, i.ImpuritiesContent, i.PHLevel, i.DissolvedSolidsContent]; }
FromRawLineData['IFC2X3'][IFCANNOTATIONOCCURRENCE] = (d: RawLineData) => { new IFC2X3.IfcAnnotationOccurrence(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCANNOTATIONOCCURRENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotationOccurrence(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCANNOTATIONOCCURRENCE] = (i:IFC2X3.IfcAnnotationOccurrence):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InheritanceDef['IFC2X3'][IFCANNOTATIONOCCURRENCE] = [IFCANNOTATIONFILLAREAOCCURRENCE,IFCPROJECTIONCURVE,IFCDIMENSIONCURVE,IFCANNOTATIONCURVEOCCURRENCE,IFCANNOTATIONTEXTOCCURRENCE,IFCDIMENSIONCURVETERMINATOR,IFCTERMINATORSYMBOL,IFCANNOTATIONSYMBOLOCCURRENCE,IFCANNOTATIONSURFACEOCCURRENCE];
InversePropertyDef['IFC2X3'][IFCANNOTATIONOCCURRENCE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCANNOTATIONSURFACEOCCURRENCE] = (d: RawLineData) => { new IFC2X3.IfcAnnotationSurfaceOccurrence(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCANNOTATIONSURFACEOCCURRENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotationSurfaceOccurrence(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCANNOTATIONSURFACEOCCURRENCE] = (i:IFC2X3.IfcAnnotationSurfaceOccurrence):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InversePropertyDef['IFC2X3'][IFCANNOTATIONSURFACEOCCURRENCE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCANNOTATIONSYMBOLOCCURRENCE] = (d: RawLineData) => { new IFC2X3.IfcAnnotationSymbolOccurrence(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCANNOTATIONSYMBOLOCCURRENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotationSymbolOccurrence(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCANNOTATIONSYMBOLOCCURRENCE] = (i:IFC2X3.IfcAnnotationSymbolOccurrence):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InheritanceDef['IFC2X3'][IFCANNOTATIONSYMBOLOCCURRENCE] = [IFCDIMENSIONCURVETERMINATOR,IFCTERMINATORSYMBOL];
InversePropertyDef['IFC2X3'][IFCANNOTATIONSYMBOLOCCURRENCE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCANNOTATIONTEXTOCCURRENCE] = (d: RawLineData) => { new IFC2X3.IfcAnnotationTextOccurrence(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCANNOTATIONTEXTOCCURRENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotationTextOccurrence(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCANNOTATIONTEXTOCCURRENCE] = (i:IFC2X3.IfcAnnotationTextOccurrence):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InversePropertyDef['IFC2X3'][IFCANNOTATIONTEXTOCCURRENCE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCARBITRARYCLOSEDPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcArbitraryClosedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcCurve>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCARBITRARYCLOSEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcArbitraryClosedProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCARBITRARYCLOSEDPROFILEDEF] = (i:IFC2X3.IfcArbitraryClosedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.OuterCurve]; }
InheritanceDef['IFC2X3'][IFCARBITRARYCLOSEDPROFILEDEF] = [IFCARBITRARYPROFILEDEFWITHVOIDS];
FromRawLineData['IFC2X3'][IFCARBITRARYOPENPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcArbitraryOpenProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcBoundedCurve>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCARBITRARYOPENPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcArbitraryOpenProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCARBITRARYOPENPROFILEDEF] = (i:IFC2X3.IfcArbitraryOpenProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Curve]; }
InheritanceDef['IFC2X3'][IFCARBITRARYOPENPROFILEDEF] = [IFCCENTERLINEPROFILEDEF];
FromRawLineData['IFC2X3'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (d: RawLineData) => { new IFC2X3.IfcArbitraryProfileDefWithVoids(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcCurve>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcCurve>(p.value))); }
Constructors['IFC2X3'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcArbitraryProfileDefWithVoids(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (i:IFC2X3.IfcArbitraryProfileDefWithVoids):unknown[] => { return [i.ProfileType, i.ProfileName, i.OuterCurve, i.InnerCurves]; }
FromRawLineData['IFC2X3'][IFCBLOBTEXTURE] = (d: RawLineData) => { new IFC2X3.IfcBlobTexture(d.ID, d.arguments[0].value, d.arguments[1].value, d.arguments[2], !d.arguments[3] ? null :new Reference<IFC2X3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), new IFC2X3.IfcIdentifier(d.arguments[4].value), d.arguments[5].value); }
Constructors['IFC2X3'][IFCBLOBTEXTURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBlobTexture(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCBLOBTEXTURE] = (i:IFC2X3.IfcBlobTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.TextureType, i.TextureTransform, i.RasterFormat, i.RasterCode]; }
FromRawLineData['IFC2X3'][IFCCENTERLINEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcCenterLineProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcBoundedCurve>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCCENTERLINEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCenterLineProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCENTERLINEPROFILEDEF] = (i:IFC2X3.IfcCenterLineProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Curve, i.Thickness]; }
FromRawLineData['IFC2X3'][IFCCLASSIFICATIONREFERENCE] = (d: RawLineData) => { new IFC2X3.IfcClassificationReference(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC2X3.IfcClassification>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCCLASSIFICATIONREFERENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcClassificationReference(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCLASSIFICATIONREFERENCE] = (i:IFC2X3.IfcClassificationReference):unknown[] => { return [i.Location, i.ItemReference, i.Name, i.ReferencedSource]; }
FromRawLineData['IFC2X3'][IFCCOLOURRGB] = (d: RawLineData) => { new IFC2X3.IfcColourRgb(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[1].value), new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[2].value), new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCCOLOURRGB] = (expressID:number, args: any[]) => { return new IFC2X3.IfcColourRgb(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCOLOURRGB] = (i:IFC2X3.IfcColourRgb):unknown[] => { return [i.Name, i.Red, i.Green, i.Blue]; }
FromRawLineData['IFC2X3'][IFCCOMPLEXPROPERTY] = (d: RawLineData) => { new IFC2X3.IfcComplexProperty(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new IFC2X3.IfcIdentifier(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC2X3.IfcProperty>(p.value))); }
Constructors['IFC2X3'][IFCCOMPLEXPROPERTY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcComplexProperty(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCOMPLEXPROPERTY] = (i:IFC2X3.IfcComplexProperty):unknown[] => { return [i.Name, i.Description, i.UsageName, i.HasProperties]; }
InversePropertyDef['IFC2X3'][IFCCOMPLEXPROPERTY] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCCOMPOSITEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcCompositeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC2X3.IfcProfileDef>(p.value)), !d.arguments[3] ? null :new IFC2X3.IfcLabel(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCCOMPOSITEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCompositeProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCOMPOSITEPROFILEDEF] = (i:IFC2X3.IfcCompositeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Profiles, i.Label]; }
FromRawLineData['IFC2X3'][IFCCONNECTEDFACESET] = (d: RawLineData) => { new IFC2X3.IfcConnectedFaceSet(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcFace>(p.value))); }
Constructors['IFC2X3'][IFCCONNECTEDFACESET] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConnectedFaceSet(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCONNECTEDFACESET] = (i:IFC2X3.IfcConnectedFaceSet):unknown[] => { return [i.CfsFaces]; }
InheritanceDef['IFC2X3'][IFCCONNECTEDFACESET] = [IFCCLOSEDSHELL,IFCOPENSHELL];
InversePropertyDef['IFC2X3'][IFCCONNECTEDFACESET] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCONNECTIONCURVEGEOMETRY] = (d: RawLineData) => { new IFC2X3.IfcConnectionCurveGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCCONNECTIONCURVEGEOMETRY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConnectionCurveGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCONNECTIONCURVEGEOMETRY] = (i:IFC2X3.IfcConnectionCurveGeometry):unknown[] => { return [i.CurveOnRelatingElement, i.CurveOnRelatedElement]; }
FromRawLineData['IFC2X3'][IFCCONNECTIONPOINTECCENTRICITY] = (d: RawLineData) => { new IFC2X3.IfcConnectionPointEccentricity(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCCONNECTIONPOINTECCENTRICITY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConnectionPointEccentricity(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCONNECTIONPOINTECCENTRICITY] = (i:IFC2X3.IfcConnectionPointEccentricity):unknown[] => { return [i.PointOnRelatingElement, i.PointOnRelatedElement, i.EccentricityInX, i.EccentricityInY, i.EccentricityInZ]; }
FromRawLineData['IFC2X3'][IFCCONTEXTDEPENDENTUNIT] = (d: RawLineData) => { new IFC2X3.IfcContextDependentUnit(d.ID, new Reference<IFC2X3.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCCONTEXTDEPENDENTUNIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcContextDependentUnit(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCCONTEXTDEPENDENTUNIT] = (i:IFC2X3.IfcContextDependentUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Name]; }
FromRawLineData['IFC2X3'][IFCCONVERSIONBASEDUNIT] = (d: RawLineData) => { new IFC2X3.IfcConversionBasedUnit(d.ID, new Reference<IFC2X3.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], new IFC2X3.IfcLabel(d.arguments[2].value), new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCCONVERSIONBASEDUNIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConversionBasedUnit(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCONVERSIONBASEDUNIT] = (i:IFC2X3.IfcConversionBasedUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Name, i.ConversionFactor]; }
FromRawLineData['IFC2X3'][IFCCURVESTYLE] = (d: RawLineData) => { new IFC2X3.IfcCurveStyle(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC2X3',d.arguments[2]), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCCURVESTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCurveStyle(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCURVESTYLE] = (i:IFC2X3.IfcCurveStyle):unknown[] => { return [i.Name, i.CurveFont, !i.CurveWidth ? null :Labelise(i.CurveWidth), i.CurveColour]; }
FromRawLineData['IFC2X3'][IFCDERIVEDPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcDerivedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcProfileDef>(d.arguments[2].value), new Reference<IFC2X3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCDERIVEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDerivedProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCDERIVEDPROFILEDEF] = (i:IFC2X3.IfcDerivedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.ParentProfile, i.Operator, i.Label]; }
FromRawLineData['IFC2X3'][IFCDIMENSIONCALLOUTRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcDimensionCalloutRelationship(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference<IFC2X3.IfcDraughtingCallout>(d.arguments[2].value), new Reference<IFC2X3.IfcDraughtingCallout>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCDIMENSIONCALLOUTRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDimensionCalloutRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCDIMENSIONCALLOUTRELATIONSHIP] = (i:IFC2X3.IfcDimensionCalloutRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingDraughtingCallout, i.RelatedDraughtingCallout]; }
FromRawLineData['IFC2X3'][IFCDIMENSIONPAIR] = (d: RawLineData) => { new IFC2X3.IfcDimensionPair(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference<IFC2X3.IfcDraughtingCallout>(d.arguments[2].value), new Reference<IFC2X3.IfcDraughtingCallout>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCDIMENSIONPAIR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDimensionPair(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCDIMENSIONPAIR] = (i:IFC2X3.IfcDimensionPair):unknown[] => { return [i.Name, i.Description, i.RelatingDraughtingCallout, i.RelatedDraughtingCallout]; }
FromRawLineData['IFC2X3'][IFCDOCUMENTREFERENCE] = (d: RawLineData) => { new IFC2X3.IfcDocumentReference(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCDOCUMENTREFERENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDocumentReference(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCDOCUMENTREFERENCE] = (i:IFC2X3.IfcDocumentReference):unknown[] => { return [i.Location, i.ItemReference, i.Name]; }
InversePropertyDef['IFC2X3'][IFCDOCUMENTREFERENCE] = [['ReferenceToDocument',IFCDOCUMENTINFORMATION,3,true],];
FromRawLineData['IFC2X3'][IFCDRAUGHTINGPREDEFINEDTEXTFONT] = (d: RawLineData) => { new IFC2X3.IfcDraughtingPreDefinedTextFont(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCDRAUGHTINGPREDEFINEDTEXTFONT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDraughtingPreDefinedTextFont(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCDRAUGHTINGPREDEFINEDTEXTFONT] = (i:IFC2X3.IfcDraughtingPreDefinedTextFont):unknown[] => { return [i.Name]; }
FromRawLineData['IFC2X3'][IFCEDGE] = (d: RawLineData) => { new IFC2X3.IfcEdge(d.ID, new Reference<IFC2X3.IfcVertex>(d.arguments[0].value), new Reference<IFC2X3.IfcVertex>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCEDGE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEdge(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCEDGE] = (i:IFC2X3.IfcEdge):unknown[] => { return [i.EdgeStart, i.EdgeEnd]; }
InheritanceDef['IFC2X3'][IFCEDGE] = [IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE];
InversePropertyDef['IFC2X3'][IFCEDGE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCEDGECURVE] = (d: RawLineData) => { new IFC2X3.IfcEdgeCurve(d.ID, new Reference<IFC2X3.IfcVertex>(d.arguments[0].value), new Reference<IFC2X3.IfcVertex>(d.arguments[1].value), new Reference<IFC2X3.IfcCurve>(d.arguments[2].value), d.arguments[3].value); }
Constructors['IFC2X3'][IFCEDGECURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEdgeCurve(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCEDGECURVE] = (i:IFC2X3.IfcEdgeCurve):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.EdgeGeometry, i.SameSense]; }
InversePropertyDef['IFC2X3'][IFCEDGECURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCEXTENDEDMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcExtendedMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcProperty>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcText(d.arguments[2].value), new IFC2X3.IfcLabel(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCEXTENDEDMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcExtendedMaterialProperties(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCEXTENDEDMATERIALPROPERTIES] = (i:IFC2X3.IfcExtendedMaterialProperties):unknown[] => { return [i.Material, i.ExtendedProperties, i.Description, i.Name]; }
FromRawLineData['IFC2X3'][IFCFACE] = (d: RawLineData) => { new IFC2X3.IfcFace(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcFaceBound>(p.value))); }
Constructors['IFC2X3'][IFCFACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFace(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCFACE] = (i:IFC2X3.IfcFace):unknown[] => { return [i.Bounds]; }
InheritanceDef['IFC2X3'][IFCFACE] = [IFCFACESURFACE];
InversePropertyDef['IFC2X3'][IFCFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFACEBOUND] = (d: RawLineData) => { new IFC2X3.IfcFaceBound(d.ID, new Reference<IFC2X3.IfcLoop>(d.arguments[0].value), d.arguments[1].value); }
Constructors['IFC2X3'][IFCFACEBOUND] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFaceBound(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCFACEBOUND] = (i:IFC2X3.IfcFaceBound):unknown[] => { return [i.Bound, i.Orientation]; }
InheritanceDef['IFC2X3'][IFCFACEBOUND] = [IFCFACEOUTERBOUND];
InversePropertyDef['IFC2X3'][IFCFACEBOUND] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFACEOUTERBOUND] = (d: RawLineData) => { new IFC2X3.IfcFaceOuterBound(d.ID, new Reference<IFC2X3.IfcLoop>(d.arguments[0].value), d.arguments[1].value); }
Constructors['IFC2X3'][IFCFACEOUTERBOUND] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFaceOuterBound(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCFACEOUTERBOUND] = (i:IFC2X3.IfcFaceOuterBound):unknown[] => { return [i.Bound, i.Orientation]; }
InversePropertyDef['IFC2X3'][IFCFACEOUTERBOUND] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFACESURFACE] = (d: RawLineData) => { new IFC2X3.IfcFaceSurface(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcFaceBound>(p.value)), new Reference<IFC2X3.IfcSurface>(d.arguments[1].value), d.arguments[2].value); }
Constructors['IFC2X3'][IFCFACESURFACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFaceSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCFACESURFACE] = (i:IFC2X3.IfcFaceSurface):unknown[] => { return [i.Bounds, i.FaceSurface, i.SameSense]; }
InversePropertyDef['IFC2X3'][IFCFACESURFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFAILURECONNECTIONCONDITION] = (d: RawLineData) => { new IFC2X3.IfcFailureConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcForceMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcForceMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcForceMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCFAILURECONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFailureConnectionCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCFAILURECONNECTIONCONDITION] = (i:IFC2X3.IfcFailureConnectionCondition):unknown[] => { return [i.Name, i.TensionFailureX, i.TensionFailureY, i.TensionFailureZ, i.CompressionFailureX, i.CompressionFailureY, i.CompressionFailureZ]; }
FromRawLineData['IFC2X3'][IFCFILLAREASTYLE] = (d: RawLineData) => { new IFC2X3.IfcFillAreaStyle(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCFILLAREASTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFillAreaStyle(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCFILLAREASTYLE] = (i:IFC2X3.IfcFillAreaStyle):unknown[] => { return [i.Name, i.FillStyles]; }
FromRawLineData['IFC2X3'][IFCFUELPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcFuelProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcHeatingValueMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcHeatingValueMeasure(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCFUELPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFuelProperties(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCFUELPROPERTIES] = (i:IFC2X3.IfcFuelProperties):unknown[] => { return [i.Material, i.CombustionTemperature, i.CarbonContent, i.LowerHeatingValue, i.HigherHeatingValue]; }
FromRawLineData['IFC2X3'][IFCGENERALMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcGeneralMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcMolecularWeightMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcMassDensityMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCGENERALMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGeneralMaterialProperties(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCGENERALMATERIALPROPERTIES] = (i:IFC2X3.IfcGeneralMaterialProperties):unknown[] => { return [i.Material, i.MolecularWeight, i.Porosity, i.MassDensity]; }
FromRawLineData['IFC2X3'][IFCGENERALPROFILEPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcGeneralProfileProperties(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcProfileDef>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcMassPerLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCGENERALPROFILEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGeneralProfileProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCGENERALPROFILEPROPERTIES] = (i:IFC2X3.IfcGeneralProfileProperties):unknown[] => { return [i.ProfileName, i.ProfileDefinition, i.PhysicalWeight, i.Perimeter, i.MinimumPlateThickness, i.MaximumPlateThickness, i.CrossSectionArea]; }
InheritanceDef['IFC2X3'][IFCGENERALPROFILEPROPERTIES] = [IFCSTRUCTURALSTEELPROFILEPROPERTIES,IFCSTRUCTURALPROFILEPROPERTIES];
FromRawLineData['IFC2X3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (d: RawLineData) => { new IFC2X3.IfcGeometricRepresentationContext(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new IFC2X3.IfcDimensionCount(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].value, new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGeometricRepresentationContext(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (i:IFC2X3.IfcGeometricRepresentationContext):unknown[] => { return [i.ContextIdentifier, i.ContextType, i.CoordinateSpaceDimension, i.Precision, i.WorldCoordinateSystem, i.TrueNorth]; }
InheritanceDef['IFC2X3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = [IFCGEOMETRICREPRESENTATIONSUBCONTEXT];
InversePropertyDef['IFC2X3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],['HasSubContexts',IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],];
FromRawLineData['IFC2X3'][IFCGEOMETRICREPRESENTATIONITEM] = (d: RawLineData) => { new IFC2X3.IfcGeometricRepresentationItem(d.ID, ); }
Constructors['IFC2X3'][IFCGEOMETRICREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC2X3.IfcGeometricRepresentationItem(expressID, ); }
ToRawLineData['IFC2X3'][IFCGEOMETRICREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCGEOMETRICREPRESENTATIONITEM] = [IFCFILLAREASTYLETILES,IFCFILLAREASTYLETILESYMBOLWITHSTYLE,IFCFILLAREASTYLEHATCHING,IFCFACEBASEDSURFACEMODEL,IFCDIAMETERDIMENSION,IFCANGULARDIMENSION,IFCRADIUSDIMENSION,IFCLINEARDIMENSION,IFCDIMENSIONCURVEDIRECTEDCALLOUT,IFCSTRUCTUREDDIMENSIONCALLOUT,IFCDRAUGHTINGCALLOUT,IFCDIRECTION,IFCDEFINEDSYMBOL,IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBEZIERCURVE,IFCBEZIERCURVE,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFC2DCOMPOSITECURVE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCLINE,IFCCURVE,IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID,IFCCSGPRIMITIVE3D,IFCCOMPOSITECURVESEGMENT,IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D,IFCCARTESIANTRANSFORMATIONOPERATOR,IFCBOUNDINGBOX,IFCBOOLEANCLIPPINGRESULT,IFCBOOLEANRESULT,IFCANNOTATIONSURFACE,IFCANNOTATIONFILLAREA,IFCVECTOR,IFCTEXTLITERALWITHEXTENT,IFCTEXTLITERAL,IFCPLANE,IFCELEMENTARYSURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE,IFCSURFACE,IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLID,IFCSURFACECURVESWEPTAREASOLID,IFCREVOLVEDAREASOLID,IFCEXTRUDEDAREASOLID,IFCSWEPTAREASOLID,IFCSOLIDMODEL,IFCSHELLBASEDSURFACEMODEL,IFCSECTIONEDSPINE,IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE,IFCPOINT,IFCPLANARBOX,IFCPLANAREXTENT,IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT,IFCPLACEMENT,IFCTWODIRECTIONREPEATFACTOR,IFCONEDIRECTIONREPEATFACTOR,IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT,IFCLIGHTSOURCE,IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE,IFCHALFSPACESOLID,IFCGEOMETRICCURVESET,IFCGEOMETRICSET];
InversePropertyDef['IFC2X3'][IFCGEOMETRICREPRESENTATIONITEM] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (d: RawLineData) => { new IFC2X3.IfcGeometricRepresentationSubContext(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcGeometricRepresentationContext>(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new IFC2X3.IfcLabel(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGeometricRepresentationSubContext(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (i:IFC2X3.IfcGeometricRepresentationSubContext):unknown[] => { return [i.ContextIdentifier, i.ContextType, i.CoordinateSpaceDimension, i.Precision, i.WorldCoordinateSystem, i.TrueNorth, i.ParentContext, i.TargetScale, i.TargetView, i.UserDefinedTargetView]; }
InversePropertyDef['IFC2X3'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],['HasSubContexts',IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],];
FromRawLineData['IFC2X3'][IFCGEOMETRICSET] = (d: RawLineData) => { new IFC2X3.IfcGeometricSet(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCGEOMETRICSET] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGeometricSet(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCGEOMETRICSET] = (i:IFC2X3.IfcGeometricSet):unknown[] => { return [i.Elements]; }
InheritanceDef['IFC2X3'][IFCGEOMETRICSET] = [IFCGEOMETRICCURVESET];
InversePropertyDef['IFC2X3'][IFCGEOMETRICSET] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCGRIDPLACEMENT] = (d: RawLineData) => { new IFC2X3.IfcGridPlacement(d.ID, new Reference<IFC2X3.IfcVirtualGridIntersection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcVirtualGridIntersection>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCGRIDPLACEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGridPlacement(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCGRIDPLACEMENT] = (i:IFC2X3.IfcGridPlacement):unknown[] => { return [i.PlacementLocation, i.PlacementRefDirection]; }
InversePropertyDef['IFC2X3'][IFCGRIDPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCLOCALPLACEMENT,0,true],];
FromRawLineData['IFC2X3'][IFCHALFSPACESOLID] = (d: RawLineData) => { new IFC2X3.IfcHalfSpaceSolid(d.ID, new Reference<IFC2X3.IfcSurface>(d.arguments[0].value), d.arguments[1].value); }
Constructors['IFC2X3'][IFCHALFSPACESOLID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcHalfSpaceSolid(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCHALFSPACESOLID] = (i:IFC2X3.IfcHalfSpaceSolid):unknown[] => { return [i.BaseSurface, i.AgreementFlag]; }
InheritanceDef['IFC2X3'][IFCHALFSPACESOLID] = [IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE];
InversePropertyDef['IFC2X3'][IFCHALFSPACESOLID] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCHYGROSCOPICMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcHygroscopicMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcIsothermalMoistureCapacityMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcVaporPermeabilityMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcMoistureDiffusivityMeasure(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCHYGROSCOPICMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcHygroscopicMaterialProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCHYGROSCOPICMATERIALPROPERTIES] = (i:IFC2X3.IfcHygroscopicMaterialProperties):unknown[] => { return [i.Material, i.UpperVaporResistanceFactor, i.LowerVaporResistanceFactor, i.IsothermalMoistureCapacity, i.VaporPermeability, i.MoistureDiffusivity]; }
FromRawLineData['IFC2X3'][IFCIMAGETEXTURE] = (d: RawLineData) => { new IFC2X3.IfcImageTexture(d.ID, d.arguments[0].value, d.arguments[1].value, d.arguments[2], !d.arguments[3] ? null :new Reference<IFC2X3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), new IFC2X3.IfcIdentifier(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCIMAGETEXTURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcImageTexture(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCIMAGETEXTURE] = (i:IFC2X3.IfcImageTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.TextureType, i.TextureTransform, i.UrlReference]; }
FromRawLineData['IFC2X3'][IFCIRREGULARTIMESERIES] = (d: RawLineData) => { new IFC2X3.IfcIrregularTimeSeries(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference(d.arguments[2].value), new Reference(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), d.arguments[8].map((p:any) => new Reference<IFC2X3.IfcIrregularTimeSeriesValue>(p.value))); }
Constructors['IFC2X3'][IFCIRREGULARTIMESERIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcIrregularTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCIRREGULARTIMESERIES] = (i:IFC2X3.IfcIrregularTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit, i.Values]; }
InversePropertyDef['IFC2X3'][IFCIRREGULARTIMESERIES] = [['DocumentedBy',IFCTIMESERIESREFERENCERELATIONSHIP,0,true],];
FromRawLineData['IFC2X3'][IFCLIGHTSOURCE] = (d: RawLineData) => { new IFC2X3.IfcLightSource(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCLIGHTSOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightSource(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCLIGHTSOURCE] = (i:IFC2X3.IfcLightSource):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity]; }
InheritanceDef['IFC2X3'][IFCLIGHTSOURCE] = [IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT];
InversePropertyDef['IFC2X3'][IFCLIGHTSOURCE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCLIGHTSOURCEAMBIENT] = (d: RawLineData) => { new IFC2X3.IfcLightSourceAmbient(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCLIGHTSOURCEAMBIENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightSourceAmbient(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCLIGHTSOURCEAMBIENT] = (i:IFC2X3.IfcLightSourceAmbient):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity]; }
InversePropertyDef['IFC2X3'][IFCLIGHTSOURCEAMBIENT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCLIGHTSOURCEDIRECTIONAL] = (d: RawLineData) => { new IFC2X3.IfcLightSourceDirectional(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC2X3.IfcDirection>(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCLIGHTSOURCEDIRECTIONAL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightSourceDirectional(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCLIGHTSOURCEDIRECTIONAL] = (i:IFC2X3.IfcLightSourceDirectional):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Orientation]; }
InversePropertyDef['IFC2X3'][IFCLIGHTSOURCEDIRECTIONAL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCLIGHTSOURCEGONIOMETRIC] = (d: RawLineData) => { new IFC2X3.IfcLightSourceGoniometric(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcColourRgb>(d.arguments[5].value), new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[6].value), new IFC2X3.IfcLuminousFluxMeasure(d.arguments[7].value), d.arguments[8], new Reference(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCLIGHTSOURCEGONIOMETRIC] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightSourceGoniometric(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCLIGHTSOURCEGONIOMETRIC] = (i:IFC2X3.IfcLightSourceGoniometric):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.ColourAppearance, i.ColourTemperature, i.LuminousFlux, i.LightEmissionSource, i.LightDistributionDataSource]; }
InversePropertyDef['IFC2X3'][IFCLIGHTSOURCEGONIOMETRIC] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCLIGHTSOURCEPOSITIONAL] = (d: RawLineData) => { new IFC2X3.IfcLightSourcePositional(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcReal(d.arguments[6].value), new IFC2X3.IfcReal(d.arguments[7].value), new IFC2X3.IfcReal(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCLIGHTSOURCEPOSITIONAL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightSourcePositional(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCLIGHTSOURCEPOSITIONAL] = (i:IFC2X3.IfcLightSourcePositional):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.Radius, i.ConstantAttenuation, i.DistanceAttenuation, i.QuadricAttenuation]; }
InheritanceDef['IFC2X3'][IFCLIGHTSOURCEPOSITIONAL] = [IFCLIGHTSOURCESPOT];
InversePropertyDef['IFC2X3'][IFCLIGHTSOURCEPOSITIONAL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCLIGHTSOURCESPOT] = (d: RawLineData) => { new IFC2X3.IfcLightSourceSpot(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), new Reference<IFC2X3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcReal(d.arguments[6].value), new IFC2X3.IfcReal(d.arguments[7].value), new IFC2X3.IfcReal(d.arguments[8].value), new Reference<IFC2X3.IfcDirection>(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcReal(d.arguments[10].value), new IFC2X3.IfcPositivePlaneAngleMeasure(d.arguments[11].value), new IFC2X3.IfcPositivePlaneAngleMeasure(d.arguments[12].value)); }
Constructors['IFC2X3'][IFCLIGHTSOURCESPOT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightSourceSpot(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC2X3'][IFCLIGHTSOURCESPOT] = (i:IFC2X3.IfcLightSourceSpot):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.Radius, i.ConstantAttenuation, i.DistanceAttenuation, i.QuadricAttenuation, i.Orientation, i.ConcentrationExponent, i.SpreadAngle, i.BeamWidthAngle]; }
InversePropertyDef['IFC2X3'][IFCLIGHTSOURCESPOT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCLOCALPLACEMENT] = (d: RawLineData) => { new IFC2X3.IfcLocalPlacement(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[0].value), new Reference(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCLOCALPLACEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLocalPlacement(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCLOCALPLACEMENT] = (i:IFC2X3.IfcLocalPlacement):unknown[] => { return [i.PlacementRelTo, i.RelativePlacement]; }
InversePropertyDef['IFC2X3'][IFCLOCALPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCLOCALPLACEMENT,0,true],];
FromRawLineData['IFC2X3'][IFCLOOP] = (d: RawLineData) => { new IFC2X3.IfcLoop(d.ID, ); }
Constructors['IFC2X3'][IFCLOOP] = (expressID:number, _:any) => { return new IFC2X3.IfcLoop(expressID, ); }
ToRawLineData['IFC2X3'][IFCLOOP] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCLOOP] = [IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP];
InversePropertyDef['IFC2X3'][IFCLOOP] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCMAPPEDITEM] = (d: RawLineData) => { new IFC2X3.IfcMappedItem(d.ID, new Reference<IFC2X3.IfcRepresentationMap>(d.arguments[0].value), new Reference<IFC2X3.IfcCartesianTransformationOperator>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCMAPPEDITEM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMappedItem(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCMAPPEDITEM] = (i:IFC2X3.IfcMappedItem):unknown[] => { return [i.MappingSource, i.MappingTarget]; }
InversePropertyDef['IFC2X3'][IFCMAPPEDITEM] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCMATERIALDEFINITIONREPRESENTATION] = (d: RawLineData) => { new IFC2X3.IfcMaterialDefinitionRepresentation(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC2X3.IfcRepresentation>(p.value)), new Reference<IFC2X3.IfcMaterial>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCMATERIALDEFINITIONREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMaterialDefinitionRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCMATERIALDEFINITIONREPRESENTATION] = (i:IFC2X3.IfcMaterialDefinitionRepresentation):unknown[] => { return [i.Name, i.Description, i.Representations, i.RepresentedMaterial]; }
FromRawLineData['IFC2X3'][IFCMECHANICALCONCRETEMATERIALPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcMechanicalConcreteMaterialProperties(d.ID, new Reference<IFC2X3.IfcMaterial>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcDynamicViscosityMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcModulusOfElasticityMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcModulusOfElasticityMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcThermalExpansionCoefficientMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPressureMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcText(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcText(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcText(d.arguments[11].value)); }
Constructors['IFC2X3'][IFCMECHANICALCONCRETEMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMechanicalConcreteMaterialProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCMECHANICALCONCRETEMATERIALPROPERTIES] = (i:IFC2X3.IfcMechanicalConcreteMaterialProperties):unknown[] => { return [i.Material, i.DynamicViscosity, i.YoungModulus, i.ShearModulus, i.PoissonRatio, i.ThermalExpansionCoefficient, i.CompressiveStrength, i.MaxAggregateSize, i.AdmixturesDescription, i.Workability, i.ProtectivePoreRatio, i.WaterImpermeability]; }
FromRawLineData['IFC2X3'][IFCOBJECTDEFINITION] = (d: RawLineData) => { new IFC2X3.IfcObjectDefinition(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCOBJECTDEFINITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcObjectDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCOBJECTDEFINITION] = (i:IFC2X3.IfcObjectDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCOBJECTDEFINITION] = [IFCCONDITION,IFCASSET,IFCZONE,IFCSTRUCTURALANALYSISMODEL,IFCELECTRICALCIRCUIT,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCCONDITIONCRITERION,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCTIMESERIESSCHEDULE,IFCSPACEPROGRAM,IFCSERVICELIFE,IFCSCHEDULETIMECONTROL,IFCPROJECTORDERRECORD,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCFURNITURESTANDARD,IFCEQUIPMENTSTANDARD,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCPROJECT,IFCDISTRIBUTIONPORT,IFCPORT,IFCGRID,IFCELECTRICALELEMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFLOWTREATMENTDEVICE,IFCFLOWTERMINAL,IFCFLOWSTORAGEDEVICE,IFCFLOWSEGMENT,IFCFLOWMOVINGDEVICE,IFCFLOWFITTING,IFCELECTRICDISTRIBUTIONPOINT,IFCFLOWCONTROLLER,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATE,IFCPILE,IFCMEMBER,IFCFOOTING,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMN,IFCBUILDINGELEMENTPROXY,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCBUILDINGELEMENTPART,IFCBUILDINGELEMENTCOMPONENT,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCFURNISHINGELEMENT,IFCCHAMFEREDGEFEATURE,IFCROUNDEDEDGEFEATURE,IFCEDGEFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCEQUIPMENTELEMENT,IFCDISCRETEACCESSORY,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALPLANARACTIONVARYING,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALLINEARACTIONVARYING,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT,IFCPROXY,IFCPRODUCT,IFCPROCEDURE,IFCORDERACTION,IFCMOVE,IFCTASK,IFCPROCESS,IFCOBJECT,IFCVIBRATIONISOLATORTYPE,IFCDISCRETEACCESSORYTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCSENSORTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICHEATERTYPE,IFCELECTRICAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCGASTERMINALTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSPACEHEATERTYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWALLTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCMEMBERTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCDOORSTYLE,IFCWINDOWSTYLE,IFCTYPEPRODUCT,IFCTYPEOBJECT];
InversePropertyDef['IFC2X3'][IFCOBJECTDEFINITION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],];
FromRawLineData['IFC2X3'][IFCONEDIRECTIONREPEATFACTOR] = (d: RawLineData) => { new IFC2X3.IfcOneDirectionRepeatFactor(d.ID, new Reference<IFC2X3.IfcVector>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCONEDIRECTIONREPEATFACTOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOneDirectionRepeatFactor(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCONEDIRECTIONREPEATFACTOR] = (i:IFC2X3.IfcOneDirectionRepeatFactor):unknown[] => { return [i.RepeatFactor]; }
InheritanceDef['IFC2X3'][IFCONEDIRECTIONREPEATFACTOR] = [IFCTWODIRECTIONREPEATFACTOR];
InversePropertyDef['IFC2X3'][IFCONEDIRECTIONREPEATFACTOR] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCOPENSHELL] = (d: RawLineData) => { new IFC2X3.IfcOpenShell(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcFace>(p.value))); }
Constructors['IFC2X3'][IFCOPENSHELL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOpenShell(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCOPENSHELL] = (i:IFC2X3.IfcOpenShell):unknown[] => { return [i.CfsFaces]; }
InversePropertyDef['IFC2X3'][IFCOPENSHELL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCORIENTEDEDGE] = (d: RawLineData) => { new IFC2X3.IfcOrientedEdge(d.ID, new Reference<IFC2X3.IfcEdge>(d.arguments[0].value), d.arguments[1].value); }
Constructors['IFC2X3'][IFCORIENTEDEDGE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOrientedEdge(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCORIENTEDEDGE] = (i:IFC2X3.IfcOrientedEdge):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.EdgeElement, i.Orientation]; }
InversePropertyDef['IFC2X3'][IFCORIENTEDEDGE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPARAMETERIZEDPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcParameterizedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCPARAMETERIZEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcParameterizedProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPARAMETERIZEDPROFILEDEF] = (i:IFC2X3.IfcParameterizedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position]; }
InheritanceDef['IFC2X3'][IFCPARAMETERIZEDPROFILEDEF] = [IFCLSHAPEPROFILEDEF,IFCASYMMETRICISHAPEPROFILEDEF,IFCISHAPEPROFILEDEF,IFCELLIPSEPROFILEDEF,IFCCRANERAILFSHAPEPROFILEDEF,IFCCRANERAILASHAPEPROFILEDEF,IFCCIRCLEHOLLOWPROFILEDEF,IFCCIRCLEPROFILEDEF,IFCCSHAPEPROFILEDEF,IFCZSHAPEPROFILEDEF,IFCUSHAPEPROFILEDEF,IFCTRAPEZIUMPROFILEDEF,IFCTSHAPEPROFILEDEF,IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF,IFCRECTANGLEPROFILEDEF];
FromRawLineData['IFC2X3'][IFCPATH] = (d: RawLineData) => { new IFC2X3.IfcPath(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcOrientedEdge>(p.value))); }
Constructors['IFC2X3'][IFCPATH] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPath(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPATH] = (i:IFC2X3.IfcPath):unknown[] => { return [i.EdgeList]; }
InversePropertyDef['IFC2X3'][IFCPATH] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPHYSICALCOMPLEXQUANTITY] = (d: RawLineData) => { new IFC2X3.IfcPhysicalComplexQuantity(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC2X3.IfcPhysicalQuantity>(p.value)), new IFC2X3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcLabel(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCPHYSICALCOMPLEXQUANTITY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPhysicalComplexQuantity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCPHYSICALCOMPLEXQUANTITY] = (i:IFC2X3.IfcPhysicalComplexQuantity):unknown[] => { return [i.Name, i.Description, i.HasQuantities, i.Discrimination, i.Quality, i.Usage]; }
InversePropertyDef['IFC2X3'][IFCPHYSICALCOMPLEXQUANTITY] = [['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC2X3'][IFCPIXELTEXTURE] = (d: RawLineData) => { new IFC2X3.IfcPixelTexture(d.ID, d.arguments[0].value, d.arguments[1].value, d.arguments[2], !d.arguments[3] ? null :new Reference<IFC2X3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), new IFC2X3.IfcInteger(d.arguments[4].value), new IFC2X3.IfcInteger(d.arguments[5].value), new IFC2X3.IfcInteger(d.arguments[6].value), d.arguments[7].map((p:any) => p.value)); }
Constructors['IFC2X3'][IFCPIXELTEXTURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPixelTexture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCPIXELTEXTURE] = (i:IFC2X3.IfcPixelTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.TextureType, i.TextureTransform, i.Width, i.Height, i.ColourComponents, i.Pixel]; }
FromRawLineData['IFC2X3'][IFCPLACEMENT] = (d: RawLineData) => { new IFC2X3.IfcPlacement(d.ID, new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPLACEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPlacement(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPLACEMENT] = (i:IFC2X3.IfcPlacement):unknown[] => { return [i.Location]; }
InheritanceDef['IFC2X3'][IFCPLACEMENT] = [IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT];
InversePropertyDef['IFC2X3'][IFCPLACEMENT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPLANAREXTENT] = (d: RawLineData) => { new IFC2X3.IfcPlanarExtent(d.ID, new IFC2X3.IfcLengthMeasure(d.arguments[0].value), new IFC2X3.IfcLengthMeasure(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCPLANAREXTENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPlanarExtent(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCPLANAREXTENT] = (i:IFC2X3.IfcPlanarExtent):unknown[] => { return [i.SizeInX, i.SizeInY]; }
InheritanceDef['IFC2X3'][IFCPLANAREXTENT] = [IFCPLANARBOX];
InversePropertyDef['IFC2X3'][IFCPLANAREXTENT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPOINT] = (d: RawLineData) => { new IFC2X3.IfcPoint(d.ID, ); }
Constructors['IFC2X3'][IFCPOINT] = (expressID:number, _:any) => { return new IFC2X3.IfcPoint(expressID, ); }
ToRawLineData['IFC2X3'][IFCPOINT] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCPOINT] = [IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE];
InversePropertyDef['IFC2X3'][IFCPOINT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPOINTONCURVE] = (d: RawLineData) => { new IFC2X3.IfcPointOnCurve(d.ID, new Reference<IFC2X3.IfcCurve>(d.arguments[0].value), new IFC2X3.IfcParameterValue(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCPOINTONCURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPointOnCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCPOINTONCURVE] = (i:IFC2X3.IfcPointOnCurve):unknown[] => { return [i.BasisCurve, i.PointParameter]; }
InversePropertyDef['IFC2X3'][IFCPOINTONCURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPOINTONSURFACE] = (d: RawLineData) => { new IFC2X3.IfcPointOnSurface(d.ID, new Reference<IFC2X3.IfcSurface>(d.arguments[0].value), new IFC2X3.IfcParameterValue(d.arguments[1].value), new IFC2X3.IfcParameterValue(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCPOINTONSURFACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPointOnSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPOINTONSURFACE] = (i:IFC2X3.IfcPointOnSurface):unknown[] => { return [i.BasisSurface, i.PointParameterU, i.PointParameterV]; }
InversePropertyDef['IFC2X3'][IFCPOINTONSURFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPOLYLOOP] = (d: RawLineData) => { new IFC2X3.IfcPolyLoop(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcCartesianPoint>(p.value))); }
Constructors['IFC2X3'][IFCPOLYLOOP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPolyLoop(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPOLYLOOP] = (i:IFC2X3.IfcPolyLoop):unknown[] => { return [i.Polygon]; }
InversePropertyDef['IFC2X3'][IFCPOLYLOOP] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPOLYGONALBOUNDEDHALFSPACE] = (d: RawLineData) => { new IFC2X3.IfcPolygonalBoundedHalfSpace(d.ID, new Reference<IFC2X3.IfcSurface>(d.arguments[0].value), d.arguments[1].value, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[2].value), new Reference<IFC2X3.IfcBoundedCurve>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPOLYGONALBOUNDEDHALFSPACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPolygonalBoundedHalfSpace(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPOLYGONALBOUNDEDHALFSPACE] = (i:IFC2X3.IfcPolygonalBoundedHalfSpace):unknown[] => { return [i.BaseSurface, i.AgreementFlag, i.Position, i.PolygonalBoundary]; }
InversePropertyDef['IFC2X3'][IFCPOLYGONALBOUNDEDHALFSPACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPREDEFINEDCOLOUR] = (d: RawLineData) => { new IFC2X3.IfcPreDefinedColour(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPREDEFINEDCOLOUR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPreDefinedColour(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPREDEFINEDCOLOUR] = (i:IFC2X3.IfcPreDefinedColour):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCPREDEFINEDCOLOUR] = [IFCDRAUGHTINGPREDEFINEDCOLOUR];
FromRawLineData['IFC2X3'][IFCPREDEFINEDCURVEFONT] = (d: RawLineData) => { new IFC2X3.IfcPreDefinedCurveFont(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPREDEFINEDCURVEFONT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPreDefinedCurveFont(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPREDEFINEDCURVEFONT] = (i:IFC2X3.IfcPreDefinedCurveFont):unknown[] => { return [i.Name]; }
InheritanceDef['IFC2X3'][IFCPREDEFINEDCURVEFONT] = [IFCDRAUGHTINGPREDEFINEDCURVEFONT];
FromRawLineData['IFC2X3'][IFCPREDEFINEDDIMENSIONSYMBOL] = (d: RawLineData) => { new IFC2X3.IfcPreDefinedDimensionSymbol(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPREDEFINEDDIMENSIONSYMBOL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPreDefinedDimensionSymbol(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPREDEFINEDDIMENSIONSYMBOL] = (i:IFC2X3.IfcPreDefinedDimensionSymbol):unknown[] => { return [i.Name]; }
FromRawLineData['IFC2X3'][IFCPREDEFINEDPOINTMARKERSYMBOL] = (d: RawLineData) => { new IFC2X3.IfcPreDefinedPointMarkerSymbol(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPREDEFINEDPOINTMARKERSYMBOL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPreDefinedPointMarkerSymbol(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPREDEFINEDPOINTMARKERSYMBOL] = (i:IFC2X3.IfcPreDefinedPointMarkerSymbol):unknown[] => { return [i.Name]; }
FromRawLineData['IFC2X3'][IFCPRODUCTDEFINITIONSHAPE] = (d: RawLineData) => { new IFC2X3.IfcProductDefinitionShape(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC2X3.IfcRepresentation>(p.value))); }
Constructors['IFC2X3'][IFCPRODUCTDEFINITIONSHAPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProductDefinitionShape(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPRODUCTDEFINITIONSHAPE] = (i:IFC2X3.IfcProductDefinitionShape):unknown[] => { return [i.Name, i.Description, i.Representations]; }
InversePropertyDef['IFC2X3'][IFCPRODUCTDEFINITIONSHAPE] = [['ShapeOfProduct',IFCPRODUCT,6,true],['HasShapeAspects',IFCSHAPEASPECT,4,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYBOUNDEDVALUE] = (d: RawLineData) => { new IFC2X3.IfcPropertyBoundedValue(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC2X3',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC2X3',d.arguments[3]), !d.arguments[4] ? null :new Reference(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCPROPERTYBOUNDEDVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyBoundedValue(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCPROPERTYBOUNDEDVALUE] = (i:IFC2X3.IfcPropertyBoundedValue):unknown[] => { return [i.Name, i.Description, !i.UpperBoundValue ? null :Labelise(i.UpperBoundValue), !i.LowerBoundValue ? null :Labelise(i.LowerBoundValue), i.Unit]; }
InversePropertyDef['IFC2X3'][IFCPROPERTYBOUNDEDVALUE] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYDEFINITION] = (d: RawLineData) => { new IFC2X3.IfcPropertyDefinition(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPROPERTYDEFINITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPROPERTYDEFINITION] = (i:IFC2X3.IfcPropertyDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCPROPERTYDEFINITION] = [IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCFLUIDFLOWPROPERTIES,IFCELECTRICALBASEPROPERTIES,IFCENERGYPROPERTIES,IFCELEMENTQUANTITY,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCSPACETHERMALLOADPROPERTIES,IFCSOUNDVALUE,IFCSOUNDPROPERTIES,IFCSERVICELIFEFACTOR,IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCPROPERTYSETDEFINITION];
InversePropertyDef['IFC2X3'][IFCPROPERTYDEFINITION] = [['HasAssociations',IFCRELASSOCIATES,4,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYENUMERATEDVALUE] = (d: RawLineData) => { new IFC2X3.IfcPropertyEnumeratedValue(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => TypeInitialiser('IFC2X3',p)), !d.arguments[3] ? null :new Reference<IFC2X3.IfcPropertyEnumeration>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPROPERTYENUMERATEDVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyEnumeratedValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPROPERTYENUMERATEDVALUE] = (i:IFC2X3.IfcPropertyEnumeratedValue):unknown[] => { return [i.Name, i.Description, i.EnumerationValues.map((p:any) => Labelise(p)), i.EnumerationReference]; }
InversePropertyDef['IFC2X3'][IFCPROPERTYENUMERATEDVALUE] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYLISTVALUE] = (d: RawLineData) => { new IFC2X3.IfcPropertyListValue(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => TypeInitialiser('IFC2X3',p)), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPROPERTYLISTVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyListValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPROPERTYLISTVALUE] = (i:IFC2X3.IfcPropertyListValue):unknown[] => { return [i.Name, i.Description, i.ListValues.map((p:any) => Labelise(p)), i.Unit]; }
InversePropertyDef['IFC2X3'][IFCPROPERTYLISTVALUE] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYREFERENCEVALUE] = (d: RawLineData) => { new IFC2X3.IfcPropertyReferenceValue(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), new Reference(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPROPERTYREFERENCEVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyReferenceValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPROPERTYREFERENCEVALUE] = (i:IFC2X3.IfcPropertyReferenceValue):unknown[] => { return [i.Name, i.Description, i.UsageName, i.PropertyReference]; }
InversePropertyDef['IFC2X3'][IFCPROPERTYREFERENCEVALUE] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYSETDEFINITION] = (d: RawLineData) => { new IFC2X3.IfcPropertySetDefinition(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPROPERTYSETDEFINITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertySetDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPROPERTYSETDEFINITION] = (i:IFC2X3.IfcPropertySetDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCPROPERTYSETDEFINITION] = [IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCFLUIDFLOWPROPERTIES,IFCELECTRICALBASEPROPERTIES,IFCENERGYPROPERTIES,IFCELEMENTQUANTITY,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCSPACETHERMALLOADPROPERTIES,IFCSOUNDVALUE,IFCSOUNDPROPERTIES,IFCSERVICELIFEFACTOR,IFCREINFORCEMENTDEFINITIONPROPERTIES];
InversePropertyDef['IFC2X3'][IFCPROPERTYSETDEFINITION] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYSINGLEVALUE] = (d: RawLineData) => { new IFC2X3.IfcPropertySingleValue(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC2X3',d.arguments[2]), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCPROPERTYSINGLEVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertySingleValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCPROPERTYSINGLEVALUE] = (i:IFC2X3.IfcPropertySingleValue):unknown[] => { return [i.Name, i.Description, !i.NominalValue ? null :Labelise(i.NominalValue), i.Unit]; }
InversePropertyDef['IFC2X3'][IFCPROPERTYSINGLEVALUE] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYTABLEVALUE] = (d: RawLineData) => { new IFC2X3.IfcPropertyTableValue(d.ID, new IFC2X3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => TypeInitialiser('IFC2X3',p)), d.arguments[3].map((p:any) => TypeInitialiser('IFC2X3',p)), !d.arguments[4] ? null :new IFC2X3.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCPROPERTYTABLEVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertyTableValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCPROPERTYTABLEVALUE] = (i:IFC2X3.IfcPropertyTableValue):unknown[] => { return [i.Name, i.Description, i.DefiningValues.map((p:any) => Labelise(p)), i.DefinedValues.map((p:any) => Labelise(p)), i.Expression, i.DefiningUnit, i.DefinedUnit]; }
InversePropertyDef['IFC2X3'][IFCPROPERTYTABLEVALUE] = [['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,0,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,1,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],];
FromRawLineData['IFC2X3'][IFCRECTANGLEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcRectangleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCRECTANGLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRectangleProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCRECTANGLEPROFILEDEF] = (i:IFC2X3.IfcRectangleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim]; }
InheritanceDef['IFC2X3'][IFCRECTANGLEPROFILEDEF] = [IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF];
FromRawLineData['IFC2X3'][IFCREGULARTIMESERIES] = (d: RawLineData) => { new IFC2X3.IfcRegularTimeSeries(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcText(d.arguments[1].value), new Reference(d.arguments[2].value), new Reference(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), new IFC2X3.IfcTimeMeasure(d.arguments[8].value), d.arguments[9].map((p:any) => new Reference<IFC2X3.IfcTimeSeriesValue>(p.value))); }
Constructors['IFC2X3'][IFCREGULARTIMESERIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRegularTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCREGULARTIMESERIES] = (i:IFC2X3.IfcRegularTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit, i.TimeStep, i.Values]; }
InversePropertyDef['IFC2X3'][IFCREGULARTIMESERIES] = [['DocumentedBy',IFCTIMESERIESREFERENCERELATIONSHIP,0,true],];
FromRawLineData['IFC2X3'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcReinforcementDefinitionProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcSectionReinforcementProperties>(p.value))); }
Constructors['IFC2X3'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcReinforcementDefinitionProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (i:IFC2X3.IfcReinforcementDefinitionProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.DefinitionType, i.ReinforcementSectionDefinitions]; }
InversePropertyDef['IFC2X3'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCRELATIONSHIP] = (d: RawLineData) => { new IFC2X3.IfcRelationship(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCRELATIONSHIP] = (i:IFC2X3.IfcRelationship):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCRELATIONSHIP] = [IFCRELDEFINESBYTYPE,IFCRELOVERRIDESPROPERTIES,IFCRELDEFINESBYPROPERTIES,IFCRELDEFINES,IFCRELAGGREGATES,IFCRELNESTS,IFCRELDECOMPOSES,IFCRELVOIDSELEMENT,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELPROJECTSELEMENT,IFCRELINTERACTIONREQUIREMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALELEMENT,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS,IFCRELCONNECTS,IFCRELASSOCIATESPROFILEPROPERTIES,IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL,IFCRELASSOCIATESAPPLIEDVALUE,IFCRELASSOCIATES,IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTASKS,IFCRELSCHEDULESCOSTITEMS,IFCRELASSIGNSTOPROJECTORDER,IFCRELASSIGNSTOCONTROL,IFCRELOCCUPIESSPACES,IFCRELASSIGNSTOACTOR,IFCRELASSIGNS];
FromRawLineData['IFC2X3'][IFCROUNDEDRECTANGLEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcRoundedRectangleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCROUNDEDRECTANGLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRoundedRectangleProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCROUNDEDRECTANGLEPROFILEDEF] = (i:IFC2X3.IfcRoundedRectangleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim, i.RoundingRadius]; }
FromRawLineData['IFC2X3'][IFCSECTIONEDSPINE] = (d: RawLineData) => { new IFC2X3.IfcSectionedSpine(d.ID, new Reference<IFC2X3.IfcCompositeCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcProfileDef>(p.value)), d.arguments[2].map((p:any) => new Reference<IFC2X3.IfcAxis2Placement3D>(p.value))); }
Constructors['IFC2X3'][IFCSECTIONEDSPINE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSectionedSpine(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCSECTIONEDSPINE] = (i:IFC2X3.IfcSectionedSpine):unknown[] => { return [i.SpineCurve, i.CrossSections, i.CrossSectionPositions]; }
InversePropertyDef['IFC2X3'][IFCSECTIONEDSPINE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSERVICELIFEFACTOR] = (d: RawLineData) => { new IFC2X3.IfcServiceLifeFactor(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :TypeInitialiser('IFC2X3',d.arguments[5]), TypeInitialiser('IFC2X3',d.arguments[6]), !d.arguments[7] ? null :TypeInitialiser('IFC2X3',d.arguments[7])); }
Constructors['IFC2X3'][IFCSERVICELIFEFACTOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcServiceLifeFactor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSERVICELIFEFACTOR] = (i:IFC2X3.IfcServiceLifeFactor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.PredefinedType, !i.UpperValue ? null :Labelise(i.UpperValue), Labelise(i.MostUsedValue), !i.LowerValue ? null :Labelise(i.LowerValue)]; }
InversePropertyDef['IFC2X3'][IFCSERVICELIFEFACTOR] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCSHELLBASEDSURFACEMODEL] = (d: RawLineData) => { new IFC2X3.IfcShellBasedSurfaceModel(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCSHELLBASEDSURFACEMODEL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcShellBasedSurfaceModel(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCSHELLBASEDSURFACEMODEL] = (i:IFC2X3.IfcShellBasedSurfaceModel):unknown[] => { return [i.SbsmBoundary]; }
InversePropertyDef['IFC2X3'][IFCSHELLBASEDSURFACEMODEL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSLIPPAGECONNECTIONCONDITION] = (d: RawLineData) => { new IFC2X3.IfcSlippageConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCSLIPPAGECONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSlippageConnectionCondition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSLIPPAGECONNECTIONCONDITION] = (i:IFC2X3.IfcSlippageConnectionCondition):unknown[] => { return [i.Name, i.SlippageX, i.SlippageY, i.SlippageZ]; }
FromRawLineData['IFC2X3'][IFCSOLIDMODEL] = (d: RawLineData) => { new IFC2X3.IfcSolidModel(d.ID, ); }
Constructors['IFC2X3'][IFCSOLIDMODEL] = (expressID:number, _:any) => { return new IFC2X3.IfcSolidModel(expressID, ); }
ToRawLineData['IFC2X3'][IFCSOLIDMODEL] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCSOLIDMODEL] = [IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLID,IFCSURFACECURVESWEPTAREASOLID,IFCREVOLVEDAREASOLID,IFCEXTRUDEDAREASOLID,IFCSWEPTAREASOLID];
InversePropertyDef['IFC2X3'][IFCSOLIDMODEL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSOUNDPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcSoundProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new IFC2X3.IfcBoolean(d.arguments[4].value), d.arguments[5], d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcSoundValue>(p.value))); }
Constructors['IFC2X3'][IFCSOUNDPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSoundProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCSOUNDPROPERTIES] = (i:IFC2X3.IfcSoundProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.IsAttenuating, i.SoundScale, i.SoundValues]; }
InversePropertyDef['IFC2X3'][IFCSOUNDPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCSOUNDVALUE] = (d: RawLineData) => { new IFC2X3.IfcSoundValue(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC2X3.IfcTimeSeries>(d.arguments[4].value), new IFC2X3.IfcFrequencyMeasure(d.arguments[5].value), !d.arguments[6] ? null :TypeInitialiser('IFC2X3',d.arguments[6])); }
Constructors['IFC2X3'][IFCSOUNDVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSoundValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCSOUNDVALUE] = (i:IFC2X3.IfcSoundValue):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.SoundLevelTimeSeries, i.Frequency, !i.SoundLevelSingleValue ? null :Labelise(i.SoundLevelSingleValue)]; }
InversePropertyDef['IFC2X3'][IFCSOUNDVALUE] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCSPACETHERMALLOADPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcSpaceThermalLoadProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[4].value), d.arguments[5], d.arguments[6], !d.arguments[7] ? null :new IFC2X3.IfcText(d.arguments[7].value), new IFC2X3.IfcPowerMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPowerMeasure(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC2X3.IfcTimeSeries>(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcLabel(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcLabel(d.arguments[12].value), d.arguments[13]); }
Constructors['IFC2X3'][IFCSPACETHERMALLOADPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSpaceThermalLoadProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC2X3'][IFCSPACETHERMALLOADPROPERTIES] = (i:IFC2X3.IfcSpaceThermalLoadProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableValueRatio, i.ThermalLoadSource, i.PropertySource, i.SourceDescription, i.MaximumValue, i.MinimumValue, i.ThermalLoadTimeSeriesValues, i.UserDefinedThermalLoadSource, i.UserDefinedPropertySource, i.ThermalLoadType]; }
InversePropertyDef['IFC2X3'][IFCSPACETHERMALLOADPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADLINEARFORCE] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadLinearForce(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLinearForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLinearForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLinearForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLinearMomentMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcLinearMomentMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLinearMomentMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADLINEARFORCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadLinearForce(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADLINEARFORCE] = (i:IFC2X3.IfcStructuralLoadLinearForce):unknown[] => { return [i.Name, i.LinearForceX, i.LinearForceY, i.LinearForceZ, i.LinearMomentX, i.LinearMomentY, i.LinearMomentZ]; }
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADPLANARFORCE] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadPlanarForce(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcPlanarForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcPlanarForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPlanarForceMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADPLANARFORCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadPlanarForce(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADPLANARFORCE] = (i:IFC2X3.IfcStructuralLoadPlanarForce):unknown[] => { return [i.Name, i.PlanarForceX, i.PlanarForceY, i.PlanarForceZ]; }
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadSingleDisplacement(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadSingleDisplacement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (i:IFC2X3.IfcStructuralLoadSingleDisplacement):unknown[] => { return [i.Name, i.DisplacementX, i.DisplacementY, i.DisplacementZ, i.RotationalDisplacementRX, i.RotationalDisplacementRY, i.RotationalDisplacementRZ]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = [IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadSingleDisplacementDistortion(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcCurvatureMeasure(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadSingleDisplacementDistortion(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (i:IFC2X3.IfcStructuralLoadSingleDisplacementDistortion):unknown[] => { return [i.Name, i.DisplacementX, i.DisplacementY, i.DisplacementZ, i.RotationalDisplacementRX, i.RotationalDisplacementRY, i.RotationalDisplacementRZ, i.Distortion]; }
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADSINGLEFORCE] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadSingleForce(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcTorqueMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcTorqueMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcTorqueMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADSINGLEFORCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadSingleForce(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADSINGLEFORCE] = (i:IFC2X3.IfcStructuralLoadSingleForce):unknown[] => { return [i.Name, i.ForceX, i.ForceY, i.ForceZ, i.MomentX, i.MomentY, i.MomentZ]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALLOADSINGLEFORCE] = [IFCSTRUCTURALLOADSINGLEFORCEWARPING];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadSingleForceWarping(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcTorqueMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcTorqueMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcTorqueMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcWarpingMomentMeasure(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadSingleForceWarping(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (i:IFC2X3.IfcStructuralLoadSingleForceWarping):unknown[] => { return [i.Name, i.ForceX, i.ForceY, i.ForceZ, i.MomentX, i.MomentY, i.MomentZ, i.WarpingMoment]; }
FromRawLineData['IFC2X3'][IFCSTRUCTURALPROFILEPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcStructuralProfileProperties(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcProfileDef>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcMassPerLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcMomentOfInertiaMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcMomentOfInertiaMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcMomentOfInertiaMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcMomentOfInertiaMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcWarpingConstantMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[16].value), !d.arguments[17] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[17].value), !d.arguments[18] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[18].value), !d.arguments[19] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[19].value), !d.arguments[20] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[20].value), !d.arguments[21] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[21].value), !d.arguments[22] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[22].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALPROFILEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralProfileProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19], args[20], args[21], args[22]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALPROFILEPROPERTIES] = (i:IFC2X3.IfcStructuralProfileProperties):unknown[] => { return [i.ProfileName, i.ProfileDefinition, i.PhysicalWeight, i.Perimeter, i.MinimumPlateThickness, i.MaximumPlateThickness, i.CrossSectionArea, i.TorsionalConstantX, i.MomentOfInertiaYZ, i.MomentOfInertiaY, i.MomentOfInertiaZ, i.WarpingConstant, i.ShearCentreZ, i.ShearCentreY, i.ShearDeformationAreaZ, i.ShearDeformationAreaY, i.MaximumSectionModulusY, i.MinimumSectionModulusY, i.MaximumSectionModulusZ, i.MinimumSectionModulusZ, i.TorsionalSectionModulus, i.CentreOfGravityInX, i.CentreOfGravityInY]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALPROFILEPROPERTIES] = [IFCSTRUCTURALSTEELPROFILEPROPERTIES];
FromRawLineData['IFC2X3'][IFCSTRUCTURALSTEELPROFILEPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcStructuralSteelProfileProperties(d.ID, !d.arguments[0] ? null :new IFC2X3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcProfileDef>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcMassPerLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcMomentOfInertiaMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcMomentOfInertiaMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcMomentOfInertiaMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcMomentOfInertiaMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcWarpingConstantMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[16].value), !d.arguments[17] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[17].value), !d.arguments[18] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[18].value), !d.arguments[19] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[19].value), !d.arguments[20] ? null :new IFC2X3.IfcSectionModulusMeasure(d.arguments[20].value), !d.arguments[21] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[21].value), !d.arguments[22] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[22].value), !d.arguments[23] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[23].value), !d.arguments[24] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[24].value), !d.arguments[25] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[25].value), !d.arguments[26] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[26].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALSTEELPROFILEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralSteelProfileProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19], args[20], args[21], args[22], args[23], args[24], args[25], args[26]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALSTEELPROFILEPROPERTIES] = (i:IFC2X3.IfcStructuralSteelProfileProperties):unknown[] => { return [i.ProfileName, i.ProfileDefinition, i.PhysicalWeight, i.Perimeter, i.MinimumPlateThickness, i.MaximumPlateThickness, i.CrossSectionArea, i.TorsionalConstantX, i.MomentOfInertiaYZ, i.MomentOfInertiaY, i.MomentOfInertiaZ, i.WarpingConstant, i.ShearCentreZ, i.ShearCentreY, i.ShearDeformationAreaZ, i.ShearDeformationAreaY, i.MaximumSectionModulusY, i.MinimumSectionModulusY, i.MaximumSectionModulusZ, i.MinimumSectionModulusZ, i.TorsionalSectionModulus, i.CentreOfGravityInX, i.CentreOfGravityInY, i.ShearAreaZ, i.ShearAreaY, i.PlasticShapeFactorY, i.PlasticShapeFactorZ]; }
FromRawLineData['IFC2X3'][IFCSUBEDGE] = (d: RawLineData) => { new IFC2X3.IfcSubedge(d.ID, new Reference<IFC2X3.IfcVertex>(d.arguments[0].value), new Reference<IFC2X3.IfcVertex>(d.arguments[1].value), new Reference<IFC2X3.IfcEdge>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCSUBEDGE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSubedge(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCSUBEDGE] = (i:IFC2X3.IfcSubedge):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.ParentEdge]; }
InversePropertyDef['IFC2X3'][IFCSUBEDGE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSURFACE] = (d: RawLineData) => { new IFC2X3.IfcSurface(d.ID, ); }
Constructors['IFC2X3'][IFCSURFACE] = (expressID:number, _:any) => { return new IFC2X3.IfcSurface(expressID, ); }
ToRawLineData['IFC2X3'][IFCSURFACE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCSURFACE] = [IFCPLANE,IFCELEMENTARYSURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE];
InversePropertyDef['IFC2X3'][IFCSURFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSURFACESTYLERENDERING] = (d: RawLineData) => { new IFC2X3.IfcSurfaceStyleRendering(d.ID, new Reference<IFC2X3.IfcColourRgb>(d.arguments[0].value), !d.arguments[1] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference(d.arguments[6].value), !d.arguments[7] ? null :TypeInitialiser('IFC2X3',d.arguments[7]), d.arguments[8]); }
Constructors['IFC2X3'][IFCSURFACESTYLERENDERING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceStyleRendering(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSURFACESTYLERENDERING] = (i:IFC2X3.IfcSurfaceStyleRendering):unknown[] => { return [i.SurfaceColour, i.Transparency, i.DiffuseColour, i.TransmissionColour, i.DiffuseTransmissionColour, i.ReflectionColour, i.SpecularColour, !i.SpecularHighlight ? null :Labelise(i.SpecularHighlight), i.ReflectanceMethod]; }
FromRawLineData['IFC2X3'][IFCSWEPTAREASOLID] = (d: RawLineData) => { new IFC2X3.IfcSweptAreaSolid(d.ID, new Reference<IFC2X3.IfcProfileDef>(d.arguments[0].value), new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCSWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSweptAreaSolid(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCSWEPTAREASOLID] = (i:IFC2X3.IfcSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position]; }
InheritanceDef['IFC2X3'][IFCSWEPTAREASOLID] = [IFCSURFACECURVESWEPTAREASOLID,IFCREVOLVEDAREASOLID,IFCEXTRUDEDAREASOLID];
InversePropertyDef['IFC2X3'][IFCSWEPTAREASOLID] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSWEPTDISKSOLID] = (d: RawLineData) => { new IFC2X3.IfcSweptDiskSolid(d.ID, new Reference<IFC2X3.IfcCurve>(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC2X3.IfcParameterValue(d.arguments[3].value), new IFC2X3.IfcParameterValue(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCSWEPTDISKSOLID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSweptDiskSolid(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCSWEPTDISKSOLID] = (i:IFC2X3.IfcSweptDiskSolid):unknown[] => { return [i.Directrix, i.Radius, i.InnerRadius, i.StartParam, i.EndParam]; }
InversePropertyDef['IFC2X3'][IFCSWEPTDISKSOLID] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSWEPTSURFACE] = (d: RawLineData) => { new IFC2X3.IfcSweptSurface(d.ID, new Reference<IFC2X3.IfcProfileDef>(d.arguments[0].value), new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCSWEPTSURFACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSweptSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCSWEPTSURFACE] = (i:IFC2X3.IfcSweptSurface):unknown[] => { return [i.SweptCurve, i.Position]; }
InheritanceDef['IFC2X3'][IFCSWEPTSURFACE] = [IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION];
InversePropertyDef['IFC2X3'][IFCSWEPTSURFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCTSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcTShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[12].value)); }
Constructors['IFC2X3'][IFCTSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC2X3'][IFCTSHAPEPROFILEDEF] = (i:IFC2X3.IfcTShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.FlangeEdgeRadius, i.WebEdgeRadius, i.WebSlope, i.FlangeSlope, i.CentreOfGravityInY]; }
FromRawLineData['IFC2X3'][IFCTERMINATORSYMBOL] = (d: RawLineData) => { new IFC2X3.IfcTerminatorSymbol(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), new Reference<IFC2X3.IfcAnnotationCurveOccurrence>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCTERMINATORSYMBOL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTerminatorSymbol(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCTERMINATORSYMBOL] = (i:IFC2X3.IfcTerminatorSymbol):unknown[] => { return [i.Item, i.Styles, i.Name, i.AnnotatedCurve]; }
InheritanceDef['IFC2X3'][IFCTERMINATORSYMBOL] = [IFCDIMENSIONCURVETERMINATOR];
InversePropertyDef['IFC2X3'][IFCTERMINATORSYMBOL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCTEXTLITERAL] = (d: RawLineData) => { new IFC2X3.IfcTextLiteral(d.ID, new IFC2X3.IfcPresentableText(d.arguments[0].value), new Reference(d.arguments[1].value), d.arguments[2]); }
Constructors['IFC2X3'][IFCTEXTLITERAL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextLiteral(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCTEXTLITERAL] = (i:IFC2X3.IfcTextLiteral):unknown[] => { return [i.Literal, i.Placement, i.Path]; }
InheritanceDef['IFC2X3'][IFCTEXTLITERAL] = [IFCTEXTLITERALWITHEXTENT];
InversePropertyDef['IFC2X3'][IFCTEXTLITERAL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCTEXTLITERALWITHEXTENT] = (d: RawLineData) => { new IFC2X3.IfcTextLiteralWithExtent(d.ID, new IFC2X3.IfcPresentableText(d.arguments[0].value), new Reference(d.arguments[1].value), d.arguments[2], new Reference<IFC2X3.IfcPlanarExtent>(d.arguments[3].value), new IFC2X3.IfcBoxAlignment(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCTEXTLITERALWITHEXTENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTextLiteralWithExtent(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCTEXTLITERALWITHEXTENT] = (i:IFC2X3.IfcTextLiteralWithExtent):unknown[] => { return [i.Literal, i.Placement, i.Path, i.Extent, i.BoxAlignment]; }
InversePropertyDef['IFC2X3'][IFCTEXTLITERALWITHEXTENT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCTRAPEZIUMPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcTrapeziumProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcLengthMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCTRAPEZIUMPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTrapeziumProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCTRAPEZIUMPROFILEDEF] = (i:IFC2X3.IfcTrapeziumProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.BottomXDim, i.TopXDim, i.YDim, i.TopXOffset]; }
FromRawLineData['IFC2X3'][IFCTWODIRECTIONREPEATFACTOR] = (d: RawLineData) => { new IFC2X3.IfcTwoDirectionRepeatFactor(d.ID, new Reference<IFC2X3.IfcVector>(d.arguments[0].value), new Reference<IFC2X3.IfcVector>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCTWODIRECTIONREPEATFACTOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTwoDirectionRepeatFactor(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCTWODIRECTIONREPEATFACTOR] = (i:IFC2X3.IfcTwoDirectionRepeatFactor):unknown[] => { return [i.RepeatFactor, i.SecondRepeatFactor]; }
InversePropertyDef['IFC2X3'][IFCTWODIRECTIONREPEATFACTOR] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCTYPEOBJECT] = (d: RawLineData) => { new IFC2X3.IfcTypeObject(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value))); }
Constructors['IFC2X3'][IFCTYPEOBJECT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTypeObject(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCTYPEOBJECT] = (i:IFC2X3.IfcTypeObject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets]; }
InheritanceDef['IFC2X3'][IFCTYPEOBJECT] = [IFCVIBRATIONISOLATORTYPE,IFCDISCRETEACCESSORYTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCSENSORTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICHEATERTYPE,IFCELECTRICAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCGASTERMINALTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSPACEHEATERTYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWALLTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCMEMBERTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCDOORSTYLE,IFCWINDOWSTYLE,IFCTYPEPRODUCT];
InversePropertyDef['IFC2X3'][IFCTYPEOBJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCTYPEPRODUCT] = (d: RawLineData) => { new IFC2X3.IfcTypeProduct(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCTYPEPRODUCT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTypeProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCTYPEPRODUCT] = (i:IFC2X3.IfcTypeProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag]; }
InheritanceDef['IFC2X3'][IFCTYPEPRODUCT] = [IFCVIBRATIONISOLATORTYPE,IFCDISCRETEACCESSORYTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCSENSORTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICHEATERTYPE,IFCELECTRICAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCGASTERMINALTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSPACEHEATERTYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWALLTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCMEMBERTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCDOORSTYLE,IFCWINDOWSTYLE];
InversePropertyDef['IFC2X3'][IFCTYPEPRODUCT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCUSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcUShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCUSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcUShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCUSHAPEPROFILEDEF] = (i:IFC2X3.IfcUShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.EdgeRadius, i.FlangeSlope, i.CentreOfGravityInX]; }
FromRawLineData['IFC2X3'][IFCVECTOR] = (d: RawLineData) => { new IFC2X3.IfcVector(d.ID, new Reference<IFC2X3.IfcDirection>(d.arguments[0].value), new IFC2X3.IfcLengthMeasure(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCVECTOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcVector(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCVECTOR] = (i:IFC2X3.IfcVector):unknown[] => { return [i.Orientation, i.Magnitude]; }
InversePropertyDef['IFC2X3'][IFCVECTOR] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCVERTEXLOOP] = (d: RawLineData) => { new IFC2X3.IfcVertexLoop(d.ID, new Reference<IFC2X3.IfcVertex>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCVERTEXLOOP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcVertexLoop(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCVERTEXLOOP] = (i:IFC2X3.IfcVertexLoop):unknown[] => { return [i.LoopVertex]; }
InversePropertyDef['IFC2X3'][IFCVERTEXLOOP] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCWINDOWLININGPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcWindowLiningProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[11].value), !d.arguments[12] ? null :new Reference<IFC2X3.IfcShapeAspect>(d.arguments[12].value)); }
Constructors['IFC2X3'][IFCWINDOWLININGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWindowLiningProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC2X3'][IFCWINDOWLININGPROPERTIES] = (i:IFC2X3.IfcWindowLiningProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.LiningDepth, i.LiningThickness, i.TransomThickness, i.MullionThickness, i.FirstTransomOffset, i.SecondTransomOffset, i.FirstMullionOffset, i.SecondMullionOffset, i.ShapeAspectStyle]; }
InversePropertyDef['IFC2X3'][IFCWINDOWLININGPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCWINDOWPANELPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcWindowPanelProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC2X3.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCWINDOWPANELPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWindowPanelProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCWINDOWPANELPROPERTIES] = (i:IFC2X3.IfcWindowPanelProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.OperationType, i.PanelPosition, i.FrameDepth, i.FrameThickness, i.ShapeAspectStyle]; }
InversePropertyDef['IFC2X3'][IFCWINDOWPANELPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCWINDOWSTYLE] = (d: RawLineData) => { new IFC2X3.IfcWindowStyle(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], d.arguments[10].value, d.arguments[11].value); }
Constructors['IFC2X3'][IFCWINDOWSTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWindowStyle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCWINDOWSTYLE] = (i:IFC2X3.IfcWindowStyle):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ConstructionType, i.OperationType, i.ParameterTakesPrecedence, i.Sizeable]; }
InversePropertyDef['IFC2X3'][IFCWINDOWSTYLE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCZSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcZShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCZSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcZShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCZSHAPEPROFILEDEF] = (i:IFC2X3.IfcZShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.EdgeRadius]; }
FromRawLineData['IFC2X3'][IFCANNOTATIONCURVEOCCURRENCE] = (d: RawLineData) => { new IFC2X3.IfcAnnotationCurveOccurrence(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCANNOTATIONCURVEOCCURRENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotationCurveOccurrence(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCANNOTATIONCURVEOCCURRENCE] = (i:IFC2X3.IfcAnnotationCurveOccurrence):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InheritanceDef['IFC2X3'][IFCANNOTATIONCURVEOCCURRENCE] = [IFCPROJECTIONCURVE,IFCDIMENSIONCURVE];
InversePropertyDef['IFC2X3'][IFCANNOTATIONCURVEOCCURRENCE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCANNOTATIONFILLAREA] = (d: RawLineData) => { new IFC2X3.IfcAnnotationFillArea(d.ID, new Reference<IFC2X3.IfcCurve>(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcCurve>(p.value))); }
Constructors['IFC2X3'][IFCANNOTATIONFILLAREA] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotationFillArea(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCANNOTATIONFILLAREA] = (i:IFC2X3.IfcAnnotationFillArea):unknown[] => { return [i.OuterBoundary, i.InnerBoundaries]; }
InversePropertyDef['IFC2X3'][IFCANNOTATIONFILLAREA] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCANNOTATIONFILLAREAOCCURRENCE] = (d: RawLineData) => { new IFC2X3.IfcAnnotationFillAreaOccurrence(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC2X3.IfcPoint>(d.arguments[3].value), d.arguments[4]); }
Constructors['IFC2X3'][IFCANNOTATIONFILLAREAOCCURRENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotationFillAreaOccurrence(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCANNOTATIONFILLAREAOCCURRENCE] = (i:IFC2X3.IfcAnnotationFillAreaOccurrence):unknown[] => { return [i.Item, i.Styles, i.Name, i.FillStyleTarget, i.GlobalOrLocal]; }
InversePropertyDef['IFC2X3'][IFCANNOTATIONFILLAREAOCCURRENCE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCANNOTATIONSURFACE] = (d: RawLineData) => { new IFC2X3.IfcAnnotationSurface(d.ID, new Reference<IFC2X3.IfcGeometricRepresentationItem>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcTextureCoordinate>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCANNOTATIONSURFACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotationSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCANNOTATIONSURFACE] = (i:IFC2X3.IfcAnnotationSurface):unknown[] => { return [i.Item, i.TextureCoordinates]; }
InversePropertyDef['IFC2X3'][IFCANNOTATIONSURFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCAXIS1PLACEMENT] = (d: RawLineData) => { new IFC2X3.IfcAxis1Placement(d.ID, new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCAXIS1PLACEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAxis1Placement(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCAXIS1PLACEMENT] = (i:IFC2X3.IfcAxis1Placement):unknown[] => { return [i.Location, i.Axis]; }
InversePropertyDef['IFC2X3'][IFCAXIS1PLACEMENT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCAXIS2PLACEMENT2D] = (d: RawLineData) => { new IFC2X3.IfcAxis2Placement2D(d.ID, new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCAXIS2PLACEMENT2D] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAxis2Placement2D(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCAXIS2PLACEMENT2D] = (i:IFC2X3.IfcAxis2Placement2D):unknown[] => { return [i.Location, i.RefDirection]; }
InversePropertyDef['IFC2X3'][IFCAXIS2PLACEMENT2D] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCAXIS2PLACEMENT3D] = (d: RawLineData) => { new IFC2X3.IfcAxis2Placement3D(d.ID, new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCAXIS2PLACEMENT3D] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAxis2Placement3D(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCAXIS2PLACEMENT3D] = (i:IFC2X3.IfcAxis2Placement3D):unknown[] => { return [i.Location, i.Axis, i.RefDirection]; }
InversePropertyDef['IFC2X3'][IFCAXIS2PLACEMENT3D] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBOOLEANRESULT] = (d: RawLineData) => { new IFC2X3.IfcBooleanResult(d.ID, d.arguments[0], new Reference(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCBOOLEANRESULT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBooleanResult(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCBOOLEANRESULT] = (i:IFC2X3.IfcBooleanResult):unknown[] => { return [i.Operator, i.FirstOperand, i.SecondOperand]; }
InheritanceDef['IFC2X3'][IFCBOOLEANRESULT] = [IFCBOOLEANCLIPPINGRESULT];
InversePropertyDef['IFC2X3'][IFCBOOLEANRESULT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBOUNDEDSURFACE] = (d: RawLineData) => { new IFC2X3.IfcBoundedSurface(d.ID, ); }
Constructors['IFC2X3'][IFCBOUNDEDSURFACE] = (expressID:number, _:any) => { return new IFC2X3.IfcBoundedSurface(expressID, ); }
ToRawLineData['IFC2X3'][IFCBOUNDEDSURFACE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCBOUNDEDSURFACE] = [IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDPLANE];
InversePropertyDef['IFC2X3'][IFCBOUNDEDSURFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBOUNDINGBOX] = (d: RawLineData) => { new IFC2X3.IfcBoundingBox(d.ID, new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCBOUNDINGBOX] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBoundingBox(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCBOUNDINGBOX] = (i:IFC2X3.IfcBoundingBox):unknown[] => { return [i.Corner, i.XDim, i.YDim, i.ZDim]; }
InversePropertyDef['IFC2X3'][IFCBOUNDINGBOX] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBOXEDHALFSPACE] = (d: RawLineData) => { new IFC2X3.IfcBoxedHalfSpace(d.ID, new Reference<IFC2X3.IfcSurface>(d.arguments[0].value), d.arguments[1].value, new Reference<IFC2X3.IfcBoundingBox>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCBOXEDHALFSPACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBoxedHalfSpace(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCBOXEDHALFSPACE] = (i:IFC2X3.IfcBoxedHalfSpace):unknown[] => { return [i.BaseSurface, i.AgreementFlag, i.Enclosure]; }
InversePropertyDef['IFC2X3'][IFCBOXEDHALFSPACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcCShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCCSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCCSHAPEPROFILEDEF] = (i:IFC2X3.IfcCShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.Width, i.WallThickness, i.Girth, i.InternalFilletRadius, i.CentreOfGravityInX]; }
FromRawLineData['IFC2X3'][IFCCARTESIANPOINT] = (d: RawLineData) => { new IFC2X3.IfcCartesianPoint(d.ID, d.arguments[0].map((p:any) => new IFC2X3.IfcLengthMeasure(p.value))); }
Constructors['IFC2X3'][IFCCARTESIANPOINT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCartesianPoint(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCARTESIANPOINT] = (i:IFC2X3.IfcCartesianPoint):unknown[] => { return [i.Coordinates]; }
InversePropertyDef['IFC2X3'][IFCCARTESIANPOINT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (d: RawLineData) => { new IFC2X3.IfcCartesianTransformationOperator(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[1].value), new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].value); }
Constructors['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCartesianTransformationOperator(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (i:IFC2X3.IfcCartesianTransformationOperator):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale]; }
InheritanceDef['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = [IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D];
InversePropertyDef['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (d: RawLineData) => { new IFC2X3.IfcCartesianTransformationOperator2D(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[1].value), new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].value); }
Constructors['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCartesianTransformationOperator2D(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (i:IFC2X3.IfcCartesianTransformationOperator2D):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale]; }
InheritanceDef['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM];
InversePropertyDef['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (d: RawLineData) => { new IFC2X3.IfcCartesianTransformationOperator2DnonUniform(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[1].value), new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].value, !d.arguments[4] ? null :d.arguments[4].value); }
Constructors['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCartesianTransformationOperator2DnonUniform(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (i:IFC2X3.IfcCartesianTransformationOperator2DnonUniform):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Scale2]; }
InversePropertyDef['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (d: RawLineData) => { new IFC2X3.IfcCartesianTransformationOperator3D(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[1].value), new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].value, !d.arguments[4] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCartesianTransformationOperator3D(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (i:IFC2X3.IfcCartesianTransformationOperator3D):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Axis3]; }
InheritanceDef['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM];
InversePropertyDef['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (d: RawLineData) => { new IFC2X3.IfcCartesianTransformationOperator3DnonUniform(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[1].value), new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].value, !d.arguments[4] ? null :new Reference<IFC2X3.IfcDirection>(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].value, !d.arguments[6] ? null :d.arguments[6].value); }
Constructors['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCartesianTransformationOperator3DnonUniform(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (i:IFC2X3.IfcCartesianTransformationOperator3DnonUniform):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Axis3, i.Scale2, i.Scale3]; }
InversePropertyDef['IFC2X3'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCIRCLEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcCircleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCCIRCLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCircleProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCCIRCLEPROFILEDEF] = (i:IFC2X3.IfcCircleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Radius]; }
InheritanceDef['IFC2X3'][IFCCIRCLEPROFILEDEF] = [IFCCIRCLEHOLLOWPROFILEDEF];
FromRawLineData['IFC2X3'][IFCCLOSEDSHELL] = (d: RawLineData) => { new IFC2X3.IfcClosedShell(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcFace>(p.value))); }
Constructors['IFC2X3'][IFCCLOSEDSHELL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcClosedShell(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCLOSEDSHELL] = (i:IFC2X3.IfcClosedShell):unknown[] => { return [i.CfsFaces]; }
InversePropertyDef['IFC2X3'][IFCCLOSEDSHELL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCOMPOSITECURVESEGMENT] = (d: RawLineData) => { new IFC2X3.IfcCompositeCurveSegment(d.ID, d.arguments[0], d.arguments[1].value, new Reference<IFC2X3.IfcCurve>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCCOMPOSITECURVESEGMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCompositeCurveSegment(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCCOMPOSITECURVESEGMENT] = (i:IFC2X3.IfcCompositeCurveSegment):unknown[] => { return [i.Transition, i.SameSense, i.ParentCurve]; }
InversePropertyDef['IFC2X3'][IFCCOMPOSITECURVESEGMENT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['UsingCurves',IFCCOMPOSITECURVE,0,true],];
FromRawLineData['IFC2X3'][IFCCRANERAILASHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcCraneRailAShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[11].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[12].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[14].value)); }
Constructors['IFC2X3'][IFCCRANERAILASHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCraneRailAShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]); }
ToRawLineData['IFC2X3'][IFCCRANERAILASHAPEPROFILEDEF] = (i:IFC2X3.IfcCraneRailAShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.OverallHeight, i.BaseWidth2, i.Radius, i.HeadWidth, i.HeadDepth2, i.HeadDepth3, i.WebThickness, i.BaseWidth4, i.BaseDepth1, i.BaseDepth2, i.BaseDepth3, i.CentreOfGravityInY]; }
FromRawLineData['IFC2X3'][IFCCRANERAILFSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcCraneRailFShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[11].value)); }
Constructors['IFC2X3'][IFCCRANERAILFSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCraneRailFShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCCRANERAILFSHAPEPROFILEDEF] = (i:IFC2X3.IfcCraneRailFShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.OverallHeight, i.HeadWidth, i.Radius, i.HeadDepth2, i.HeadDepth3, i.WebThickness, i.BaseDepth1, i.BaseDepth2, i.CentreOfGravityInY]; }
FromRawLineData['IFC2X3'][IFCCSGPRIMITIVE3D] = (d: RawLineData) => { new IFC2X3.IfcCsgPrimitive3D(d.ID, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCCSGPRIMITIVE3D] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCsgPrimitive3D(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCSGPRIMITIVE3D] = (i:IFC2X3.IfcCsgPrimitive3D):unknown[] => { return [i.Position]; }
InheritanceDef['IFC2X3'][IFCCSGPRIMITIVE3D] = [IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID];
InversePropertyDef['IFC2X3'][IFCCSGPRIMITIVE3D] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCSGSOLID] = (d: RawLineData) => { new IFC2X3.IfcCsgSolid(d.ID, new Reference(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCCSGSOLID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCsgSolid(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCSGSOLID] = (i:IFC2X3.IfcCsgSolid):unknown[] => { return [i.TreeRootExpression]; }
InversePropertyDef['IFC2X3'][IFCCSGSOLID] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCURVE] = (d: RawLineData) => { new IFC2X3.IfcCurve(d.ID, ); }
Constructors['IFC2X3'][IFCCURVE] = (expressID:number, _:any) => { return new IFC2X3.IfcCurve(expressID, ); }
ToRawLineData['IFC2X3'][IFCCURVE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCCURVE] = [IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBEZIERCURVE,IFCBEZIERCURVE,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFC2DCOMPOSITECURVE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCLINE];
InversePropertyDef['IFC2X3'][IFCCURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCURVEBOUNDEDPLANE] = (d: RawLineData) => { new IFC2X3.IfcCurveBoundedPlane(d.ID, new Reference<IFC2X3.IfcPlane>(d.arguments[0].value), new Reference<IFC2X3.IfcCurve>(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC2X3.IfcCurve>(p.value))); }
Constructors['IFC2X3'][IFCCURVEBOUNDEDPLANE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCurveBoundedPlane(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCCURVEBOUNDEDPLANE] = (i:IFC2X3.IfcCurveBoundedPlane):unknown[] => { return [i.BasisSurface, i.OuterBoundary, i.InnerBoundaries]; }
InversePropertyDef['IFC2X3'][IFCCURVEBOUNDEDPLANE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCDEFINEDSYMBOL] = (d: RawLineData) => { new IFC2X3.IfcDefinedSymbol(d.ID, new Reference(d.arguments[0].value), new Reference<IFC2X3.IfcCartesianTransformationOperator2D>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCDEFINEDSYMBOL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDefinedSymbol(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCDEFINEDSYMBOL] = (i:IFC2X3.IfcDefinedSymbol):unknown[] => { return [i.Definition, i.Target]; }
InversePropertyDef['IFC2X3'][IFCDEFINEDSYMBOL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCDIMENSIONCURVE] = (d: RawLineData) => { new IFC2X3.IfcDimensionCurve(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCDIMENSIONCURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDimensionCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCDIMENSIONCURVE] = (i:IFC2X3.IfcDimensionCurve):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InversePropertyDef['IFC2X3'][IFCDIMENSIONCURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['AnnotatedBySymbols',IFCTERMINATORSYMBOL,3,true],];
FromRawLineData['IFC2X3'][IFCDIMENSIONCURVETERMINATOR] = (d: RawLineData) => { new IFC2X3.IfcDimensionCurveTerminator(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), new Reference<IFC2X3.IfcAnnotationCurveOccurrence>(d.arguments[3].value), d.arguments[4]); }
Constructors['IFC2X3'][IFCDIMENSIONCURVETERMINATOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDimensionCurveTerminator(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCDIMENSIONCURVETERMINATOR] = (i:IFC2X3.IfcDimensionCurveTerminator):unknown[] => { return [i.Item, i.Styles, i.Name, i.AnnotatedCurve, i.Role]; }
InversePropertyDef['IFC2X3'][IFCDIMENSIONCURVETERMINATOR] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCDIRECTION] = (d: RawLineData) => { new IFC2X3.IfcDirection(d.ID, d.arguments[0].map((p:any) => p.value)); }
Constructors['IFC2X3'][IFCDIRECTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDirection(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCDIRECTION] = (i:IFC2X3.IfcDirection):unknown[] => { return [i.DirectionRatios]; }
InversePropertyDef['IFC2X3'][IFCDIRECTION] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCDOORLININGPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcDoorLiningProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new Reference<IFC2X3.IfcShapeAspect>(d.arguments[14].value)); }
Constructors['IFC2X3'][IFCDOORLININGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDoorLiningProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]); }
ToRawLineData['IFC2X3'][IFCDOORLININGPROPERTIES] = (i:IFC2X3.IfcDoorLiningProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.LiningDepth, i.LiningThickness, i.ThresholdDepth, i.ThresholdThickness, i.TransomThickness, i.TransomOffset, i.LiningOffset, i.ThresholdOffset, i.CasingThickness, i.CasingDepth, i.ShapeAspectStyle]; }
InversePropertyDef['IFC2X3'][IFCDOORLININGPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCDOORPANELPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcDoorPanelProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC2X3.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCDOORPANELPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDoorPanelProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCDOORPANELPROPERTIES] = (i:IFC2X3.IfcDoorPanelProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.PanelDepth, i.PanelOperation, i.PanelWidth, i.PanelPosition, i.ShapeAspectStyle]; }
InversePropertyDef['IFC2X3'][IFCDOORPANELPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCDOORSTYLE] = (d: RawLineData) => { new IFC2X3.IfcDoorStyle(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], d.arguments[10].value, d.arguments[11].value); }
Constructors['IFC2X3'][IFCDOORSTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDoorStyle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCDOORSTYLE] = (i:IFC2X3.IfcDoorStyle):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.OperationType, i.ConstructionType, i.ParameterTakesPrecedence, i.Sizeable]; }
InversePropertyDef['IFC2X3'][IFCDOORSTYLE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDRAUGHTINGCALLOUT] = (d: RawLineData) => { new IFC2X3.IfcDraughtingCallout(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCDRAUGHTINGCALLOUT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDraughtingCallout(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCDRAUGHTINGCALLOUT] = (i:IFC2X3.IfcDraughtingCallout):unknown[] => { return [i.Contents]; }
InheritanceDef['IFC2X3'][IFCDRAUGHTINGCALLOUT] = [IFCDIAMETERDIMENSION,IFCANGULARDIMENSION,IFCRADIUSDIMENSION,IFCLINEARDIMENSION,IFCDIMENSIONCURVEDIRECTEDCALLOUT,IFCSTRUCTUREDDIMENSIONCALLOUT];
InversePropertyDef['IFC2X3'][IFCDRAUGHTINGCALLOUT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['IsRelatedFromCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],['IsRelatedToCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],];
FromRawLineData['IFC2X3'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (d: RawLineData) => { new IFC2X3.IfcDraughtingPreDefinedColour(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDraughtingPreDefinedColour(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (i:IFC2X3.IfcDraughtingPreDefinedColour):unknown[] => { return [i.Name]; }
FromRawLineData['IFC2X3'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (d: RawLineData) => { new IFC2X3.IfcDraughtingPreDefinedCurveFont(d.ID, new IFC2X3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDraughtingPreDefinedCurveFont(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (i:IFC2X3.IfcDraughtingPreDefinedCurveFont):unknown[] => { return [i.Name]; }
FromRawLineData['IFC2X3'][IFCEDGELOOP] = (d: RawLineData) => { new IFC2X3.IfcEdgeLoop(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcOrientedEdge>(p.value))); }
Constructors['IFC2X3'][IFCEDGELOOP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEdgeLoop(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCEDGELOOP] = (i:IFC2X3.IfcEdgeLoop):unknown[] => { return [i.EdgeList]; }
InversePropertyDef['IFC2X3'][IFCEDGELOOP] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCELEMENTQUANTITY] = (d: RawLineData) => { new IFC2X3.IfcElementQuantity(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPhysicalQuantity>(p.value))); }
Constructors['IFC2X3'][IFCELEMENTQUANTITY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElementQuantity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCELEMENTQUANTITY] = (i:IFC2X3.IfcElementQuantity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.MethodOfMeasurement, i.Quantities]; }
InversePropertyDef['IFC2X3'][IFCELEMENTQUANTITY] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCELEMENTTYPE] = (i:IFC2X3.IfcElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCELEMENTTYPE] = [IFCVIBRATIONISOLATORTYPE,IFCDISCRETEACCESSORYTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCSENSORTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICHEATERTYPE,IFCELECTRICAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCGASTERMINALTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSPACEHEATERTYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWALLTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCMEMBERTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE];
InversePropertyDef['IFC2X3'][IFCELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELEMENTARYSURFACE] = (d: RawLineData) => { new IFC2X3.IfcElementarySurface(d.ID, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCELEMENTARYSURFACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElementarySurface(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCELEMENTARYSURFACE] = (i:IFC2X3.IfcElementarySurface):unknown[] => { return [i.Position]; }
InheritanceDef['IFC2X3'][IFCELEMENTARYSURFACE] = [IFCPLANE];
InversePropertyDef['IFC2X3'][IFCELEMENTARYSURFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCELLIPSEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcEllipseProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCELLIPSEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEllipseProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCELLIPSEPROFILEDEF] = (i:IFC2X3.IfcEllipseProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.SemiAxis1, i.SemiAxis2]; }
FromRawLineData['IFC2X3'][IFCENERGYPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcEnergyProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new IFC2X3.IfcLabel(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCENERGYPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEnergyProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCENERGYPROPERTIES] = (i:IFC2X3.IfcEnergyProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.EnergySequence, i.UserDefinedEnergySequence]; }
InheritanceDef['IFC2X3'][IFCENERGYPROPERTIES] = [IFCELECTRICALBASEPROPERTIES];
InversePropertyDef['IFC2X3'][IFCENERGYPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCEXTRUDEDAREASOLID] = (d: RawLineData) => { new IFC2X3.IfcExtrudedAreaSolid(d.ID, new Reference<IFC2X3.IfcProfileDef>(d.arguments[0].value), new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC2X3.IfcDirection>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCEXTRUDEDAREASOLID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcExtrudedAreaSolid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCEXTRUDEDAREASOLID] = (i:IFC2X3.IfcExtrudedAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.ExtrudedDirection, i.Depth]; }
InversePropertyDef['IFC2X3'][IFCEXTRUDEDAREASOLID] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFACEBASEDSURFACEMODEL] = (d: RawLineData) => { new IFC2X3.IfcFaceBasedSurfaceModel(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcConnectedFaceSet>(p.value))); }
Constructors['IFC2X3'][IFCFACEBASEDSURFACEMODEL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFaceBasedSurfaceModel(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCFACEBASEDSURFACEMODEL] = (i:IFC2X3.IfcFaceBasedSurfaceModel):unknown[] => { return [i.FbsmFaces]; }
InversePropertyDef['IFC2X3'][IFCFACEBASEDSURFACEMODEL] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFILLAREASTYLEHATCHING] = (d: RawLineData) => { new IFC2X3.IfcFillAreaStyleHatching(d.ID, new Reference<IFC2X3.IfcCurveStyle>(d.arguments[0].value), new Reference(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[3].value), new IFC2X3.IfcPlaneAngleMeasure(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCFILLAREASTYLEHATCHING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFillAreaStyleHatching(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCFILLAREASTYLEHATCHING] = (i:IFC2X3.IfcFillAreaStyleHatching):unknown[] => { return [i.HatchLineAppearance, i.StartOfNextHatchLine, i.PointOfReferenceHatchLine, i.PatternStart, i.HatchLineAngle]; }
InversePropertyDef['IFC2X3'][IFCFILLAREASTYLEHATCHING] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFILLAREASTYLETILESYMBOLWITHSTYLE] = (d: RawLineData) => { new IFC2X3.IfcFillAreaStyleTileSymbolWithStyle(d.ID, new Reference<IFC2X3.IfcAnnotationSymbolOccurrence>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCFILLAREASTYLETILESYMBOLWITHSTYLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFillAreaStyleTileSymbolWithStyle(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCFILLAREASTYLETILESYMBOLWITHSTYLE] = (i:IFC2X3.IfcFillAreaStyleTileSymbolWithStyle):unknown[] => { return [i.Symbol]; }
InversePropertyDef['IFC2X3'][IFCFILLAREASTYLETILESYMBOLWITHSTYLE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFILLAREASTYLETILES] = (d: RawLineData) => { new IFC2X3.IfcFillAreaStyleTiles(d.ID, new Reference<IFC2X3.IfcOneDirectionRepeatFactor>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value)), new IFC2X3.IfcPositiveRatioMeasure(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCFILLAREASTYLETILES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFillAreaStyleTiles(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCFILLAREASTYLETILES] = (i:IFC2X3.IfcFillAreaStyleTiles):unknown[] => { return [i.TilingPattern, i.Tiles, i.TilingScale]; }
InversePropertyDef['IFC2X3'][IFCFILLAREASTYLETILES] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFLUIDFLOWPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcFluidFlowProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new Reference<IFC2X3.IfcTimeSeries>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcTimeSeries>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcTimeSeries>(d.arguments[7].value), new Reference<IFC2X3.IfcMaterial>(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC2X3.IfcTimeSeries>(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcLabel(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcThermodynamicTemperatureMeasure(d.arguments[12].value), !d.arguments[13] ? null :new Reference<IFC2X3.IfcTimeSeries>(d.arguments[13].value), !d.arguments[14] ? null :new Reference<IFC2X3.IfcTimeSeries>(d.arguments[14].value), !d.arguments[15] ? null :TypeInitialiser('IFC2X3',d.arguments[15]), !d.arguments[16] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[16].value), !d.arguments[17] ? null :new IFC2X3.IfcLinearVelocityMeasure(d.arguments[17].value), !d.arguments[18] ? null :new IFC2X3.IfcPressureMeasure(d.arguments[18].value)); }
Constructors['IFC2X3'][IFCFLUIDFLOWPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFluidFlowProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18]); }
ToRawLineData['IFC2X3'][IFCFLUIDFLOWPROPERTIES] = (i:IFC2X3.IfcFluidFlowProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.PropertySource, i.FlowConditionTimeSeries, i.VelocityTimeSeries, i.FlowrateTimeSeries, i.Fluid, i.PressureTimeSeries, i.UserDefinedPropertySource, i.TemperatureSingleValue, i.WetBulbTemperatureSingleValue, i.WetBulbTemperatureTimeSeries, i.TemperatureTimeSeries, !i.FlowrateSingleValue ? null :Labelise(i.FlowrateSingleValue), i.FlowConditionSingleValue, i.VelocitySingleValue, i.PressureSingleValue]; }
InversePropertyDef['IFC2X3'][IFCFLUIDFLOWPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCFURNISHINGELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcFurnishingElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFURNISHINGELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFurnishingElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFURNISHINGELEMENTTYPE] = (i:IFC2X3.IfcFurnishingElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFURNISHINGELEMENTTYPE] = [IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE];
InversePropertyDef['IFC2X3'][IFCFURNISHINGELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFURNITURETYPE] = (d: RawLineData) => { new IFC2X3.IfcFurnitureType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCFURNITURETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFurnitureType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCFURNITURETYPE] = (i:IFC2X3.IfcFurnitureType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.AssemblyPlace]; }
InversePropertyDef['IFC2X3'][IFCFURNITURETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCGEOMETRICCURVESET] = (d: RawLineData) => { new IFC2X3.IfcGeometricCurveSet(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCGEOMETRICCURVESET] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGeometricCurveSet(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCGEOMETRICCURVESET] = (i:IFC2X3.IfcGeometricCurveSet):unknown[] => { return [i.Elements]; }
InversePropertyDef['IFC2X3'][IFCGEOMETRICCURVESET] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCISHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcIShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCISHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcIShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCISHAPEPROFILEDEF] = (i:IFC2X3.IfcIShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.OverallWidth, i.OverallDepth, i.WebThickness, i.FlangeThickness, i.FilletRadius]; }
InheritanceDef['IFC2X3'][IFCISHAPEPROFILEDEF] = [IFCASYMMETRICISHAPEPROFILEDEF];
FromRawLineData['IFC2X3'][IFCLSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcLShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPlaneAngleMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCLSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCLSHAPEPROFILEDEF] = (i:IFC2X3.IfcLShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.Width, i.Thickness, i.FilletRadius, i.EdgeRadius, i.LegSlope, i.CentreOfGravityInX, i.CentreOfGravityInY]; }
FromRawLineData['IFC2X3'][IFCLINE] = (d: RawLineData) => { new IFC2X3.IfcLine(d.ID, new Reference<IFC2X3.IfcCartesianPoint>(d.arguments[0].value), new Reference<IFC2X3.IfcVector>(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCLINE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLine(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCLINE] = (i:IFC2X3.IfcLine):unknown[] => { return [i.Pnt, i.Dir]; }
InversePropertyDef['IFC2X3'][IFCLINE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCMANIFOLDSOLIDBREP] = (d: RawLineData) => { new IFC2X3.IfcManifoldSolidBrep(d.ID, new Reference<IFC2X3.IfcClosedShell>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCMANIFOLDSOLIDBREP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcManifoldSolidBrep(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCMANIFOLDSOLIDBREP] = (i:IFC2X3.IfcManifoldSolidBrep):unknown[] => { return [i.Outer]; }
InheritanceDef['IFC2X3'][IFCMANIFOLDSOLIDBREP] = [IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP];
InversePropertyDef['IFC2X3'][IFCMANIFOLDSOLIDBREP] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCOBJECT] = (d: RawLineData) => { new IFC2X3.IfcObject(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCOBJECT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcObject(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCOBJECT] = (i:IFC2X3.IfcObject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC2X3'][IFCOBJECT] = [IFCCONDITION,IFCASSET,IFCZONE,IFCSTRUCTURALANALYSISMODEL,IFCELECTRICALCIRCUIT,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCCONDITIONCRITERION,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCTIMESERIESSCHEDULE,IFCSPACEPROGRAM,IFCSERVICELIFE,IFCSCHEDULETIMECONTROL,IFCPROJECTORDERRECORD,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCFURNITURESTANDARD,IFCEQUIPMENTSTANDARD,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCPROJECT,IFCDISTRIBUTIONPORT,IFCPORT,IFCGRID,IFCELECTRICALELEMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFLOWTREATMENTDEVICE,IFCFLOWTERMINAL,IFCFLOWSTORAGEDEVICE,IFCFLOWSEGMENT,IFCFLOWMOVINGDEVICE,IFCFLOWFITTING,IFCELECTRICDISTRIBUTIONPOINT,IFCFLOWCONTROLLER,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATE,IFCPILE,IFCMEMBER,IFCFOOTING,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMN,IFCBUILDINGELEMENTPROXY,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCBUILDINGELEMENTPART,IFCBUILDINGELEMENTCOMPONENT,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCFURNISHINGELEMENT,IFCCHAMFEREDGEFEATURE,IFCROUNDEDEDGEFEATURE,IFCEDGEFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCEQUIPMENTELEMENT,IFCDISCRETEACCESSORY,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALPLANARACTIONVARYING,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALLINEARACTIONVARYING,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT,IFCPROXY,IFCPRODUCT,IFCPROCEDURE,IFCORDERACTION,IFCMOVE,IFCTASK,IFCPROCESS];
InversePropertyDef['IFC2X3'][IFCOBJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],];
FromRawLineData['IFC2X3'][IFCOFFSETCURVE2D] = (d: RawLineData) => { new IFC2X3.IfcOffsetCurve2D(d.ID, new Reference<IFC2X3.IfcCurve>(d.arguments[0].value), new IFC2X3.IfcLengthMeasure(d.arguments[1].value), d.arguments[2].value); }
Constructors['IFC2X3'][IFCOFFSETCURVE2D] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOffsetCurve2D(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCOFFSETCURVE2D] = (i:IFC2X3.IfcOffsetCurve2D):unknown[] => { return [i.BasisCurve, i.Distance, i.SelfIntersect]; }
InversePropertyDef['IFC2X3'][IFCOFFSETCURVE2D] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCOFFSETCURVE3D] = (d: RawLineData) => { new IFC2X3.IfcOffsetCurve3D(d.ID, new Reference<IFC2X3.IfcCurve>(d.arguments[0].value), new IFC2X3.IfcLengthMeasure(d.arguments[1].value), d.arguments[2].value, new Reference<IFC2X3.IfcDirection>(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCOFFSETCURVE3D] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOffsetCurve3D(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCOFFSETCURVE3D] = (i:IFC2X3.IfcOffsetCurve3D):unknown[] => { return [i.BasisCurve, i.Distance, i.SelfIntersect, i.RefDirection]; }
InversePropertyDef['IFC2X3'][IFCOFFSETCURVE3D] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPERMEABLECOVERINGPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcPermeableCoveringProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC2X3.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCPERMEABLECOVERINGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPermeableCoveringProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCPERMEABLECOVERINGPROPERTIES] = (i:IFC2X3.IfcPermeableCoveringProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.OperationType, i.PanelPosition, i.FrameDepth, i.FrameThickness, i.ShapeAspectStyle]; }
InversePropertyDef['IFC2X3'][IFCPERMEABLECOVERINGPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCPLANARBOX] = (d: RawLineData) => { new IFC2X3.IfcPlanarBox(d.ID, new IFC2X3.IfcLengthMeasure(d.arguments[0].value), new IFC2X3.IfcLengthMeasure(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCPLANARBOX] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPlanarBox(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPLANARBOX] = (i:IFC2X3.IfcPlanarBox):unknown[] => { return [i.SizeInX, i.SizeInY, i.Placement]; }
InversePropertyDef['IFC2X3'][IFCPLANARBOX] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPLANE] = (d: RawLineData) => { new IFC2X3.IfcPlane(d.ID, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCPLANE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPlane(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPLANE] = (i:IFC2X3.IfcPlane):unknown[] => { return [i.Position]; }
InversePropertyDef['IFC2X3'][IFCPLANE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPROCESS] = (d: RawLineData) => { new IFC2X3.IfcProcess(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCPROCESS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProcess(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCPROCESS] = (i:IFC2X3.IfcProcess):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC2X3'][IFCPROCESS] = [IFCPROCEDURE,IFCORDERACTION,IFCMOVE,IFCTASK];
InversePropertyDef['IFC2X3'][IFCPROCESS] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],];
FromRawLineData['IFC2X3'][IFCPRODUCT] = (d: RawLineData) => { new IFC2X3.IfcProduct(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCPRODUCT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCPRODUCT] = (i:IFC2X3.IfcProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC2X3'][IFCPRODUCT] = [IFCDISTRIBUTIONPORT,IFCPORT,IFCGRID,IFCELECTRICALELEMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFLOWTREATMENTDEVICE,IFCFLOWTERMINAL,IFCFLOWSTORAGEDEVICE,IFCFLOWSEGMENT,IFCFLOWMOVINGDEVICE,IFCFLOWFITTING,IFCELECTRICDISTRIBUTIONPOINT,IFCFLOWCONTROLLER,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATE,IFCPILE,IFCMEMBER,IFCFOOTING,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMN,IFCBUILDINGELEMENTPROXY,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCBUILDINGELEMENTPART,IFCBUILDINGELEMENTCOMPONENT,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCFURNISHINGELEMENT,IFCCHAMFEREDGEFEATURE,IFCROUNDEDEDGEFEATURE,IFCEDGEFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCEQUIPMENTELEMENT,IFCDISCRETEACCESSORY,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALPLANARACTIONVARYING,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALLINEARACTIONVARYING,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT,IFCPROXY];
InversePropertyDef['IFC2X3'][IFCPRODUCT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC2X3'][IFCPROJECT] = (d: RawLineData) => { new IFC2X3.IfcProject(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcRepresentationContext>(p.value)), new Reference<IFC2X3.IfcUnitAssignment>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCPROJECT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProject(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCPROJECT] = (i:IFC2X3.IfcProject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.Phase, i.RepresentationContexts, i.UnitsInContext]; }
InversePropertyDef['IFC2X3'][IFCPROJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],];
FromRawLineData['IFC2X3'][IFCPROJECTIONCURVE] = (d: RawLineData) => { new IFC2X3.IfcProjectionCurve(d.ID, !d.arguments[0] ? null :new Reference<IFC2X3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcPresentationStyleAssignment>(p.value)), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCPROJECTIONCURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProjectionCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCPROJECTIONCURVE] = (i:IFC2X3.IfcProjectionCurve):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InversePropertyDef['IFC2X3'][IFCPROJECTIONCURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPROPERTYSET] = (d: RawLineData) => { new IFC2X3.IfcPropertySet(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcProperty>(p.value))); }
Constructors['IFC2X3'][IFCPROPERTYSET] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPropertySet(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCPROPERTYSET] = (i:IFC2X3.IfcPropertySet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.HasProperties]; }
InversePropertyDef['IFC2X3'][IFCPROPERTYSET] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCPROXY] = (d: RawLineData) => { new IFC2X3.IfcProxy(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCPROXY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProxy(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCPROXY] = (i:IFC2X3.IfcProxy):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.ProxyType, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCPROXY] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC2X3'][IFCRECTANGLEHOLLOWPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcRectangleHollowProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCRECTANGLEHOLLOWPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRectangleHollowProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCRECTANGLEHOLLOWPROFILEDEF] = (i:IFC2X3.IfcRectangleHollowProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim, i.WallThickness, i.InnerFilletRadius, i.OuterFilletRadius]; }
FromRawLineData['IFC2X3'][IFCRECTANGULARPYRAMID] = (d: RawLineData) => { new IFC2X3.IfcRectangularPyramid(d.ID, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCRECTANGULARPYRAMID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRectangularPyramid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCRECTANGULARPYRAMID] = (i:IFC2X3.IfcRectangularPyramid):unknown[] => { return [i.Position, i.XLength, i.YLength, i.Height]; }
InversePropertyDef['IFC2X3'][IFCRECTANGULARPYRAMID] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCRECTANGULARTRIMMEDSURFACE] = (d: RawLineData) => { new IFC2X3.IfcRectangularTrimmedSurface(d.ID, new Reference<IFC2X3.IfcSurface>(d.arguments[0].value), new IFC2X3.IfcParameterValue(d.arguments[1].value), new IFC2X3.IfcParameterValue(d.arguments[2].value), new IFC2X3.IfcParameterValue(d.arguments[3].value), new IFC2X3.IfcParameterValue(d.arguments[4].value), d.arguments[5].value, d.arguments[6].value); }
Constructors['IFC2X3'][IFCRECTANGULARTRIMMEDSURFACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRectangularTrimmedSurface(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRECTANGULARTRIMMEDSURFACE] = (i:IFC2X3.IfcRectangularTrimmedSurface):unknown[] => { return [i.BasisSurface, i.U1, i.V1, i.U2, i.V2, i.Usense, i.Vsense]; }
InversePropertyDef['IFC2X3'][IFCRECTANGULARTRIMMEDSURFACE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCRELASSIGNS] = (d: RawLineData) => { new IFC2X3.IfcRelAssigns(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5]); }
Constructors['IFC2X3'][IFCRELASSIGNS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssigns(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNS] = (i:IFC2X3.IfcRelAssigns):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType]; }
InheritanceDef['IFC2X3'][IFCRELASSIGNS] = [IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTASKS,IFCRELSCHEDULESCOSTITEMS,IFCRELASSIGNSTOPROJECTORDER,IFCRELASSIGNSTOCONTROL,IFCRELOCCUPIESSPACES,IFCRELASSIGNSTOACTOR];
FromRawLineData['IFC2X3'][IFCRELASSIGNSTOACTOR] = (d: RawLineData) => { new IFC2X3.IfcRelAssignsToActor(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcActor>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcActorRole>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCRELASSIGNSTOACTOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssignsToActor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNSTOACTOR] = (i:IFC2X3.IfcRelAssignsToActor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingActor, i.ActingRole]; }
InheritanceDef['IFC2X3'][IFCRELASSIGNSTOACTOR] = [IFCRELOCCUPIESSPACES];
FromRawLineData['IFC2X3'][IFCRELASSIGNSTOCONTROL] = (d: RawLineData) => { new IFC2X3.IfcRelAssignsToControl(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcControl>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELASSIGNSTOCONTROL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssignsToControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNSTOCONTROL] = (i:IFC2X3.IfcRelAssignsToControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingControl]; }
InheritanceDef['IFC2X3'][IFCRELASSIGNSTOCONTROL] = [IFCRELASSIGNSTASKS,IFCRELSCHEDULESCOSTITEMS,IFCRELASSIGNSTOPROJECTORDER];
FromRawLineData['IFC2X3'][IFCRELASSIGNSTOGROUP] = (d: RawLineData) => { new IFC2X3.IfcRelAssignsToGroup(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcGroup>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELASSIGNSTOGROUP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssignsToGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNSTOGROUP] = (i:IFC2X3.IfcRelAssignsToGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingGroup]; }
FromRawLineData['IFC2X3'][IFCRELASSIGNSTOPROCESS] = (d: RawLineData) => { new IFC2X3.IfcRelAssignsToProcess(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcProcess>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCRELASSIGNSTOPROCESS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssignsToProcess(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNSTOPROCESS] = (i:IFC2X3.IfcRelAssignsToProcess):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingProcess, i.QuantityInProcess]; }
FromRawLineData['IFC2X3'][IFCRELASSIGNSTOPRODUCT] = (d: RawLineData) => { new IFC2X3.IfcRelAssignsToProduct(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcProduct>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELASSIGNSTOPRODUCT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssignsToProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNSTOPRODUCT] = (i:IFC2X3.IfcRelAssignsToProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingProduct]; }
FromRawLineData['IFC2X3'][IFCRELASSIGNSTOPROJECTORDER] = (d: RawLineData) => { new IFC2X3.IfcRelAssignsToProjectOrder(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcControl>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELASSIGNSTOPROJECTORDER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssignsToProjectOrder(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNSTOPROJECTORDER] = (i:IFC2X3.IfcRelAssignsToProjectOrder):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingControl]; }
FromRawLineData['IFC2X3'][IFCRELASSIGNSTORESOURCE] = (d: RawLineData) => { new IFC2X3.IfcRelAssignsToResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcResource>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELASSIGNSTORESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssignsToResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNSTORESOURCE] = (i:IFC2X3.IfcRelAssignsToResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingResource]; }
FromRawLineData['IFC2X3'][IFCRELASSOCIATES] = (d: RawLineData) => { new IFC2X3.IfcRelAssociates(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value))); }
Constructors['IFC2X3'][IFCRELASSOCIATES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociates(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATES] = (i:IFC2X3.IfcRelAssociates):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects]; }
InheritanceDef['IFC2X3'][IFCRELASSOCIATES] = [IFCRELASSOCIATESPROFILEPROPERTIES,IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL,IFCRELASSOCIATESAPPLIEDVALUE];
FromRawLineData['IFC2X3'][IFCRELASSOCIATESAPPLIEDVALUE] = (d: RawLineData) => { new IFC2X3.IfcRelAssociatesAppliedValue(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value)), new Reference<IFC2X3.IfcAppliedValue>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELASSOCIATESAPPLIEDVALUE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociatesAppliedValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATESAPPLIEDVALUE] = (i:IFC2X3.IfcRelAssociatesAppliedValue):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingAppliedValue]; }
FromRawLineData['IFC2X3'][IFCRELASSOCIATESAPPROVAL] = (d: RawLineData) => { new IFC2X3.IfcRelAssociatesApproval(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value)), new Reference<IFC2X3.IfcApproval>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELASSOCIATESAPPROVAL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociatesApproval(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATESAPPROVAL] = (i:IFC2X3.IfcRelAssociatesApproval):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingApproval]; }
FromRawLineData['IFC2X3'][IFCRELASSOCIATESCLASSIFICATION] = (d: RawLineData) => { new IFC2X3.IfcRelAssociatesClassification(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELASSOCIATESCLASSIFICATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociatesClassification(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATESCLASSIFICATION] = (i:IFC2X3.IfcRelAssociatesClassification):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingClassification]; }
FromRawLineData['IFC2X3'][IFCRELASSOCIATESCONSTRAINT] = (d: RawLineData) => { new IFC2X3.IfcRelAssociatesConstraint(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value)), new IFC2X3.IfcLabel(d.arguments[5].value), new Reference<IFC2X3.IfcConstraint>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELASSOCIATESCONSTRAINT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociatesConstraint(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATESCONSTRAINT] = (i:IFC2X3.IfcRelAssociatesConstraint):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.Intent, i.RelatingConstraint]; }
FromRawLineData['IFC2X3'][IFCRELASSOCIATESDOCUMENT] = (d: RawLineData) => { new IFC2X3.IfcRelAssociatesDocument(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELASSOCIATESDOCUMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociatesDocument(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATESDOCUMENT] = (i:IFC2X3.IfcRelAssociatesDocument):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingDocument]; }
FromRawLineData['IFC2X3'][IFCRELASSOCIATESLIBRARY] = (d: RawLineData) => { new IFC2X3.IfcRelAssociatesLibrary(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELASSOCIATESLIBRARY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociatesLibrary(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATESLIBRARY] = (i:IFC2X3.IfcRelAssociatesLibrary):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingLibrary]; }
FromRawLineData['IFC2X3'][IFCRELASSOCIATESMATERIAL] = (d: RawLineData) => { new IFC2X3.IfcRelAssociatesMaterial(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELASSOCIATESMATERIAL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociatesMaterial(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATESMATERIAL] = (i:IFC2X3.IfcRelAssociatesMaterial):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingMaterial]; }
FromRawLineData['IFC2X3'][IFCRELASSOCIATESPROFILEPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcRelAssociatesProfileProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcRoot>(p.value)), new Reference<IFC2X3.IfcProfileProperties>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcShapeAspect>(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCRELASSOCIATESPROFILEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssociatesProfileProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCRELASSOCIATESPROFILEPROPERTIES] = (i:IFC2X3.IfcRelAssociatesProfileProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingProfileProperties, i.ProfileSectionLocation, i.ProfileOrientation]; }
FromRawLineData['IFC2X3'][IFCRELCONNECTS] = (d: RawLineData) => { new IFC2X3.IfcRelConnects(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCRELCONNECTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnects(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTS] = (i:IFC2X3.IfcRelConnects):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC2X3'][IFCRELCONNECTS] = [IFCRELVOIDSELEMENT,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELPROJECTSELEMENT,IFCRELINTERACTIONREQUIREMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALELEMENT,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS];
FromRawLineData['IFC2X3'][IFCRELCONNECTSELEMENTS] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsElements(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC2X3.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC2X3.IfcElement>(d.arguments[5].value), new Reference<IFC2X3.IfcElement>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELCONNECTSELEMENTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSELEMENTS] = (i:IFC2X3.IfcRelConnectsElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement]; }
InheritanceDef['IFC2X3'][IFCRELCONNECTSELEMENTS] = [IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS];
FromRawLineData['IFC2X3'][IFCRELCONNECTSPATHELEMENTS] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsPathElements(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC2X3.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC2X3.IfcElement>(d.arguments[5].value), new Reference<IFC2X3.IfcElement>(d.arguments[6].value), d.arguments[7].map((p:any) => p.value), d.arguments[8].map((p:any) => p.value), d.arguments[9], d.arguments[10]); }
Constructors['IFC2X3'][IFCRELCONNECTSPATHELEMENTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsPathElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSPATHELEMENTS] = (i:IFC2X3.IfcRelConnectsPathElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement, i.RelatingPriorities, i.RelatedPriorities, i.RelatedConnectionType, i.RelatingConnectionType]; }
FromRawLineData['IFC2X3'][IFCRELCONNECTSPORTTOELEMENT] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsPortToElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcPort>(d.arguments[4].value), new Reference<IFC2X3.IfcElement>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELCONNECTSPORTTOELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsPortToElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSPORTTOELEMENT] = (i:IFC2X3.IfcRelConnectsPortToElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingPort, i.RelatedElement]; }
FromRawLineData['IFC2X3'][IFCRELCONNECTSPORTS] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsPorts(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcPort>(d.arguments[4].value), new Reference<IFC2X3.IfcPort>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcElement>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELCONNECTSPORTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsPorts(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSPORTS] = (i:IFC2X3.IfcRelConnectsPorts):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingPort, i.RelatedPort, i.RealizingElement]; }
FromRawLineData['IFC2X3'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsStructuralActivity(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC2X3.IfcStructuralActivity>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsStructuralActivity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (i:IFC2X3.IfcRelConnectsStructuralActivity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedStructuralActivity]; }
FromRawLineData['IFC2X3'][IFCRELCONNECTSSTRUCTURALELEMENT] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsStructuralElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcElement>(d.arguments[4].value), new Reference<IFC2X3.IfcStructuralMember>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELCONNECTSSTRUCTURALELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsStructuralElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSSTRUCTURALELEMENT] = (i:IFC2X3.IfcRelConnectsStructuralElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedStructuralMember]; }
FromRawLineData['IFC2X3'][IFCRELCONNECTSSTRUCTURALMEMBER] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsStructuralMember(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcStructuralMember>(d.arguments[4].value), new Reference<IFC2X3.IfcStructuralConnection>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcBoundaryCondition>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcStructuralConnectionCondition>(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCRELCONNECTSSTRUCTURALMEMBER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsStructuralMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSSTRUCTURALMEMBER] = (i:IFC2X3.IfcRelConnectsStructuralMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingStructuralMember, i.RelatedStructuralConnection, i.AppliedCondition, i.AdditionalConditions, i.SupportedLength, i.ConditionCoordinateSystem]; }
InheritanceDef['IFC2X3'][IFCRELCONNECTSSTRUCTURALMEMBER] = [IFCRELCONNECTSWITHECCENTRICITY];
FromRawLineData['IFC2X3'][IFCRELCONNECTSWITHECCENTRICITY] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsWithEccentricity(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcStructuralMember>(d.arguments[4].value), new Reference<IFC2X3.IfcStructuralConnection>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcBoundaryCondition>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcStructuralConnectionCondition>(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[9].value), new Reference<IFC2X3.IfcConnectionGeometry>(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCRELCONNECTSWITHECCENTRICITY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsWithEccentricity(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSWITHECCENTRICITY] = (i:IFC2X3.IfcRelConnectsWithEccentricity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingStructuralMember, i.RelatedStructuralConnection, i.AppliedCondition, i.AdditionalConditions, i.SupportedLength, i.ConditionCoordinateSystem, i.ConnectionConstraint]; }
FromRawLineData['IFC2X3'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (d: RawLineData) => { new IFC2X3.IfcRelConnectsWithRealizingElements(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC2X3.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC2X3.IfcElement>(d.arguments[5].value), new Reference<IFC2X3.IfcElement>(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcElement>(p.value)), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelConnectsWithRealizingElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (i:IFC2X3.IfcRelConnectsWithRealizingElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement, i.RealizingElements, i.ConnectionType]; }
FromRawLineData['IFC2X3'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (d: RawLineData) => { new IFC2X3.IfcRelContainedInSpatialStructure(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcProduct>(p.value)), new Reference<IFC2X3.IfcSpatialStructureElement>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelContainedInSpatialStructure(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (i:IFC2X3.IfcRelContainedInSpatialStructure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedElements, i.RelatingStructure]; }
FromRawLineData['IFC2X3'][IFCRELCOVERSBLDGELEMENTS] = (d: RawLineData) => { new IFC2X3.IfcRelCoversBldgElements(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcElement>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcCovering>(p.value))); }
Constructors['IFC2X3'][IFCRELCOVERSBLDGELEMENTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelCoversBldgElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELCOVERSBLDGELEMENTS] = (i:IFC2X3.IfcRelCoversBldgElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingBuildingElement, i.RelatedCoverings]; }
FromRawLineData['IFC2X3'][IFCRELCOVERSSPACES] = (d: RawLineData) => { new IFC2X3.IfcRelCoversSpaces(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcSpace>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcCovering>(p.value))); }
Constructors['IFC2X3'][IFCRELCOVERSSPACES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelCoversSpaces(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELCOVERSSPACES] = (i:IFC2X3.IfcRelCoversSpaces):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedSpace, i.RelatedCoverings]; }
FromRawLineData['IFC2X3'][IFCRELDECOMPOSES] = (d: RawLineData) => { new IFC2X3.IfcRelDecomposes(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcObjectDefinition>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value))); }
Constructors['IFC2X3'][IFCRELDECOMPOSES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelDecomposes(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELDECOMPOSES] = (i:IFC2X3.IfcRelDecomposes):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingObject, i.RelatedObjects]; }
InheritanceDef['IFC2X3'][IFCRELDECOMPOSES] = [IFCRELAGGREGATES,IFCRELNESTS];
FromRawLineData['IFC2X3'][IFCRELDEFINES] = (d: RawLineData) => { new IFC2X3.IfcRelDefines(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObject>(p.value))); }
Constructors['IFC2X3'][IFCRELDEFINES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelDefines(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCRELDEFINES] = (i:IFC2X3.IfcRelDefines):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects]; }
InheritanceDef['IFC2X3'][IFCRELDEFINES] = [IFCRELDEFINESBYTYPE,IFCRELOVERRIDESPROPERTIES,IFCRELDEFINESBYPROPERTIES];
FromRawLineData['IFC2X3'][IFCRELDEFINESBYPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcRelDefinesByProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObject>(p.value)), new Reference<IFC2X3.IfcPropertySetDefinition>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELDEFINESBYPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelDefinesByProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELDEFINESBYPROPERTIES] = (i:IFC2X3.IfcRelDefinesByProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingPropertyDefinition]; }
InheritanceDef['IFC2X3'][IFCRELDEFINESBYPROPERTIES] = [IFCRELOVERRIDESPROPERTIES];
FromRawLineData['IFC2X3'][IFCRELDEFINESBYTYPE] = (d: RawLineData) => { new IFC2X3.IfcRelDefinesByType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObject>(p.value)), new Reference<IFC2X3.IfcTypeObject>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELDEFINESBYTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelDefinesByType(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELDEFINESBYTYPE] = (i:IFC2X3.IfcRelDefinesByType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingType]; }
FromRawLineData['IFC2X3'][IFCRELFILLSELEMENT] = (d: RawLineData) => { new IFC2X3.IfcRelFillsElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcOpeningElement>(d.arguments[4].value), new Reference<IFC2X3.IfcElement>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELFILLSELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelFillsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELFILLSELEMENT] = (i:IFC2X3.IfcRelFillsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingOpeningElement, i.RelatedBuildingElement]; }
FromRawLineData['IFC2X3'][IFCRELFLOWCONTROLELEMENTS] = (d: RawLineData) => { new IFC2X3.IfcRelFlowControlElements(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcDistributionControlElement>(p.value)), new Reference<IFC2X3.IfcDistributionFlowElement>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELFLOWCONTROLELEMENTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelFlowControlElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELFLOWCONTROLELEMENTS] = (i:IFC2X3.IfcRelFlowControlElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedControlElements, i.RelatingFlowElement]; }
FromRawLineData['IFC2X3'][IFCRELINTERACTIONREQUIREMENTS] = (d: RawLineData) => { new IFC2X3.IfcRelInteractionRequirements(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcCountMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcSpatialStructureElement>(d.arguments[6].value), new Reference<IFC2X3.IfcSpaceProgram>(d.arguments[7].value), new Reference<IFC2X3.IfcSpaceProgram>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCRELINTERACTIONREQUIREMENTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelInteractionRequirements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCRELINTERACTIONREQUIREMENTS] = (i:IFC2X3.IfcRelInteractionRequirements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.DailyInteraction, i.ImportanceRating, i.LocationOfInteraction, i.RelatedSpaceProgram, i.RelatingSpaceProgram]; }
FromRawLineData['IFC2X3'][IFCRELNESTS] = (d: RawLineData) => { new IFC2X3.IfcRelNests(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcObjectDefinition>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value))); }
Constructors['IFC2X3'][IFCRELNESTS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelNests(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELNESTS] = (i:IFC2X3.IfcRelNests):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingObject, i.RelatedObjects]; }
FromRawLineData['IFC2X3'][IFCRELOCCUPIESSPACES] = (d: RawLineData) => { new IFC2X3.IfcRelOccupiesSpaces(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcActor>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcActorRole>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCRELOCCUPIESSPACES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelOccupiesSpaces(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCRELOCCUPIESSPACES] = (i:IFC2X3.IfcRelOccupiesSpaces):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingActor, i.ActingRole]; }
FromRawLineData['IFC2X3'][IFCRELOVERRIDESPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcRelOverridesProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObject>(p.value)), new Reference<IFC2X3.IfcPropertySetDefinition>(d.arguments[5].value), d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcProperty>(p.value))); }
Constructors['IFC2X3'][IFCRELOVERRIDESPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelOverridesProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELOVERRIDESPROPERTIES] = (i:IFC2X3.IfcRelOverridesProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingPropertyDefinition, i.OverridingProperties]; }
FromRawLineData['IFC2X3'][IFCRELPROJECTSELEMENT] = (d: RawLineData) => { new IFC2X3.IfcRelProjectsElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcElement>(d.arguments[4].value), new Reference<IFC2X3.IfcFeatureElementAddition>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELPROJECTSELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelProjectsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELPROJECTSELEMENT] = (i:IFC2X3.IfcRelProjectsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedFeatureElement]; }
FromRawLineData['IFC2X3'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (d: RawLineData) => { new IFC2X3.IfcRelReferencedInSpatialStructure(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcProduct>(p.value)), new Reference<IFC2X3.IfcSpatialStructureElement>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelReferencedInSpatialStructure(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (i:IFC2X3.IfcRelReferencedInSpatialStructure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedElements, i.RelatingStructure]; }
FromRawLineData['IFC2X3'][IFCRELSCHEDULESCOSTITEMS] = (d: RawLineData) => { new IFC2X3.IfcRelSchedulesCostItems(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcControl>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCRELSCHEDULESCOSTITEMS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelSchedulesCostItems(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCRELSCHEDULESCOSTITEMS] = (i:IFC2X3.IfcRelSchedulesCostItems):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingControl]; }
FromRawLineData['IFC2X3'][IFCRELSEQUENCE] = (d: RawLineData) => { new IFC2X3.IfcRelSequence(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcProcess>(d.arguments[4].value), new Reference<IFC2X3.IfcProcess>(d.arguments[5].value), new IFC2X3.IfcTimeMeasure(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC2X3'][IFCRELSEQUENCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelSequence(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCRELSEQUENCE] = (i:IFC2X3.IfcRelSequence):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingProcess, i.RelatedProcess, i.TimeLag, i.SequenceType]; }
FromRawLineData['IFC2X3'][IFCRELSERVICESBUILDINGS] = (d: RawLineData) => { new IFC2X3.IfcRelServicesBuildings(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcSystem>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcSpatialStructureElement>(p.value))); }
Constructors['IFC2X3'][IFCRELSERVICESBUILDINGS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelServicesBuildings(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELSERVICESBUILDINGS] = (i:IFC2X3.IfcRelServicesBuildings):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSystem, i.RelatedBuildings]; }
FromRawLineData['IFC2X3'][IFCRELSPACEBOUNDARY] = (d: RawLineData) => { new IFC2X3.IfcRelSpaceBoundary(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcSpace>(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcElement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcConnectionGeometry>(d.arguments[6].value), d.arguments[7], d.arguments[8]); }
Constructors['IFC2X3'][IFCRELSPACEBOUNDARY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelSpaceBoundary(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCRELSPACEBOUNDARY] = (i:IFC2X3.IfcRelSpaceBoundary):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedBuildingElement, i.ConnectionGeometry, i.PhysicalOrVirtualBoundary, i.InternalOrExternalBoundary]; }
FromRawLineData['IFC2X3'][IFCRELVOIDSELEMENT] = (d: RawLineData) => { new IFC2X3.IfcRelVoidsElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcElement>(d.arguments[4].value), new Reference<IFC2X3.IfcFeatureElementSubtraction>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCRELVOIDSELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelVoidsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELVOIDSELEMENT] = (i:IFC2X3.IfcRelVoidsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingBuildingElement, i.RelatedOpeningElement]; }
FromRawLineData['IFC2X3'][IFCRESOURCE] = (d: RawLineData) => { new IFC2X3.IfcResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCRESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcResource(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCRESOURCE] = (i:IFC2X3.IfcResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC2X3'][IFCRESOURCE] = [IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE];
InversePropertyDef['IFC2X3'][IFCRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC2X3'][IFCREVOLVEDAREASOLID] = (d: RawLineData) => { new IFC2X3.IfcRevolvedAreaSolid(d.ID, new Reference<IFC2X3.IfcProfileDef>(d.arguments[0].value), new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC2X3.IfcAxis1Placement>(d.arguments[2].value), new IFC2X3.IfcPlaneAngleMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCREVOLVEDAREASOLID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRevolvedAreaSolid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCREVOLVEDAREASOLID] = (i:IFC2X3.IfcRevolvedAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Axis, i.Angle]; }
InversePropertyDef['IFC2X3'][IFCREVOLVEDAREASOLID] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCRIGHTCIRCULARCONE] = (d: RawLineData) => { new IFC2X3.IfcRightCircularCone(d.ID, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCRIGHTCIRCULARCONE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRightCircularCone(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCRIGHTCIRCULARCONE] = (i:IFC2X3.IfcRightCircularCone):unknown[] => { return [i.Position, i.Height, i.BottomRadius]; }
InversePropertyDef['IFC2X3'][IFCRIGHTCIRCULARCONE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCRIGHTCIRCULARCYLINDER] = (d: RawLineData) => { new IFC2X3.IfcRightCircularCylinder(d.ID, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCRIGHTCIRCULARCYLINDER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRightCircularCylinder(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCRIGHTCIRCULARCYLINDER] = (i:IFC2X3.IfcRightCircularCylinder):unknown[] => { return [i.Position, i.Height, i.Radius]; }
InversePropertyDef['IFC2X3'][IFCRIGHTCIRCULARCYLINDER] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSPATIALSTRUCTUREELEMENT] = (d: RawLineData) => { new IFC2X3.IfcSpatialStructureElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCSPATIALSTRUCTUREELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSpatialStructureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSPATIALSTRUCTUREELEMENT] = (i:IFC2X3.IfcSpatialStructureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType]; }
InheritanceDef['IFC2X3'][IFCSPATIALSTRUCTUREELEMENT] = [IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING];
InversePropertyDef['IFC2X3'][IFCSPATIALSTRUCTUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC2X3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcSpatialStructureElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSpatialStructureElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (i:IFC2X3.IfcSpatialStructureElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = [IFCSPACETYPE];
InversePropertyDef['IFC2X3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSPHERE] = (d: RawLineData) => { new IFC2X3.IfcSphere(d.ID, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCSPHERE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSphere(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCSPHERE] = (i:IFC2X3.IfcSphere):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC2X3'][IFCSPHERE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALACTIVITY] = (d: RawLineData) => { new IFC2X3.IfcStructuralActivity(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCSTRUCTURALACTIVITY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralActivity(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALACTIVITY] = (i:IFC2X3.IfcStructuralActivity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALACTIVITY] = [IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALPLANARACTIONVARYING,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALLINEARACTIONVARYING,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALREACTION];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALACTIVITY] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALITEM] = (d: RawLineData) => { new IFC2X3.IfcStructuralItem(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALITEM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralItem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALITEM] = (i:IFC2X3.IfcStructuralItem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALITEM] = [IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALITEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALMEMBER] = (d: RawLineData) => { new IFC2X3.IfcStructuralMember(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALMEMBER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALMEMBER] = (i:IFC2X3.IfcStructuralMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALMEMBER] = [IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ReferencesElement',IFCRELCONNECTSSTRUCTURALELEMENT,5,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALREACTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralReaction(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCSTRUCTURALREACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALREACTION] = (i:IFC2X3.IfcStructuralReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALREACTION] = [IFCSTRUCTURALPOINTREACTION];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],['Causes',IFCSTRUCTURALACTION,10,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALSURFACEMEMBER] = (d: RawLineData) => { new IFC2X3.IfcStructuralSurfaceMember(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALSURFACEMEMBER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralSurfaceMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALSURFACEMEMBER] = (i:IFC2X3.IfcStructuralSurfaceMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Thickness]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALSURFACEMEMBER] = [IFCSTRUCTURALSURFACEMEMBERVARYING];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALSURFACEMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ReferencesElement',IFCRELCONNECTSSTRUCTURALELEMENT,5,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (d: RawLineData) => { new IFC2X3.IfcStructuralSurfaceMemberVarying(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), d.arguments[9].map((p:any) => new IFC2X3.IfcPositiveLengthMeasure(p.value)), new Reference<IFC2X3.IfcShapeAspect>(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralSurfaceMemberVarying(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (i:IFC2X3.IfcStructuralSurfaceMemberVarying):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Thickness, i.SubsequentThickness, i.VaryingThicknessLocation]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALSURFACEMEMBERVARYING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ReferencesElement',IFCRELCONNECTSSTRUCTURALELEMENT,5,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTUREDDIMENSIONCALLOUT] = (d: RawLineData) => { new IFC2X3.IfcStructuredDimensionCallout(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCSTRUCTUREDDIMENSIONCALLOUT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuredDimensionCallout(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCSTRUCTUREDDIMENSIONCALLOUT] = (i:IFC2X3.IfcStructuredDimensionCallout):unknown[] => { return [i.Contents]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTUREDDIMENSIONCALLOUT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['IsRelatedFromCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],['IsRelatedToCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],];
FromRawLineData['IFC2X3'][IFCSURFACECURVESWEPTAREASOLID] = (d: RawLineData) => { new IFC2X3.IfcSurfaceCurveSweptAreaSolid(d.ID, new Reference<IFC2X3.IfcProfileDef>(d.arguments[0].value), new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC2X3.IfcCurve>(d.arguments[2].value), new IFC2X3.IfcParameterValue(d.arguments[3].value), new IFC2X3.IfcParameterValue(d.arguments[4].value), new Reference<IFC2X3.IfcSurface>(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCSURFACECURVESWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceCurveSweptAreaSolid(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCSURFACECURVESWEPTAREASOLID] = (i:IFC2X3.IfcSurfaceCurveSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Directrix, i.StartParam, i.EndParam, i.ReferenceSurface]; }
InversePropertyDef['IFC2X3'][IFCSURFACECURVESWEPTAREASOLID] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSURFACEOFLINEAREXTRUSION] = (d: RawLineData) => { new IFC2X3.IfcSurfaceOfLinearExtrusion(d.ID, new Reference<IFC2X3.IfcProfileDef>(d.arguments[0].value), new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC2X3.IfcDirection>(d.arguments[2].value), new IFC2X3.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCSURFACEOFLINEAREXTRUSION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceOfLinearExtrusion(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCSURFACEOFLINEAREXTRUSION] = (i:IFC2X3.IfcSurfaceOfLinearExtrusion):unknown[] => { return [i.SweptCurve, i.Position, i.ExtrudedDirection, i.Depth]; }
InversePropertyDef['IFC2X3'][IFCSURFACEOFLINEAREXTRUSION] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSURFACEOFREVOLUTION] = (d: RawLineData) => { new IFC2X3.IfcSurfaceOfRevolution(d.ID, new Reference<IFC2X3.IfcProfileDef>(d.arguments[0].value), new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC2X3.IfcAxis1Placement>(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCSURFACEOFREVOLUTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSurfaceOfRevolution(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCSURFACEOFREVOLUTION] = (i:IFC2X3.IfcSurfaceOfRevolution):unknown[] => { return [i.SweptCurve, i.Position, i.AxisPosition]; }
InversePropertyDef['IFC2X3'][IFCSURFACEOFREVOLUTION] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCSYSTEMFURNITUREELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcSystemFurnitureElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCSYSTEMFURNITUREELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSystemFurnitureElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSYSTEMFURNITUREELEMENTTYPE] = (i:IFC2X3.IfcSystemFurnitureElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InversePropertyDef['IFC2X3'][IFCSYSTEMFURNITUREELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCTASK] = (d: RawLineData) => { new IFC2X3.IfcTask(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8].value, !d.arguments[9] ? null :d.arguments[9].value); }
Constructors['IFC2X3'][IFCTASK] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTask(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCTASK] = (i:IFC2X3.IfcTask):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TaskId, i.Status, i.WorkMethod, i.IsMilestone, i.Priority]; }
InheritanceDef['IFC2X3'][IFCTASK] = [IFCORDERACTION,IFCMOVE];
InversePropertyDef['IFC2X3'][IFCTASK] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],];
FromRawLineData['IFC2X3'][IFCTRANSPORTELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcTransportElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCTRANSPORTELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTransportElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCTRANSPORTELEMENTTYPE] = (i:IFC2X3.IfcTransportElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCTRANSPORTELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCACTOR] = (d: RawLineData) => { new IFC2X3.IfcActor(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new Reference(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCACTOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcActor(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCACTOR] = (i:IFC2X3.IfcActor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheActor]; }
InheritanceDef['IFC2X3'][IFCACTOR] = [IFCOCCUPANT];
InversePropertyDef['IFC2X3'][IFCACTOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsActingUpon',IFCRELASSIGNSTOACTOR,6,true],];
FromRawLineData['IFC2X3'][IFCANNOTATION] = (d: RawLineData) => { new IFC2X3.IfcAnnotation(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCANNOTATION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAnnotation(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCANNOTATION] = (i:IFC2X3.IfcAnnotation):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InversePropertyDef['IFC2X3'][IFCANNOTATION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCASYMMETRICISHAPEPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcAsymmetricIShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[7].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[11].value)); }
Constructors['IFC2X3'][IFCASYMMETRICISHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAsymmetricIShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCASYMMETRICISHAPEPROFILEDEF] = (i:IFC2X3.IfcAsymmetricIShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.OverallWidth, i.OverallDepth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.TopFlangeWidth, i.TopFlangeThickness, i.TopFlangeFilletRadius, i.CentreOfGravityInY]; }
FromRawLineData['IFC2X3'][IFCBLOCK] = (d: RawLineData) => { new IFC2X3.IfcBlock(d.ID, new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC2X3'][IFCBLOCK] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBlock(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC2X3'][IFCBLOCK] = (i:IFC2X3.IfcBlock):unknown[] => { return [i.Position, i.XLength, i.YLength, i.ZLength]; }
InversePropertyDef['IFC2X3'][IFCBLOCK] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBOOLEANCLIPPINGRESULT] = (d: RawLineData) => { new IFC2X3.IfcBooleanClippingResult(d.ID, d.arguments[0], new Reference(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCBOOLEANCLIPPINGRESULT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBooleanClippingResult(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCBOOLEANCLIPPINGRESULT] = (i:IFC2X3.IfcBooleanClippingResult):unknown[] => { return [i.Operator, i.FirstOperand, i.SecondOperand]; }
InversePropertyDef['IFC2X3'][IFCBOOLEANCLIPPINGRESULT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBOUNDEDCURVE] = (d: RawLineData) => { new IFC2X3.IfcBoundedCurve(d.ID, ); }
Constructors['IFC2X3'][IFCBOUNDEDCURVE] = (expressID:number, _:any) => { return new IFC2X3.IfcBoundedCurve(expressID, ); }
ToRawLineData['IFC2X3'][IFCBOUNDEDCURVE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC2X3'][IFCBOUNDEDCURVE] = [IFCRATIONALBEZIERCURVE,IFCBEZIERCURVE,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFC2DCOMPOSITECURVE,IFCCOMPOSITECURVE];
InversePropertyDef['IFC2X3'][IFCBOUNDEDCURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBUILDING] = (d: RawLineData) => { new IFC2X3.IfcBuilding(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new Reference<IFC2X3.IfcPostalAddress>(d.arguments[11].value)); }
Constructors['IFC2X3'][IFCBUILDING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBuilding(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCBUILDING] = (i:IFC2X3.IfcBuilding):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.ElevationOfRefHeight, i.ElevationOfTerrain, i.BuildingAddress]; }
InversePropertyDef['IFC2X3'][IFCBUILDING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC2X3'][IFCBUILDINGELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcBuildingElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCBUILDINGELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBuildingElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCBUILDINGELEMENTTYPE] = (i:IFC2X3.IfcBuildingElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCBUILDINGELEMENTTYPE] = [IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWALLTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCMEMBERTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE];
InversePropertyDef['IFC2X3'][IFCBUILDINGELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCBUILDINGSTOREY] = (d: RawLineData) => { new IFC2X3.IfcBuildingStorey(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCBUILDINGSTOREY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBuildingStorey(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCBUILDINGSTOREY] = (i:IFC2X3.IfcBuildingStorey):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.Elevation]; }
InversePropertyDef['IFC2X3'][IFCBUILDINGSTOREY] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC2X3'][IFCCIRCLEHOLLOWPROFILEDEF] = (d: RawLineData) => { new IFC2X3.IfcCircleHollowProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC2X3.IfcLabel(d.arguments[1].value), new Reference<IFC2X3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCCIRCLEHOLLOWPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCircleHollowProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCIRCLEHOLLOWPROFILEDEF] = (i:IFC2X3.IfcCircleHollowProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Radius, i.WallThickness]; }
FromRawLineData['IFC2X3'][IFCCOLUMNTYPE] = (d: RawLineData) => { new IFC2X3.IfcColumnType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCOLUMNTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcColumnType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCOLUMNTYPE] = (i:IFC2X3.IfcColumnType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCOLUMNTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCOMPOSITECURVE] = (d: RawLineData) => { new IFC2X3.IfcCompositeCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcCompositeCurveSegment>(p.value)), d.arguments[1].value); }
Constructors['IFC2X3'][IFCCOMPOSITECURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCompositeCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCOMPOSITECURVE] = (i:IFC2X3.IfcCompositeCurve):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InheritanceDef['IFC2X3'][IFCCOMPOSITECURVE] = [IFC2DCOMPOSITECURVE];
InversePropertyDef['IFC2X3'][IFCCOMPOSITECURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCONIC] = (d: RawLineData) => { new IFC2X3.IfcConic(d.ID, new Reference(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCCONIC] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConic(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCCONIC] = (i:IFC2X3.IfcConic):unknown[] => { return [i.Position]; }
InheritanceDef['IFC2X3'][IFCCONIC] = [IFCCIRCLE,IFCELLIPSE];
InversePropertyDef['IFC2X3'][IFCCONIC] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCONSTRUCTIONRESOURCE] = (d: RawLineData) => { new IFC2X3.IfcConstructionResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCCONSTRUCTIONRESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConstructionResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCCONSTRUCTIONRESOURCE] = (i:IFC2X3.IfcConstructionResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ResourceIdentifier, i.ResourceGroup, i.ResourceConsumption, i.BaseQuantity]; }
InheritanceDef['IFC2X3'][IFCCONSTRUCTIONRESOURCE] = [IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE];
InversePropertyDef['IFC2X3'][IFCCONSTRUCTIONRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC2X3'][IFCCONTROL] = (d: RawLineData) => { new IFC2X3.IfcControl(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCCONTROL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcControl(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCONTROL] = (i:IFC2X3.IfcControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC2X3'][IFCCONTROL] = [IFCCONDITIONCRITERION,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCTIMESERIESSCHEDULE,IFCSPACEPROGRAM,IFCSERVICELIFE,IFCSCHEDULETIMECONTROL,IFCPROJECTORDERRECORD,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCFURNITURESTANDARD,IFCEQUIPMENTSTANDARD,IFCCOSTSCHEDULE,IFCCOSTITEM];
InversePropertyDef['IFC2X3'][IFCCONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCCOSTITEM] = (d: RawLineData) => { new IFC2X3.IfcCostItem(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCCOSTITEM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCostItem(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCOSTITEM] = (i:IFC2X3.IfcCostItem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InversePropertyDef['IFC2X3'][IFCCOSTITEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCCOSTSCHEDULE] = (d: RawLineData) => { new IFC2X3.IfcCostSchedule(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference(p.value)), !d.arguments[10] ? null :new Reference(d.arguments[10].value), new IFC2X3.IfcIdentifier(d.arguments[11].value), d.arguments[12]); }
Constructors['IFC2X3'][IFCCOSTSCHEDULE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCostSchedule(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC2X3'][IFCCOSTSCHEDULE] = (i:IFC2X3.IfcCostSchedule):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.SubmittedBy, i.PreparedBy, i.SubmittedOn, i.Status, i.TargetUsers, i.UpdateDate, i.ID, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCOSTSCHEDULE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCCOVERINGTYPE] = (d: RawLineData) => { new IFC2X3.IfcCoveringType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCOVERINGTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCoveringType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCOVERINGTYPE] = (i:IFC2X3.IfcCoveringType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCOVERINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCREWRESOURCE] = (d: RawLineData) => { new IFC2X3.IfcCrewResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCCREWRESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCrewResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCCREWRESOURCE] = (i:IFC2X3.IfcCrewResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ResourceIdentifier, i.ResourceGroup, i.ResourceConsumption, i.BaseQuantity]; }
InversePropertyDef['IFC2X3'][IFCCREWRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC2X3'][IFCCURTAINWALLTYPE] = (d: RawLineData) => { new IFC2X3.IfcCurtainWallType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCURTAINWALLTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCurtainWallType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCURTAINWALLTYPE] = (i:IFC2X3.IfcCurtainWallType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCURTAINWALLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDIMENSIONCURVEDIRECTEDCALLOUT] = (d: RawLineData) => { new IFC2X3.IfcDimensionCurveDirectedCallout(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCDIMENSIONCURVEDIRECTEDCALLOUT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDimensionCurveDirectedCallout(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCDIMENSIONCURVEDIRECTEDCALLOUT] = (i:IFC2X3.IfcDimensionCurveDirectedCallout):unknown[] => { return [i.Contents]; }
InheritanceDef['IFC2X3'][IFCDIMENSIONCURVEDIRECTEDCALLOUT] = [IFCDIAMETERDIMENSION,IFCANGULARDIMENSION,IFCRADIUSDIMENSION,IFCLINEARDIMENSION];
InversePropertyDef['IFC2X3'][IFCDIMENSIONCURVEDIRECTEDCALLOUT] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['IsRelatedFromCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],['IsRelatedToCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcDistributionElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCDISTRIBUTIONELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONELEMENTTYPE] = (i:IFC2X3.IfcDistributionElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCDISTRIBUTIONELEMENTTYPE] = [IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCSENSORTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICHEATERTYPE,IFCELECTRICAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCGASTERMINALTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSPACEHEATERTYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE];
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcDistributionFlowElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionFlowElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (i:IFC2X3.IfcDistributionFlowElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = [IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICHEATERTYPE,IFCELECTRICAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCGASTERMINALTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSPACEHEATERTYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENERGYCONVERSIONDEVICETYPE];
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELECTRICALBASEPROPERTIES] = (d: RawLineData) => { new IFC2X3.IfcElectricalBaseProperties(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new IFC2X3.IfcLabel(d.arguments[5].value), d.arguments[6], new IFC2X3.IfcElectricVoltageMeasure(d.arguments[7].value), new IFC2X3.IfcFrequencyMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcElectricCurrentMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcElectricCurrentMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcPowerMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcPowerMeasure(d.arguments[12].value), d.arguments[13].value); }
Constructors['IFC2X3'][IFCELECTRICALBASEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricalBaseProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC2X3'][IFCELECTRICALBASEPROPERTIES] = (i:IFC2X3.IfcElectricalBaseProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.EnergySequence, i.UserDefinedEnergySequence, i.ElectricCurrentType, i.InputVoltage, i.InputFrequency, i.FullLoadCurrent, i.MinimumCircuitCurrent, i.MaximumPowerInput, i.RatedPowerInput, i.InputPhase]; }
InversePropertyDef['IFC2X3'][IFCELECTRICALBASEPROPERTIES] = [['HasAssociations',IFCRELASSOCIATES,4,true],['PropertyDefinitionOf',IFCRELDEFINESBYPROPERTIES,5,true],['DefinesType',IFCTYPEOBJECT,5,true],];
FromRawLineData['IFC2X3'][IFCELEMENT] = (d: RawLineData) => { new IFC2X3.IfcElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCELEMENT] = (i:IFC2X3.IfcElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCELEMENT] = [IFCELECTRICALELEMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFLOWTREATMENTDEVICE,IFCFLOWTERMINAL,IFCFLOWSTORAGEDEVICE,IFCFLOWSEGMENT,IFCFLOWMOVINGDEVICE,IFCFLOWFITTING,IFCELECTRICDISTRIBUTIONPOINT,IFCFLOWCONTROLLER,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATE,IFCPILE,IFCMEMBER,IFCFOOTING,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMN,IFCBUILDINGELEMENTPROXY,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCBUILDINGELEMENTPART,IFCBUILDINGELEMENTCOMPONENT,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCFURNISHINGELEMENT,IFCCHAMFEREDGEFEATURE,IFCROUNDEDEDGEFEATURE,IFCEDGEFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCEQUIPMENTELEMENT,IFCDISCRETEACCESSORY,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY];
InversePropertyDef['IFC2X3'][IFCELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCELEMENTASSEMBLY] = (d: RawLineData) => { new IFC2X3.IfcElementAssembly(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC2X3'][IFCELEMENTASSEMBLY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElementAssembly(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCELEMENTASSEMBLY] = (i:IFC2X3.IfcElementAssembly):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.AssemblyPlace, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCELEMENTASSEMBLY] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCELEMENTCOMPONENT] = (d: RawLineData) => { new IFC2X3.IfcElementComponent(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCELEMENTCOMPONENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElementComponent(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCELEMENTCOMPONENT] = (i:IFC2X3.IfcElementComponent):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCELEMENTCOMPONENT] = [IFCDISCRETEACCESSORY,IFCMECHANICALFASTENER,IFCFASTENER];
InversePropertyDef['IFC2X3'][IFCELEMENTCOMPONENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCELEMENTCOMPONENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcElementComponentType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCELEMENTCOMPONENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElementComponentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCELEMENTCOMPONENTTYPE] = (i:IFC2X3.IfcElementComponentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCELEMENTCOMPONENTTYPE] = [IFCVIBRATIONISOLATORTYPE,IFCDISCRETEACCESSORYTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE];
InversePropertyDef['IFC2X3'][IFCELEMENTCOMPONENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELLIPSE] = (d: RawLineData) => { new IFC2X3.IfcEllipse(d.ID, new Reference(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC2X3'][IFCELLIPSE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEllipse(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC2X3'][IFCELLIPSE] = (i:IFC2X3.IfcEllipse):unknown[] => { return [i.Position, i.SemiAxis1, i.SemiAxis2]; }
InversePropertyDef['IFC2X3'][IFCELLIPSE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCENERGYCONVERSIONDEVICETYPE] = (d: RawLineData) => { new IFC2X3.IfcEnergyConversionDeviceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCENERGYCONVERSIONDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEnergyConversionDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCENERGYCONVERSIONDEVICETYPE] = (i:IFC2X3.IfcEnergyConversionDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCENERGYCONVERSIONDEVICETYPE] = [IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSPACEHEATERTYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE];
InversePropertyDef['IFC2X3'][IFCENERGYCONVERSIONDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCEQUIPMENTELEMENT] = (d: RawLineData) => { new IFC2X3.IfcEquipmentElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCEQUIPMENTELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEquipmentElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCEQUIPMENTELEMENT] = (i:IFC2X3.IfcEquipmentElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCEQUIPMENTELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCEQUIPMENTSTANDARD] = (d: RawLineData) => { new IFC2X3.IfcEquipmentStandard(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCEQUIPMENTSTANDARD] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEquipmentStandard(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCEQUIPMENTSTANDARD] = (i:IFC2X3.IfcEquipmentStandard):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InversePropertyDef['IFC2X3'][IFCEQUIPMENTSTANDARD] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCEVAPORATIVECOOLERTYPE] = (d: RawLineData) => { new IFC2X3.IfcEvaporativeCoolerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCEVAPORATIVECOOLERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEvaporativeCoolerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCEVAPORATIVECOOLERTYPE] = (i:IFC2X3.IfcEvaporativeCoolerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCEVAPORATIVECOOLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCEVAPORATORTYPE] = (d: RawLineData) => { new IFC2X3.IfcEvaporatorType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCEVAPORATORTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEvaporatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCEVAPORATORTYPE] = (i:IFC2X3.IfcEvaporatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCEVAPORATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFACETEDBREP] = (d: RawLineData) => { new IFC2X3.IfcFacetedBrep(d.ID, new Reference<IFC2X3.IfcClosedShell>(d.arguments[0].value)); }
Constructors['IFC2X3'][IFCFACETEDBREP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFacetedBrep(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCFACETEDBREP] = (i:IFC2X3.IfcFacetedBrep):unknown[] => { return [i.Outer]; }
InversePropertyDef['IFC2X3'][IFCFACETEDBREP] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFACETEDBREPWITHVOIDS] = (d: RawLineData) => { new IFC2X3.IfcFacetedBrepWithVoids(d.ID, new Reference<IFC2X3.IfcClosedShell>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcClosedShell>(p.value))); }
Constructors['IFC2X3'][IFCFACETEDBREPWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFacetedBrepWithVoids(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCFACETEDBREPWITHVOIDS] = (i:IFC2X3.IfcFacetedBrepWithVoids):unknown[] => { return [i.Outer, i.Voids]; }
InversePropertyDef['IFC2X3'][IFCFACETEDBREPWITHVOIDS] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCFASTENER] = (d: RawLineData) => { new IFC2X3.IfcFastener(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFASTENER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFastener(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFASTENER] = (i:IFC2X3.IfcFastener):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCFASTENER] = [IFCMECHANICALFASTENER];
InversePropertyDef['IFC2X3'][IFCFASTENER] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCFASTENERTYPE] = (d: RawLineData) => { new IFC2X3.IfcFastenerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFASTENERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFastenerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFASTENERTYPE] = (i:IFC2X3.IfcFastenerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFASTENERTYPE] = [IFCMECHANICALFASTENERTYPE];
InversePropertyDef['IFC2X3'][IFCFASTENERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFEATUREELEMENT] = (d: RawLineData) => { new IFC2X3.IfcFeatureElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFEATUREELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFeatureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFEATUREELEMENT] = (i:IFC2X3.IfcFeatureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCFEATUREELEMENT] = [IFCCHAMFEREDGEFEATURE,IFCROUNDEDEDGEFEATURE,IFCEDGEFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION];
InversePropertyDef['IFC2X3'][IFCFEATUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCFEATUREELEMENTADDITION] = (d: RawLineData) => { new IFC2X3.IfcFeatureElementAddition(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFEATUREELEMENTADDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFeatureElementAddition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFEATUREELEMENTADDITION] = (i:IFC2X3.IfcFeatureElementAddition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCFEATUREELEMENTADDITION] = [IFCPROJECTIONELEMENT];
InversePropertyDef['IFC2X3'][IFCFEATUREELEMENTADDITION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['ProjectsElements',IFCRELPROJECTSELEMENT,5,false],];
FromRawLineData['IFC2X3'][IFCFEATUREELEMENTSUBTRACTION] = (d: RawLineData) => { new IFC2X3.IfcFeatureElementSubtraction(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFEATUREELEMENTSUBTRACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFeatureElementSubtraction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFEATUREELEMENTSUBTRACTION] = (i:IFC2X3.IfcFeatureElementSubtraction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCFEATUREELEMENTSUBTRACTION] = [IFCCHAMFEREDGEFEATURE,IFCROUNDEDEDGEFEATURE,IFCEDGEFEATURE,IFCOPENINGELEMENT];
InversePropertyDef['IFC2X3'][IFCFEATUREELEMENTSUBTRACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC2X3'][IFCFLOWCONTROLLERTYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowControllerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFLOWCONTROLLERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowControllerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFLOWCONTROLLERTYPE] = (i:IFC2X3.IfcFlowControllerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFLOWCONTROLLERTYPE] = [IFCELECTRICTIMECONTROLTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE];
InversePropertyDef['IFC2X3'][IFCFLOWCONTROLLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWFITTINGTYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowFittingType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFLOWFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFLOWFITTINGTYPE] = (i:IFC2X3.IfcFlowFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFLOWFITTINGTYPE] = [IFCDUCTFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE];
InversePropertyDef['IFC2X3'][IFCFLOWFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWMETERTYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowMeterType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCFLOWMETERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowMeterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCFLOWMETERTYPE] = (i:IFC2X3.IfcFlowMeterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCFLOWMETERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWMOVINGDEVICETYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowMovingDeviceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFLOWMOVINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowMovingDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFLOWMOVINGDEVICETYPE] = (i:IFC2X3.IfcFlowMovingDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFLOWMOVINGDEVICETYPE] = [IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE];
InversePropertyDef['IFC2X3'][IFCFLOWMOVINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWSEGMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowSegmentType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFLOWSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFLOWSEGMENTTYPE] = (i:IFC2X3.IfcFlowSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFLOWSEGMENTTYPE] = [IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE];
InversePropertyDef['IFC2X3'][IFCFLOWSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowStorageDeviceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFLOWSTORAGEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowStorageDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFLOWSTORAGEDEVICETYPE] = (i:IFC2X3.IfcFlowStorageDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFLOWSTORAGEDEVICETYPE] = [IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE];
InversePropertyDef['IFC2X3'][IFCFLOWSTORAGEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWTERMINALTYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowTerminalType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFLOWTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFLOWTERMINALTYPE] = (i:IFC2X3.IfcFlowTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFLOWTERMINALTYPE] = [IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICHEATERTYPE,IFCELECTRICAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCGASTERMINALTYPE];
InversePropertyDef['IFC2X3'][IFCFLOWTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWTREATMENTDEVICETYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowTreatmentDeviceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCFLOWTREATMENTDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowTreatmentDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFLOWTREATMENTDEVICETYPE] = (i:IFC2X3.IfcFlowTreatmentDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCFLOWTREATMENTDEVICETYPE] = [IFCFILTERTYPE,IFCDUCTSILENCERTYPE];
InversePropertyDef['IFC2X3'][IFCFLOWTREATMENTDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFURNISHINGELEMENT] = (d: RawLineData) => { new IFC2X3.IfcFurnishingElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFURNISHINGELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFurnishingElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFURNISHINGELEMENT] = (i:IFC2X3.IfcFurnishingElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCFURNISHINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCFURNITURESTANDARD] = (d: RawLineData) => { new IFC2X3.IfcFurnitureStandard(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCFURNITURESTANDARD] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFurnitureStandard(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCFURNITURESTANDARD] = (i:IFC2X3.IfcFurnitureStandard):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InversePropertyDef['IFC2X3'][IFCFURNITURESTANDARD] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCGASTERMINALTYPE] = (d: RawLineData) => { new IFC2X3.IfcGasTerminalType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCGASTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGasTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCGASTERMINALTYPE] = (i:IFC2X3.IfcGasTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCGASTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCGRID] = (d: RawLineData) => { new IFC2X3.IfcGrid(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcGridAxis>(p.value)), d.arguments[8].map((p:any) => new Reference<IFC2X3.IfcGridAxis>(p.value)), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC2X3.IfcGridAxis>(p.value))); }
Constructors['IFC2X3'][IFCGRID] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGrid(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCGRID] = (i:IFC2X3.IfcGrid):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.UAxes, i.VAxes, i.WAxes]; }
InversePropertyDef['IFC2X3'][IFCGRID] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCGROUP] = (d: RawLineData) => { new IFC2X3.IfcGroup(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCGROUP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcGroup(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCGROUP] = (i:IFC2X3.IfcGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC2X3'][IFCGROUP] = [IFCCONDITION,IFCASSET,IFCZONE,IFCSTRUCTURALANALYSISMODEL,IFCELECTRICALCIRCUIT,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADGROUP,IFCINVENTORY];
InversePropertyDef['IFC2X3'][IFCGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],];
FromRawLineData['IFC2X3'][IFCHEATEXCHANGERTYPE] = (d: RawLineData) => { new IFC2X3.IfcHeatExchangerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCHEATEXCHANGERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcHeatExchangerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCHEATEXCHANGERTYPE] = (i:IFC2X3.IfcHeatExchangerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCHEATEXCHANGERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCHUMIDIFIERTYPE] = (d: RawLineData) => { new IFC2X3.IfcHumidifierType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCHUMIDIFIERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcHumidifierType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCHUMIDIFIERTYPE] = (i:IFC2X3.IfcHumidifierType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCHUMIDIFIERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCINVENTORY] = (d: RawLineData) => { new IFC2X3.IfcInventory(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), d.arguments[5], new Reference(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcPerson>(p.value)), new Reference<IFC2X3.IfcCalendarDate>(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC2X3.IfcCostValue>(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC2X3.IfcCostValue>(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCINVENTORY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcInventory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCINVENTORY] = (i:IFC2X3.IfcInventory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.InventoryType, i.Jurisdiction, i.ResponsiblePersons, i.LastUpdateDate, i.CurrentValue, i.OriginalValue]; }
InversePropertyDef['IFC2X3'][IFCINVENTORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],];
FromRawLineData['IFC2X3'][IFCJUNCTIONBOXTYPE] = (d: RawLineData) => { new IFC2X3.IfcJunctionBoxType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCJUNCTIONBOXTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcJunctionBoxType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCJUNCTIONBOXTYPE] = (i:IFC2X3.IfcJunctionBoxType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCJUNCTIONBOXTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCLABORRESOURCE] = (d: RawLineData) => { new IFC2X3.IfcLaborResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcText(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCLABORRESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLaborResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCLABORRESOURCE] = (i:IFC2X3.IfcLaborResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ResourceIdentifier, i.ResourceGroup, i.ResourceConsumption, i.BaseQuantity, i.SkillSet]; }
InversePropertyDef['IFC2X3'][IFCLABORRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC2X3'][IFCLAMPTYPE] = (d: RawLineData) => { new IFC2X3.IfcLampType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCLAMPTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLampType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCLAMPTYPE] = (i:IFC2X3.IfcLampType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCLAMPTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCLIGHTFIXTURETYPE] = (d: RawLineData) => { new IFC2X3.IfcLightFixtureType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCLIGHTFIXTURETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLightFixtureType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCLIGHTFIXTURETYPE] = (i:IFC2X3.IfcLightFixtureType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCLIGHTFIXTURETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCLINEARDIMENSION] = (d: RawLineData) => { new IFC2X3.IfcLinearDimension(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCLINEARDIMENSION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcLinearDimension(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCLINEARDIMENSION] = (i:IFC2X3.IfcLinearDimension):unknown[] => { return [i.Contents]; }
InversePropertyDef['IFC2X3'][IFCLINEARDIMENSION] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['IsRelatedFromCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],['IsRelatedToCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],];
FromRawLineData['IFC2X3'][IFCMECHANICALFASTENER] = (d: RawLineData) => { new IFC2X3.IfcMechanicalFastener(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCMECHANICALFASTENER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMechanicalFastener(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCMECHANICALFASTENER] = (i:IFC2X3.IfcMechanicalFastener):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.NominalDiameter, i.NominalLength]; }
InversePropertyDef['IFC2X3'][IFCMECHANICALFASTENER] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCMECHANICALFASTENERTYPE] = (d: RawLineData) => { new IFC2X3.IfcMechanicalFastenerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCMECHANICALFASTENERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMechanicalFastenerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCMECHANICALFASTENERTYPE] = (i:IFC2X3.IfcMechanicalFastenerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InversePropertyDef['IFC2X3'][IFCMECHANICALFASTENERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCMEMBERTYPE] = (d: RawLineData) => { new IFC2X3.IfcMemberType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCMEMBERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMemberType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCMEMBERTYPE] = (i:IFC2X3.IfcMemberType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCMEMBERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCMOTORCONNECTIONTYPE] = (d: RawLineData) => { new IFC2X3.IfcMotorConnectionType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCMOTORCONNECTIONTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMotorConnectionType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCMOTORCONNECTIONTYPE] = (i:IFC2X3.IfcMotorConnectionType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCMOTORCONNECTIONTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCMOVE] = (d: RawLineData) => { new IFC2X3.IfcMove(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8].value, !d.arguments[9] ? null :d.arguments[9].value, new Reference<IFC2X3.IfcSpatialStructureElement>(d.arguments[10].value), new Reference<IFC2X3.IfcSpatialStructureElement>(d.arguments[11].value), !d.arguments[12] ? null :d.arguments[12].map((p:any) => new IFC2X3.IfcText(p.value))); }
Constructors['IFC2X3'][IFCMOVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMove(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC2X3'][IFCMOVE] = (i:IFC2X3.IfcMove):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TaskId, i.Status, i.WorkMethod, i.IsMilestone, i.Priority, i.MoveFrom, i.MoveTo, i.PunchList]; }
InversePropertyDef['IFC2X3'][IFCMOVE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],];
FromRawLineData['IFC2X3'][IFCOCCUPANT] = (d: RawLineData) => { new IFC2X3.IfcOccupant(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new Reference(d.arguments[5].value), d.arguments[6]); }
Constructors['IFC2X3'][IFCOCCUPANT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOccupant(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCOCCUPANT] = (i:IFC2X3.IfcOccupant):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheActor, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCOCCUPANT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsActingUpon',IFCRELASSIGNSTOACTOR,6,true],];
FromRawLineData['IFC2X3'][IFCOPENINGELEMENT] = (d: RawLineData) => { new IFC2X3.IfcOpeningElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCOPENINGELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOpeningElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCOPENINGELEMENT] = (i:IFC2X3.IfcOpeningElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCOPENINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],['HasFillings',IFCRELFILLSELEMENT,4,true],];
FromRawLineData['IFC2X3'][IFCORDERACTION] = (d: RawLineData) => { new IFC2X3.IfcOrderAction(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8].value, !d.arguments[9] ? null :d.arguments[9].value, new IFC2X3.IfcIdentifier(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCORDERACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOrderAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCORDERACTION] = (i:IFC2X3.IfcOrderAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TaskId, i.Status, i.WorkMethod, i.IsMilestone, i.Priority, i.ActionID]; }
InversePropertyDef['IFC2X3'][IFCORDERACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],];
FromRawLineData['IFC2X3'][IFCOUTLETTYPE] = (d: RawLineData) => { new IFC2X3.IfcOutletType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCOUTLETTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcOutletType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCOUTLETTYPE] = (i:IFC2X3.IfcOutletType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCOUTLETTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCPERFORMANCEHISTORY] = (d: RawLineData) => { new IFC2X3.IfcPerformanceHistory(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcLabel(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCPERFORMANCEHISTORY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPerformanceHistory(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCPERFORMANCEHISTORY] = (i:IFC2X3.IfcPerformanceHistory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LifeCyclePhase]; }
InversePropertyDef['IFC2X3'][IFCPERFORMANCEHISTORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCPERMIT] = (d: RawLineData) => { new IFC2X3.IfcPermit(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCPERMIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPermit(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCPERMIT] = (i:IFC2X3.IfcPermit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PermitID]; }
InversePropertyDef['IFC2X3'][IFCPERMIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCPIPEFITTINGTYPE] = (d: RawLineData) => { new IFC2X3.IfcPipeFittingType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCPIPEFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPipeFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCPIPEFITTINGTYPE] = (i:IFC2X3.IfcPipeFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCPIPEFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCPIPESEGMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcPipeSegmentType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCPIPESEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPipeSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCPIPESEGMENTTYPE] = (i:IFC2X3.IfcPipeSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCPIPESEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCPLATETYPE] = (d: RawLineData) => { new IFC2X3.IfcPlateType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCPLATETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPlateType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCPLATETYPE] = (i:IFC2X3.IfcPlateType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCPLATETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCPOLYLINE] = (d: RawLineData) => { new IFC2X3.IfcPolyline(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcCartesianPoint>(p.value))); }
Constructors['IFC2X3'][IFCPOLYLINE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPolyline(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCPOLYLINE] = (i:IFC2X3.IfcPolyline):unknown[] => { return [i.Points]; }
InversePropertyDef['IFC2X3'][IFCPOLYLINE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCPORT] = (d: RawLineData) => { new IFC2X3.IfcPort(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCPORT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPort(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCPORT] = (i:IFC2X3.IfcPort):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC2X3'][IFCPORT] = [IFCDISTRIBUTIONPORT];
InversePropertyDef['IFC2X3'][IFCPORT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainedIn',IFCRELCONNECTSPORTTOELEMENT,4,false],['ConnectedFrom',IFCRELCONNECTSPORTS,5,true],['ConnectedTo',IFCRELCONNECTSPORTS,4,true],];
FromRawLineData['IFC2X3'][IFCPROCEDURE] = (d: RawLineData) => { new IFC2X3.IfcProcedure(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCPROCEDURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProcedure(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCPROCEDURE] = (i:IFC2X3.IfcProcedure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ProcedureID, i.ProcedureType, i.UserDefinedProcedureType]; }
InversePropertyDef['IFC2X3'][IFCPROCEDURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],];
FromRawLineData['IFC2X3'][IFCPROJECTORDER] = (d: RawLineData) => { new IFC2X3.IfcProjectOrder(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCPROJECTORDER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProjectOrder(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCPROJECTORDER] = (i:IFC2X3.IfcProjectOrder):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ID, i.PredefinedType, i.Status]; }
InversePropertyDef['IFC2X3'][IFCPROJECTORDER] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCPROJECTORDERRECORD] = (d: RawLineData) => { new IFC2X3.IfcProjectOrderRecord(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcRelAssignsToProjectOrder>(p.value)), d.arguments[6]); }
Constructors['IFC2X3'][IFCPROJECTORDERRECORD] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProjectOrderRecord(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCPROJECTORDERRECORD] = (i:IFC2X3.IfcProjectOrderRecord):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Records, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCPROJECTORDERRECORD] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCPROJECTIONELEMENT] = (d: RawLineData) => { new IFC2X3.IfcProjectionElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCPROJECTIONELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProjectionElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCPROJECTIONELEMENT] = (i:IFC2X3.IfcProjectionElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCPROJECTIONELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['ProjectsElements',IFCRELPROJECTSELEMENT,5,false],];
FromRawLineData['IFC2X3'][IFCPROTECTIVEDEVICETYPE] = (d: RawLineData) => { new IFC2X3.IfcProtectiveDeviceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCPROTECTIVEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcProtectiveDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCPROTECTIVEDEVICETYPE] = (i:IFC2X3.IfcProtectiveDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCPROTECTIVEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCPUMPTYPE] = (d: RawLineData) => { new IFC2X3.IfcPumpType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCPUMPTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPumpType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCPUMPTYPE] = (i:IFC2X3.IfcPumpType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCPUMPTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCRADIUSDIMENSION] = (d: RawLineData) => { new IFC2X3.IfcRadiusDimension(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCRADIUSDIMENSION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRadiusDimension(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCRADIUSDIMENSION] = (i:IFC2X3.IfcRadiusDimension):unknown[] => { return [i.Contents]; }
InversePropertyDef['IFC2X3'][IFCRADIUSDIMENSION] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['IsRelatedFromCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],['IsRelatedToCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],];
FromRawLineData['IFC2X3'][IFCRAILINGTYPE] = (d: RawLineData) => { new IFC2X3.IfcRailingType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCRAILINGTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRailingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCRAILINGTYPE] = (i:IFC2X3.IfcRailingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCRAILINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCRAMPFLIGHTTYPE] = (d: RawLineData) => { new IFC2X3.IfcRampFlightType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCRAMPFLIGHTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRampFlightType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCRAMPFLIGHTTYPE] = (i:IFC2X3.IfcRampFlightType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCRAMPFLIGHTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCRELAGGREGATES] = (d: RawLineData) => { new IFC2X3.IfcRelAggregates(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), new Reference<IFC2X3.IfcObjectDefinition>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value))); }
Constructors['IFC2X3'][IFCRELAGGREGATES] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAggregates(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRELAGGREGATES] = (i:IFC2X3.IfcRelAggregates):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingObject, i.RelatedObjects]; }
FromRawLineData['IFC2X3'][IFCRELASSIGNSTASKS] = (d: RawLineData) => { new IFC2X3.IfcRelAssignsTasks(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC2X3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC2X3.IfcControl>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcScheduleTimeControl>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCRELASSIGNSTASKS] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRelAssignsTasks(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCRELASSIGNSTASKS] = (i:IFC2X3.IfcRelAssignsTasks):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingControl, i.TimeForTask]; }
FromRawLineData['IFC2X3'][IFCSANITARYTERMINALTYPE] = (d: RawLineData) => { new IFC2X3.IfcSanitaryTerminalType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCSANITARYTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSanitaryTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSANITARYTERMINALTYPE] = (i:IFC2X3.IfcSanitaryTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSANITARYTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSCHEDULETIMECONTROL] = (d: RawLineData) => { new IFC2X3.IfcScheduleTimeControl(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), !d.arguments[8] ? null :new Reference(d.arguments[8].value), !d.arguments[9] ? null :new Reference(d.arguments[9].value), !d.arguments[10] ? null :new Reference(d.arguments[10].value), !d.arguments[11] ? null :new Reference(d.arguments[11].value), !d.arguments[12] ? null :new Reference(d.arguments[12].value), !d.arguments[13] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[16].value), !d.arguments[17] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[17].value), !d.arguments[18] ? null :d.arguments[18].value, !d.arguments[19] ? null :new Reference(d.arguments[19].value), !d.arguments[20] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[20].value), !d.arguments[21] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[21].value), !d.arguments[22] ? null :new IFC2X3.IfcPositiveRatioMeasure(d.arguments[22].value)); }
Constructors['IFC2X3'][IFCSCHEDULETIMECONTROL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcScheduleTimeControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19], args[20], args[21], args[22]); }
ToRawLineData['IFC2X3'][IFCSCHEDULETIMECONTROL] = (i:IFC2X3.IfcScheduleTimeControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ActualStart, i.EarlyStart, i.LateStart, i.ScheduleStart, i.ActualFinish, i.EarlyFinish, i.LateFinish, i.ScheduleFinish, i.ScheduleDuration, i.ActualDuration, i.RemainingTime, i.FreeFloat, i.TotalFloat, i.IsCritical, i.StatusTime, i.StartFloat, i.FinishFloat, i.Completion]; }
InversePropertyDef['IFC2X3'][IFCSCHEDULETIMECONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],['ScheduleTimeControlAssigned',IFCRELASSIGNSTASKS,7,false],];
FromRawLineData['IFC2X3'][IFCSERVICELIFE] = (d: RawLineData) => { new IFC2X3.IfcServiceLife(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), d.arguments[5], new IFC2X3.IfcTimeMeasure(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCSERVICELIFE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcServiceLife(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCSERVICELIFE] = (i:IFC2X3.IfcServiceLife):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ServiceLifeType, i.ServiceLifeDuration]; }
InversePropertyDef['IFC2X3'][IFCSERVICELIFE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCSITE] = (d: RawLineData) => { new IFC2X3.IfcSite(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC2X3.IfcCompoundPlaneAngleMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcCompoundPlaneAngleMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcLabel(d.arguments[12].value), !d.arguments[13] ? null :new Reference<IFC2X3.IfcPostalAddress>(d.arguments[13].value)); }
Constructors['IFC2X3'][IFCSITE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSite(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC2X3'][IFCSITE] = (i:IFC2X3.IfcSite):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.RefLatitude, i.RefLongitude, i.RefElevation, i.LandTitleNumber, i.SiteAddress]; }
InversePropertyDef['IFC2X3'][IFCSITE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC2X3'][IFCSLABTYPE] = (d: RawLineData) => { new IFC2X3.IfcSlabType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCSLABTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSlabType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSLABTYPE] = (i:IFC2X3.IfcSlabType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSLABTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSPACE] = (d: RawLineData) => { new IFC2X3.IfcSpace(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], !d.arguments[10] ? null :new IFC2X3.IfcLengthMeasure(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCSPACE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSpace(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCSPACE] = (i:IFC2X3.IfcSpace):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.InteriorOrExteriorSpace, i.ElevationWithFlooring]; }
InversePropertyDef['IFC2X3'][IFCSPACE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['HasCoverings',IFCRELCOVERSSPACES,4,true],['BoundedBy',IFCRELSPACEBOUNDARY,4,true],];
FromRawLineData['IFC2X3'][IFCSPACEHEATERTYPE] = (d: RawLineData) => { new IFC2X3.IfcSpaceHeaterType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCSPACEHEATERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSpaceHeaterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSPACEHEATERTYPE] = (i:IFC2X3.IfcSpaceHeaterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSPACEHEATERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSPACEPROGRAM] = (d: RawLineData) => { new IFC2X3.IfcSpaceProgram(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcAreaMeasure(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC2X3.IfcSpatialStructureElement>(d.arguments[8].value), new IFC2X3.IfcAreaMeasure(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCSPACEPROGRAM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSpaceProgram(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSPACEPROGRAM] = (i:IFC2X3.IfcSpaceProgram):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.SpaceProgramIdentifier, i.MaxRequiredArea, i.MinRequiredArea, i.RequestedLocation, i.StandardRequiredArea]; }
InversePropertyDef['IFC2X3'][IFCSPACEPROGRAM] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],['HasInteractionReqsFrom',IFCRELINTERACTIONREQUIREMENTS,7,true],['HasInteractionReqsTo',IFCRELINTERACTIONREQUIREMENTS,8,true],];
FromRawLineData['IFC2X3'][IFCSPACETYPE] = (d: RawLineData) => { new IFC2X3.IfcSpaceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCSPACETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSpaceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSPACETYPE] = (i:IFC2X3.IfcSpaceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSPACETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSTACKTERMINALTYPE] = (d: RawLineData) => { new IFC2X3.IfcStackTerminalType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCSTACKTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStackTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSTACKTERMINALTYPE] = (i:IFC2X3.IfcStackTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSTACKTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSTAIRFLIGHTTYPE] = (d: RawLineData) => { new IFC2X3.IfcStairFlightType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCSTAIRFLIGHTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStairFlightType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSTAIRFLIGHTTYPE] = (i:IFC2X3.IfcStairFlightType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSTAIRFLIGHTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALACTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralAction(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9].value, !d.arguments[10] ? null :new Reference<IFC2X3.IfcStructuralReaction>(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALACTION] = (i:IFC2X3.IfcStructuralAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.CausedBy]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALACTION] = [IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALPLANARACTIONVARYING,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALLINEARACTIONVARYING,IFCSTRUCTURALLINEARACTION];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALCONNECTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralConnection(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcBoundaryCondition>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALCONNECTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALCONNECTION] = (i:IFC2X3.IfcStructuralConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALCONNECTION] = [IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALCONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALCURVECONNECTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralCurveConnection(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcBoundaryCondition>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALCURVECONNECTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralCurveConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALCURVECONNECTION] = (i:IFC2X3.IfcStructuralCurveConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALCURVECONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALCURVEMEMBER] = (d: RawLineData) => { new IFC2X3.IfcStructuralCurveMember(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC2X3'][IFCSTRUCTURALCURVEMEMBER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralCurveMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALCURVEMEMBER] = (i:IFC2X3.IfcStructuralCurveMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALCURVEMEMBER] = [IFCSTRUCTURALCURVEMEMBERVARYING];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALCURVEMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ReferencesElement',IFCRELCONNECTSSTRUCTURALELEMENT,5,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALCURVEMEMBERVARYING] = (d: RawLineData) => { new IFC2X3.IfcStructuralCurveMemberVarying(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC2X3'][IFCSTRUCTURALCURVEMEMBERVARYING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralCurveMemberVarying(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALCURVEMEMBERVARYING] = (i:IFC2X3.IfcStructuralCurveMemberVarying):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALCURVEMEMBERVARYING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ReferencesElement',IFCRELCONNECTSSTRUCTURALELEMENT,5,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLINEARACTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralLinearAction(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9].value, !d.arguments[10] ? null :new Reference<IFC2X3.IfcStructuralReaction>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC2X3'][IFCSTRUCTURALLINEARACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLinearAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLINEARACTION] = (i:IFC2X3.IfcStructuralLinearAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.CausedBy, i.ProjectedOrTrue]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALLINEARACTION] = [IFCSTRUCTURALLINEARACTIONVARYING];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALLINEARACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLINEARACTIONVARYING] = (d: RawLineData) => { new IFC2X3.IfcStructuralLinearActionVarying(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9].value, !d.arguments[10] ? null :new Reference<IFC2X3.IfcStructuralReaction>(d.arguments[10].value), d.arguments[11], new Reference<IFC2X3.IfcShapeAspect>(d.arguments[12].value), d.arguments[13].map((p:any) => new Reference<IFC2X3.IfcStructuralLoad>(p.value))); }
Constructors['IFC2X3'][IFCSTRUCTURALLINEARACTIONVARYING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLinearActionVarying(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLINEARACTIONVARYING] = (i:IFC2X3.IfcStructuralLinearActionVarying):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.CausedBy, i.ProjectedOrTrue, i.VaryingAppliedLoadLocation, i.SubsequentAppliedLoads]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALLINEARACTIONVARYING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALLOADGROUP] = (d: RawLineData) => { new IFC2X3.IfcStructuralLoadGroup(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), d.arguments[5], d.arguments[6], d.arguments[7], !d.arguments[8] ? null :new IFC2X3.IfcRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcLabel(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALLOADGROUP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralLoadGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALLOADGROUP] = (i:IFC2X3.IfcStructuralLoadGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.ActionType, i.ActionSource, i.Coefficient, i.Purpose]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALLOADGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],['SourceOfResultGroup',IFCSTRUCTURALRESULTGROUP,6,true],['LoadGroupFor',IFCSTRUCTURALANALYSISMODEL,7,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALPLANARACTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralPlanarAction(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9].value, !d.arguments[10] ? null :new Reference<IFC2X3.IfcStructuralReaction>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC2X3'][IFCSTRUCTURALPLANARACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralPlanarAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALPLANARACTION] = (i:IFC2X3.IfcStructuralPlanarAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.CausedBy, i.ProjectedOrTrue]; }
InheritanceDef['IFC2X3'][IFCSTRUCTURALPLANARACTION] = [IFCSTRUCTURALPLANARACTIONVARYING];
InversePropertyDef['IFC2X3'][IFCSTRUCTURALPLANARACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALPLANARACTIONVARYING] = (d: RawLineData) => { new IFC2X3.IfcStructuralPlanarActionVarying(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9].value, !d.arguments[10] ? null :new Reference<IFC2X3.IfcStructuralReaction>(d.arguments[10].value), d.arguments[11], new Reference<IFC2X3.IfcShapeAspect>(d.arguments[12].value), d.arguments[13].map((p:any) => new Reference<IFC2X3.IfcStructuralLoad>(p.value))); }
Constructors['IFC2X3'][IFCSTRUCTURALPLANARACTIONVARYING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralPlanarActionVarying(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALPLANARACTIONVARYING] = (i:IFC2X3.IfcStructuralPlanarActionVarying):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.CausedBy, i.ProjectedOrTrue, i.VaryingAppliedLoadLocation, i.SubsequentAppliedLoads]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALPLANARACTIONVARYING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALPOINTACTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralPointAction(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9].value, !d.arguments[10] ? null :new Reference<IFC2X3.IfcStructuralReaction>(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALPOINTACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralPointAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALPOINTACTION] = (i:IFC2X3.IfcStructuralPointAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.CausedBy]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALPOINTACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALPOINTCONNECTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralPointConnection(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcBoundaryCondition>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALPOINTCONNECTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralPointConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALPOINTCONNECTION] = (i:IFC2X3.IfcStructuralPointConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALPOINTCONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALPOINTREACTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralPointReaction(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC2X3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCSTRUCTURALPOINTREACTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralPointReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALPOINTREACTION] = (i:IFC2X3.IfcStructuralPointReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALPOINTREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,false],['Causes',IFCSTRUCTURALACTION,10,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALRESULTGROUP] = (d: RawLineData) => { new IFC2X3.IfcStructuralResultGroup(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new Reference<IFC2X3.IfcStructuralLoadGroup>(d.arguments[6].value), d.arguments[7].value); }
Constructors['IFC2X3'][IFCSTRUCTURALRESULTGROUP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralResultGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALRESULTGROUP] = (i:IFC2X3.IfcStructuralResultGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheoryType, i.ResultForLoadGroup, i.IsLinear]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALRESULTGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],['ResultGroupFor',IFCSTRUCTURALANALYSISMODEL,8,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALSURFACECONNECTION] = (d: RawLineData) => { new IFC2X3.IfcStructuralSurfaceConnection(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC2X3.IfcBoundaryCondition>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCSTRUCTURALSURFACECONNECTION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralSurfaceConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALSURFACECONNECTION] = (i:IFC2X3.IfcStructuralSurfaceConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALSURFACECONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC2X3'][IFCSUBCONTRACTRESOURCE] = (d: RawLineData) => { new IFC2X3.IfcSubContractResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[8].value), !d.arguments[9] ? null :new Reference(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcText(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCSUBCONTRACTRESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSubContractResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCSUBCONTRACTRESOURCE] = (i:IFC2X3.IfcSubContractResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ResourceIdentifier, i.ResourceGroup, i.ResourceConsumption, i.BaseQuantity, i.SubContractor, i.JobDescription]; }
InversePropertyDef['IFC2X3'][IFCSUBCONTRACTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC2X3'][IFCSWITCHINGDEVICETYPE] = (d: RawLineData) => { new IFC2X3.IfcSwitchingDeviceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCSWITCHINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSwitchingDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSWITCHINGDEVICETYPE] = (i:IFC2X3.IfcSwitchingDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSWITCHINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSYSTEM] = (d: RawLineData) => { new IFC2X3.IfcSystem(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCSYSTEM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSystem(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCSYSTEM] = (i:IFC2X3.IfcSystem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC2X3'][IFCSYSTEM] = [IFCSTRUCTURALANALYSISMODEL,IFCELECTRICALCIRCUIT];
InversePropertyDef['IFC2X3'][IFCSYSTEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC2X3'][IFCTANKTYPE] = (d: RawLineData) => { new IFC2X3.IfcTankType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCTANKTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTankType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCTANKTYPE] = (i:IFC2X3.IfcTankType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCTANKTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCTIMESERIESSCHEDULE] = (d: RawLineData) => { new IFC2X3.IfcTimeSeriesSchedule(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference(p.value)), d.arguments[6], new Reference<IFC2X3.IfcTimeSeries>(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCTIMESERIESSCHEDULE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTimeSeriesSchedule(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCTIMESERIESSCHEDULE] = (i:IFC2X3.IfcTimeSeriesSchedule):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ApplicableDates, i.TimeSeriesScheduleType, i.TimeSeries]; }
InversePropertyDef['IFC2X3'][IFCTIMESERIESSCHEDULE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCTRANSFORMERTYPE] = (d: RawLineData) => { new IFC2X3.IfcTransformerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCTRANSFORMERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTransformerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCTRANSFORMERTYPE] = (i:IFC2X3.IfcTransformerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCTRANSFORMERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCTRANSPORTELEMENT] = (d: RawLineData) => { new IFC2X3.IfcTransportElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC2X3.IfcMassMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcCountMeasure(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCTRANSPORTELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTransportElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCTRANSPORTELEMENT] = (i:IFC2X3.IfcTransportElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OperationType, i.CapacityByWeight, i.CapacityByNumber]; }
InversePropertyDef['IFC2X3'][IFCTRANSPORTELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCTRIMMEDCURVE] = (d: RawLineData) => { new IFC2X3.IfcTrimmedCurve(d.ID, new Reference<IFC2X3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value)), d.arguments[2].map((p:any) => new Reference(p.value)), d.arguments[3].value, d.arguments[4]); }
Constructors['IFC2X3'][IFCTRIMMEDCURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTrimmedCurve(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCTRIMMEDCURVE] = (i:IFC2X3.IfcTrimmedCurve):unknown[] => { return [i.BasisCurve, i.Trim1, i.Trim2, i.SenseAgreement, i.MasterRepresentation]; }
InversePropertyDef['IFC2X3'][IFCTRIMMEDCURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCTUBEBUNDLETYPE] = (d: RawLineData) => { new IFC2X3.IfcTubeBundleType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCTUBEBUNDLETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTubeBundleType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCTUBEBUNDLETYPE] = (i:IFC2X3.IfcTubeBundleType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCTUBEBUNDLETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCUNITARYEQUIPMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcUnitaryEquipmentType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCUNITARYEQUIPMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcUnitaryEquipmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCUNITARYEQUIPMENTTYPE] = (i:IFC2X3.IfcUnitaryEquipmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCUNITARYEQUIPMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCVALVETYPE] = (d: RawLineData) => { new IFC2X3.IfcValveType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCVALVETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcValveType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCVALVETYPE] = (i:IFC2X3.IfcValveType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCVALVETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCVIRTUALELEMENT] = (d: RawLineData) => { new IFC2X3.IfcVirtualElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCVIRTUALELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcVirtualElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCVIRTUALELEMENT] = (i:IFC2X3.IfcVirtualElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCVIRTUALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCWALLTYPE] = (d: RawLineData) => { new IFC2X3.IfcWallType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCWALLTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWallType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCWALLTYPE] = (i:IFC2X3.IfcWallType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCWALLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCWASTETERMINALTYPE] = (d: RawLineData) => { new IFC2X3.IfcWasteTerminalType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCWASTETERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWasteTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCWASTETERMINALTYPE] = (i:IFC2X3.IfcWasteTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCWASTETERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCWORKCONTROL] = (d: RawLineData) => { new IFC2X3.IfcWorkControl(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), new Reference(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[10].value), new Reference(d.arguments[11].value), !d.arguments[12] ? null :new Reference(d.arguments[12].value), d.arguments[13], !d.arguments[14] ? null :new IFC2X3.IfcLabel(d.arguments[14].value)); }
Constructors['IFC2X3'][IFCWORKCONTROL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWorkControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]); }
ToRawLineData['IFC2X3'][IFCWORKCONTROL] = (i:IFC2X3.IfcWorkControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identifier, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime, i.WorkControlType, i.UserDefinedControlType]; }
InheritanceDef['IFC2X3'][IFCWORKCONTROL] = [IFCWORKSCHEDULE,IFCWORKPLAN];
InversePropertyDef['IFC2X3'][IFCWORKCONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCWORKPLAN] = (d: RawLineData) => { new IFC2X3.IfcWorkPlan(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), new Reference(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[10].value), new Reference(d.arguments[11].value), !d.arguments[12] ? null :new Reference(d.arguments[12].value), d.arguments[13], !d.arguments[14] ? null :new IFC2X3.IfcLabel(d.arguments[14].value)); }
Constructors['IFC2X3'][IFCWORKPLAN] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWorkPlan(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]); }
ToRawLineData['IFC2X3'][IFCWORKPLAN] = (i:IFC2X3.IfcWorkPlan):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identifier, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime, i.WorkControlType, i.UserDefinedControlType]; }
InversePropertyDef['IFC2X3'][IFCWORKPLAN] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCWORKSCHEDULE] = (d: RawLineData) => { new IFC2X3.IfcWorkSchedule(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), new Reference(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcTimeMeasure(d.arguments[10].value), new Reference(d.arguments[11].value), !d.arguments[12] ? null :new Reference(d.arguments[12].value), d.arguments[13], !d.arguments[14] ? null :new IFC2X3.IfcLabel(d.arguments[14].value)); }
Constructors['IFC2X3'][IFCWORKSCHEDULE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWorkSchedule(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]); }
ToRawLineData['IFC2X3'][IFCWORKSCHEDULE] = (i:IFC2X3.IfcWorkSchedule):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identifier, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime, i.WorkControlType, i.UserDefinedControlType]; }
InversePropertyDef['IFC2X3'][IFCWORKSCHEDULE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCZONE] = (d: RawLineData) => { new IFC2X3.IfcZone(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCZONE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcZone(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCZONE] = (i:IFC2X3.IfcZone):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InversePropertyDef['IFC2X3'][IFCZONE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],];
FromRawLineData['IFC2X3'][IFC2DCOMPOSITECURVE] = (d: RawLineData) => { new IFC2X3.Ifc2DCompositeCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC2X3.IfcCompositeCurveSegment>(p.value)), d.arguments[1].value); }
Constructors['IFC2X3'][IFC2DCOMPOSITECURVE] = (expressID:number, args: any[]) => { return new IFC2X3.Ifc2DCompositeCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFC2DCOMPOSITECURVE] = (i:IFC2X3.Ifc2DCompositeCurve):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InversePropertyDef['IFC2X3'][IFC2DCOMPOSITECURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCACTIONREQUEST] = (d: RawLineData) => { new IFC2X3.IfcActionRequest(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value)); }
Constructors['IFC2X3'][IFCACTIONREQUEST] = (expressID:number, args: any[]) => { return new IFC2X3.IfcActionRequest(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCACTIONREQUEST] = (i:IFC2X3.IfcActionRequest):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.RequestID]; }
InversePropertyDef['IFC2X3'][IFCACTIONREQUEST] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCAIRTERMINALBOXTYPE] = (d: RawLineData) => { new IFC2X3.IfcAirTerminalBoxType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCAIRTERMINALBOXTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAirTerminalBoxType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCAIRTERMINALBOXTYPE] = (i:IFC2X3.IfcAirTerminalBoxType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCAIRTERMINALBOXTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCAIRTERMINALTYPE] = (d: RawLineData) => { new IFC2X3.IfcAirTerminalType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCAIRTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAirTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCAIRTERMINALTYPE] = (i:IFC2X3.IfcAirTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCAIRTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCAIRTOAIRHEATRECOVERYTYPE] = (d: RawLineData) => { new IFC2X3.IfcAirToAirHeatRecoveryType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCAIRTOAIRHEATRECOVERYTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAirToAirHeatRecoveryType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCAIRTOAIRHEATRECOVERYTYPE] = (i:IFC2X3.IfcAirToAirHeatRecoveryType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCAIRTOAIRHEATRECOVERYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCANGULARDIMENSION] = (d: RawLineData) => { new IFC2X3.IfcAngularDimension(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCANGULARDIMENSION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAngularDimension(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCANGULARDIMENSION] = (i:IFC2X3.IfcAngularDimension):unknown[] => { return [i.Contents]; }
InversePropertyDef['IFC2X3'][IFCANGULARDIMENSION] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['IsRelatedFromCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],['IsRelatedToCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],];
FromRawLineData['IFC2X3'][IFCASSET] = (d: RawLineData) => { new IFC2X3.IfcAsset(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new IFC2X3.IfcIdentifier(d.arguments[5].value), new Reference<IFC2X3.IfcCostValue>(d.arguments[6].value), new Reference<IFC2X3.IfcCostValue>(d.arguments[7].value), new Reference<IFC2X3.IfcCostValue>(d.arguments[8].value), new Reference(d.arguments[9].value), new Reference(d.arguments[10].value), new Reference<IFC2X3.IfcPerson>(d.arguments[11].value), new Reference<IFC2X3.IfcCalendarDate>(d.arguments[12].value), new Reference<IFC2X3.IfcCostValue>(d.arguments[13].value)); }
Constructors['IFC2X3'][IFCASSET] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAsset(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC2X3'][IFCASSET] = (i:IFC2X3.IfcAsset):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.AssetID, i.OriginalValue, i.CurrentValue, i.TotalReplacementCost, i.Owner, i.User, i.ResponsiblePerson, i.IncorporationDate, i.DepreciatedValue]; }
InversePropertyDef['IFC2X3'][IFCASSET] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],];
FromRawLineData['IFC2X3'][IFCBSPLINECURVE] = (d: RawLineData) => { new IFC2X3.IfcBSplineCurve(d.ID, d.arguments[0].value, d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcCartesianPoint>(p.value)), d.arguments[2], d.arguments[3].value, d.arguments[4].value); }
Constructors['IFC2X3'][IFCBSPLINECURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBSplineCurve(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCBSPLINECURVE] = (i:IFC2X3.IfcBSplineCurve):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect]; }
InheritanceDef['IFC2X3'][IFCBSPLINECURVE] = [IFCRATIONALBEZIERCURVE,IFCBEZIERCURVE];
InversePropertyDef['IFC2X3'][IFCBSPLINECURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBEAMTYPE] = (d: RawLineData) => { new IFC2X3.IfcBeamType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCBEAMTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBeamType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCBEAMTYPE] = (i:IFC2X3.IfcBeamType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCBEAMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCBEZIERCURVE] = (d: RawLineData) => { new IFC2X3.IfcBezierCurve(d.ID, d.arguments[0].value, d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcCartesianPoint>(p.value)), d.arguments[2], d.arguments[3].value, d.arguments[4].value); }
Constructors['IFC2X3'][IFCBEZIERCURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBezierCurve(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCBEZIERCURVE] = (i:IFC2X3.IfcBezierCurve):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect]; }
InheritanceDef['IFC2X3'][IFCBEZIERCURVE] = [IFCRATIONALBEZIERCURVE];
InversePropertyDef['IFC2X3'][IFCBEZIERCURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCBOILERTYPE] = (d: RawLineData) => { new IFC2X3.IfcBoilerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCBOILERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBoilerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCBOILERTYPE] = (i:IFC2X3.IfcBoilerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCBOILERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCBUILDINGELEMENT] = (d: RawLineData) => { new IFC2X3.IfcBuildingElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCBUILDINGELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBuildingElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCBUILDINGELEMENT] = (i:IFC2X3.IfcBuildingElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCBUILDINGELEMENT] = [IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATE,IFCPILE,IFCMEMBER,IFCFOOTING,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMN,IFCBUILDINGELEMENTPROXY,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCBUILDINGELEMENTPART,IFCBUILDINGELEMENTCOMPONENT];
InversePropertyDef['IFC2X3'][IFCBUILDINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCBUILDINGELEMENTCOMPONENT] = (d: RawLineData) => { new IFC2X3.IfcBuildingElementComponent(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCBUILDINGELEMENTCOMPONENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBuildingElementComponent(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCBUILDINGELEMENTCOMPONENT] = (i:IFC2X3.IfcBuildingElementComponent):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCBUILDINGELEMENTCOMPONENT] = [IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCBUILDINGELEMENTPART];
InversePropertyDef['IFC2X3'][IFCBUILDINGELEMENTCOMPONENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCBUILDINGELEMENTPART] = (d: RawLineData) => { new IFC2X3.IfcBuildingElementPart(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCBUILDINGELEMENTPART] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBuildingElementPart(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCBUILDINGELEMENTPART] = (i:IFC2X3.IfcBuildingElementPart):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCBUILDINGELEMENTPART] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCBUILDINGELEMENTPROXY] = (d: RawLineData) => { new IFC2X3.IfcBuildingElementProxy(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCBUILDINGELEMENTPROXY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBuildingElementProxy(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCBUILDINGELEMENTPROXY] = (i:IFC2X3.IfcBuildingElementProxy):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.CompositionType]; }
InversePropertyDef['IFC2X3'][IFCBUILDINGELEMENTPROXY] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCBUILDINGELEMENTPROXYTYPE] = (d: RawLineData) => { new IFC2X3.IfcBuildingElementProxyType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCBUILDINGELEMENTPROXYTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBuildingElementProxyType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCBUILDINGELEMENTPROXYTYPE] = (i:IFC2X3.IfcBuildingElementProxyType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCBUILDINGELEMENTPROXYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCABLECARRIERFITTINGTYPE] = (d: RawLineData) => { new IFC2X3.IfcCableCarrierFittingType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCABLECARRIERFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCableCarrierFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCABLECARRIERFITTINGTYPE] = (i:IFC2X3.IfcCableCarrierFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCABLECARRIERFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCABLECARRIERSEGMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcCableCarrierSegmentType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCABLECARRIERSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCableCarrierSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCABLECARRIERSEGMENTTYPE] = (i:IFC2X3.IfcCableCarrierSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCABLECARRIERSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCABLESEGMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcCableSegmentType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCABLESEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCableSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCABLESEGMENTTYPE] = (i:IFC2X3.IfcCableSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCABLESEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCHILLERTYPE] = (d: RawLineData) => { new IFC2X3.IfcChillerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCHILLERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcChillerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCHILLERTYPE] = (i:IFC2X3.IfcChillerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCHILLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCIRCLE] = (d: RawLineData) => { new IFC2X3.IfcCircle(d.ID, new Reference(d.arguments[0].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC2X3'][IFCCIRCLE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCircle(expressID, args[0], args[1]); }
ToRawLineData['IFC2X3'][IFCCIRCLE] = (i:IFC2X3.IfcCircle):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC2X3'][IFCCIRCLE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCCOILTYPE] = (d: RawLineData) => { new IFC2X3.IfcCoilType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCOILTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCoilType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCOILTYPE] = (i:IFC2X3.IfcCoilType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCOILTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCOLUMN] = (d: RawLineData) => { new IFC2X3.IfcColumn(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCCOLUMN] = (expressID:number, args: any[]) => { return new IFC2X3.IfcColumn(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCCOLUMN] = (i:IFC2X3.IfcColumn):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCCOLUMN] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCCOMPRESSORTYPE] = (d: RawLineData) => { new IFC2X3.IfcCompressorType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCOMPRESSORTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCompressorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCOMPRESSORTYPE] = (i:IFC2X3.IfcCompressorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCOMPRESSORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCONDENSERTYPE] = (d: RawLineData) => { new IFC2X3.IfcCondenserType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCONDENSERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCondenserType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCONDENSERTYPE] = (i:IFC2X3.IfcCondenserType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCONDENSERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCONDITION] = (d: RawLineData) => { new IFC2X3.IfcCondition(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCCONDITION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCondition(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCCONDITION] = (i:IFC2X3.IfcCondition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InversePropertyDef['IFC2X3'][IFCCONDITION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],];
FromRawLineData['IFC2X3'][IFCCONDITIONCRITERION] = (d: RawLineData) => { new IFC2X3.IfcConditionCriterion(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), new Reference(d.arguments[5].value), new Reference(d.arguments[6].value)); }
Constructors['IFC2X3'][IFCCONDITIONCRITERION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConditionCriterion(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC2X3'][IFCCONDITIONCRITERION] = (i:IFC2X3.IfcConditionCriterion):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Criterion, i.CriterionDateTime]; }
InversePropertyDef['IFC2X3'][IFCCONDITIONCRITERION] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC2X3'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (d: RawLineData) => { new IFC2X3.IfcConstructionEquipmentResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConstructionEquipmentResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (i:IFC2X3.IfcConstructionEquipmentResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ResourceIdentifier, i.ResourceGroup, i.ResourceConsumption, i.BaseQuantity]; }
InversePropertyDef['IFC2X3'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC2X3'][IFCCONSTRUCTIONMATERIALRESOURCE] = (d: RawLineData) => { new IFC2X3.IfcConstructionMaterialResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference(p.value)), !d.arguments[10] ? null :new IFC2X3.IfcRatioMeasure(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCCONSTRUCTIONMATERIALRESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConstructionMaterialResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCCONSTRUCTIONMATERIALRESOURCE] = (i:IFC2X3.IfcConstructionMaterialResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ResourceIdentifier, i.ResourceGroup, i.ResourceConsumption, i.BaseQuantity, i.Suppliers, i.UsageRatio]; }
InversePropertyDef['IFC2X3'][IFCCONSTRUCTIONMATERIALRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC2X3'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (d: RawLineData) => { new IFC2X3.IfcConstructionProductResource(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC2X3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC2X3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC2X3.IfcMeasureWithUnit>(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcConstructionProductResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (i:IFC2X3.IfcConstructionProductResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ResourceIdentifier, i.ResourceGroup, i.ResourceConsumption, i.BaseQuantity]; }
InversePropertyDef['IFC2X3'][IFCCONSTRUCTIONPRODUCTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC2X3'][IFCCOOLEDBEAMTYPE] = (d: RawLineData) => { new IFC2X3.IfcCooledBeamType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCOOLEDBEAMTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCooledBeamType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCOOLEDBEAMTYPE] = (i:IFC2X3.IfcCooledBeamType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCOOLEDBEAMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCOOLINGTOWERTYPE] = (d: RawLineData) => { new IFC2X3.IfcCoolingTowerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCOOLINGTOWERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCoolingTowerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCOOLINGTOWERTYPE] = (i:IFC2X3.IfcCoolingTowerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCOOLINGTOWERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCCOVERING] = (d: RawLineData) => { new IFC2X3.IfcCovering(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCCOVERING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCovering(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCCOVERING] = (i:IFC2X3.IfcCovering):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCOVERING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['CoversSpaces',IFCRELCOVERSSPACES,5,true],['Covers',IFCRELCOVERSBLDGELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCCURTAINWALL] = (d: RawLineData) => { new IFC2X3.IfcCurtainWall(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCCURTAINWALL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcCurtainWall(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCCURTAINWALL] = (i:IFC2X3.IfcCurtainWall):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCCURTAINWALL] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCDAMPERTYPE] = (d: RawLineData) => { new IFC2X3.IfcDamperType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCDAMPERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDamperType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCDAMPERTYPE] = (i:IFC2X3.IfcDamperType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCDAMPERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDIAMETERDIMENSION] = (d: RawLineData) => { new IFC2X3.IfcDiameterDimension(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC2X3'][IFCDIAMETERDIMENSION] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDiameterDimension(expressID, args[0]); }
ToRawLineData['IFC2X3'][IFCDIAMETERDIMENSION] = (i:IFC2X3.IfcDiameterDimension):unknown[] => { return [i.Contents]; }
InversePropertyDef['IFC2X3'][IFCDIAMETERDIMENSION] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['IsRelatedFromCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,3,true],['IsRelatedToCallout',IFCDRAUGHTINGCALLOUTRELATIONSHIP,2,true],];
FromRawLineData['IFC2X3'][IFCDISCRETEACCESSORY] = (d: RawLineData) => { new IFC2X3.IfcDiscreteAccessory(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCDISCRETEACCESSORY] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDiscreteAccessory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCDISCRETEACCESSORY] = (i:IFC2X3.IfcDiscreteAccessory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCDISCRETEACCESSORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCDISCRETEACCESSORYTYPE] = (d: RawLineData) => { new IFC2X3.IfcDiscreteAccessoryType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCDISCRETEACCESSORYTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDiscreteAccessoryType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCDISCRETEACCESSORYTYPE] = (i:IFC2X3.IfcDiscreteAccessoryType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCDISCRETEACCESSORYTYPE] = [IFCVIBRATIONISOLATORTYPE];
InversePropertyDef['IFC2X3'][IFCDISCRETEACCESSORYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcDistributionChamberElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionChamberElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (i:IFC2X3.IfcDistributionChamberElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcDistributionControlElementType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionControlElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (i:IFC2X3.IfcDistributionControlElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCSENSORTYPE,IFCFLOWINSTRUMENTTYPE];
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONELEMENT] = (d: RawLineData) => { new IFC2X3.IfcDistributionElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCDISTRIBUTIONELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONELEMENT] = (i:IFC2X3.IfcDistributionElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCDISTRIBUTIONELEMENT] = [IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFLOWTREATMENTDEVICE,IFCFLOWTERMINAL,IFCFLOWSTORAGEDEVICE,IFCFLOWSEGMENT,IFCFLOWMOVINGDEVICE,IFCFLOWFITTING,IFCELECTRICDISTRIBUTIONPOINT,IFCFLOWCONTROLLER,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT];
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENT] = (d: RawLineData) => { new IFC2X3.IfcDistributionFlowElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionFlowElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENT] = (i:IFC2X3.IfcDistributionFlowElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENT] = [IFCDISTRIBUTIONCHAMBERELEMENT,IFCFLOWTREATMENTDEVICE,IFCFLOWTERMINAL,IFCFLOWSTORAGEDEVICE,IFCFLOWSEGMENT,IFCFLOWMOVINGDEVICE,IFCFLOWFITTING,IFCELECTRICDISTRIBUTIONPOINT,IFCFLOWCONTROLLER,IFCENERGYCONVERSIONDEVICE];
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONFLOWELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONPORT] = (d: RawLineData) => { new IFC2X3.IfcDistributionPort(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC2X3'][IFCDISTRIBUTIONPORT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionPort(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONPORT] = (i:IFC2X3.IfcDistributionPort):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.FlowDirection]; }
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONPORT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainedIn',IFCRELCONNECTSPORTTOELEMENT,4,false],['ConnectedFrom',IFCRELCONNECTSPORTS,5,true],['ConnectedTo',IFCRELCONNECTSPORTS,4,true],];
FromRawLineData['IFC2X3'][IFCDOOR] = (d: RawLineData) => { new IFC2X3.IfcDoor(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCDOOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDoor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCDOOR] = (i:IFC2X3.IfcDoor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OverallHeight, i.OverallWidth]; }
InversePropertyDef['IFC2X3'][IFCDOOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCDUCTFITTINGTYPE] = (d: RawLineData) => { new IFC2X3.IfcDuctFittingType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCDUCTFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDuctFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCDUCTFITTINGTYPE] = (i:IFC2X3.IfcDuctFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCDUCTFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDUCTSEGMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcDuctSegmentType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCDUCTSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDuctSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCDUCTSEGMENTTYPE] = (i:IFC2X3.IfcDuctSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCDUCTSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDUCTSILENCERTYPE] = (d: RawLineData) => { new IFC2X3.IfcDuctSilencerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCDUCTSILENCERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDuctSilencerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCDUCTSILENCERTYPE] = (i:IFC2X3.IfcDuctSilencerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCDUCTSILENCERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCEDGEFEATURE] = (d: RawLineData) => { new IFC2X3.IfcEdgeFeature(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCEDGEFEATURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEdgeFeature(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCEDGEFEATURE] = (i:IFC2X3.IfcEdgeFeature):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.FeatureLength]; }
InheritanceDef['IFC2X3'][IFCEDGEFEATURE] = [IFCCHAMFEREDGEFEATURE,IFCROUNDEDEDGEFEATURE];
InversePropertyDef['IFC2X3'][IFCEDGEFEATURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC2X3'][IFCELECTRICAPPLIANCETYPE] = (d: RawLineData) => { new IFC2X3.IfcElectricApplianceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCELECTRICAPPLIANCETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricApplianceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCELECTRICAPPLIANCETYPE] = (i:IFC2X3.IfcElectricApplianceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCELECTRICAPPLIANCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { new IFC2X3.IfcElectricFlowStorageDeviceType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricFlowStorageDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (i:IFC2X3.IfcElectricFlowStorageDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELECTRICGENERATORTYPE] = (d: RawLineData) => { new IFC2X3.IfcElectricGeneratorType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCELECTRICGENERATORTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricGeneratorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCELECTRICGENERATORTYPE] = (i:IFC2X3.IfcElectricGeneratorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCELECTRICGENERATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELECTRICHEATERTYPE] = (d: RawLineData) => { new IFC2X3.IfcElectricHeaterType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCELECTRICHEATERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricHeaterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCELECTRICHEATERTYPE] = (i:IFC2X3.IfcElectricHeaterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCELECTRICHEATERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELECTRICMOTORTYPE] = (d: RawLineData) => { new IFC2X3.IfcElectricMotorType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCELECTRICMOTORTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricMotorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCELECTRICMOTORTYPE] = (i:IFC2X3.IfcElectricMotorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCELECTRICMOTORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELECTRICTIMECONTROLTYPE] = (d: RawLineData) => { new IFC2X3.IfcElectricTimeControlType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCELECTRICTIMECONTROLTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricTimeControlType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCELECTRICTIMECONTROLTYPE] = (i:IFC2X3.IfcElectricTimeControlType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCELECTRICTIMECONTROLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCELECTRICALCIRCUIT] = (d: RawLineData) => { new IFC2X3.IfcElectricalCircuit(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC2X3'][IFCELECTRICALCIRCUIT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricalCircuit(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC2X3'][IFCELECTRICALCIRCUIT] = (i:IFC2X3.IfcElectricalCircuit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InversePropertyDef['IFC2X3'][IFCELECTRICALCIRCUIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC2X3'][IFCELECTRICALELEMENT] = (d: RawLineData) => { new IFC2X3.IfcElectricalElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCELECTRICALELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricalElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCELECTRICALELEMENT] = (i:IFC2X3.IfcElectricalElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCELECTRICALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCENERGYCONVERSIONDEVICE] = (d: RawLineData) => { new IFC2X3.IfcEnergyConversionDevice(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCENERGYCONVERSIONDEVICE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcEnergyConversionDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCENERGYCONVERSIONDEVICE] = (i:IFC2X3.IfcEnergyConversionDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCENERGYCONVERSIONDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCFANTYPE] = (d: RawLineData) => { new IFC2X3.IfcFanType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCFANTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFanType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCFANTYPE] = (i:IFC2X3.IfcFanType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCFANTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFILTERTYPE] = (d: RawLineData) => { new IFC2X3.IfcFilterType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCFILTERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFilterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCFILTERTYPE] = (i:IFC2X3.IfcFilterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCFILTERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFIRESUPPRESSIONTERMINALTYPE] = (d: RawLineData) => { new IFC2X3.IfcFireSuppressionTerminalType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCFIRESUPPRESSIONTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFireSuppressionTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCFIRESUPPRESSIONTERMINALTYPE] = (i:IFC2X3.IfcFireSuppressionTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCFIRESUPPRESSIONTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWCONTROLLER] = (d: RawLineData) => { new IFC2X3.IfcFlowController(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFLOWCONTROLLER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowController(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFLOWCONTROLLER] = (i:IFC2X3.IfcFlowController):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCFLOWCONTROLLER] = [IFCELECTRICDISTRIBUTIONPOINT];
InversePropertyDef['IFC2X3'][IFCFLOWCONTROLLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWFITTING] = (d: RawLineData) => { new IFC2X3.IfcFlowFitting(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFLOWFITTING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFLOWFITTING] = (i:IFC2X3.IfcFlowFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCFLOWFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWINSTRUMENTTYPE] = (d: RawLineData) => { new IFC2X3.IfcFlowInstrumentType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCFLOWINSTRUMENTTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowInstrumentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCFLOWINSTRUMENTTYPE] = (i:IFC2X3.IfcFlowInstrumentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCFLOWINSTRUMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWMOVINGDEVICE] = (d: RawLineData) => { new IFC2X3.IfcFlowMovingDevice(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFLOWMOVINGDEVICE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowMovingDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFLOWMOVINGDEVICE] = (i:IFC2X3.IfcFlowMovingDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCFLOWMOVINGDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWSEGMENT] = (d: RawLineData) => { new IFC2X3.IfcFlowSegment(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFLOWSEGMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFLOWSEGMENT] = (i:IFC2X3.IfcFlowSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCFLOWSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWSTORAGEDEVICE] = (d: RawLineData) => { new IFC2X3.IfcFlowStorageDevice(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFLOWSTORAGEDEVICE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowStorageDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFLOWSTORAGEDEVICE] = (i:IFC2X3.IfcFlowStorageDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCFLOWSTORAGEDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWTERMINAL] = (d: RawLineData) => { new IFC2X3.IfcFlowTerminal(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFLOWTERMINAL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFLOWTERMINAL] = (i:IFC2X3.IfcFlowTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCFLOWTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCFLOWTREATMENTDEVICE] = (d: RawLineData) => { new IFC2X3.IfcFlowTreatmentDevice(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCFLOWTREATMENTDEVICE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFlowTreatmentDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCFLOWTREATMENTDEVICE] = (i:IFC2X3.IfcFlowTreatmentDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCFLOWTREATMENTDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCFOOTING] = (d: RawLineData) => { new IFC2X3.IfcFooting(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCFOOTING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcFooting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCFOOTING] = (i:IFC2X3.IfcFooting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCFOOTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCMEMBER] = (d: RawLineData) => { new IFC2X3.IfcMember(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCMEMBER] = (expressID:number, args: any[]) => { return new IFC2X3.IfcMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCMEMBER] = (i:IFC2X3.IfcMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCPILE] = (d: RawLineData) => { new IFC2X3.IfcPile(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC2X3'][IFCPILE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPile(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCPILE] = (i:IFC2X3.IfcPile):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType, i.ConstructionType]; }
InversePropertyDef['IFC2X3'][IFCPILE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCPLATE] = (d: RawLineData) => { new IFC2X3.IfcPlate(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCPLATE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcPlate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCPLATE] = (i:IFC2X3.IfcPlate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCPLATE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCRAILING] = (d: RawLineData) => { new IFC2X3.IfcRailing(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCRAILING] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRailing(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCRAILING] = (i:IFC2X3.IfcRailing):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCRAILING] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCRAMP] = (d: RawLineData) => { new IFC2X3.IfcRamp(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCRAMP] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRamp(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCRAMP] = (i:IFC2X3.IfcRamp):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.ShapeType]; }
InversePropertyDef['IFC2X3'][IFCRAMP] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCRAMPFLIGHT] = (d: RawLineData) => { new IFC2X3.IfcRampFlight(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCRAMPFLIGHT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRampFlight(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCRAMPFLIGHT] = (i:IFC2X3.IfcRampFlight):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCRAMPFLIGHT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCRATIONALBEZIERCURVE] = (d: RawLineData) => { new IFC2X3.IfcRationalBezierCurve(d.ID, d.arguments[0].value, d.arguments[1].map((p:any) => new Reference<IFC2X3.IfcCartesianPoint>(p.value)), d.arguments[2], d.arguments[3].value, d.arguments[4].value, d.arguments[5].map((p:any) => p.value)); }
Constructors['IFC2X3'][IFCRATIONALBEZIERCURVE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRationalBezierCurve(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC2X3'][IFCRATIONALBEZIERCURVE] = (i:IFC2X3.IfcRationalBezierCurve):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect, i.WeightsData]; }
InversePropertyDef['IFC2X3'][IFCRATIONALBEZIERCURVE] = [['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC2X3'][IFCREINFORCINGELEMENT] = (d: RawLineData) => { new IFC2X3.IfcReinforcingElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCREINFORCINGELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcReinforcingElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCREINFORCINGELEMENT] = (i:IFC2X3.IfcReinforcingElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade]; }
InheritanceDef['IFC2X3'][IFCREINFORCINGELEMENT] = [IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH];
InversePropertyDef['IFC2X3'][IFCREINFORCINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCREINFORCINGMESH] = (d: RawLineData) => { new IFC2X3.IfcReinforcingMesh(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[11].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[12].value), new IFC2X3.IfcAreaMeasure(d.arguments[13].value), new IFC2X3.IfcAreaMeasure(d.arguments[14].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[15].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[16].value)); }
Constructors['IFC2X3'][IFCREINFORCINGMESH] = (expressID:number, args: any[]) => { return new IFC2X3.IfcReinforcingMesh(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC2X3'][IFCREINFORCINGMESH] = (i:IFC2X3.IfcReinforcingMesh):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.MeshLength, i.MeshWidth, i.LongitudinalBarNominalDiameter, i.TransverseBarNominalDiameter, i.LongitudinalBarCrossSectionArea, i.TransverseBarCrossSectionArea, i.LongitudinalBarSpacing, i.TransverseBarSpacing]; }
InversePropertyDef['IFC2X3'][IFCREINFORCINGMESH] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCROOF] = (d: RawLineData) => { new IFC2X3.IfcRoof(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCROOF] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRoof(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCROOF] = (i:IFC2X3.IfcRoof):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.ShapeType]; }
InversePropertyDef['IFC2X3'][IFCROOF] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCROUNDEDEDGEFEATURE] = (d: RawLineData) => { new IFC2X3.IfcRoundedEdgeFeature(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCROUNDEDEDGEFEATURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcRoundedEdgeFeature(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCROUNDEDEDGEFEATURE] = (i:IFC2X3.IfcRoundedEdgeFeature):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.FeatureLength, i.Radius]; }
InversePropertyDef['IFC2X3'][IFCROUNDEDEDGEFEATURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC2X3'][IFCSENSORTYPE] = (d: RawLineData) => { new IFC2X3.IfcSensorType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCSENSORTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSensorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCSENSORTYPE] = (i:IFC2X3.IfcSensorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSENSORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCSLAB] = (d: RawLineData) => { new IFC2X3.IfcSlab(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCSLAB] = (expressID:number, args: any[]) => { return new IFC2X3.IfcSlab(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSLAB] = (i:IFC2X3.IfcSlab):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCSLAB] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCSTAIR] = (d: RawLineData) => { new IFC2X3.IfcStair(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC2X3'][IFCSTAIR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStair(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSTAIR] = (i:IFC2X3.IfcStair):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.ShapeType]; }
InversePropertyDef['IFC2X3'][IFCSTAIR] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCSTAIRFLIGHT] = (d: RawLineData) => { new IFC2X3.IfcStairFlight(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].value, !d.arguments[9] ? null :d.arguments[9].value, !d.arguments[10] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[11].value)); }
Constructors['IFC2X3'][IFCSTAIRFLIGHT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStairFlight(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC2X3'][IFCSTAIRFLIGHT] = (i:IFC2X3.IfcStairFlight):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.NumberOfRiser, i.NumberOfTreads, i.RiserHeight, i.TreadLength]; }
InversePropertyDef['IFC2X3'][IFCSTAIRFLIGHT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCSTRUCTURALANALYSISMODEL] = (d: RawLineData) => { new IFC2X3.IfcStructuralAnalysisModel(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new Reference<IFC2X3.IfcAxis2Placement3D>(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC2X3.IfcStructuralLoadGroup>(p.value)), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC2X3.IfcStructuralResultGroup>(p.value))); }
Constructors['IFC2X3'][IFCSTRUCTURALANALYSISMODEL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcStructuralAnalysisModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCSTRUCTURALANALYSISMODEL] = (i:IFC2X3.IfcStructuralAnalysisModel):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.OrientationOf2DPlane, i.LoadedBy, i.HasResults]; }
InversePropertyDef['IFC2X3'][IFCSTRUCTURALANALYSISMODEL] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,false],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC2X3'][IFCTENDON] = (d: RawLineData) => { new IFC2X3.IfcTendon(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9], new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value), new IFC2X3.IfcAreaMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC2X3.IfcForceMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC2X3.IfcPressureMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC2X3.IfcNormalisedRatioMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[16].value)); }
Constructors['IFC2X3'][IFCTENDON] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTendon(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC2X3'][IFCTENDON] = (i:IFC2X3.IfcTendon):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.PredefinedType, i.NominalDiameter, i.CrossSectionArea, i.TensionForce, i.PreStress, i.FrictionCoefficient, i.AnchorageSlip, i.MinCurvatureRadius]; }
InversePropertyDef['IFC2X3'][IFCTENDON] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCTENDONANCHOR] = (d: RawLineData) => { new IFC2X3.IfcTendonAnchor(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCTENDONANCHOR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcTendonAnchor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCTENDONANCHOR] = (i:IFC2X3.IfcTendonAnchor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade]; }
InversePropertyDef['IFC2X3'][IFCTENDONANCHOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCVIBRATIONISOLATORTYPE] = (d: RawLineData) => { new IFC2X3.IfcVibrationIsolatorType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCVIBRATIONISOLATORTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcVibrationIsolatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCVIBRATIONISOLATORTYPE] = (i:IFC2X3.IfcVibrationIsolatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCVIBRATIONISOLATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCWALL] = (d: RawLineData) => { new IFC2X3.IfcWall(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCWALL] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWall(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCWALL] = (i:IFC2X3.IfcWall):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC2X3'][IFCWALL] = [IFCWALLSTANDARDCASE];
InversePropertyDef['IFC2X3'][IFCWALL] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCWALLSTANDARDCASE] = (d: RawLineData) => { new IFC2X3.IfcWallStandardCase(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCWALLSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWallStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCWALLSTANDARDCASE] = (i:IFC2X3.IfcWallStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCWALLSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCWINDOW] = (d: RawLineData) => { new IFC2X3.IfcWindow(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCWINDOW] = (expressID:number, args: any[]) => { return new IFC2X3.IfcWindow(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCWINDOW] = (i:IFC2X3.IfcWindow):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OverallHeight, i.OverallWidth]; }
InversePropertyDef['IFC2X3'][IFCWINDOW] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCACTUATORTYPE] = (d: RawLineData) => { new IFC2X3.IfcActuatorType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCACTUATORTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcActuatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCACTUATORTYPE] = (i:IFC2X3.IfcActuatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCACTUATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCALARMTYPE] = (d: RawLineData) => { new IFC2X3.IfcAlarmType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCALARMTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcAlarmType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCALARMTYPE] = (i:IFC2X3.IfcAlarmType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCALARMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCBEAM] = (d: RawLineData) => { new IFC2X3.IfcBeam(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCBEAM] = (expressID:number, args: any[]) => { return new IFC2X3.IfcBeam(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCBEAM] = (i:IFC2X3.IfcBeam):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCBEAM] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC2X3'][IFCCHAMFEREDGEFEATURE] = (d: RawLineData) => { new IFC2X3.IfcChamferEdgeFeature(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[10].value)); }
Constructors['IFC2X3'][IFCCHAMFEREDGEFEATURE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcChamferEdgeFeature(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC2X3'][IFCCHAMFEREDGEFEATURE] = (i:IFC2X3.IfcChamferEdgeFeature):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.FeatureLength, i.Width, i.Height]; }
InversePropertyDef['IFC2X3'][IFCCHAMFEREDGEFEATURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC2X3'][IFCCONTROLLERTYPE] = (d: RawLineData) => { new IFC2X3.IfcControllerType(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC2X3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC2X3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC2X3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC2X3'][IFCCONTROLLERTYPE] = (expressID:number, args: any[]) => { return new IFC2X3.IfcControllerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCCONTROLLERTYPE] = (i:IFC2X3.IfcControllerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC2X3'][IFCCONTROLLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['ObjectTypeOf',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONCHAMBERELEMENT] = (d: RawLineData) => { new IFC2X3.IfcDistributionChamberElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC2X3'][IFCDISTRIBUTIONCHAMBERELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionChamberElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONCHAMBERELEMENT] = (i:IFC2X3.IfcDistributionChamberElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONCHAMBERELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENT] = (d: RawLineData) => { new IFC2X3.IfcDistributionControlElement(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcIdentifier(d.arguments[8].value)); }
Constructors['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcDistributionControlElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENT] = (i:IFC2X3.IfcDistributionControlElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.ControlElementId]; }
InversePropertyDef['IFC2X3'][IFCDISTRIBUTIONCONTROLELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC2X3'][IFCELECTRICDISTRIBUTIONPOINT] = (d: RawLineData) => { new IFC2X3.IfcElectricDistributionPoint(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC2X3.IfcLabel(d.arguments[9].value)); }
Constructors['IFC2X3'][IFCELECTRICDISTRIBUTIONPOINT] = (expressID:number, args: any[]) => { return new IFC2X3.IfcElectricDistributionPoint(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC2X3'][IFCELECTRICDISTRIBUTIONPOINT] = (i:IFC2X3.IfcElectricDistributionPoint):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.DistributionPointFunction, i.UserDefinedFunction]; }
InversePropertyDef['IFC2X3'][IFCELECTRICDISTRIBUTIONPOINT] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC2X3'][IFCREINFORCINGBAR] = (d: RawLineData) => { new IFC2X3.IfcReinforcingBar(d.ID, new IFC2X3.IfcGloballyUniqueId(d.arguments[0].value), new Reference<IFC2X3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC2X3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC2X3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC2X3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC2X3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC2X3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC2X3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC2X3.IfcLabel(d.arguments[8].value), new IFC2X3.IfcPositiveLengthMeasure(d.arguments[9].value), new IFC2X3.IfcAreaMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC2X3.IfcPositiveLengthMeasure(d.arguments[11].value), d.arguments[12], d.arguments[13]); }
Constructors['IFC2X3'][IFCREINFORCINGBAR] = (expressID:number, args: any[]) => { return new IFC2X3.IfcReinforcingBar(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC2X3'][IFCREINFORCINGBAR] = (i:IFC2X3.IfcReinforcingBar):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.NominalDiameter, i.CrossSectionArea, i.BarLength, i.BarRole, i.BarSurface]; }
InversePropertyDef['IFC2X3'][IFCREINFORCINGBAR] = [['HasAssignments',IFCRELASSIGNS,4,true],['IsDecomposedBy',IFCRELDECOMPOSES,4,true],['Decomposes',IFCRELDECOMPOSES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['HasStructuralMember',IFCRELCONNECTSSTRUCTURALELEMENT,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
import * as IFC4_3 from './ifc-schema_IFC4_3';
FromRawLineData['IFC4.3'] = {};
Constructors['IFC4.3'] = {};
InversePropertyDef['IFC4.3'] = {};
InheritanceDef['IFC4.3'] = {};
ToRawLineData['IFC4.3'] = {};
TypeInitialisers['IFC4.3'] = {};
TypeInitialisers['IFC4_3'][3699917729] = (v: any) => { return new IFC4_3.IfcAbsorbedDoseMeasure(v); }
TypeInitialisers['IFC4_3'][4182062534] = (v: any) => { return new IFC4_3.IfcAccelerationMeasure(v); }
TypeInitialisers['IFC4_3'][632304761] = (v: any) => { return new IFC4_3.IfcAngularVelocityMeasure(v); }
TypeInitialisers['IFC4_3'][1500781891] = (v: any) => { return new IFC4_3.IfcAreaDensityMeasure(v); }
TypeInitialisers['IFC4_3'][3812528620] = (v: any) => { return new IFC4_3.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC4_3'][94842927] = (v: any) => { return new IFC4_3.IfcCurvatureMeasure(v); }
TypeInitialisers['IFC4_3'][524656162] = (v: any) => { return new IFC4_3.IfcDoseEquivalentMeasure(v); }
TypeInitialisers['IFC4_3'][69416015] = (v: any) => { return new IFC4_3.IfcDynamicViscosityMeasure(v); }
TypeInitialisers['IFC4_3'][1827137117] = (v: any) => { return new IFC4_3.IfcElectricCapacitanceMeasure(v); }
TypeInitialisers['IFC4_3'][3818826038] = (v: any) => { return new IFC4_3.IfcElectricChargeMeasure(v); }
TypeInitialisers['IFC4_3'][2093906313] = (v: any) => { return new IFC4_3.IfcElectricConductanceMeasure(v); }
TypeInitialisers['IFC4_3'][2951915441] = (v: any) => { return new IFC4_3.IfcElectricResistanceMeasure(v); }
TypeInitialisers['IFC4_3'][2506197118] = (v: any) => { return new IFC4_3.IfcElectricVoltageMeasure(v); }
TypeInitialisers['IFC4_3'][2078135608] = (v: any) => { return new IFC4_3.IfcEnergyMeasure(v); }
TypeInitialisers['IFC4_3'][1361398929] = (v: any) => { return new IFC4_3.IfcForceMeasure(v); }
TypeInitialisers['IFC4_3'][3044325142] = (v: any) => { return new IFC4_3.IfcFrequencyMeasure(v); }
TypeInitialisers['IFC4_3'][3113092358] = (v: any) => { return new IFC4_3.IfcHeatFluxDensityMeasure(v); }
TypeInitialisers['IFC4_3'][1158859006] = (v: any) => { return new IFC4_3.IfcHeatingValueMeasure(v); }
TypeInitialisers['IFC4_3'][3358199106] = (v: any) => { return new IFC4_3.IfcIlluminanceMeasure(v); }
TypeInitialisers['IFC4_3'][2679005408] = (v: any) => { return new IFC4_3.IfcInductanceMeasure(v); }
TypeInitialisers['IFC4_3'][3809634241] = (v: any) => { return new IFC4_3.IfcIntegerCountRateMeasure(v); }
TypeInitialisers['IFC4_3'][3686016028] = (v: any) => { return new IFC4_3.IfcIonConcentrationMeasure(v); }
TypeInitialisers['IFC4_3'][3192672207] = (v: any) => { return new IFC4_3.IfcIsothermalMoistureCapacityMeasure(v); }
TypeInitialisers['IFC4_3'][2054016361] = (v: any) => { return new IFC4_3.IfcKinematicViscosityMeasure(v); }
TypeInitialisers['IFC4_3'][191860431] = (v: any) => { return new IFC4_3.IfcLinearForceMeasure(v); }
TypeInitialisers['IFC4_3'][2128979029] = (v: any) => { return new IFC4_3.IfcLinearMomentMeasure(v); }
TypeInitialisers['IFC4_3'][1307019551] = (v: any) => { return new IFC4_3.IfcLinearStiffnessMeasure(v); }
TypeInitialisers['IFC4_3'][3086160713] = (v: any) => { return new IFC4_3.IfcLinearVelocityMeasure(v); }
TypeInitialisers['IFC4_3'][2095003142] = (v: any) => { return new IFC4_3.IfcLuminousFluxMeasure(v); }
TypeInitialisers['IFC4_3'][2755797622] = (v: any) => { return new IFC4_3.IfcLuminousIntensityDistributionMeasure(v); }
TypeInitialisers['IFC4_3'][286949696] = (v: any) => { return new IFC4_3.IfcMagneticFluxDensityMeasure(v); }
TypeInitialisers['IFC4_3'][2486716878] = (v: any) => { return new IFC4_3.IfcMagneticFluxMeasure(v); }
TypeInitialisers['IFC4_3'][1477762836] = (v: any) => { return new IFC4_3.IfcMassDensityMeasure(v); }
TypeInitialisers['IFC4_3'][4017473158] = (v: any) => { return new IFC4_3.IfcMassFlowRateMeasure(v); }
TypeInitialisers['IFC4_3'][3531705166] = (v: any) => { return new IFC4_3.IfcMassPerLengthMeasure(v); }
TypeInitialisers['IFC4_3'][3341486342] = (v: any) => { return new IFC4_3.IfcModulusOfElasticityMeasure(v); }
TypeInitialisers['IFC4_3'][2173214787] = (v: any) => { return new IFC4_3.IfcModulusOfLinearSubgradeReactionMeasure(v); }
TypeInitialisers['IFC4_3'][1052454078] = (v: any) => { return new IFC4_3.IfcModulusOfRotationalSubgradeReactionMeasure(v); }
TypeInitialisers['IFC4_3'][1753493141] = (v: any) => { return new IFC4_3.IfcModulusOfSubgradeReactionMeasure(v); }
TypeInitialisers['IFC4_3'][3177669450] = (v: any) => { return new IFC4_3.IfcMoistureDiffusivityMeasure(v); }
TypeInitialisers['IFC4_3'][1648970520] = (v: any) => { return new IFC4_3.IfcMolecularWeightMeasure(v); }
TypeInitialisers['IFC4_3'][3114022597] = (v: any) => { return new IFC4_3.IfcMomentOfInertiaMeasure(v); }
TypeInitialisers['IFC4_3'][2615040989] = (v: any) => { return new IFC4_3.IfcMonetaryMeasure(v); }
TypeInitialisers['IFC4_3'][929793134] = (v: any) => { return new IFC4_3.IfcPHMeasure(v); }
TypeInitialisers['IFC4_3'][2642773653] = (v: any) => { return new IFC4_3.IfcPlanarForceMeasure(v); }
TypeInitialisers['IFC4_3'][1364037233] = (v: any) => { return new IFC4_3.IfcPowerMeasure(v); }
TypeInitialisers['IFC4_3'][3665567075] = (v: any) => { return new IFC4_3.IfcPressureMeasure(v); }
TypeInitialisers['IFC4_3'][3972513137] = (v: any) => { return new IFC4_3.IfcRadioActivityMeasure(v); }
TypeInitialisers['IFC4_3'][2133746277] = (v: any) => { return new IFC4_3.IfcRotationalFrequencyMeasure(v); }
TypeInitialisers['IFC4_3'][1755127002] = (v: any) => { return new IFC4_3.IfcRotationalMassMeasure(v); }
TypeInitialisers['IFC4_3'][3211557302] = (v: any) => { return new IFC4_3.IfcRotationalStiffnessMeasure(v); }
TypeInitialisers['IFC4_3'][3467162246] = (v: any) => { return new IFC4_3.IfcSectionModulusMeasure(v); }
TypeInitialisers['IFC4_3'][2190458107] = (v: any) => { return new IFC4_3.IfcSectionalAreaIntegralMeasure(v); }
TypeInitialisers['IFC4_3'][408310005] = (v: any) => { return new IFC4_3.IfcShearModulusMeasure(v); }
TypeInitialisers['IFC4_3'][4157543285] = (v: any) => { return new IFC4_3.IfcSoundPowerLevelMeasure(v); }
TypeInitialisers['IFC4_3'][846465480] = (v: any) => { return new IFC4_3.IfcSoundPowerMeasure(v); }
TypeInitialisers['IFC4_3'][3457685358] = (v: any) => { return new IFC4_3.IfcSoundPressureLevelMeasure(v); }
TypeInitialisers['IFC4_3'][993287707] = (v: any) => { return new IFC4_3.IfcSoundPressureMeasure(v); }
TypeInitialisers['IFC4_3'][3477203348] = (v: any) => { return new IFC4_3.IfcSpecificHeatCapacityMeasure(v); }
TypeInitialisers['IFC4_3'][58845555] = (v: any) => { return new IFC4_3.IfcTemperatureGradientMeasure(v); }
TypeInitialisers['IFC4_3'][1209108979] = (v: any) => { return new IFC4_3.IfcTemperatureRateOfChangeMeasure(v); }
TypeInitialisers['IFC4_3'][232962298] = (v: any) => { return new IFC4_3.IfcThermalAdmittanceMeasure(v); }
TypeInitialisers['IFC4_3'][2645777649] = (v: any) => { return new IFC4_3.IfcThermalConductivityMeasure(v); }
TypeInitialisers['IFC4_3'][2281867870] = (v: any) => { return new IFC4_3.IfcThermalExpansionCoefficientMeasure(v); }
TypeInitialisers['IFC4_3'][857959152] = (v: any) => { return new IFC4_3.IfcThermalResistanceMeasure(v); }
TypeInitialisers['IFC4_3'][2016195849] = (v: any) => { return new IFC4_3.IfcThermalTransmittanceMeasure(v); }
TypeInitialisers['IFC4_3'][1278329552] = (v: any) => { return new IFC4_3.IfcTorqueMeasure(v); }
TypeInitialisers['IFC4_3'][3345633955] = (v: any) => { return new IFC4_3.IfcVaporPermeabilityMeasure(v); }
TypeInitialisers['IFC4_3'][2593997549] = (v: any) => { return new IFC4_3.IfcVolumetricFlowRateMeasure(v); }
TypeInitialisers['IFC4_3'][51269191] = (v: any) => { return new IFC4_3.IfcWarpingConstantMeasure(v); }
TypeInitialisers['IFC4_3'][1718600412] = (v: any) => { return new IFC4_3.IfcWarpingMomentMeasure(v); }
TypeInitialisers['IFC4_3'][360377573] = (v: any) => { return new IFC4_3.IfcAmountOfSubstanceMeasure(v); }
TypeInitialisers['IFC4_3'][2650437152] = (v: any) => { return new IFC4_3.IfcAreaMeasure(v); }
TypeInitialisers['IFC4_3'][2991860651] = (v: any) => { return new IFC4_3.IfcComplexNumber(v); }
TypeInitialisers['IFC4_3'][3238673880] = (v: any) => { return new IFC4_3.IfcContextDependentMeasure(v); }
TypeInitialisers['IFC4_3'][1778710042] = (v: any) => { return new IFC4_3.IfcCountMeasure(v); }
TypeInitialisers['IFC4_3'][1514641115] = (v: any) => { return new IFC4_3.IfcDescriptiveMeasure(v); }
TypeInitialisers['IFC4_3'][3790457270] = (v: any) => { return new IFC4_3.IfcElectricCurrentMeasure(v); }
TypeInitialisers['IFC4_3'][1243674935] = (v: any) => { return new IFC4_3.IfcLengthMeasure(v); }
TypeInitialisers['IFC4_3'][151039812] = (v: any) => { return new IFC4_3.IfcLuminousIntensityMeasure(v); }
TypeInitialisers['IFC4_3'][3124614049] = (v: any) => { return new IFC4_3.IfcMassMeasure(v); }
TypeInitialisers['IFC4_3'][525895558] = (v: any) => { return new IFC4_3.IfcNonNegativeLengthMeasure(v); }
TypeInitialisers['IFC4_3'][2095195183] = (v: any) => { return new IFC4_3.IfcNormalisedRatioMeasure(v); }
TypeInitialisers['IFC4_3'][2395907400] = (v: any) => { return new IFC4_3.IfcNumericMeasure(v); }
TypeInitialisers['IFC4_3'][2260317790] = (v: any) => { return new IFC4_3.IfcParameterValue(v); }
TypeInitialisers['IFC4_3'][4042175685] = (v: any) => { return new IFC4_3.IfcPlaneAngleMeasure(v); }
TypeInitialisers['IFC4_3'][2815919920] = (v: any) => { return new IFC4_3.IfcPositiveLengthMeasure(v); }
TypeInitialisers['IFC4_3'][3054510233] = (v: any) => { return new IFC4_3.IfcPositivePlaneAngleMeasure(v); }
TypeInitialisers['IFC4_3'][1245737093] = (v: any) => { return new IFC4_3.IfcPositiveRatioMeasure(v); }
TypeInitialisers['IFC4_3'][96294661] = (v: any) => { return new IFC4_3.IfcRatioMeasure(v); }
TypeInitialisers['IFC4_3'][3471399674] = (v: any) => { return new IFC4_3.IfcSolidAngleMeasure(v); }
TypeInitialisers['IFC4_3'][743184107] = (v: any) => { return new IFC4_3.IfcThermodynamicTemperatureMeasure(v); }
TypeInitialisers['IFC4_3'][2726807636] = (v: any) => { return new IFC4_3.IfcTimeMeasure(v); }
TypeInitialisers['IFC4_3'][3458127941] = (v: any) => { return new IFC4_3.IfcVolumeMeasure(v); }
TypeInitialisers['IFC4_3'][2314439260] = (v: any) => { return new IFC4_3.IfcBinary(v); }
TypeInitialisers['IFC4_3'][2735952531] = (v: any) => { return new IFC4_3.IfcBoolean(v); }
TypeInitialisers['IFC4_3'][937566702] = (v: any) => { return new IFC4_3.IfcDate(v); }
TypeInitialisers['IFC4_3'][2195413836] = (v: any) => { return new IFC4_3.IfcDateTime(v); }
TypeInitialisers['IFC4_3'][2541165894] = (v: any) => { return new IFC4_3.IfcDuration(v); }
TypeInitialisers['IFC4_3'][983778844] = (v: any) => { return new IFC4_3.IfcIdentifier(v); }
TypeInitialisers['IFC4_3'][1939436016] = (v: any) => { return new IFC4_3.IfcInteger(v); }
TypeInitialisers['IFC4_3'][3258342251] = (v: any) => { return new IFC4_3.IfcLabel(v); }
TypeInitialisers['IFC4_3'][503418787] = (v: any) => { return new IFC4_3.IfcLogical(v); }
TypeInitialisers['IFC4_3'][1790229001] = (v: any) => { return new IFC4_3.IfcPositiveInteger(v); }
TypeInitialisers['IFC4_3'][200335297] = (v: any) => { return new IFC4_3.IfcReal(v); }
TypeInitialisers['IFC4_3'][2801250643] = (v: any) => { return new IFC4_3.IfcText(v); }
TypeInitialisers['IFC4_3'][4075327185] = (v: any) => { return new IFC4_3.IfcTime(v); }
TypeInitialisers['IFC4_3'][2591213694] = (v: any) => { return new IFC4_3.IfcTimeStamp(v); }
TypeInitialisers['IFC4_3'][3812528620] = (v: any) => { return new IFC4_3.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC4_3'][2991860651] = (v: any) => { return new IFC4_3.IfcComplexNumber(v); }
TypeInitialisers['IFC4_3'][3812528620] = (v: any) => { return new IFC4_3.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC4_3'][2991860651] = (v: any) => { return new IFC4_3.IfcComplexNumber(v); }
TypeInitialisers['IFC4_3'][2798247006] = (v: any) => { return new IFC4_3.IfcPropertySetDefinitionSet(v); }
TypeInitialisers['IFC4_3'][3683503648] = (v: any) => { return new IFC4_3.IfcArcIndex(v); }
TypeInitialisers['IFC4_3'][1774176899] = (v: any) => { return new IFC4_3.IfcLineIndex(v); }
TypeInitialisers['IFC4_3'][2757832317] = (v: any) => { return new IFC4_3.IfcSpecularExponent(v); }
TypeInitialisers['IFC4_3'][361837227] = (v: any) => { return new IFC4_3.IfcSpecularRoughness(v); }
TypeInitialisers['IFC4_3'][3812528620] = (v: any) => { return new IFC4_3.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC4_3'][2991860651] = (v: any) => { return new IFC4_3.IfcComplexNumber(v); }
FromRawLineData['IFC4_3'][IFCACTORROLE] = (d: RawLineData) => { new IFC4_3.IfcActorRole(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcText(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCACTORROLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcActorRole(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCACTORROLE] = (i:IFC4_3.IfcActorRole):unknown[] => { return [i.Role, i.UserDefinedRole, i.Description]; }
InversePropertyDef['IFC4.3'][IFCACTORROLE] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCADDRESS] = (d: RawLineData) => { new IFC4_3.IfcAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCADDRESS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAddress(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCADDRESS] = (i:IFC4_3.IfcAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose]; }
InheritanceDef['IFC4.3'][IFCADDRESS] = [IFCTELECOMADDRESS,IFCPOSTALADDRESS];
InversePropertyDef['IFC4.3'][IFCADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC4_3'][IFCALIGNMENTPARAMETERSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcAlignmentParameterSegment(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCALIGNMENTPARAMETERSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignmentParameterSegment(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCALIGNMENTPARAMETERSEGMENT] = (i:IFC4_3.IfcAlignmentParameterSegment):unknown[] => { return [i.StartTag, i.EndTag]; }
InheritanceDef['IFC4.3'][IFCALIGNMENTPARAMETERSEGMENT] = [IFCALIGNMENTHORIZONTALSEGMENT,IFCALIGNMENTCANTSEGMENT,IFCALIGNMENTVERTICALSEGMENT];
FromRawLineData['IFC4_3'][IFCALIGNMENTVERTICALSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcAlignmentVerticalSegment(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new IFC4_3.IfcLengthMeasure(d.arguments[2].value), new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[3].value), new IFC4_3.IfcLengthMeasure(d.arguments[4].value), new IFC4_3.IfcRatioMeasure(d.arguments[5].value), new IFC4_3.IfcRatioMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCALIGNMENTVERTICALSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignmentVerticalSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCALIGNMENTVERTICALSEGMENT] = (i:IFC4_3.IfcAlignmentVerticalSegment):unknown[] => { return [i.StartTag, i.EndTag, i.StartDistAlong, i.HorizontalLength, i.StartHeight, i.StartGradient, i.EndGradient, i.RadiusOfCurvature, i.PredefinedType]; }
FromRawLineData['IFC4_3'][IFCAPPLICATION] = (d: RawLineData) => { new IFC4_3.IfcApplication(d.ID, new Reference<IFC4_3.IfcOrganization>(d.arguments[0].value), new IFC4_3.IfcLabel(d.arguments[1].value), new IFC4_3.IfcLabel(d.arguments[2].value), new IFC4_3.IfcIdentifier(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCAPPLICATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcApplication(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCAPPLICATION] = (i:IFC4_3.IfcApplication):unknown[] => { return [i.ApplicationDeveloper, i.Version, i.ApplicationFullName, i.ApplicationIdentifier]; }
FromRawLineData['IFC4_3'][IFCAPPLIEDVALUE] = (d: RawLineData) => { new IFC4_3.IfcAppliedValue(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcMeasureWithUnit>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcDate(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDate(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value))); }
Constructors['IFC4_3'][IFCAPPLIEDVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAppliedValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCAPPLIEDVALUE] = (i:IFC4_3.IfcAppliedValue):unknown[] => { return [i.Name, i.Description, i.AppliedValue, i.UnitBasis, i.ApplicableDate, i.FixedUntilDate, i.Category, i.Condition, i.ArithmeticOperator, i.Components]; }
InheritanceDef['IFC4.3'][IFCAPPLIEDVALUE] = [IFCCOSTVALUE];
InversePropertyDef['IFC4.3'][IFCAPPLIEDVALUE] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCAPPROVAL] = (d: RawLineData) => { new IFC4_3.IfcApproval(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcText(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcDateTime(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), !d.arguments[8] ? null :new Reference(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCAPPROVAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcApproval(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCAPPROVAL] = (i:IFC4_3.IfcApproval):unknown[] => { return [i.Identifier, i.Name, i.Description, i.TimeOfApproval, i.Status, i.Level, i.Qualifier, i.RequestingApproval, i.GivingApproval]; }
InversePropertyDef['IFC4.3'][IFCAPPROVAL] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['ApprovedObjects',IFCRELASSOCIATESAPPROVAL,5,true],['ApprovedResources',IFCRESOURCEAPPROVALRELATIONSHIP,3,true],['IsRelatedWith',IFCAPPROVALRELATIONSHIP,3,true],['Relates',IFCAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCBOUNDARYCONDITION] = (d: RawLineData) => { new IFC4_3.IfcBoundaryCondition(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCBOUNDARYCONDITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoundaryCondition(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCBOUNDARYCONDITION] = (i:IFC4_3.IfcBoundaryCondition):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCBOUNDARYCONDITION] = [IFCBOUNDARYNODECONDITIONWARPING,IFCBOUNDARYNODECONDITION,IFCBOUNDARYFACECONDITION,IFCBOUNDARYEDGECONDITION];
FromRawLineData['IFC4_3'][IFCBOUNDARYEDGECONDITION] = (d: RawLineData) => { new IFC4_3.IfcBoundaryEdgeCondition(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :TypeInitialiser('IFC4_3',d.arguments[1]), !d.arguments[2] ? null :TypeInitialiser('IFC4_3',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4_3',d.arguments[4]), !d.arguments[5] ? null :TypeInitialiser('IFC4_3',d.arguments[5]), !d.arguments[6] ? null :TypeInitialiser('IFC4_3',d.arguments[6])); }
Constructors['IFC4_3'][IFCBOUNDARYEDGECONDITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoundaryEdgeCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCBOUNDARYEDGECONDITION] = (i:IFC4_3.IfcBoundaryEdgeCondition):unknown[] => { return [i.Name, !i.TranslationalStiffnessByLengthX ? null :Labelise(i.TranslationalStiffnessByLengthX), !i.TranslationalStiffnessByLengthY ? null :Labelise(i.TranslationalStiffnessByLengthY), !i.TranslationalStiffnessByLengthZ ? null :Labelise(i.TranslationalStiffnessByLengthZ), !i.RotationalStiffnessByLengthX ? null :Labelise(i.RotationalStiffnessByLengthX), !i.RotationalStiffnessByLengthY ? null :Labelise(i.RotationalStiffnessByLengthY), !i.RotationalStiffnessByLengthZ ? null :Labelise(i.RotationalStiffnessByLengthZ)]; }
FromRawLineData['IFC4_3'][IFCBOUNDARYFACECONDITION] = (d: RawLineData) => { new IFC4_3.IfcBoundaryFaceCondition(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :TypeInitialiser('IFC4_3',d.arguments[1]), !d.arguments[2] ? null :TypeInitialiser('IFC4_3',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3])); }
Constructors['IFC4_3'][IFCBOUNDARYFACECONDITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoundaryFaceCondition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCBOUNDARYFACECONDITION] = (i:IFC4_3.IfcBoundaryFaceCondition):unknown[] => { return [i.Name, !i.TranslationalStiffnessByAreaX ? null :Labelise(i.TranslationalStiffnessByAreaX), !i.TranslationalStiffnessByAreaY ? null :Labelise(i.TranslationalStiffnessByAreaY), !i.TranslationalStiffnessByAreaZ ? null :Labelise(i.TranslationalStiffnessByAreaZ)]; }
FromRawLineData['IFC4_3'][IFCBOUNDARYNODECONDITION] = (d: RawLineData) => { new IFC4_3.IfcBoundaryNodeCondition(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :TypeInitialiser('IFC4_3',d.arguments[1]), !d.arguments[2] ? null :TypeInitialiser('IFC4_3',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4_3',d.arguments[4]), !d.arguments[5] ? null :TypeInitialiser('IFC4_3',d.arguments[5]), !d.arguments[6] ? null :TypeInitialiser('IFC4_3',d.arguments[6])); }
Constructors['IFC4_3'][IFCBOUNDARYNODECONDITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoundaryNodeCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCBOUNDARYNODECONDITION] = (i:IFC4_3.IfcBoundaryNodeCondition):unknown[] => { return [i.Name, !i.TranslationalStiffnessX ? null :Labelise(i.TranslationalStiffnessX), !i.TranslationalStiffnessY ? null :Labelise(i.TranslationalStiffnessY), !i.TranslationalStiffnessZ ? null :Labelise(i.TranslationalStiffnessZ), !i.RotationalStiffnessX ? null :Labelise(i.RotationalStiffnessX), !i.RotationalStiffnessY ? null :Labelise(i.RotationalStiffnessY), !i.RotationalStiffnessZ ? null :Labelise(i.RotationalStiffnessZ)]; }
InheritanceDef['IFC4.3'][IFCBOUNDARYNODECONDITION] = [IFCBOUNDARYNODECONDITIONWARPING];
FromRawLineData['IFC4_3'][IFCBOUNDARYNODECONDITIONWARPING] = (d: RawLineData) => { new IFC4_3.IfcBoundaryNodeConditionWarping(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :TypeInitialiser('IFC4_3',d.arguments[1]), !d.arguments[2] ? null :TypeInitialiser('IFC4_3',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4_3',d.arguments[4]), !d.arguments[5] ? null :TypeInitialiser('IFC4_3',d.arguments[5]), !d.arguments[6] ? null :TypeInitialiser('IFC4_3',d.arguments[6]), !d.arguments[7] ? null :TypeInitialiser('IFC4_3',d.arguments[7])); }
Constructors['IFC4_3'][IFCBOUNDARYNODECONDITIONWARPING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoundaryNodeConditionWarping(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCBOUNDARYNODECONDITIONWARPING] = (i:IFC4_3.IfcBoundaryNodeConditionWarping):unknown[] => { return [i.Name, !i.TranslationalStiffnessX ? null :Labelise(i.TranslationalStiffnessX), !i.TranslationalStiffnessY ? null :Labelise(i.TranslationalStiffnessY), !i.TranslationalStiffnessZ ? null :Labelise(i.TranslationalStiffnessZ), !i.RotationalStiffnessX ? null :Labelise(i.RotationalStiffnessX), !i.RotationalStiffnessY ? null :Labelise(i.RotationalStiffnessY), !i.RotationalStiffnessZ ? null :Labelise(i.RotationalStiffnessZ), !i.WarpingStiffness ? null :Labelise(i.WarpingStiffness)]; }
FromRawLineData['IFC4_3'][IFCCONNECTIONGEOMETRY] = (d: RawLineData) => { new IFC4_3.IfcConnectionGeometry(d.ID, ); }
Constructors['IFC4_3'][IFCCONNECTIONGEOMETRY] = (expressID:number, _:any) => { return new IFC4_3.IfcConnectionGeometry(expressID, ); }
ToRawLineData['IFC4_3'][IFCCONNECTIONGEOMETRY] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCCONNECTIONGEOMETRY] = [IFCCONNECTIONCURVEGEOMETRY,IFCCONNECTIONVOLUMEGEOMETRY,IFCCONNECTIONSURFACEGEOMETRY,IFCCONNECTIONPOINTECCENTRICITY,IFCCONNECTIONPOINTGEOMETRY];
FromRawLineData['IFC4_3'][IFCCONNECTIONPOINTGEOMETRY] = (d: RawLineData) => { new IFC4_3.IfcConnectionPointGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCONNECTIONPOINTGEOMETRY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConnectionPointGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCONNECTIONPOINTGEOMETRY] = (i:IFC4_3.IfcConnectionPointGeometry):unknown[] => { return [i.PointOnRelatingElement, i.PointOnRelatedElement]; }
InheritanceDef['IFC4.3'][IFCCONNECTIONPOINTGEOMETRY] = [IFCCONNECTIONPOINTECCENTRICITY];
FromRawLineData['IFC4_3'][IFCCONNECTIONSURFACEGEOMETRY] = (d: RawLineData) => { new IFC4_3.IfcConnectionSurfaceGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCONNECTIONSURFACEGEOMETRY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConnectionSurfaceGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCONNECTIONSURFACEGEOMETRY] = (i:IFC4_3.IfcConnectionSurfaceGeometry):unknown[] => { return [i.SurfaceOnRelatingElement, i.SurfaceOnRelatedElement]; }
FromRawLineData['IFC4_3'][IFCCONNECTIONVOLUMEGEOMETRY] = (d: RawLineData) => { new IFC4_3.IfcConnectionVolumeGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCONNECTIONVOLUMEGEOMETRY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConnectionVolumeGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCONNECTIONVOLUMEGEOMETRY] = (i:IFC4_3.IfcConnectionVolumeGeometry):unknown[] => { return [i.VolumeOnRelatingElement, i.VolumeOnRelatedElement]; }
FromRawLineData['IFC4_3'][IFCCONSTRAINT] = (d: RawLineData) => { new IFC4_3.IfcConstraint(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC4_3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCCONSTRAINT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstraint(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCCONSTRAINT] = (i:IFC4_3.IfcConstraint):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade]; }
InheritanceDef['IFC4.3'][IFCCONSTRAINT] = [IFCOBJECTIVE,IFCMETRIC];
InversePropertyDef['IFC4.3'][IFCCONSTRAINT] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PropertiesForConstraint',IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCCOORDINATEOPERATION] = (d: RawLineData) => { new IFC4_3.IfcCoordinateOperation(d.ID, new Reference(d.arguments[0].value), new Reference<IFC4_3.IfcCoordinateReferenceSystem>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCOORDINATEOPERATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCoordinateOperation(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCOORDINATEOPERATION] = (i:IFC4_3.IfcCoordinateOperation):unknown[] => { return [i.SourceCRS, i.TargetCRS]; }
InheritanceDef['IFC4.3'][IFCCOORDINATEOPERATION] = [IFCMAPCONVERSION];
FromRawLineData['IFC4_3'][IFCCOORDINATEREFERENCESYSTEM] = (d: RawLineData) => { new IFC4_3.IfcCoordinateReferenceSystem(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcIdentifier(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCCOORDINATEREFERENCESYSTEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCoordinateReferenceSystem(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCOORDINATEREFERENCESYSTEM] = (i:IFC4_3.IfcCoordinateReferenceSystem):unknown[] => { return [i.Name, i.Description, i.GeodeticDatum, i.VerticalDatum]; }
InheritanceDef['IFC4.3'][IFCCOORDINATEREFERENCESYSTEM] = [IFCPROJECTEDCRS];
InversePropertyDef['IFC4.3'][IFCCOORDINATEREFERENCESYSTEM] = [['HasCoordinateOperation',IFCCOORDINATEOPERATION,0,true],];
FromRawLineData['IFC4_3'][IFCCOSTVALUE] = (d: RawLineData) => { new IFC4_3.IfcCostValue(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcMeasureWithUnit>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcDate(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDate(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value))); }
Constructors['IFC4_3'][IFCCOSTVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCostValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOSTVALUE] = (i:IFC4_3.IfcCostValue):unknown[] => { return [i.Name, i.Description, i.AppliedValue, i.UnitBasis, i.ApplicableDate, i.FixedUntilDate, i.Category, i.Condition, i.ArithmeticOperator, i.Components]; }
InversePropertyDef['IFC4.3'][IFCCOSTVALUE] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCDERIVEDUNIT] = (d: RawLineData) => { new IFC4_3.IfcDerivedUnit(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcDerivedUnitElement>(p.value)), d.arguments[1], !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLabel(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCDERIVEDUNIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDerivedUnit(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCDERIVEDUNIT] = (i:IFC4_3.IfcDerivedUnit):unknown[] => { return [i.Elements, i.UnitType, i.UserDefinedType, i.Name]; }
FromRawLineData['IFC4_3'][IFCDERIVEDUNITELEMENT] = (d: RawLineData) => { new IFC4_3.IfcDerivedUnitElement(d.ID, new Reference<IFC4_3.IfcNamedUnit>(d.arguments[0].value), d.arguments[1].value); }
Constructors['IFC4_3'][IFCDERIVEDUNITELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDerivedUnitElement(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCDERIVEDUNITELEMENT] = (i:IFC4_3.IfcDerivedUnitElement):unknown[] => { return [i.Unit, i.Exponent]; }
FromRawLineData['IFC4_3'][IFCDIMENSIONALEXPONENTS] = (d: RawLineData) => { new IFC4_3.IfcDimensionalExponents(d.ID, d.arguments[0].value, d.arguments[1].value, d.arguments[2].value, d.arguments[3].value, d.arguments[4].value, d.arguments[5].value, d.arguments[6].value); }
Constructors['IFC4_3'][IFCDIMENSIONALEXPONENTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDimensionalExponents(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCDIMENSIONALEXPONENTS] = (i:IFC4_3.IfcDimensionalExponents):unknown[] => { return [i.LengthExponent, i.MassExponent, i.TimeExponent, i.ElectricCurrentExponent, i.ThermodynamicTemperatureExponent, i.AmountOfSubstanceExponent, i.LuminousIntensityExponent]; }
FromRawLineData['IFC4_3'][IFCEXTERNALINFORMATION] = (d: RawLineData) => { new IFC4_3.IfcExternalInformation(d.ID, ); }
Constructors['IFC4_3'][IFCEXTERNALINFORMATION] = (expressID:number, _:any) => { return new IFC4_3.IfcExternalInformation(expressID, ); }
ToRawLineData['IFC4_3'][IFCEXTERNALINFORMATION] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCEXTERNALINFORMATION] = [IFCDOCUMENTINFORMATION,IFCCLASSIFICATION,IFCLIBRARYINFORMATION];
FromRawLineData['IFC4_3'][IFCEXTERNALREFERENCE] = (d: RawLineData) => { new IFC4_3.IfcExternalReference(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCEXTERNALREFERENCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExternalReference(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCEXTERNALREFERENCE] = (i:IFC4_3.IfcExternalReference):unknown[] => { return [i.Location, i.Identification, i.Name]; }
InheritanceDef['IFC4.3'][IFCEXTERNALREFERENCE] = [IFCDOCUMENTREFERENCE,IFCCLASSIFICATIONREFERENCE,IFCLIBRARYREFERENCE,IFCEXTERNALLYDEFINEDTEXTFONT,IFCEXTERNALLYDEFINEDSURFACESTYLE,IFCEXTERNALLYDEFINEDHATCHSTYLE];
InversePropertyDef['IFC4.3'][IFCEXTERNALREFERENCE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (d: RawLineData) => { new IFC4_3.IfcExternallyDefinedHatchStyle(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExternallyDefinedHatchStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (i:IFC4_3.IfcExternallyDefinedHatchStyle):unknown[] => { return [i.Location, i.Identification, i.Name]; }
InversePropertyDef['IFC4.3'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (d: RawLineData) => { new IFC4_3.IfcExternallyDefinedSurfaceStyle(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExternallyDefinedSurfaceStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (i:IFC4_3.IfcExternallyDefinedSurfaceStyle):unknown[] => { return [i.Location, i.Identification, i.Name]; }
InversePropertyDef['IFC4.3'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCEXTERNALLYDEFINEDTEXTFONT] = (d: RawLineData) => { new IFC4_3.IfcExternallyDefinedTextFont(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCEXTERNALLYDEFINEDTEXTFONT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExternallyDefinedTextFont(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCEXTERNALLYDEFINEDTEXTFONT] = (i:IFC4_3.IfcExternallyDefinedTextFont):unknown[] => { return [i.Location, i.Identification, i.Name]; }
InversePropertyDef['IFC4.3'][IFCEXTERNALLYDEFINEDTEXTFONT] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCGRIDAXIS] = (d: RawLineData) => { new IFC4_3.IfcGridAxis(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new Reference<IFC4_3.IfcCurve>(d.arguments[1].value), new IFC4_3.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCGRIDAXIS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGridAxis(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCGRIDAXIS] = (i:IFC4_3.IfcGridAxis):unknown[] => { return [i.AxisTag, i.AxisCurve, i.SameSense]; }
InversePropertyDef['IFC4.3'][IFCGRIDAXIS] = [['PartOfW',IFCGRID,9,true],['PartOfV',IFCGRID,8,true],['PartOfU',IFCGRID,7,true],['HasIntersections',IFCVIRTUALGRIDINTERSECTION,0,true],];
FromRawLineData['IFC4_3'][IFCIRREGULARTIMESERIESVALUE] = (d: RawLineData) => { new IFC4_3.IfcIrregularTimeSeriesValue(d.ID, new IFC4_3.IfcDateTime(d.arguments[0].value), d.arguments[1].map((p:any) => TypeInitialiser('IFC4_3',p))); }
Constructors['IFC4_3'][IFCIRREGULARTIMESERIESVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIrregularTimeSeriesValue(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCIRREGULARTIMESERIESVALUE] = (i:IFC4_3.IfcIrregularTimeSeriesValue):unknown[] => { return [i.TimeStamp, i.ListValues.map((p:any) => Labelise(p))]; }
FromRawLineData['IFC4_3'][IFCLIBRARYINFORMATION] = (d: RawLineData) => { new IFC4_3.IfcLibraryInformation(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcDateTime(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcURIReference(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcText(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCLIBRARYINFORMATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLibraryInformation(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCLIBRARYINFORMATION] = (i:IFC4_3.IfcLibraryInformation):unknown[] => { return [i.Name, i.Version, i.Publisher, i.VersionDate, i.Location, i.Description]; }
InversePropertyDef['IFC4.3'][IFCLIBRARYINFORMATION] = [['LibraryInfoForObjects',IFCRELASSOCIATESLIBRARY,5,true],['HasLibraryReferences',IFCLIBRARYREFERENCE,5,true],];
FromRawLineData['IFC4_3'][IFCLIBRARYREFERENCE] = (d: RawLineData) => { new IFC4_3.IfcLibraryReference(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLanguageId(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcLibraryInformation>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCLIBRARYREFERENCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLibraryReference(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCLIBRARYREFERENCE] = (i:IFC4_3.IfcLibraryReference):unknown[] => { return [i.Location, i.Identification, i.Name, i.Description, i.Language, i.ReferencedLibrary]; }
InversePropertyDef['IFC4.3'][IFCLIBRARYREFERENCE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],['LibraryRefForObjects',IFCRELASSOCIATESLIBRARY,5,true],];
FromRawLineData['IFC4_3'][IFCLIGHTDISTRIBUTIONDATA] = (d: RawLineData) => { new IFC4_3.IfcLightDistributionData(d.ID, new IFC4_3.IfcPlaneAngleMeasure(d.arguments[0].value), d.arguments[1].map((p:any) => new IFC4_3.IfcPlaneAngleMeasure(p.value)), d.arguments[2].map((p:any) => new IFC4_3.IfcLuminousIntensityDistributionMeasure(p.value))); }
Constructors['IFC4_3'][IFCLIGHTDISTRIBUTIONDATA] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightDistributionData(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCLIGHTDISTRIBUTIONDATA] = (i:IFC4_3.IfcLightDistributionData):unknown[] => { return [i.MainPlaneAngle, i.SecondaryPlaneAngle, i.LuminousIntensity]; }
FromRawLineData['IFC4_3'][IFCLIGHTINTENSITYDISTRIBUTION] = (d: RawLineData) => { new IFC4_3.IfcLightIntensityDistribution(d.ID, d.arguments[0], d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcLightDistributionData>(p.value))); }
Constructors['IFC4_3'][IFCLIGHTINTENSITYDISTRIBUTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightIntensityDistribution(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCLIGHTINTENSITYDISTRIBUTION] = (i:IFC4_3.IfcLightIntensityDistribution):unknown[] => { return [i.LightDistributionCurve, i.DistributionData]; }
FromRawLineData['IFC4_3'][IFCMAPCONVERSION] = (d: RawLineData) => { new IFC4_3.IfcMapConversion(d.ID, new Reference(d.arguments[0].value), new Reference<IFC4_3.IfcCoordinateReferenceSystem>(d.arguments[1].value), new IFC4_3.IfcLengthMeasure(d.arguments[2].value), new IFC4_3.IfcLengthMeasure(d.arguments[3].value), new IFC4_3.IfcLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcReal(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcReal(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcReal(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcReal(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcReal(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCMAPCONVERSION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMapConversion(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCMAPCONVERSION] = (i:IFC4_3.IfcMapConversion):unknown[] => { return [i.SourceCRS, i.TargetCRS, i.Eastings, i.Northings, i.OrthogonalHeight, i.XAxisAbscissa, i.XAxisOrdinate, i.Scale, i.ScaleY, i.ScaleZ]; }
FromRawLineData['IFC4_3'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcMaterialClassificationRelationship(d.ID, d.arguments[0].map((p:any) => new Reference(p.value)), new Reference<IFC4_3.IfcMaterial>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialClassificationRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (i:IFC4_3.IfcMaterialClassificationRelationship):unknown[] => { return [i.MaterialClassifications, i.ClassifiedMaterial]; }
FromRawLineData['IFC4_3'][IFCMATERIALDEFINITION] = (d: RawLineData) => { new IFC4_3.IfcMaterialDefinition(d.ID, ); }
Constructors['IFC4_3'][IFCMATERIALDEFINITION] = (expressID:number, _:any) => { return new IFC4_3.IfcMaterialDefinition(expressID, ); }
ToRawLineData['IFC4_3'][IFCMATERIALDEFINITION] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCMATERIALDEFINITION] = [IFCMATERIALCONSTITUENTSET,IFCMATERIALCONSTITUENT,IFCMATERIAL,IFCMATERIALPROFILESET,IFCMATERIALPROFILEWITHOFFSETS,IFCMATERIALPROFILE,IFCMATERIALLAYERSET,IFCMATERIALLAYERWITHOFFSETS,IFCMATERIALLAYER];
InversePropertyDef['IFC4.3'][IFCMATERIALDEFINITION] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCMATERIALLAYER] = (d: RawLineData) => { new IFC4_3.IfcMaterialLayer(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcMaterial>(d.arguments[0].value), new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLogical(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcInteger(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCMATERIALLAYER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialLayer(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCMATERIALLAYER] = (i:IFC4_3.IfcMaterialLayer):unknown[] => { return [i.Material, i.LayerThickness, i.IsVentilated, i.Name, i.Description, i.Category, i.Priority]; }
InheritanceDef['IFC4.3'][IFCMATERIALLAYER] = [IFCMATERIALLAYERWITHOFFSETS];
InversePropertyDef['IFC4.3'][IFCMATERIALLAYER] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialLayerSet',IFCMATERIALLAYERSET,0,false],];
FromRawLineData['IFC4_3'][IFCMATERIALLAYERSET] = (d: RawLineData) => { new IFC4_3.IfcMaterialLayerSet(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcMaterialLayer>(p.value)), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcText(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCMATERIALLAYERSET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialLayerSet(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCMATERIALLAYERSET] = (i:IFC4_3.IfcMaterialLayerSet):unknown[] => { return [i.MaterialLayers, i.LayerSetName, i.Description]; }
InversePropertyDef['IFC4.3'][IFCMATERIALLAYERSET] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCMATERIALLAYERWITHOFFSETS] = (d: RawLineData) => { new IFC4_3.IfcMaterialLayerWithOffsets(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcMaterial>(d.arguments[0].value), new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLogical(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcInteger(d.arguments[6].value), d.arguments[7], new IFC4_3.IfcLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCMATERIALLAYERWITHOFFSETS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialLayerWithOffsets(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCMATERIALLAYERWITHOFFSETS] = (i:IFC4_3.IfcMaterialLayerWithOffsets):unknown[] => { return [i.Material, i.LayerThickness, i.IsVentilated, i.Name, i.Description, i.Category, i.Priority, i.OffsetDirection, i.OffsetValues]; }
InversePropertyDef['IFC4.3'][IFCMATERIALLAYERWITHOFFSETS] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialLayerSet',IFCMATERIALLAYERSET,0,false],];
FromRawLineData['IFC4_3'][IFCMATERIALLIST] = (d: RawLineData) => { new IFC4_3.IfcMaterialList(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcMaterial>(p.value))); }
Constructors['IFC4_3'][IFCMATERIALLIST] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialList(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCMATERIALLIST] = (i:IFC4_3.IfcMaterialList):unknown[] => { return [i.Materials]; }
FromRawLineData['IFC4_3'][IFCMATERIALPROFILE] = (d: RawLineData) => { new IFC4_3.IfcMaterialProfile(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcMaterial>(d.arguments[2].value), new Reference<IFC4_3.IfcProfileDef>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcInteger(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCMATERIALPROFILE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialProfile(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCMATERIALPROFILE] = (i:IFC4_3.IfcMaterialProfile):unknown[] => { return [i.Name, i.Description, i.Material, i.Profile, i.Priority, i.Category]; }
InheritanceDef['IFC4.3'][IFCMATERIALPROFILE] = [IFCMATERIALPROFILEWITHOFFSETS];
InversePropertyDef['IFC4.3'][IFCMATERIALPROFILE] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialProfileSet',IFCMATERIALPROFILESET,2,false],];
FromRawLineData['IFC4_3'][IFCMATERIALPROFILESET] = (d: RawLineData) => { new IFC4_3.IfcMaterialProfileSet(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcMaterialProfile>(p.value)), !d.arguments[3] ? null :new Reference<IFC4_3.IfcCompositeProfileDef>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCMATERIALPROFILESET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialProfileSet(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCMATERIALPROFILESET] = (i:IFC4_3.IfcMaterialProfileSet):unknown[] => { return [i.Name, i.Description, i.MaterialProfiles, i.CompositeProfile]; }
InversePropertyDef['IFC4.3'][IFCMATERIALPROFILESET] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCMATERIALPROFILEWITHOFFSETS] = (d: RawLineData) => { new IFC4_3.IfcMaterialProfileWithOffsets(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcMaterial>(d.arguments[2].value), new Reference<IFC4_3.IfcProfileDef>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcInteger(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), new IFC4_3.IfcLengthMeasure(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCMATERIALPROFILEWITHOFFSETS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialProfileWithOffsets(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCMATERIALPROFILEWITHOFFSETS] = (i:IFC4_3.IfcMaterialProfileWithOffsets):unknown[] => { return [i.Name, i.Description, i.Material, i.Profile, i.Priority, i.Category, i.OffsetValues]; }
InversePropertyDef['IFC4.3'][IFCMATERIALPROFILEWITHOFFSETS] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialProfileSet',IFCMATERIALPROFILESET,2,false],];
FromRawLineData['IFC4_3'][IFCMATERIALUSAGEDEFINITION] = (d: RawLineData) => { new IFC4_3.IfcMaterialUsageDefinition(d.ID, ); }
Constructors['IFC4_3'][IFCMATERIALUSAGEDEFINITION] = (expressID:number, _:any) => { return new IFC4_3.IfcMaterialUsageDefinition(expressID, ); }
ToRawLineData['IFC4_3'][IFCMATERIALUSAGEDEFINITION] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCMATERIALUSAGEDEFINITION] = [IFCMATERIALPROFILESETUSAGETAPERING,IFCMATERIALPROFILESETUSAGE,IFCMATERIALLAYERSETUSAGE];
InversePropertyDef['IFC4.3'][IFCMATERIALUSAGEDEFINITION] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],];
FromRawLineData['IFC4_3'][IFCMEASUREWITHUNIT] = (d: RawLineData) => { new IFC4_3.IfcMeasureWithUnit(d.ID, TypeInitialiser('IFC4_3',d.arguments[0]), new Reference(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCMEASUREWITHUNIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMeasureWithUnit(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCMEASUREWITHUNIT] = (i:IFC4_3.IfcMeasureWithUnit):unknown[] => { return [Labelise(i.ValueComponent), i.UnitComponent]; }
FromRawLineData['IFC4_3'][IFCMETRIC] = (d: RawLineData) => { new IFC4_3.IfcMetric(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC4_3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new Reference(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC4_3.IfcReference>(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCMETRIC] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMetric(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCMETRIC] = (i:IFC4_3.IfcMetric):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade, i.Benchmark, i.ValueSource, i.DataValue, i.ReferencePath]; }
InversePropertyDef['IFC4.3'][IFCMETRIC] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PropertiesForConstraint',IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCMONETARYUNIT] = (d: RawLineData) => { new IFC4_3.IfcMonetaryUnit(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCMONETARYUNIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMonetaryUnit(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCMONETARYUNIT] = (i:IFC4_3.IfcMonetaryUnit):unknown[] => { return [i.Currency]; }
FromRawLineData['IFC4_3'][IFCNAMEDUNIT] = (d: RawLineData) => { new IFC4_3.IfcNamedUnit(d.ID, new Reference<IFC4_3.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1]); }
Constructors['IFC4_3'][IFCNAMEDUNIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcNamedUnit(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCNAMEDUNIT] = (i:IFC4_3.IfcNamedUnit):unknown[] => { return [i.Dimensions, i.UnitType]; }
InheritanceDef['IFC4.3'][IFCNAMEDUNIT] = [IFCCONVERSIONBASEDUNITWITHOFFSET,IFCCONVERSIONBASEDUNIT,IFCCONTEXTDEPENDENTUNIT,IFCSIUNIT];
FromRawLineData['IFC4_3'][IFCOBJECTPLACEMENT] = (d: RawLineData) => { new IFC4_3.IfcObjectPlacement(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCOBJECTPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcObjectPlacement(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCOBJECTPLACEMENT] = (i:IFC4_3.IfcObjectPlacement):unknown[] => { return [i.PlacementRelTo]; }
InheritanceDef['IFC4.3'][IFCOBJECTPLACEMENT] = [IFCLOCALPLACEMENT,IFCLINEARPLACEMENT,IFCGRIDPLACEMENT];
InversePropertyDef['IFC4.3'][IFCOBJECTPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCOBJECTPLACEMENT,0,true],];
FromRawLineData['IFC4_3'][IFCOBJECTIVE] = (d: RawLineData) => { new IFC4_3.IfcObjective(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC4_3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcConstraint>(p.value)), d.arguments[8], d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcLabel(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCOBJECTIVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcObjective(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCOBJECTIVE] = (i:IFC4_3.IfcObjective):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade, i.BenchmarkValues, i.LogicalAggregator, i.ObjectiveQualifier, i.UserDefinedQualifier]; }
InversePropertyDef['IFC4.3'][IFCOBJECTIVE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PropertiesForConstraint',IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCORGANIZATION] = (d: RawLineData) => { new IFC4_3.IfcOrganization(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcIdentifier(d.arguments[0].value), new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcText(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcActorRole>(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcAddress>(p.value))); }
Constructors['IFC4_3'][IFCORGANIZATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOrganization(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCORGANIZATION] = (i:IFC4_3.IfcOrganization):unknown[] => { return [i.Identification, i.Name, i.Description, i.Roles, i.Addresses]; }
InversePropertyDef['IFC4.3'][IFCORGANIZATION] = [['IsRelatedBy',IFCORGANIZATIONRELATIONSHIP,3,true],['Relates',IFCORGANIZATIONRELATIONSHIP,2,true],['Engages',IFCPERSONANDORGANIZATION,1,true],];
FromRawLineData['IFC4_3'][IFCOWNERHISTORY] = (d: RawLineData) => { new IFC4_3.IfcOwnerHistory(d.ID, new Reference<IFC4_3.IfcPersonAndOrganization>(d.arguments[0].value), new Reference<IFC4_3.IfcApplication>(d.arguments[1].value), d.arguments[2], d.arguments[3], !d.arguments[4] ? null :new IFC4_3.IfcTimeStamp(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcPersonAndOrganization>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcApplication>(d.arguments[6].value), new IFC4_3.IfcTimeStamp(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCOWNERHISTORY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOwnerHistory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCOWNERHISTORY] = (i:IFC4_3.IfcOwnerHistory):unknown[] => { return [i.OwningUser, i.OwningApplication, i.State, i.ChangeAction, i.LastModifiedDate, i.LastModifyingUser, i.LastModifyingApplication, i.CreationDate]; }
FromRawLineData['IFC4_3'][IFCPERSON] = (d: RawLineData) => { new IFC4_3.IfcPerson(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4_3.IfcLabel(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcLabel(p.value)), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new IFC4_3.IfcLabel(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcActorRole>(p.value)), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcAddress>(p.value))); }
Constructors['IFC4_3'][IFCPERSON] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPerson(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCPERSON] = (i:IFC4_3.IfcPerson):unknown[] => { return [i.Identification, i.FamilyName, i.GivenName, i.MiddleNames, i.PrefixTitles, i.SuffixTitles, i.Roles, i.Addresses]; }
InversePropertyDef['IFC4.3'][IFCPERSON] = [['EngagedIn',IFCPERSONANDORGANIZATION,0,true],];
FromRawLineData['IFC4_3'][IFCPERSONANDORGANIZATION] = (d: RawLineData) => { new IFC4_3.IfcPersonAndOrganization(d.ID, new Reference<IFC4_3.IfcPerson>(d.arguments[0].value), new Reference<IFC4_3.IfcOrganization>(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcActorRole>(p.value))); }
Constructors['IFC4_3'][IFCPERSONANDORGANIZATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPersonAndOrganization(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCPERSONANDORGANIZATION] = (i:IFC4_3.IfcPersonAndOrganization):unknown[] => { return [i.ThePerson, i.TheOrganization, i.Roles]; }
FromRawLineData['IFC4_3'][IFCPHYSICALQUANTITY] = (d: RawLineData) => { new IFC4_3.IfcPhysicalQuantity(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCPHYSICALQUANTITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPhysicalQuantity(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCPHYSICALQUANTITY] = (i:IFC4_3.IfcPhysicalQuantity):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCPHYSICALQUANTITY] = [IFCPHYSICALCOMPLEXQUANTITY,IFCQUANTITYWEIGHT,IFCQUANTITYVOLUME,IFCQUANTITYTIME,IFCQUANTITYNUMBER,IFCQUANTITYLENGTH,IFCQUANTITYCOUNT,IFCQUANTITYAREA,IFCPHYSICALSIMPLEQUANTITY];
InversePropertyDef['IFC4.3'][IFCPHYSICALQUANTITY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCPHYSICALSIMPLEQUANTITY] = (d: RawLineData) => { new IFC4_3.IfcPhysicalSimpleQuantity(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCPHYSICALSIMPLEQUANTITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPhysicalSimpleQuantity(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCPHYSICALSIMPLEQUANTITY] = (i:IFC4_3.IfcPhysicalSimpleQuantity):unknown[] => { return [i.Name, i.Description, i.Unit]; }
InheritanceDef['IFC4.3'][IFCPHYSICALSIMPLEQUANTITY] = [IFCQUANTITYWEIGHT,IFCQUANTITYVOLUME,IFCQUANTITYTIME,IFCQUANTITYNUMBER,IFCQUANTITYLENGTH,IFCQUANTITYCOUNT,IFCQUANTITYAREA];
InversePropertyDef['IFC4.3'][IFCPHYSICALSIMPLEQUANTITY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCPOSTALADDRESS] = (d: RawLineData) => { new IFC4_3.IfcPostalAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcLabel(p.value)), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcLabel(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCPOSTALADDRESS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPostalAddress(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPOSTALADDRESS] = (i:IFC4_3.IfcPostalAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose, i.InternalLocation, i.AddressLines, i.PostalBox, i.Town, i.Region, i.PostalCode, i.Country]; }
InversePropertyDef['IFC4.3'][IFCPOSTALADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC4_3'][IFCPRESENTATIONITEM] = (d: RawLineData) => { new IFC4_3.IfcPresentationItem(d.ID, ); }
Constructors['IFC4_3'][IFCPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC4_3.IfcPresentationItem(expressID, ); }
ToRawLineData['IFC4_3'][IFCPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCPRESENTATIONITEM] = [IFCDRAUGHTINGPREDEFINEDCURVEFONT,IFCPREDEFINEDCURVEFONT,IFCDRAUGHTINGPREDEFINEDCOLOUR,IFCPREDEFINEDCOLOUR,IFCTEXTSTYLEFONTMODEL,IFCPREDEFINEDTEXTFONT,IFCPREDEFINEDITEM,IFCINDEXEDCOLOURMAP,IFCCURVESTYLEFONTPATTERN,IFCCURVESTYLEFONTANDSCALING,IFCCURVESTYLEFONT,IFCCOLOURRGB,IFCCOLOURSPECIFICATION,IFCCOLOURRGBLIST,IFCTEXTUREVERTEXLIST,IFCTEXTUREVERTEX,IFCINDEXEDPOLYGONALTEXTUREMAP,IFCINDEXEDTRIANGLETEXTUREMAP,IFCINDEXEDTEXTUREMAP,IFCTEXTUREMAP,IFCTEXTURECOORDINATEGENERATOR,IFCTEXTURECOORDINATE,IFCTEXTSTYLETEXTMODEL,IFCTEXTSTYLEFORDEFINEDFONT,IFCPIXELTEXTURE,IFCIMAGETEXTURE,IFCBLOBTEXTURE,IFCSURFACETEXTURE,IFCSURFACESTYLEWITHTEXTURES,IFCSURFACESTYLERENDERING,IFCSURFACESTYLESHADING,IFCSURFACESTYLEREFRACTION,IFCSURFACESTYLELIGHTING];
FromRawLineData['IFC4_3'][IFCPRESENTATIONLAYERASSIGNMENT] = (d: RawLineData) => { new IFC4_3.IfcPresentationLayerAssignment(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference(p.value)), !d.arguments[3] ? null :new IFC4_3.IfcIdentifier(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPRESENTATIONLAYERASSIGNMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPresentationLayerAssignment(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPRESENTATIONLAYERASSIGNMENT] = (i:IFC4_3.IfcPresentationLayerAssignment):unknown[] => { return [i.Name, i.Description, i.AssignedItems, i.Identifier]; }
InheritanceDef['IFC4.3'][IFCPRESENTATIONLAYERASSIGNMENT] = [IFCPRESENTATIONLAYERWITHSTYLE];
FromRawLineData['IFC4_3'][IFCPRESENTATIONLAYERWITHSTYLE] = (d: RawLineData) => { new IFC4_3.IfcPresentationLayerWithStyle(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference(p.value)), !d.arguments[3] ? null :new IFC4_3.IfcIdentifier(d.arguments[3].value), new IFC4_3.IfcLogical(d.arguments[4].value), new IFC4_3.IfcLogical(d.arguments[5].value), new IFC4_3.IfcLogical(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcPresentationStyle>(p.value))); }
Constructors['IFC4_3'][IFCPRESENTATIONLAYERWITHSTYLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPresentationLayerWithStyle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCPRESENTATIONLAYERWITHSTYLE] = (i:IFC4_3.IfcPresentationLayerWithStyle):unknown[] => { return [i.Name, i.Description, i.AssignedItems, i.Identifier, i.LayerOn, i.LayerFrozen, i.LayerBlocked, i.LayerStyles]; }
FromRawLineData['IFC4_3'][IFCPRESENTATIONSTYLE] = (d: RawLineData) => { new IFC4_3.IfcPresentationStyle(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCPRESENTATIONSTYLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPresentationStyle(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPRESENTATIONSTYLE] = (i:IFC4_3.IfcPresentationStyle):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCPRESENTATIONSTYLE] = [IFCFILLAREASTYLE,IFCCURVESTYLE,IFCTEXTSTYLE,IFCSURFACESTYLE];
FromRawLineData['IFC4_3'][IFCPRODUCTREPRESENTATION] = (d: RawLineData) => { new IFC4_3.IfcProductRepresentation(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcRepresentation>(p.value))); }
Constructors['IFC4_3'][IFCPRODUCTREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProductRepresentation(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCPRODUCTREPRESENTATION] = (i:IFC4_3.IfcProductRepresentation):unknown[] => { return [i.Name, i.Description, i.Representations]; }
InheritanceDef['IFC4.3'][IFCPRODUCTREPRESENTATION] = [IFCPRODUCTDEFINITIONSHAPE,IFCMATERIALDEFINITIONREPRESENTATION];
FromRawLineData['IFC4_3'][IFCPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProfileDef(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCPROFILEDEF] = (i:IFC4_3.IfcProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName]; }
InheritanceDef['IFC4.3'][IFCPROFILEDEF] = [IFCLSHAPEPROFILEDEF,IFCISHAPEPROFILEDEF,IFCELLIPSEPROFILEDEF,IFCCIRCLEHOLLOWPROFILEDEF,IFCCIRCLEPROFILEDEF,IFCCSHAPEPROFILEDEF,IFCASYMMETRICISHAPEPROFILEDEF,IFCZSHAPEPROFILEDEF,IFCUSHAPEPROFILEDEF,IFCTRAPEZIUMPROFILEDEF,IFCTSHAPEPROFILEDEF,IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF,IFCRECTANGLEPROFILEDEF,IFCPARAMETERIZEDPROFILEDEF,IFCOPENCROSSPROFILEDEF,IFCMIRROREDPROFILEDEF,IFCDERIVEDPROFILEDEF,IFCCOMPOSITEPROFILEDEF,IFCCENTERLINEPROFILEDEF,IFCARBITRARYOPENPROFILEDEF,IFCARBITRARYPROFILEDEFWITHVOIDS,IFCARBITRARYCLOSEDPROFILEDEF];
InversePropertyDef['IFC4.3'][IFCPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCPROJECTEDCRS] = (d: RawLineData) => { new IFC4_3.IfcProjectedCRS(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcIdentifier(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCPROJECTEDCRS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProjectedCRS(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCPROJECTEDCRS] = (i:IFC4_3.IfcProjectedCRS):unknown[] => { return [i.Name, i.Description, i.GeodeticDatum, i.VerticalDatum, i.MapProjection, i.MapZone, i.MapUnit]; }
InversePropertyDef['IFC4.3'][IFCPROJECTEDCRS] = [['HasCoordinateOperation',IFCCOORDINATEOPERATION,0,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYABSTRACTION] = (d: RawLineData) => { new IFC4_3.IfcPropertyAbstraction(d.ID, ); }
Constructors['IFC4_3'][IFCPROPERTYABSTRACTION] = (expressID:number, _:any) => { return new IFC4_3.IfcPropertyAbstraction(expressID, ); }
ToRawLineData['IFC4_3'][IFCPROPERTYABSTRACTION] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCPROPERTYABSTRACTION] = [IFCCOMPLEXPROPERTY,IFCPROPERTYTABLEVALUE,IFCPROPERTYSINGLEVALUE,IFCPROPERTYREFERENCEVALUE,IFCPROPERTYLISTVALUE,IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYBOUNDEDVALUE,IFCSIMPLEPROPERTY,IFCPROPERTY,IFCSECTIONREINFORCEMENTPROPERTIES,IFCSECTIONPROPERTIES,IFCREINFORCEMENTBARPROPERTIES,IFCPREDEFINEDPROPERTIES,IFCPROFILEPROPERTIES,IFCMATERIALPROPERTIES,IFCEXTENDEDPROPERTIES,IFCPROPERTYENUMERATION];
InversePropertyDef['IFC4.3'][IFCPROPERTYABSTRACTION] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYENUMERATION] = (d: RawLineData) => { new IFC4_3.IfcPropertyEnumeration(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => TypeInitialiser('IFC4_3',p)), !d.arguments[2] ? null :new Reference(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCPROPERTYENUMERATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyEnumeration(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCPROPERTYENUMERATION] = (i:IFC4_3.IfcPropertyEnumeration):unknown[] => { return [i.Name, i.EnumerationValues.map((p:any) => Labelise(p)), i.Unit]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYENUMERATION] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCQUANTITYAREA] = (d: RawLineData) => { new IFC4_3.IfcQuantityArea(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[2].value), new IFC4_3.IfcAreaMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCQUANTITYAREA] = (expressID:number, args: any[]) => { return new IFC4_3.IfcQuantityArea(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCQUANTITYAREA] = (i:IFC4_3.IfcQuantityArea):unknown[] => { return [i.Name, i.Description, i.Unit, i.AreaValue, i.Formula]; }
InversePropertyDef['IFC4.3'][IFCQUANTITYAREA] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCQUANTITYCOUNT] = (d: RawLineData) => { new IFC4_3.IfcQuantityCount(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[2].value), new IFC4_3.IfcCountMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCQUANTITYCOUNT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcQuantityCount(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCQUANTITYCOUNT] = (i:IFC4_3.IfcQuantityCount):unknown[] => { return [i.Name, i.Description, i.Unit, i.CountValue, i.Formula]; }
InversePropertyDef['IFC4.3'][IFCQUANTITYCOUNT] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCQUANTITYLENGTH] = (d: RawLineData) => { new IFC4_3.IfcQuantityLength(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[2].value), new IFC4_3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCQUANTITYLENGTH] = (expressID:number, args: any[]) => { return new IFC4_3.IfcQuantityLength(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCQUANTITYLENGTH] = (i:IFC4_3.IfcQuantityLength):unknown[] => { return [i.Name, i.Description, i.Unit, i.LengthValue, i.Formula]; }
InversePropertyDef['IFC4.3'][IFCQUANTITYLENGTH] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCQUANTITYNUMBER] = (d: RawLineData) => { new IFC4_3.IfcQuantityNumber(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[2].value), new IFC4_3.IfcNumericMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCQUANTITYNUMBER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcQuantityNumber(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCQUANTITYNUMBER] = (i:IFC4_3.IfcQuantityNumber):unknown[] => { return [i.Name, i.Description, i.Unit, i.NumberValue, i.Formula]; }
InversePropertyDef['IFC4.3'][IFCQUANTITYNUMBER] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCQUANTITYTIME] = (d: RawLineData) => { new IFC4_3.IfcQuantityTime(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[2].value), new IFC4_3.IfcTimeMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCQUANTITYTIME] = (expressID:number, args: any[]) => { return new IFC4_3.IfcQuantityTime(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCQUANTITYTIME] = (i:IFC4_3.IfcQuantityTime):unknown[] => { return [i.Name, i.Description, i.Unit, i.TimeValue, i.Formula]; }
InversePropertyDef['IFC4.3'][IFCQUANTITYTIME] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCQUANTITYVOLUME] = (d: RawLineData) => { new IFC4_3.IfcQuantityVolume(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[2].value), new IFC4_3.IfcVolumeMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCQUANTITYVOLUME] = (expressID:number, args: any[]) => { return new IFC4_3.IfcQuantityVolume(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCQUANTITYVOLUME] = (i:IFC4_3.IfcQuantityVolume):unknown[] => { return [i.Name, i.Description, i.Unit, i.VolumeValue, i.Formula]; }
InversePropertyDef['IFC4.3'][IFCQUANTITYVOLUME] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCQUANTITYWEIGHT] = (d: RawLineData) => { new IFC4_3.IfcQuantityWeight(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcNamedUnit>(d.arguments[2].value), new IFC4_3.IfcMassMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCQUANTITYWEIGHT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcQuantityWeight(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCQUANTITYWEIGHT] = (i:IFC4_3.IfcQuantityWeight):unknown[] => { return [i.Name, i.Description, i.Unit, i.WeightValue, i.Formula]; }
InversePropertyDef['IFC4.3'][IFCQUANTITYWEIGHT] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCRECURRENCEPATTERN] = (d: RawLineData) => { new IFC4_3.IfcRecurrencePattern(d.ID, d.arguments[0], !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC4_3.IfcDayInMonthNumber(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4_3.IfcDayInWeekNumber(p.value)), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4_3.IfcMonthInYearNumber(p.value)), !d.arguments[4] ? null :new IFC4_3.IfcInteger(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcInteger(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcInteger(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcTimePeriod>(p.value))); }
Constructors['IFC4_3'][IFCRECURRENCEPATTERN] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRecurrencePattern(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCRECURRENCEPATTERN] = (i:IFC4_3.IfcRecurrencePattern):unknown[] => { return [i.RecurrenceType, i.DayComponent, i.WeekdayComponent, i.MonthComponent, i.Position, i.Interval, i.Occurrences, i.TimePeriods]; }
FromRawLineData['IFC4_3'][IFCREFERENCE] = (d: RawLineData) => { new IFC4_3.IfcReference(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4_3.IfcInteger(p.value)), !d.arguments[4] ? null :new Reference<IFC4_3.IfcReference>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCREFERENCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReference(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCREFERENCE] = (i:IFC4_3.IfcReference):unknown[] => { return [i.TypeIdentifier, i.AttributeIdentifier, i.InstanceName, i.ListPositions, i.InnerReference]; }
FromRawLineData['IFC4_3'][IFCREPRESENTATION] = (d: RawLineData) => { new IFC4_3.IfcRepresentation(d.ID, new Reference<IFC4_3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcRepresentationItem>(p.value))); }
Constructors['IFC4_3'][IFCREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCREPRESENTATION] = (i:IFC4_3.IfcRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC4.3'][IFCREPRESENTATION] = [IFCSTYLEDREPRESENTATION,IFCSTYLEMODEL,IFCTOPOLOGYREPRESENTATION,IFCSHAPEREPRESENTATION,IFCSHAPEMODEL];
InversePropertyDef['IFC4.3'][IFCREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC4_3'][IFCREPRESENTATIONCONTEXT] = (d: RawLineData) => { new IFC4_3.IfcRepresentationContext(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCREPRESENTATIONCONTEXT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRepresentationContext(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCREPRESENTATIONCONTEXT] = (i:IFC4_3.IfcRepresentationContext):unknown[] => { return [i.ContextIdentifier, i.ContextType]; }
InheritanceDef['IFC4.3'][IFCREPRESENTATIONCONTEXT] = [IFCGEOMETRICREPRESENTATIONSUBCONTEXT,IFCGEOMETRICREPRESENTATIONCONTEXT];
InversePropertyDef['IFC4.3'][IFCREPRESENTATIONCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],];
FromRawLineData['IFC4_3'][IFCREPRESENTATIONITEM] = (d: RawLineData) => { new IFC4_3.IfcRepresentationItem(d.ID, ); }
Constructors['IFC4_3'][IFCREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC4_3.IfcRepresentationItem(expressID, ); }
ToRawLineData['IFC4_3'][IFCREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCREPRESENTATIONITEM] = [IFCMAPPEDITEM,IFCFILLAREASTYLETILES,IFCFILLAREASTYLEHATCHING,IFCFACEBASEDSURFACEMODEL,IFCDIRECTION,IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFCINDEXEDPOLYCURVE,IFCSEGMENTEDREFERENCECURVE,IFCGRADIENTCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCSEAMCURVE,IFCINTERSECTIONCURVE,IFCSURFACECURVE,IFCSINESPIRAL,IFCSEVENTHORDERPOLYNOMIALSPIRAL,IFCSECONDORDERPOLYNOMIALSPIRAL,IFCCOSINESPIRAL,IFCCLOTHOID,IFCTHIRDORDERPOLYNOMIALSPIRAL,IFCSPIRAL,IFCPOLYNOMIALCURVE,IFCPCURVE,IFCOFFSETCURVEBYDISTANCES,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCOFFSETCURVE,IFCLINE,IFCCURVE,IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID,IFCCSGPRIMITIVE3D,IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D,IFCCARTESIANTRANSFORMATIONOPERATOR,IFCCARTESIANPOINTLIST3D,IFCCARTESIANPOINTLIST2D,IFCCARTESIANPOINTLIST,IFCBOUNDINGBOX,IFCBOOLEANCLIPPINGRESULT,IFCBOOLEANRESULT,IFCANNOTATIONFILLAREA,IFCVECTOR,IFCTEXTLITERALWITHEXTENT,IFCTEXTLITERAL,IFCPOLYGONALFACESET,IFCTRIANGULATEDIRREGULARNETWORK,IFCTRIANGULATEDFACESET,IFCTESSELLATEDFACESET,IFCINDEXEDPOLYGONALFACEWITHVOIDS,IFCINDEXEDPOLYGONALFACE,IFCTESSELLATEDITEM,IFCSECTIONEDSURFACE,IFCCYLINDRICALSURFACE,IFCTOROIDALSURFACE,IFCSPHERICALSURFACE,IFCPLANE,IFCELEMENTARYSURFACE,IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE,IFCSURFACE,IFCSECTIONEDSOLIDHORIZONTAL,IFCSECTIONEDSOLID,IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLIDPOLYGONAL,IFCSWEPTDISKSOLID,IFCREVOLVEDAREASOLIDTAPERED,IFCREVOLVEDAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED,IFCEXTRUDEDAREASOLID,IFCSURFACECURVESWEPTAREASOLID,IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID,IFCDIRECTRIXCURVESWEPTAREASOLID,IFCSWEPTAREASOLID,IFCSOLIDMODEL,IFCSHELLBASEDSURFACEMODEL,IFCCURVESEGMENT,IFCREPARAMETRISEDCOMPOSITECURVESEGMENT,IFCCOMPOSITECURVESEGMENT,IFCSEGMENT,IFCSECTIONEDSPINE,IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE,IFCPOINTBYDISTANCEEXPRESSION,IFCPOINT,IFCPLANARBOX,IFCPLANAREXTENT,IFCAXIS2PLACEMENTLINEAR,IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT,IFCPLACEMENT,IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT,IFCLIGHTSOURCE,IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE,IFCHALFSPACESOLID,IFCGEOMETRICCURVESET,IFCGEOMETRICSET,IFCGEOMETRICREPRESENTATIONITEM,IFCPATH,IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP,IFCLOOP,IFCFACEOUTERBOUND,IFCFACEBOUND,IFCADVANCEDFACE,IFCFACESURFACE,IFCFACE,IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE,IFCEDGE,IFCCLOSEDSHELL,IFCOPENSHELL,IFCCONNECTEDFACESET,IFCVERTEXPOINT,IFCVERTEX,IFCTOPOLOGICALREPRESENTATIONITEM,IFCSTYLEDITEM];
InversePropertyDef['IFC4.3'][IFCREPRESENTATIONITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCREPRESENTATIONMAP] = (d: RawLineData) => { new IFC4_3.IfcRepresentationMap(d.ID, new Reference(d.arguments[0].value), new Reference<IFC4_3.IfcRepresentation>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCREPRESENTATIONMAP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRepresentationMap(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCREPRESENTATIONMAP] = (i:IFC4_3.IfcRepresentationMap):unknown[] => { return [i.MappingOrigin, i.MappedRepresentation]; }
InversePropertyDef['IFC4.3'][IFCREPRESENTATIONMAP] = [['HasShapeAspects',IFCSHAPEASPECT,4,true],['MapUsage',IFCMAPPEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCRESOURCELEVELRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcResourceLevelRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCRESOURCELEVELRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcResourceLevelRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCRESOURCELEVELRELATIONSHIP] = (i:IFC4_3.IfcResourceLevelRelationship):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCRESOURCELEVELRELATIONSHIP] = [IFCRESOURCECONSTRAINTRELATIONSHIP,IFCRESOURCEAPPROVALRELATIONSHIP,IFCPROPERTYDEPENDENCYRELATIONSHIP,IFCORGANIZATIONRELATIONSHIP,IFCMATERIALRELATIONSHIP,IFCEXTERNALREFERENCERELATIONSHIP,IFCDOCUMENTINFORMATIONRELATIONSHIP,IFCCURRENCYRELATIONSHIP,IFCAPPROVALRELATIONSHIP];
FromRawLineData['IFC4_3'][IFCROOT] = (d: RawLineData) => { new IFC4_3.IfcRoot(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCROOT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRoot(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCROOT] = (i:IFC4_3.IfcRoot):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCROOT] = [IFCRELDEFINESBYTYPE,IFCRELDEFINESBYTEMPLATE,IFCRELDEFINESBYPROPERTIES,IFCRELDEFINESBYOBJECT,IFCRELDEFINES,IFCRELAGGREGATES,IFCRELADHERESTOELEMENT,IFCRELVOIDSELEMENT,IFCRELPROJECTSELEMENT,IFCRELNESTS,IFCRELDECOMPOSES,IFCRELDECLARES,IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELSPACEBOUNDARY1STLEVEL,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELPOSITIONS,IFCRELINTERFERESELEMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS,IFCRELCONNECTS,IFCRELASSOCIATESPROFILEDEF,IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL,IFCRELASSOCIATES,IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUPBYFACTOR,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTOCONTROL,IFCRELASSIGNSTOACTOR,IFCRELASSIGNS,IFCRELATIONSHIP,IFCCOMPLEXPROPERTYTEMPLATE,IFCSIMPLEPROPERTYTEMPLATE,IFCPROPERTYTEMPLATE,IFCPROPERTYSETTEMPLATE,IFCPROPERTYTEMPLATEDEFINITION,IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCPREDEFINEDPROPERTYSET,IFCELEMENTQUANTITY,IFCQUANTITYSET,IFCPROPERTYSETDEFINITION,IFCPROPERTYDEFINITION,IFCASSET,IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILTSYSTEM,IFCBUILDINGSYSTEM,IFCZONE,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCWORKCALENDAR,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCALIGNMENT,IFCLINEARPOSITIONINGELEMENT,IFCGRID,IFCREFERENT,IFCPOSITIONINGELEMENT,IFCDISTRIBUTIONPORT,IFCPORT,IFCALIGNMENTVERTICAL,IFCALIGNMENTSEGMENT,IFCALIGNMENTHORIZONTAL,IFCALIGNMENTCANT,IFCLINEARELEMENT,IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCELECTRICFLOWTREATMENTDEVICE,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSIGNAL,IFCSANITARYTERMINAL,IFCOUTLET,IFCMOBILETELECOMMUNICATIONSAPPLIANCE,IFCMEDICALDEVICE,IFCLIQUIDTERMINAL,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCONVEYORSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBUILDINGELEMENTPROXY,IFCBEARING,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCTRACKELEMENT,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCRAIL,IFCPLATE,IFCPAVEMENT,IFCNAVIGATIONELEMENT,IFCMOORINGDEVICE,IFCMEMBER,IFCKERB,IFCFOOTING,IFCREINFORCEDSOIL,IFCEARTHWORKSFILL,IFCEARTHWORKSELEMENT,IFCDOOR,IFCCAISSONFOUNDATION,IFCPILE,IFCDEEPFOUNDATION,IFCCURTAINWALL,IFCCOVERING,IFCCOURSE,IFCCOLUMN,IFCCHIMNEY,IFCBUILTELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCVEHICLE,IFCTRANSPORTATIONDEVICE,IFCGEOSLICE,IFCGEOMODEL,IFCBOREHOLE,IFCGEOTECHNICALASSEMBLY,IFCGEOTECHNICALSTRATUM,IFCGEOTECHNICALELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCEARTHWORKSCUT,IFCVOIDINGFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCVIBRATIONDAMPER,IFCSIGN,IFCREINFORCINGBAR,IFCTENDONCONDUIT,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCIMPACTPROTECTIONDEVICE,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBRIDGEPART,IFCROADPART,IFCRAILWAYPART,IFCMARINEPART,IFCFACILITYPARTCOMMON,IFCFACILITYPART,IFCBUILDING,IFCBRIDGE,IFCROAD,IFCRAILWAY,IFCMARINEFACILITY,IFCFACILITY,IFCBUILDINGSTOREY,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALELEMENT,IFCPRODUCT,IFCPROCEDURE,IFCEVENT,IFCTASK,IFCPROCESS,IFCOBJECT,IFCPROJECTLIBRARY,IFCPROJECT,IFCCONTEXT,IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE,IFCCONSTRUCTIONRESOURCETYPE,IFCTYPERESOURCE,IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALELEMENTTYPE,IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCVIBRATIONDAMPERTYPE,IFCSIGNTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONCONDUITTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCIMPACTPROTECTIONDEVICETYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCELECTRICFLOWTREATMENTDEVICETYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSIGNALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE,IFCMEDICALDEVICETYPE,IFCLIQUIDTERMINALTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCONVEYORSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEARINGTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCTRACKELEMENTTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCRAILTYPE,IFCPLATETYPE,IFCPAVEMENTTYPE,IFCNAVIGATIONELEMENTTYPE,IFCMOORINGDEVICETYPE,IFCMEMBERTYPE,IFCKERBTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCAISSONFOUNDATIONTYPE,IFCPILETYPE,IFCDEEPFOUNDATIONTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOURSETYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILTELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCVEHICLETYPE,IFCTRANSPORTATIONDEVICETYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCTYPEPRODUCT,IFCTASKTYPE,IFCPROCEDURETYPE,IFCEVENTTYPE,IFCTYPEPROCESS,IFCTYPEOBJECT,IFCOBJECTDEFINITION];
FromRawLineData['IFC4_3'][IFCSIUNIT] = (d: RawLineData) => { new IFC4_3.IfcSIUnit(d.ID, new Reference<IFC4_3.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], d.arguments[2], d.arguments[3]); }
Constructors['IFC4_3'][IFCSIUNIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSIUnit(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSIUNIT] = (i:IFC4_3.IfcSIUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Prefix, i.Name]; }
FromRawLineData['IFC4_3'][IFCSCHEDULINGTIME] = (d: RawLineData) => { new IFC4_3.IfcSchedulingTime(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCSCHEDULINGTIME] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSchedulingTime(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSCHEDULINGTIME] = (i:IFC4_3.IfcSchedulingTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin]; }
InheritanceDef['IFC4.3'][IFCSCHEDULINGTIME] = [IFCRESOURCETIME,IFCLAGTIME,IFCEVENTTIME,IFCWORKTIME,IFCTASKTIMERECURRING,IFCTASKTIME];
FromRawLineData['IFC4_3'][IFCSHAPEASPECT] = (d: RawLineData) => { new IFC4_3.IfcShapeAspect(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcShapeModel>(p.value)), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcText(d.arguments[2].value), new IFC4_3.IfcLogical(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCSHAPEASPECT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcShapeAspect(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCSHAPEASPECT] = (i:IFC4_3.IfcShapeAspect):unknown[] => { return [i.ShapeRepresentations, i.Name, i.Description, i.ProductDefinitional, i.PartOfProductDefinitionShape]; }
InversePropertyDef['IFC4.3'][IFCSHAPEASPECT] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCSHAPEMODEL] = (d: RawLineData) => { new IFC4_3.IfcShapeModel(d.ID, new Reference<IFC4_3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcRepresentationItem>(p.value))); }
Constructors['IFC4_3'][IFCSHAPEMODEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcShapeModel(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSHAPEMODEL] = (i:IFC4_3.IfcShapeModel):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC4.3'][IFCSHAPEMODEL] = [IFCTOPOLOGYREPRESENTATION,IFCSHAPEREPRESENTATION];
InversePropertyDef['IFC4.3'][IFCSHAPEMODEL] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC4_3'][IFCSHAPEREPRESENTATION] = (d: RawLineData) => { new IFC4_3.IfcShapeRepresentation(d.ID, new Reference<IFC4_3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcRepresentationItem>(p.value))); }
Constructors['IFC4_3'][IFCSHAPEREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcShapeRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSHAPEREPRESENTATION] = (i:IFC4_3.IfcShapeRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC4.3'][IFCSHAPEREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALCONNECTIONCONDITION] = (d: RawLineData) => { new IFC4_3.IfcStructuralConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALCONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralConnectionCondition(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALCONNECTIONCONDITION] = (i:IFC4_3.IfcStructuralConnectionCondition):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALCONNECTIONCONDITION] = [IFCSLIPPAGECONNECTIONCONDITION,IFCFAILURECONNECTIONCONDITION];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOAD] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoad(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOAD] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoad(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOAD] = (i:IFC4_3.IfcStructuralLoad):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALLOAD] = [IFCSURFACEREINFORCEMENTAREA,IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADTEMPERATURE,IFCSTRUCTURALLOADSTATIC,IFCSTRUCTURALLOADORRESULT,IFCSTRUCTURALLOADCONFIGURATION];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADCONFIGURATION] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadConfiguration(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcStructuralLoadOrResult>(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4_3.IfcLengthMeasure(p.value))); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADCONFIGURATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadConfiguration(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADCONFIGURATION] = (i:IFC4_3.IfcStructuralLoadConfiguration):unknown[] => { return [i.Name, i.Values, i.Locations]; }
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADORRESULT] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadOrResult(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADORRESULT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadOrResult(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADORRESULT] = (i:IFC4_3.IfcStructuralLoadOrResult):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALLOADORRESULT] = [IFCSURFACEREINFORCEMENTAREA,IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADTEMPERATURE,IFCSTRUCTURALLOADSTATIC];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADSTATIC] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadStatic(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADSTATIC] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadStatic(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADSTATIC] = (i:IFC4_3.IfcStructuralLoadStatic):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALLOADSTATIC] = [IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADTEMPERATURE];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADTEMPERATURE] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadTemperature(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcThermodynamicTemperatureMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcThermodynamicTemperatureMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcThermodynamicTemperatureMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADTEMPERATURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadTemperature(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADTEMPERATURE] = (i:IFC4_3.IfcStructuralLoadTemperature):unknown[] => { return [i.Name, i.DeltaTConstant, i.DeltaTY, i.DeltaTZ]; }
FromRawLineData['IFC4_3'][IFCSTYLEMODEL] = (d: RawLineData) => { new IFC4_3.IfcStyleModel(d.ID, new Reference<IFC4_3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcRepresentationItem>(p.value))); }
Constructors['IFC4_3'][IFCSTYLEMODEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStyleModel(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSTYLEMODEL] = (i:IFC4_3.IfcStyleModel):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC4.3'][IFCSTYLEMODEL] = [IFCSTYLEDREPRESENTATION];
InversePropertyDef['IFC4.3'][IFCSTYLEMODEL] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC4_3'][IFCSTYLEDITEM] = (d: RawLineData) => { new IFC4_3.IfcStyledItem(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcPresentationStyle>(p.value)), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCSTYLEDITEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStyledItem(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSTYLEDITEM] = (i:IFC4_3.IfcStyledItem):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InversePropertyDef['IFC4.3'][IFCSTYLEDITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSTYLEDREPRESENTATION] = (d: RawLineData) => { new IFC4_3.IfcStyledRepresentation(d.ID, new Reference<IFC4_3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcRepresentationItem>(p.value))); }
Constructors['IFC4_3'][IFCSTYLEDREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStyledRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSTYLEDREPRESENTATION] = (i:IFC4_3.IfcStyledRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC4.3'][IFCSTYLEDREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC4_3'][IFCSURFACEREINFORCEMENTAREA] = (d: RawLineData) => { new IFC4_3.IfcSurfaceReinforcementArea(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC4_3.IfcLengthMeasure(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4_3.IfcLengthMeasure(p.value)), !d.arguments[3] ? null :new IFC4_3.IfcRatioMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSURFACEREINFORCEMENTAREA] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceReinforcementArea(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSURFACEREINFORCEMENTAREA] = (i:IFC4_3.IfcSurfaceReinforcementArea):unknown[] => { return [i.Name, i.SurfaceReinforcement1, i.SurfaceReinforcement2, i.ShearReinforcement]; }
FromRawLineData['IFC4_3'][IFCSURFACESTYLE] = (d: RawLineData) => { new IFC4_3.IfcSurfaceStyle(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1], d.arguments[2].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCSURFACESTYLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSURFACESTYLE] = (i:IFC4_3.IfcSurfaceStyle):unknown[] => { return [i.Name, i.Side, i.Styles]; }
FromRawLineData['IFC4_3'][IFCSURFACESTYLELIGHTING] = (d: RawLineData) => { new IFC4_3.IfcSurfaceStyleLighting(d.ID, new Reference<IFC4_3.IfcColourRgb>(d.arguments[0].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[1].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[2].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSURFACESTYLELIGHTING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceStyleLighting(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSURFACESTYLELIGHTING] = (i:IFC4_3.IfcSurfaceStyleLighting):unknown[] => { return [i.DiffuseTransmissionColour, i.DiffuseReflectionColour, i.TransmissionColour, i.ReflectanceColour]; }
FromRawLineData['IFC4_3'][IFCSURFACESTYLEREFRACTION] = (d: RawLineData) => { new IFC4_3.IfcSurfaceStyleRefraction(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcReal(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcReal(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCSURFACESTYLEREFRACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceStyleRefraction(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCSURFACESTYLEREFRACTION] = (i:IFC4_3.IfcSurfaceStyleRefraction):unknown[] => { return [i.RefractionIndex, i.DispersionFactor]; }
FromRawLineData['IFC4_3'][IFCSURFACESTYLESHADING] = (d: RawLineData) => { new IFC4_3.IfcSurfaceStyleShading(d.ID, new Reference<IFC4_3.IfcColourRgb>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCSURFACESTYLESHADING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceStyleShading(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCSURFACESTYLESHADING] = (i:IFC4_3.IfcSurfaceStyleShading):unknown[] => { return [i.SurfaceColour, i.Transparency]; }
InheritanceDef['IFC4.3'][IFCSURFACESTYLESHADING] = [IFCSURFACESTYLERENDERING];
FromRawLineData['IFC4_3'][IFCSURFACESTYLEWITHTEXTURES] = (d: RawLineData) => { new IFC4_3.IfcSurfaceStyleWithTextures(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSurfaceTexture>(p.value))); }
Constructors['IFC4_3'][IFCSURFACESTYLEWITHTEXTURES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceStyleWithTextures(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCSURFACESTYLEWITHTEXTURES] = (i:IFC4_3.IfcSurfaceStyleWithTextures):unknown[] => { return [i.Textures]; }
FromRawLineData['IFC4_3'][IFCSURFACETEXTURE] = (d: RawLineData) => { new IFC4_3.IfcSurfaceTexture(d.ID, new IFC4_3.IfcBoolean(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcIdentifier(p.value))); }
Constructors['IFC4_3'][IFCSURFACETEXTURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceTexture(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCSURFACETEXTURE] = (i:IFC4_3.IfcSurfaceTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.Mode, i.TextureTransform, i.Parameter]; }
InheritanceDef['IFC4.3'][IFCSURFACETEXTURE] = [IFCPIXELTEXTURE,IFCIMAGETEXTURE,IFCBLOBTEXTURE];
InversePropertyDef['IFC4.3'][IFCSURFACETEXTURE] = [['IsMappedBy',IFCTEXTURECOORDINATE,0,true],['UsedInStyles',IFCSURFACESTYLEWITHTEXTURES,0,true],];
FromRawLineData['IFC4_3'][IFCTABLE] = (d: RawLineData) => { new IFC4_3.IfcTable(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcTableRow>(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcTableColumn>(p.value))); }
Constructors['IFC4_3'][IFCTABLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTable(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCTABLE] = (i:IFC4_3.IfcTable):unknown[] => { return [i.Name, i.Rows, i.Columns]; }
FromRawLineData['IFC4_3'][IFCTABLECOLUMN] = (d: RawLineData) => { new IFC4_3.IfcTableColumn(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcText(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4_3.IfcReference>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCTABLECOLUMN] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTableColumn(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCTABLECOLUMN] = (i:IFC4_3.IfcTableColumn):unknown[] => { return [i.Identifier, i.Name, i.Description, i.Unit, i.ReferencePath]; }
FromRawLineData['IFC4_3'][IFCTABLEROW] = (d: RawLineData) => { new IFC4_3.IfcTableRow(d.ID, !d.arguments[0] ? null :d.arguments[0].map((p:any) => TypeInitialiser('IFC4_3',p)), !d.arguments[1] ? null :new IFC4_3.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCTABLEROW] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTableRow(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCTABLEROW] = (i:IFC4_3.IfcTableRow):unknown[] => { return [!i.RowCells ? null :i.RowCells.map((p:any) => Labelise(p)), i.IsHeading]; }
FromRawLineData['IFC4_3'][IFCTASKTIME] = (d: RawLineData) => { new IFC4_3.IfcTaskTime(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), d.arguments[3], !d.arguments[4] ? null :new IFC4_3.IfcDuration(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcDateTime(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcDateTime(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcDateTime(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcDateTime(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcDuration(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcDuration(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcBoolean(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcDateTime(d.arguments[14].value), !d.arguments[15] ? null :new IFC4_3.IfcDuration(d.arguments[15].value), !d.arguments[16] ? null :new IFC4_3.IfcDateTime(d.arguments[16].value), !d.arguments[17] ? null :new IFC4_3.IfcDateTime(d.arguments[17].value), !d.arguments[18] ? null :new IFC4_3.IfcDuration(d.arguments[18].value), !d.arguments[19] ? null :new IFC4_3.IfcPositiveRatioMeasure(d.arguments[19].value)); }
Constructors['IFC4_3'][IFCTASKTIME] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTaskTime(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19]); }
ToRawLineData['IFC4_3'][IFCTASKTIME] = (i:IFC4_3.IfcTaskTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.DurationType, i.ScheduleDuration, i.ScheduleStart, i.ScheduleFinish, i.EarlyStart, i.EarlyFinish, i.LateStart, i.LateFinish, i.FreeFloat, i.TotalFloat, i.IsCritical, i.StatusTime, i.ActualDuration, i.ActualStart, i.ActualFinish, i.RemainingTime, i.Completion]; }
InheritanceDef['IFC4.3'][IFCTASKTIME] = [IFCTASKTIMERECURRING];
FromRawLineData['IFC4_3'][IFCTASKTIMERECURRING] = (d: RawLineData) => { new IFC4_3.IfcTaskTimeRecurring(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), d.arguments[3], !d.arguments[4] ? null :new IFC4_3.IfcDuration(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcDateTime(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcDateTime(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcDateTime(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcDateTime(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcDuration(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcDuration(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcBoolean(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcDateTime(d.arguments[14].value), !d.arguments[15] ? null :new IFC4_3.IfcDuration(d.arguments[15].value), !d.arguments[16] ? null :new IFC4_3.IfcDateTime(d.arguments[16].value), !d.arguments[17] ? null :new IFC4_3.IfcDateTime(d.arguments[17].value), !d.arguments[18] ? null :new IFC4_3.IfcDuration(d.arguments[18].value), !d.arguments[19] ? null :new IFC4_3.IfcPositiveRatioMeasure(d.arguments[19].value), new Reference<IFC4_3.IfcRecurrencePattern>(d.arguments[20].value)); }
Constructors['IFC4_3'][IFCTASKTIMERECURRING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTaskTimeRecurring(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19], args[20]); }
ToRawLineData['IFC4_3'][IFCTASKTIMERECURRING] = (i:IFC4_3.IfcTaskTimeRecurring):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.DurationType, i.ScheduleDuration, i.ScheduleStart, i.ScheduleFinish, i.EarlyStart, i.EarlyFinish, i.LateStart, i.LateFinish, i.FreeFloat, i.TotalFloat, i.IsCritical, i.StatusTime, i.ActualDuration, i.ActualStart, i.ActualFinish, i.RemainingTime, i.Completion, i.Recurrence]; }
FromRawLineData['IFC4_3'][IFCTELECOMADDRESS] = (d: RawLineData) => { new IFC4_3.IfcTelecomAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4_3.IfcLabel(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcLabel(p.value)), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new IFC4_3.IfcLabel(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcURIReference(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new IFC4_3.IfcURIReference(p.value))); }
Constructors['IFC4_3'][IFCTELECOMADDRESS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTelecomAddress(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTELECOMADDRESS] = (i:IFC4_3.IfcTelecomAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose, i.TelephoneNumbers, i.FacsimileNumbers, i.PagerNumber, i.ElectronicMailAddresses, i.WWWHomePageURL, i.MessagingIDs]; }
InversePropertyDef['IFC4.3'][IFCTELECOMADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC4_3'][IFCTEXTSTYLE] = (d: RawLineData) => { new IFC4_3.IfcTextStyle(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcTextStyleForDefinedFont>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcTextStyleTextModel>(d.arguments[2].value), new Reference(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcBoolean(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCTEXTSTYLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextStyle(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCTEXTSTYLE] = (i:IFC4_3.IfcTextStyle):unknown[] => { return [i.Name, i.TextCharacterAppearance, i.TextStyle, i.TextFontStyle, i.ModelOrDraughting]; }
FromRawLineData['IFC4_3'][IFCTEXTSTYLEFORDEFINEDFONT] = (d: RawLineData) => { new IFC4_3.IfcTextStyleForDefinedFont(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCTEXTSTYLEFORDEFINEDFONT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextStyleForDefinedFont(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCTEXTSTYLEFORDEFINEDFONT] = (i:IFC4_3.IfcTextStyleForDefinedFont):unknown[] => { return [i.Colour, i.BackgroundColour]; }
FromRawLineData['IFC4_3'][IFCTEXTSTYLETEXTMODEL] = (d: RawLineData) => { new IFC4_3.IfcTextStyleTextModel(d.ID, !d.arguments[0] ? null :TypeInitialiser('IFC4_3',d.arguments[0]), !d.arguments[1] ? null :new IFC4_3.IfcTextAlignment(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcTextDecoration(d.arguments[2].value), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4_3',d.arguments[4]), !d.arguments[5] ? null :new IFC4_3.IfcTextTransformation(d.arguments[5].value), !d.arguments[6] ? null :TypeInitialiser('IFC4_3',d.arguments[6])); }
Constructors['IFC4_3'][IFCTEXTSTYLETEXTMODEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextStyleTextModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCTEXTSTYLETEXTMODEL] = (i:IFC4_3.IfcTextStyleTextModel):unknown[] => { return [!i.TextIndent ? null :Labelise(i.TextIndent), i.TextAlign, i.TextDecoration, !i.LetterSpacing ? null :Labelise(i.LetterSpacing), !i.WordSpacing ? null :Labelise(i.WordSpacing), i.TextTransform, !i.LineHeight ? null :Labelise(i.LineHeight)]; }
FromRawLineData['IFC4_3'][IFCTEXTURECOORDINATE] = (d: RawLineData) => { new IFC4_3.IfcTextureCoordinate(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSurfaceTexture>(p.value))); }
Constructors['IFC4_3'][IFCTEXTURECOORDINATE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextureCoordinate(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCTEXTURECOORDINATE] = (i:IFC4_3.IfcTextureCoordinate):unknown[] => { return [i.Maps]; }
InheritanceDef['IFC4.3'][IFCTEXTURECOORDINATE] = [IFCINDEXEDPOLYGONALTEXTUREMAP,IFCINDEXEDTRIANGLETEXTUREMAP,IFCINDEXEDTEXTUREMAP,IFCTEXTUREMAP,IFCTEXTURECOORDINATEGENERATOR];
FromRawLineData['IFC4_3'][IFCTEXTURECOORDINATEGENERATOR] = (d: RawLineData) => { new IFC4_3.IfcTextureCoordinateGenerator(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSurfaceTexture>(p.value)), new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4_3.IfcReal(p.value))); }
Constructors['IFC4_3'][IFCTEXTURECOORDINATEGENERATOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextureCoordinateGenerator(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCTEXTURECOORDINATEGENERATOR] = (i:IFC4_3.IfcTextureCoordinateGenerator):unknown[] => { return [i.Maps, i.Mode, i.Parameter]; }
FromRawLineData['IFC4_3'][IFCTEXTURECOORDINATEINDICES] = (d: RawLineData) => { new IFC4_3.IfcTextureCoordinateIndices(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value)), new Reference<IFC4_3.IfcIndexedPolygonalFace>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCTEXTURECOORDINATEINDICES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextureCoordinateIndices(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCTEXTURECOORDINATEINDICES] = (i:IFC4_3.IfcTextureCoordinateIndices):unknown[] => { return [i.TexCoordIndex, i.TexCoordsOf]; }
InheritanceDef['IFC4.3'][IFCTEXTURECOORDINATEINDICES] = [IFCTEXTURECOORDINATEINDICESWITHVOIDS];
InversePropertyDef['IFC4.3'][IFCTEXTURECOORDINATEINDICES] = [['ToTexMap',IFCINDEXEDPOLYGONALTEXTUREMAP,3,false],];
FromRawLineData['IFC4_3'][IFCTEXTURECOORDINATEINDICESWITHVOIDS] = (d: RawLineData) => { new IFC4_3.IfcTextureCoordinateIndicesWithVoids(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value)), new Reference<IFC4_3.IfcIndexedPolygonalFace>(d.arguments[1].value), d.arguments[2].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value))); }
Constructors['IFC4_3'][IFCTEXTURECOORDINATEINDICESWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextureCoordinateIndicesWithVoids(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCTEXTURECOORDINATEINDICESWITHVOIDS] = (i:IFC4_3.IfcTextureCoordinateIndicesWithVoids):unknown[] => { return [i.TexCoordIndex, i.TexCoordsOf, i.InnerTexCoordIndices]; }
InversePropertyDef['IFC4.3'][IFCTEXTURECOORDINATEINDICESWITHVOIDS] = [['ToTexMap',IFCINDEXEDPOLYGONALTEXTUREMAP,3,false],];
FromRawLineData['IFC4_3'][IFCTEXTUREMAP] = (d: RawLineData) => { new IFC4_3.IfcTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSurfaceTexture>(p.value)), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcTextureVertex>(p.value)), new Reference<IFC4_3.IfcFace>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCTEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextureMap(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCTEXTUREMAP] = (i:IFC4_3.IfcTextureMap):unknown[] => { return [i.Maps, i.Vertices, i.MappedTo]; }
FromRawLineData['IFC4_3'][IFCTEXTUREVERTEX] = (d: RawLineData) => { new IFC4_3.IfcTextureVertex(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcParameterValue(p.value))); }
Constructors['IFC4_3'][IFCTEXTUREVERTEX] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextureVertex(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCTEXTUREVERTEX] = (i:IFC4_3.IfcTextureVertex):unknown[] => { return [i.Coordinates]; }
FromRawLineData['IFC4_3'][IFCTEXTUREVERTEXLIST] = (d: RawLineData) => { new IFC4_3.IfcTextureVertexList(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcParameterValue(p.value))); }
Constructors['IFC4_3'][IFCTEXTUREVERTEXLIST] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextureVertexList(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCTEXTUREVERTEXLIST] = (i:IFC4_3.IfcTextureVertexList):unknown[] => { return [i.TexCoordsList]; }
FromRawLineData['IFC4_3'][IFCTIMEPERIOD] = (d: RawLineData) => { new IFC4_3.IfcTimePeriod(d.ID, new IFC4_3.IfcTime(d.arguments[0].value), new IFC4_3.IfcTime(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCTIMEPERIOD] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTimePeriod(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCTIMEPERIOD] = (i:IFC4_3.IfcTimePeriod):unknown[] => { return [i.StartTime, i.EndTime]; }
FromRawLineData['IFC4_3'][IFCTIMESERIES] = (d: RawLineData) => { new IFC4_3.IfcTimeSeries(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new IFC4_3.IfcDateTime(d.arguments[2].value), new IFC4_3.IfcDateTime(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCTIMESERIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCTIMESERIES] = (i:IFC4_3.IfcTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit]; }
InheritanceDef['IFC4.3'][IFCTIMESERIES] = [IFCREGULARTIMESERIES,IFCIRREGULARTIMESERIES];
InversePropertyDef['IFC4.3'][IFCTIMESERIES] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCTIMESERIESVALUE] = (d: RawLineData) => { new IFC4_3.IfcTimeSeriesValue(d.ID, d.arguments[0].map((p:any) => TypeInitialiser('IFC4_3',p))); }
Constructors['IFC4_3'][IFCTIMESERIESVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTimeSeriesValue(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCTIMESERIESVALUE] = (i:IFC4_3.IfcTimeSeriesValue):unknown[] => { return [i.ListValues.map((p:any) => Labelise(p))]; }
FromRawLineData['IFC4_3'][IFCTOPOLOGICALREPRESENTATIONITEM] = (d: RawLineData) => { new IFC4_3.IfcTopologicalRepresentationItem(d.ID, ); }
Constructors['IFC4_3'][IFCTOPOLOGICALREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC4_3.IfcTopologicalRepresentationItem(expressID, ); }
ToRawLineData['IFC4_3'][IFCTOPOLOGICALREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCTOPOLOGICALREPRESENTATIONITEM] = [IFCPATH,IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP,IFCLOOP,IFCFACEOUTERBOUND,IFCFACEBOUND,IFCADVANCEDFACE,IFCFACESURFACE,IFCFACE,IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE,IFCEDGE,IFCCLOSEDSHELL,IFCOPENSHELL,IFCCONNECTEDFACESET,IFCVERTEXPOINT,IFCVERTEX];
InversePropertyDef['IFC4.3'][IFCTOPOLOGICALREPRESENTATIONITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCTOPOLOGYREPRESENTATION] = (d: RawLineData) => { new IFC4_3.IfcTopologyRepresentation(d.ID, new Reference<IFC4_3.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcRepresentationItem>(p.value))); }
Constructors['IFC4_3'][IFCTOPOLOGYREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTopologyRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCTOPOLOGYREPRESENTATION] = (i:IFC4_3.IfcTopologyRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC4.3'][IFCTOPOLOGYREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC4_3'][IFCUNITASSIGNMENT] = (d: RawLineData) => { new IFC4_3.IfcUnitAssignment(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCUNITASSIGNMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcUnitAssignment(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCUNITASSIGNMENT] = (i:IFC4_3.IfcUnitAssignment):unknown[] => { return [i.Units]; }
FromRawLineData['IFC4_3'][IFCVERTEX] = (d: RawLineData) => { new IFC4_3.IfcVertex(d.ID, ); }
Constructors['IFC4_3'][IFCVERTEX] = (expressID:number, _:any) => { return new IFC4_3.IfcVertex(expressID, ); }
ToRawLineData['IFC4_3'][IFCVERTEX] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCVERTEX] = [IFCVERTEXPOINT];
InversePropertyDef['IFC4.3'][IFCVERTEX] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCVERTEXPOINT] = (d: RawLineData) => { new IFC4_3.IfcVertexPoint(d.ID, new Reference<IFC4_3.IfcPoint>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCVERTEXPOINT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVertexPoint(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCVERTEXPOINT] = (i:IFC4_3.IfcVertexPoint):unknown[] => { return [i.VertexGeometry]; }
InversePropertyDef['IFC4.3'][IFCVERTEXPOINT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCVIRTUALGRIDINTERSECTION] = (d: RawLineData) => { new IFC4_3.IfcVirtualGridIntersection(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcGridAxis>(p.value)), d.arguments[1].map((p:any) => new IFC4_3.IfcLengthMeasure(p.value))); }
Constructors['IFC4_3'][IFCVIRTUALGRIDINTERSECTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVirtualGridIntersection(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCVIRTUALGRIDINTERSECTION] = (i:IFC4_3.IfcVirtualGridIntersection):unknown[] => { return [i.IntersectingAxes, i.OffsetDistances]; }
FromRawLineData['IFC4_3'][IFCWORKTIME] = (d: RawLineData) => { new IFC4_3.IfcWorkTime(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcRecurrencePattern>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcDate(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDate(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCWORKTIME] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWorkTime(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCWORKTIME] = (i:IFC4_3.IfcWorkTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.RecurrencePattern, i.StartDate, i.FinishDate]; }
FromRawLineData['IFC4_3'][IFCALIGNMENTCANTSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcAlignmentCantSegment(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new IFC4_3.IfcLengthMeasure(d.arguments[2].value), new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[3].value), new IFC4_3.IfcLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[5].value), new IFC4_3.IfcLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCALIGNMENTCANTSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignmentCantSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCALIGNMENTCANTSEGMENT] = (i:IFC4_3.IfcAlignmentCantSegment):unknown[] => { return [i.StartTag, i.EndTag, i.StartDistAlong, i.HorizontalLength, i.StartCantLeft, i.EndCantLeft, i.StartCantRight, i.EndCantRight, i.PredefinedType]; }
FromRawLineData['IFC4_3'][IFCALIGNMENTHORIZONTALSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcAlignmentHorizontalSegment(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[2].value), new IFC4_3.IfcPlaneAngleMeasure(d.arguments[3].value), new IFC4_3.IfcLengthMeasure(d.arguments[4].value), new IFC4_3.IfcLengthMeasure(d.arguments[5].value), new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCALIGNMENTHORIZONTALSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignmentHorizontalSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCALIGNMENTHORIZONTALSEGMENT] = (i:IFC4_3.IfcAlignmentHorizontalSegment):unknown[] => { return [i.StartTag, i.EndTag, i.StartPoint, i.StartDirection, i.StartRadiusOfCurvature, i.EndRadiusOfCurvature, i.SegmentLength, i.GravityCenterLineHeight, i.PredefinedType]; }
FromRawLineData['IFC4_3'][IFCAPPROVALRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcApprovalRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcApproval>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcApproval>(p.value))); }
Constructors['IFC4_3'][IFCAPPROVALRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcApprovalRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCAPPROVALRELATIONSHIP] = (i:IFC4_3.IfcApprovalRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingApproval, i.RelatedApprovals]; }
FromRawLineData['IFC4_3'][IFCARBITRARYCLOSEDPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcArbitraryClosedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCARBITRARYCLOSEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcArbitraryClosedProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCARBITRARYCLOSEDPROFILEDEF] = (i:IFC4_3.IfcArbitraryClosedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.OuterCurve]; }
InheritanceDef['IFC4.3'][IFCARBITRARYCLOSEDPROFILEDEF] = [IFCARBITRARYPROFILEDEFWITHVOIDS];
InversePropertyDef['IFC4.3'][IFCARBITRARYCLOSEDPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCARBITRARYOPENPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcArbitraryOpenProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new Reference<IFC4_3.IfcBoundedCurve>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCARBITRARYOPENPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcArbitraryOpenProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCARBITRARYOPENPROFILEDEF] = (i:IFC4_3.IfcArbitraryOpenProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Curve]; }
InheritanceDef['IFC4.3'][IFCARBITRARYOPENPROFILEDEF] = [IFCCENTERLINEPROFILEDEF];
InversePropertyDef['IFC4.3'][IFCARBITRARYOPENPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (d: RawLineData) => { new IFC4_3.IfcArbitraryProfileDefWithVoids(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcCurve>(p.value))); }
Constructors['IFC4_3'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcArbitraryProfileDefWithVoids(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (i:IFC4_3.IfcArbitraryProfileDefWithVoids):unknown[] => { return [i.ProfileType, i.ProfileName, i.OuterCurve, i.InnerCurves]; }
InversePropertyDef['IFC4.3'][IFCARBITRARYPROFILEDEFWITHVOIDS] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCBLOBTEXTURE] = (d: RawLineData) => { new IFC4_3.IfcBlobTexture(d.ID, new IFC4_3.IfcBoolean(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcIdentifier(p.value)), new IFC4_3.IfcIdentifier(d.arguments[5].value), new IFC4_3.IfcBinary(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCBLOBTEXTURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBlobTexture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCBLOBTEXTURE] = (i:IFC4_3.IfcBlobTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.Mode, i.TextureTransform, i.Parameter, i.RasterFormat, i.RasterCode]; }
InversePropertyDef['IFC4.3'][IFCBLOBTEXTURE] = [['IsMappedBy',IFCTEXTURECOORDINATE,0,true],['UsedInStyles',IFCSURFACESTYLEWITHTEXTURES,0,true],];
FromRawLineData['IFC4_3'][IFCCENTERLINEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcCenterLineProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new Reference<IFC4_3.IfcBoundedCurve>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCCENTERLINEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCenterLineProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCENTERLINEPROFILEDEF] = (i:IFC4_3.IfcCenterLineProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Curve, i.Thickness]; }
InversePropertyDef['IFC4.3'][IFCCENTERLINEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCCLASSIFICATION] = (d: RawLineData) => { new IFC4_3.IfcClassification(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcDate(d.arguments[2].value), new IFC4_3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcURIReference(d.arguments[5].value), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new IFC4_3.IfcIdentifier(p.value))); }
Constructors['IFC4_3'][IFCCLASSIFICATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcClassification(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCCLASSIFICATION] = (i:IFC4_3.IfcClassification):unknown[] => { return [i.Source, i.Edition, i.EditionDate, i.Name, i.Description, i.Specification, i.ReferenceTokens]; }
InversePropertyDef['IFC4.3'][IFCCLASSIFICATION] = [['ClassificationForObjects',IFCRELASSOCIATESCLASSIFICATION,5,true],['HasReferences',IFCCLASSIFICATIONREFERENCE,3,true],];
FromRawLineData['IFC4_3'][IFCCLASSIFICATIONREFERENCE] = (d: RawLineData) => { new IFC4_3.IfcClassificationReference(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCCLASSIFICATIONREFERENCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcClassificationReference(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCCLASSIFICATIONREFERENCE] = (i:IFC4_3.IfcClassificationReference):unknown[] => { return [i.Location, i.Identification, i.Name, i.ReferencedSource, i.Description, i.Sort]; }
InversePropertyDef['IFC4.3'][IFCCLASSIFICATIONREFERENCE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],['ClassificationRefForObjects',IFCRELASSOCIATESCLASSIFICATION,5,true],['HasReferences',IFCCLASSIFICATIONREFERENCE,3,true],];
FromRawLineData['IFC4_3'][IFCCOLOURRGBLIST] = (d: RawLineData) => { new IFC4_3.IfcColourRgbList(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcNormalisedRatioMeasure(p.value))); }
Constructors['IFC4_3'][IFCCOLOURRGBLIST] = (expressID:number, args: any[]) => { return new IFC4_3.IfcColourRgbList(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCCOLOURRGBLIST] = (i:IFC4_3.IfcColourRgbList):unknown[] => { return [i.ColourList]; }
FromRawLineData['IFC4_3'][IFCCOLOURSPECIFICATION] = (d: RawLineData) => { new IFC4_3.IfcColourSpecification(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCCOLOURSPECIFICATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcColourSpecification(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCCOLOURSPECIFICATION] = (i:IFC4_3.IfcColourSpecification):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCCOLOURSPECIFICATION] = [IFCCOLOURRGB];
FromRawLineData['IFC4_3'][IFCCOMPOSITEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcCompositeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcProfileDef>(p.value)), !d.arguments[3] ? null :new IFC4_3.IfcLabel(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCCOMPOSITEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCompositeProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCOMPOSITEPROFILEDEF] = (i:IFC4_3.IfcCompositeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Profiles, i.Label]; }
InversePropertyDef['IFC4.3'][IFCCOMPOSITEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCCONNECTEDFACESET] = (d: RawLineData) => { new IFC4_3.IfcConnectedFaceSet(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcFace>(p.value))); }
Constructors['IFC4_3'][IFCCONNECTEDFACESET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConnectedFaceSet(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCCONNECTEDFACESET] = (i:IFC4_3.IfcConnectedFaceSet):unknown[] => { return [i.CfsFaces]; }
InheritanceDef['IFC4.3'][IFCCONNECTEDFACESET] = [IFCCLOSEDSHELL,IFCOPENSHELL];
InversePropertyDef['IFC4.3'][IFCCONNECTEDFACESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCONNECTIONCURVEGEOMETRY] = (d: RawLineData) => { new IFC4_3.IfcConnectionCurveGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCONNECTIONCURVEGEOMETRY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConnectionCurveGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCONNECTIONCURVEGEOMETRY] = (i:IFC4_3.IfcConnectionCurveGeometry):unknown[] => { return [i.CurveOnRelatingElement, i.CurveOnRelatedElement]; }
FromRawLineData['IFC4_3'][IFCCONNECTIONPOINTECCENTRICITY] = (d: RawLineData) => { new IFC4_3.IfcConnectionPointEccentricity(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCCONNECTIONPOINTECCENTRICITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConnectionPointEccentricity(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCCONNECTIONPOINTECCENTRICITY] = (i:IFC4_3.IfcConnectionPointEccentricity):unknown[] => { return [i.PointOnRelatingElement, i.PointOnRelatedElement, i.EccentricityInX, i.EccentricityInY, i.EccentricityInZ]; }
FromRawLineData['IFC4_3'][IFCCONTEXTDEPENDENTUNIT] = (d: RawLineData) => { new IFC4_3.IfcContextDependentUnit(d.ID, new Reference<IFC4_3.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCCONTEXTDEPENDENTUNIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcContextDependentUnit(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCCONTEXTDEPENDENTUNIT] = (i:IFC4_3.IfcContextDependentUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Name]; }
InversePropertyDef['IFC4.3'][IFCCONTEXTDEPENDENTUNIT] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCCONVERSIONBASEDUNIT] = (d: RawLineData) => { new IFC4_3.IfcConversionBasedUnit(d.ID, new Reference<IFC4_3.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], new IFC4_3.IfcLabel(d.arguments[2].value), new Reference<IFC4_3.IfcMeasureWithUnit>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCCONVERSIONBASEDUNIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConversionBasedUnit(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCONVERSIONBASEDUNIT] = (i:IFC4_3.IfcConversionBasedUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Name, i.ConversionFactor]; }
InheritanceDef['IFC4.3'][IFCCONVERSIONBASEDUNIT] = [IFCCONVERSIONBASEDUNITWITHOFFSET];
InversePropertyDef['IFC4.3'][IFCCONVERSIONBASEDUNIT] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCCONVERSIONBASEDUNITWITHOFFSET] = (d: RawLineData) => { new IFC4_3.IfcConversionBasedUnitWithOffset(d.ID, new Reference<IFC4_3.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], new IFC4_3.IfcLabel(d.arguments[2].value), new Reference<IFC4_3.IfcMeasureWithUnit>(d.arguments[3].value), new IFC4_3.IfcReal(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCCONVERSIONBASEDUNITWITHOFFSET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConversionBasedUnitWithOffset(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCCONVERSIONBASEDUNITWITHOFFSET] = (i:IFC4_3.IfcConversionBasedUnitWithOffset):unknown[] => { return [i.Dimensions, i.UnitType, i.Name, i.ConversionFactor, i.ConversionOffset]; }
InversePropertyDef['IFC4.3'][IFCCONVERSIONBASEDUNITWITHOFFSET] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCCURRENCYRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcCurrencyRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcMonetaryUnit>(d.arguments[2].value), new Reference<IFC4_3.IfcMonetaryUnit>(d.arguments[3].value), new IFC4_3.IfcPositiveRatioMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcLibraryInformation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCCURRENCYRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurrencyRelationship(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCCURRENCYRELATIONSHIP] = (i:IFC4_3.IfcCurrencyRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingMonetaryUnit, i.RelatedMonetaryUnit, i.ExchangeRate, i.RateDateTime, i.RateSource]; }
FromRawLineData['IFC4_3'][IFCCURVESTYLE] = (d: RawLineData) => { new IFC4_3.IfcCurveStyle(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC4_3',d.arguments[2]), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcBoolean(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCCURVESTYLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurveStyle(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCCURVESTYLE] = (i:IFC4_3.IfcCurveStyle):unknown[] => { return [i.Name, i.CurveFont, !i.CurveWidth ? null :Labelise(i.CurveWidth), i.CurveColour, i.ModelOrDraughting]; }
FromRawLineData['IFC4_3'][IFCCURVESTYLEFONT] = (d: RawLineData) => { new IFC4_3.IfcCurveStyleFont(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcCurveStyleFontPattern>(p.value))); }
Constructors['IFC4_3'][IFCCURVESTYLEFONT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurveStyleFont(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCURVESTYLEFONT] = (i:IFC4_3.IfcCurveStyleFont):unknown[] => { return [i.Name, i.PatternList]; }
FromRawLineData['IFC4_3'][IFCCURVESTYLEFONTANDSCALING] = (d: RawLineData) => { new IFC4_3.IfcCurveStyleFontAndScaling(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new Reference(d.arguments[1].value), new IFC4_3.IfcPositiveRatioMeasure(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCCURVESTYLEFONTANDSCALING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurveStyleFontAndScaling(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCCURVESTYLEFONTANDSCALING] = (i:IFC4_3.IfcCurveStyleFontAndScaling):unknown[] => { return [i.Name, i.CurveStyleFont, i.CurveFontScaling]; }
FromRawLineData['IFC4_3'][IFCCURVESTYLEFONTPATTERN] = (d: RawLineData) => { new IFC4_3.IfcCurveStyleFontPattern(d.ID, new IFC4_3.IfcLengthMeasure(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCURVESTYLEFONTPATTERN] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurveStyleFontPattern(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCURVESTYLEFONTPATTERN] = (i:IFC4_3.IfcCurveStyleFontPattern):unknown[] => { return [i.VisibleSegmentLength, i.InvisibleSegmentLength]; }
FromRawLineData['IFC4_3'][IFCDERIVEDPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcDerivedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new Reference<IFC4_3.IfcProfileDef>(d.arguments[2].value), new Reference<IFC4_3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCDERIVEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDerivedProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCDERIVEDPROFILEDEF] = (i:IFC4_3.IfcDerivedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.ParentProfile, i.Operator, i.Label]; }
InheritanceDef['IFC4.3'][IFCDERIVEDPROFILEDEF] = [IFCMIRROREDPROFILEDEF];
InversePropertyDef['IFC4.3'][IFCDERIVEDPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCDOCUMENTINFORMATION] = (d: RawLineData) => { new IFC4_3.IfcDocumentInformation(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcText(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcURIReference(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcText(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new Reference(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference(p.value)), !d.arguments[10] ? null :new IFC4_3.IfcDateTime(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcDateTime(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcIdentifier(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcDate(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcDate(d.arguments[14].value), d.arguments[15], d.arguments[16]); }
Constructors['IFC4_3'][IFCDOCUMENTINFORMATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDocumentInformation(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC4_3'][IFCDOCUMENTINFORMATION] = (i:IFC4_3.IfcDocumentInformation):unknown[] => { return [i.Identification, i.Name, i.Description, i.Location, i.Purpose, i.IntendedUse, i.Scope, i.Revision, i.DocumentOwner, i.Editors, i.CreationTime, i.LastRevisionTime, i.ElectronicFormat, i.ValidFrom, i.ValidUntil, i.Confidentiality, i.Status]; }
InversePropertyDef['IFC4.3'][IFCDOCUMENTINFORMATION] = [['DocumentInfoForObjects',IFCRELASSOCIATESDOCUMENT,5,true],['HasDocumentReferences',IFCDOCUMENTREFERENCE,4,true],['IsPointedTo',IFCDOCUMENTINFORMATIONRELATIONSHIP,3,true],['IsPointer',IFCDOCUMENTINFORMATIONRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcDocumentInformationRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcDocumentInformation>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcDocumentInformation>(p.value)), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDocumentInformationRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (i:IFC4_3.IfcDocumentInformationRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingDocument, i.RelatedDocuments, i.RelationshipType]; }
FromRawLineData['IFC4_3'][IFCDOCUMENTREFERENCE] = (d: RawLineData) => { new IFC4_3.IfcDocumentReference(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4_3.IfcDocumentInformation>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCDOCUMENTREFERENCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDocumentReference(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCDOCUMENTREFERENCE] = (i:IFC4_3.IfcDocumentReference):unknown[] => { return [i.Location, i.Identification, i.Name, i.Description, i.ReferencedDocument]; }
InversePropertyDef['IFC4.3'][IFCDOCUMENTREFERENCE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],['DocumentRefForObjects',IFCRELASSOCIATESDOCUMENT,5,true],];
FromRawLineData['IFC4_3'][IFCEDGE] = (d: RawLineData) => { new IFC4_3.IfcEdge(d.ID, new Reference<IFC4_3.IfcVertex>(d.arguments[0].value), new Reference<IFC4_3.IfcVertex>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCEDGE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEdge(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCEDGE] = (i:IFC4_3.IfcEdge):unknown[] => { return [i.EdgeStart, i.EdgeEnd]; }
InheritanceDef['IFC4.3'][IFCEDGE] = [IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE];
InversePropertyDef['IFC4.3'][IFCEDGE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCEDGECURVE] = (d: RawLineData) => { new IFC4_3.IfcEdgeCurve(d.ID, new Reference<IFC4_3.IfcVertex>(d.arguments[0].value), new Reference<IFC4_3.IfcVertex>(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value), new IFC4_3.IfcBoolean(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCEDGECURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEdgeCurve(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCEDGECURVE] = (i:IFC4_3.IfcEdgeCurve):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.EdgeGeometry, i.SameSense]; }
InversePropertyDef['IFC4.3'][IFCEDGECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCEVENTTIME] = (d: RawLineData) => { new IFC4_3.IfcEventTime(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcDateTime(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcDateTime(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcDateTime(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCEVENTTIME] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEventTime(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCEVENTTIME] = (i:IFC4_3.IfcEventTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.ActualDate, i.EarlyDate, i.LateDate, i.ScheduleDate]; }
FromRawLineData['IFC4_3'][IFCEXTENDEDPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcExtendedProperties(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcProperty>(p.value))); }
Constructors['IFC4_3'][IFCEXTENDEDPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExtendedProperties(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCEXTENDEDPROPERTIES] = (i:IFC4_3.IfcExtendedProperties):unknown[] => { return [i.Name, i.Description, i.Properties]; }
InheritanceDef['IFC4.3'][IFCEXTENDEDPROPERTIES] = [IFCPROFILEPROPERTIES,IFCMATERIALPROPERTIES];
InversePropertyDef['IFC4.3'][IFCEXTENDEDPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCEXTERNALREFERENCERELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcExternalReferenceRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcExternalReference>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCEXTERNALREFERENCERELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExternalReferenceRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCEXTERNALREFERENCERELATIONSHIP] = (i:IFC4_3.IfcExternalReferenceRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingReference, i.RelatedResourceObjects]; }
FromRawLineData['IFC4_3'][IFCFACE] = (d: RawLineData) => { new IFC4_3.IfcFace(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcFaceBound>(p.value))); }
Constructors['IFC4_3'][IFCFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFace(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCFACE] = (i:IFC4_3.IfcFace):unknown[] => { return [i.Bounds]; }
InheritanceDef['IFC4.3'][IFCFACE] = [IFCADVANCEDFACE,IFCFACESURFACE];
InversePropertyDef['IFC4.3'][IFCFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasTextureMaps',IFCTEXTUREMAP,2,true],];
FromRawLineData['IFC4_3'][IFCFACEBOUND] = (d: RawLineData) => { new IFC4_3.IfcFaceBound(d.ID, new Reference<IFC4_3.IfcLoop>(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCFACEBOUND] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFaceBound(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCFACEBOUND] = (i:IFC4_3.IfcFaceBound):unknown[] => { return [i.Bound, i.Orientation]; }
InheritanceDef['IFC4.3'][IFCFACEBOUND] = [IFCFACEOUTERBOUND];
InversePropertyDef['IFC4.3'][IFCFACEBOUND] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFACEOUTERBOUND] = (d: RawLineData) => { new IFC4_3.IfcFaceOuterBound(d.ID, new Reference<IFC4_3.IfcLoop>(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCFACEOUTERBOUND] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFaceOuterBound(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCFACEOUTERBOUND] = (i:IFC4_3.IfcFaceOuterBound):unknown[] => { return [i.Bound, i.Orientation]; }
InversePropertyDef['IFC4.3'][IFCFACEOUTERBOUND] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFACESURFACE] = (d: RawLineData) => { new IFC4_3.IfcFaceSurface(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcFaceBound>(p.value)), new Reference<IFC4_3.IfcSurface>(d.arguments[1].value), new IFC4_3.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCFACESURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFaceSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCFACESURFACE] = (i:IFC4_3.IfcFaceSurface):unknown[] => { return [i.Bounds, i.FaceSurface, i.SameSense]; }
InheritanceDef['IFC4.3'][IFCFACESURFACE] = [IFCADVANCEDFACE];
InversePropertyDef['IFC4.3'][IFCFACESURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasTextureMaps',IFCTEXTUREMAP,2,true],];
FromRawLineData['IFC4_3'][IFCFAILURECONNECTIONCONDITION] = (d: RawLineData) => { new IFC4_3.IfcFailureConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcForceMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcForceMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcForceMeasure(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCFAILURECONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFailureConnectionCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCFAILURECONNECTIONCONDITION] = (i:IFC4_3.IfcFailureConnectionCondition):unknown[] => { return [i.Name, i.TensionFailureX, i.TensionFailureY, i.TensionFailureZ, i.CompressionFailureX, i.CompressionFailureY, i.CompressionFailureZ]; }
FromRawLineData['IFC4_3'][IFCFILLAREASTYLE] = (d: RawLineData) => { new IFC4_3.IfcFillAreaStyle(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value)), !d.arguments[2] ? null :new IFC4_3.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCFILLAREASTYLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFillAreaStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCFILLAREASTYLE] = (i:IFC4_3.IfcFillAreaStyle):unknown[] => { return [i.Name, i.FillStyles, i.ModelOrDraughting]; }
FromRawLineData['IFC4_3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (d: RawLineData) => { new IFC4_3.IfcGeometricRepresentationContext(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new IFC4_3.IfcDimensionCount(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcReal(d.arguments[3].value), new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeometricRepresentationContext(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (i:IFC4_3.IfcGeometricRepresentationContext):unknown[] => { return [i.ContextIdentifier, i.ContextType, i.CoordinateSpaceDimension, i.Precision, i.WorldCoordinateSystem, i.TrueNorth]; }
InheritanceDef['IFC4.3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = [IFCGEOMETRICREPRESENTATIONSUBCONTEXT];
InversePropertyDef['IFC4.3'][IFCGEOMETRICREPRESENTATIONCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],['HasSubContexts',IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],['HasCoordinateOperation',IFCCOORDINATEOPERATION,0,true],];
FromRawLineData['IFC4_3'][IFCGEOMETRICREPRESENTATIONITEM] = (d: RawLineData) => { new IFC4_3.IfcGeometricRepresentationItem(d.ID, ); }
Constructors['IFC4_3'][IFCGEOMETRICREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC4_3.IfcGeometricRepresentationItem(expressID, ); }
ToRawLineData['IFC4_3'][IFCGEOMETRICREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCGEOMETRICREPRESENTATIONITEM] = [IFCFILLAREASTYLETILES,IFCFILLAREASTYLEHATCHING,IFCFACEBASEDSURFACEMODEL,IFCDIRECTION,IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFCINDEXEDPOLYCURVE,IFCSEGMENTEDREFERENCECURVE,IFCGRADIENTCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCSEAMCURVE,IFCINTERSECTIONCURVE,IFCSURFACECURVE,IFCSINESPIRAL,IFCSEVENTHORDERPOLYNOMIALSPIRAL,IFCSECONDORDERPOLYNOMIALSPIRAL,IFCCOSINESPIRAL,IFCCLOTHOID,IFCTHIRDORDERPOLYNOMIALSPIRAL,IFCSPIRAL,IFCPOLYNOMIALCURVE,IFCPCURVE,IFCOFFSETCURVEBYDISTANCES,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCOFFSETCURVE,IFCLINE,IFCCURVE,IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID,IFCCSGPRIMITIVE3D,IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D,IFCCARTESIANTRANSFORMATIONOPERATOR,IFCCARTESIANPOINTLIST3D,IFCCARTESIANPOINTLIST2D,IFCCARTESIANPOINTLIST,IFCBOUNDINGBOX,IFCBOOLEANCLIPPINGRESULT,IFCBOOLEANRESULT,IFCANNOTATIONFILLAREA,IFCVECTOR,IFCTEXTLITERALWITHEXTENT,IFCTEXTLITERAL,IFCPOLYGONALFACESET,IFCTRIANGULATEDIRREGULARNETWORK,IFCTRIANGULATEDFACESET,IFCTESSELLATEDFACESET,IFCINDEXEDPOLYGONALFACEWITHVOIDS,IFCINDEXEDPOLYGONALFACE,IFCTESSELLATEDITEM,IFCSECTIONEDSURFACE,IFCCYLINDRICALSURFACE,IFCTOROIDALSURFACE,IFCSPHERICALSURFACE,IFCPLANE,IFCELEMENTARYSURFACE,IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE,IFCSURFACE,IFCSECTIONEDSOLIDHORIZONTAL,IFCSECTIONEDSOLID,IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLIDPOLYGONAL,IFCSWEPTDISKSOLID,IFCREVOLVEDAREASOLIDTAPERED,IFCREVOLVEDAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED,IFCEXTRUDEDAREASOLID,IFCSURFACECURVESWEPTAREASOLID,IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID,IFCDIRECTRIXCURVESWEPTAREASOLID,IFCSWEPTAREASOLID,IFCSOLIDMODEL,IFCSHELLBASEDSURFACEMODEL,IFCCURVESEGMENT,IFCREPARAMETRISEDCOMPOSITECURVESEGMENT,IFCCOMPOSITECURVESEGMENT,IFCSEGMENT,IFCSECTIONEDSPINE,IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE,IFCPOINTBYDISTANCEEXPRESSION,IFCPOINT,IFCPLANARBOX,IFCPLANAREXTENT,IFCAXIS2PLACEMENTLINEAR,IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT,IFCPLACEMENT,IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT,IFCLIGHTSOURCE,IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE,IFCHALFSPACESOLID,IFCGEOMETRICCURVESET,IFCGEOMETRICSET];
InversePropertyDef['IFC4.3'][IFCGEOMETRICREPRESENTATIONITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (d: RawLineData) => { new IFC4_3.IfcGeometricRepresentationSubContext(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new Reference(d.arguments[2].value), new Reference<IFC4_3.IfcGeometricRepresentationContext>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPositiveRatioMeasure(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeometricRepresentationSubContext(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (i:IFC4_3.IfcGeometricRepresentationSubContext):unknown[] => { return [i.ContextIdentifier, i.ContextType, i.CoordinateSpaceDimension, i.Precision, i.WorldCoordinateSystem, i.TrueNorth, i.ParentContext, i.TargetScale, i.TargetView, i.UserDefinedTargetView]; }
InversePropertyDef['IFC4.3'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],['HasSubContexts',IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],['HasCoordinateOperation',IFCCOORDINATEOPERATION,0,true],];
FromRawLineData['IFC4_3'][IFCGEOMETRICSET] = (d: RawLineData) => { new IFC4_3.IfcGeometricSet(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCGEOMETRICSET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeometricSet(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCGEOMETRICSET] = (i:IFC4_3.IfcGeometricSet):unknown[] => { return [i.Elements]; }
InheritanceDef['IFC4.3'][IFCGEOMETRICSET] = [IFCGEOMETRICCURVESET];
InversePropertyDef['IFC4.3'][IFCGEOMETRICSET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCGRIDPLACEMENT] = (d: RawLineData) => { new IFC4_3.IfcGridPlacement(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[0].value), new Reference<IFC4_3.IfcVirtualGridIntersection>(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCGRIDPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGridPlacement(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCGRIDPLACEMENT] = (i:IFC4_3.IfcGridPlacement):unknown[] => { return [i.PlacementRelTo, i.PlacementLocation, i.PlacementRefDirection]; }
InversePropertyDef['IFC4.3'][IFCGRIDPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCOBJECTPLACEMENT,0,true],];
FromRawLineData['IFC4_3'][IFCHALFSPACESOLID] = (d: RawLineData) => { new IFC4_3.IfcHalfSpaceSolid(d.ID, new Reference<IFC4_3.IfcSurface>(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCHALFSPACESOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcHalfSpaceSolid(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCHALFSPACESOLID] = (i:IFC4_3.IfcHalfSpaceSolid):unknown[] => { return [i.BaseSurface, i.AgreementFlag]; }
InheritanceDef['IFC4.3'][IFCHALFSPACESOLID] = [IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE];
InversePropertyDef['IFC4.3'][IFCHALFSPACESOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCIMAGETEXTURE] = (d: RawLineData) => { new IFC4_3.IfcImageTexture(d.ID, new IFC4_3.IfcBoolean(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcIdentifier(p.value)), new IFC4_3.IfcURIReference(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCIMAGETEXTURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcImageTexture(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCIMAGETEXTURE] = (i:IFC4_3.IfcImageTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.Mode, i.TextureTransform, i.Parameter, i.URLReference]; }
InversePropertyDef['IFC4.3'][IFCIMAGETEXTURE] = [['IsMappedBy',IFCTEXTURECOORDINATE,0,true],['UsedInStyles',IFCSURFACESTYLEWITHTEXTURES,0,true],];
FromRawLineData['IFC4_3'][IFCINDEXEDCOLOURMAP] = (d: RawLineData) => { new IFC4_3.IfcIndexedColourMap(d.ID, new Reference<IFC4_3.IfcTessellatedFaceSet>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[1].value), new Reference<IFC4_3.IfcColourRgbList>(d.arguments[2].value), d.arguments[3].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value))); }
Constructors['IFC4_3'][IFCINDEXEDCOLOURMAP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIndexedColourMap(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCINDEXEDCOLOURMAP] = (i:IFC4_3.IfcIndexedColourMap):unknown[] => { return [i.MappedTo, i.Opacity, i.Colours, i.ColourIndex]; }
FromRawLineData['IFC4_3'][IFCINDEXEDTEXTUREMAP] = (d: RawLineData) => { new IFC4_3.IfcIndexedTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSurfaceTexture>(p.value)), new Reference<IFC4_3.IfcTessellatedFaceSet>(d.arguments[1].value), new Reference<IFC4_3.IfcTextureVertexList>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCINDEXEDTEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIndexedTextureMap(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCINDEXEDTEXTUREMAP] = (i:IFC4_3.IfcIndexedTextureMap):unknown[] => { return [i.Maps, i.MappedTo, i.TexCoords]; }
InheritanceDef['IFC4.3'][IFCINDEXEDTEXTUREMAP] = [IFCINDEXEDPOLYGONALTEXTUREMAP,IFCINDEXEDTRIANGLETEXTUREMAP];
FromRawLineData['IFC4_3'][IFCINDEXEDTRIANGLETEXTUREMAP] = (d: RawLineData) => { new IFC4_3.IfcIndexedTriangleTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSurfaceTexture>(p.value)), new Reference<IFC4_3.IfcTessellatedFaceSet>(d.arguments[1].value), new Reference<IFC4_3.IfcTextureVertexList>(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value))); }
Constructors['IFC4_3'][IFCINDEXEDTRIANGLETEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIndexedTriangleTextureMap(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCINDEXEDTRIANGLETEXTUREMAP] = (i:IFC4_3.IfcIndexedTriangleTextureMap):unknown[] => { return [i.Maps, i.MappedTo, i.TexCoords, i.TexCoordIndex]; }
FromRawLineData['IFC4_3'][IFCIRREGULARTIMESERIES] = (d: RawLineData) => { new IFC4_3.IfcIrregularTimeSeries(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new IFC4_3.IfcDateTime(d.arguments[2].value), new IFC4_3.IfcDateTime(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcIrregularTimeSeriesValue>(p.value))); }
Constructors['IFC4_3'][IFCIRREGULARTIMESERIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIrregularTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCIRREGULARTIMESERIES] = (i:IFC4_3.IfcIrregularTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit, i.Values]; }
InversePropertyDef['IFC4.3'][IFCIRREGULARTIMESERIES] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCLAGTIME] = (d: RawLineData) => { new IFC4_3.IfcLagTime(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), TypeInitialiser('IFC4_3',d.arguments[3]), d.arguments[4]); }
Constructors['IFC4_3'][IFCLAGTIME] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLagTime(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCLAGTIME] = (i:IFC4_3.IfcLagTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, Labelise(i.LagValue), i.DurationType]; }
FromRawLineData['IFC4_3'][IFCLIGHTSOURCE] = (d: RawLineData) => { new IFC4_3.IfcLightSource(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCLIGHTSOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightSource(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCLIGHTSOURCE] = (i:IFC4_3.IfcLightSource):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity]; }
InheritanceDef['IFC4.3'][IFCLIGHTSOURCE] = [IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT];
InversePropertyDef['IFC4.3'][IFCLIGHTSOURCE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCLIGHTSOURCEAMBIENT] = (d: RawLineData) => { new IFC4_3.IfcLightSourceAmbient(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCLIGHTSOURCEAMBIENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightSourceAmbient(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCLIGHTSOURCEAMBIENT] = (i:IFC4_3.IfcLightSourceAmbient):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity]; }
InversePropertyDef['IFC4.3'][IFCLIGHTSOURCEAMBIENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCLIGHTSOURCEDIRECTIONAL] = (d: RawLineData) => { new IFC4_3.IfcLightSourceDirectional(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC4_3.IfcDirection>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCLIGHTSOURCEDIRECTIONAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightSourceDirectional(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCLIGHTSOURCEDIRECTIONAL] = (i:IFC4_3.IfcLightSourceDirectional):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Orientation]; }
InversePropertyDef['IFC4.3'][IFCLIGHTSOURCEDIRECTIONAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCLIGHTSOURCEGONIOMETRIC] = (d: RawLineData) => { new IFC4_3.IfcLightSourceGoniometric(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcColourRgb>(d.arguments[5].value), new IFC4_3.IfcThermodynamicTemperatureMeasure(d.arguments[6].value), new IFC4_3.IfcLuminousFluxMeasure(d.arguments[7].value), d.arguments[8], new Reference(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCLIGHTSOURCEGONIOMETRIC] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightSourceGoniometric(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCLIGHTSOURCEGONIOMETRIC] = (i:IFC4_3.IfcLightSourceGoniometric):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.ColourAppearance, i.ColourTemperature, i.LuminousFlux, i.LightEmissionSource, i.LightDistributionDataSource]; }
InversePropertyDef['IFC4.3'][IFCLIGHTSOURCEGONIOMETRIC] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCLIGHTSOURCEPOSITIONAL] = (d: RawLineData) => { new IFC4_3.IfcLightSourcePositional(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcReal(d.arguments[6].value), new IFC4_3.IfcReal(d.arguments[7].value), new IFC4_3.IfcReal(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCLIGHTSOURCEPOSITIONAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightSourcePositional(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCLIGHTSOURCEPOSITIONAL] = (i:IFC4_3.IfcLightSourcePositional):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.Radius, i.ConstantAttenuation, i.DistanceAttenuation, i.QuadricAttenuation]; }
InheritanceDef['IFC4.3'][IFCLIGHTSOURCEPOSITIONAL] = [IFCLIGHTSOURCESPOT];
InversePropertyDef['IFC4.3'][IFCLIGHTSOURCEPOSITIONAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCLIGHTSOURCESPOT] = (d: RawLineData) => { new IFC4_3.IfcLightSourceSpot(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new Reference<IFC4_3.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcReal(d.arguments[6].value), new IFC4_3.IfcReal(d.arguments[7].value), new IFC4_3.IfcReal(d.arguments[8].value), new Reference<IFC4_3.IfcDirection>(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcReal(d.arguments[10].value), new IFC4_3.IfcPositivePlaneAngleMeasure(d.arguments[11].value), new IFC4_3.IfcPositivePlaneAngleMeasure(d.arguments[12].value)); }
Constructors['IFC4_3'][IFCLIGHTSOURCESPOT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightSourceSpot(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCLIGHTSOURCESPOT] = (i:IFC4_3.IfcLightSourceSpot):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.Radius, i.ConstantAttenuation, i.DistanceAttenuation, i.QuadricAttenuation, i.Orientation, i.ConcentrationExponent, i.SpreadAngle, i.BeamWidthAngle]; }
InversePropertyDef['IFC4.3'][IFCLIGHTSOURCESPOT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCLINEARPLACEMENT] = (d: RawLineData) => { new IFC4_3.IfcLinearPlacement(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[0].value), new Reference<IFC4_3.IfcAxis2PlacementLinear>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCLINEARPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLinearPlacement(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCLINEARPLACEMENT] = (i:IFC4_3.IfcLinearPlacement):unknown[] => { return [i.PlacementRelTo, i.RelativePlacement, i.CartesianPosition]; }
InversePropertyDef['IFC4.3'][IFCLINEARPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCOBJECTPLACEMENT,0,true],];
FromRawLineData['IFC4_3'][IFCLOCALPLACEMENT] = (d: RawLineData) => { new IFC4_3.IfcLocalPlacement(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[0].value), new Reference(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCLOCALPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLocalPlacement(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCLOCALPLACEMENT] = (i:IFC4_3.IfcLocalPlacement):unknown[] => { return [i.PlacementRelTo, i.RelativePlacement]; }
InversePropertyDef['IFC4.3'][IFCLOCALPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCOBJECTPLACEMENT,0,true],];
FromRawLineData['IFC4_3'][IFCLOOP] = (d: RawLineData) => { new IFC4_3.IfcLoop(d.ID, ); }
Constructors['IFC4_3'][IFCLOOP] = (expressID:number, _:any) => { return new IFC4_3.IfcLoop(expressID, ); }
ToRawLineData['IFC4_3'][IFCLOOP] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCLOOP] = [IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP];
InversePropertyDef['IFC4.3'][IFCLOOP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCMAPPEDITEM] = (d: RawLineData) => { new IFC4_3.IfcMappedItem(d.ID, new Reference<IFC4_3.IfcRepresentationMap>(d.arguments[0].value), new Reference<IFC4_3.IfcCartesianTransformationOperator>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCMAPPEDITEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMappedItem(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCMAPPEDITEM] = (i:IFC4_3.IfcMappedItem):unknown[] => { return [i.MappingSource, i.MappingTarget]; }
InversePropertyDef['IFC4.3'][IFCMAPPEDITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCMATERIAL] = (d: RawLineData) => { new IFC4_3.IfcMaterial(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCMATERIAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterial(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCMATERIAL] = (i:IFC4_3.IfcMaterial):unknown[] => { return [i.Name, i.Description, i.Category]; }
InversePropertyDef['IFC4.3'][IFCMATERIAL] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['HasRepresentation',IFCMATERIALDEFINITIONREPRESENTATION,3,true],['IsRelatedWith',IFCMATERIALRELATIONSHIP,3,true],['RelatesTo',IFCMATERIALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCMATERIALCONSTITUENT] = (d: RawLineData) => { new IFC4_3.IfcMaterialConstituent(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcMaterial>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCMATERIALCONSTITUENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialConstituent(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCMATERIALCONSTITUENT] = (i:IFC4_3.IfcMaterialConstituent):unknown[] => { return [i.Name, i.Description, i.Material, i.Fraction, i.Category]; }
InversePropertyDef['IFC4.3'][IFCMATERIALCONSTITUENT] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialConstituentSet',IFCMATERIALCONSTITUENTSET,2,false],];
FromRawLineData['IFC4_3'][IFCMATERIALCONSTITUENTSET] = (d: RawLineData) => { new IFC4_3.IfcMaterialConstituentSet(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcMaterialConstituent>(p.value))); }
Constructors['IFC4_3'][IFCMATERIALCONSTITUENTSET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialConstituentSet(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCMATERIALCONSTITUENTSET] = (i:IFC4_3.IfcMaterialConstituentSet):unknown[] => { return [i.Name, i.Description, i.MaterialConstituents]; }
InversePropertyDef['IFC4.3'][IFCMATERIALCONSTITUENTSET] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCMATERIALDEFINITIONREPRESENTATION] = (d: RawLineData) => { new IFC4_3.IfcMaterialDefinitionRepresentation(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcRepresentation>(p.value)), new Reference<IFC4_3.IfcMaterial>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCMATERIALDEFINITIONREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialDefinitionRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCMATERIALDEFINITIONREPRESENTATION] = (i:IFC4_3.IfcMaterialDefinitionRepresentation):unknown[] => { return [i.Name, i.Description, i.Representations, i.RepresentedMaterial]; }
FromRawLineData['IFC4_3'][IFCMATERIALLAYERSETUSAGE] = (d: RawLineData) => { new IFC4_3.IfcMaterialLayerSetUsage(d.ID, new Reference<IFC4_3.IfcMaterialLayerSet>(d.arguments[0].value), d.arguments[1], d.arguments[2], new IFC4_3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCMATERIALLAYERSETUSAGE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialLayerSetUsage(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCMATERIALLAYERSETUSAGE] = (i:IFC4_3.IfcMaterialLayerSetUsage):unknown[] => { return [i.ForLayerSet, i.LayerSetDirection, i.DirectionSense, i.OffsetFromReferenceLine, i.ReferenceExtent]; }
InversePropertyDef['IFC4.3'][IFCMATERIALLAYERSETUSAGE] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],];
FromRawLineData['IFC4_3'][IFCMATERIALPROFILESETUSAGE] = (d: RawLineData) => { new IFC4_3.IfcMaterialProfileSetUsage(d.ID, new Reference<IFC4_3.IfcMaterialProfileSet>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcCardinalPointReference(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCMATERIALPROFILESETUSAGE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialProfileSetUsage(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCMATERIALPROFILESETUSAGE] = (i:IFC4_3.IfcMaterialProfileSetUsage):unknown[] => { return [i.ForProfileSet, i.CardinalPoint, i.ReferenceExtent]; }
InheritanceDef['IFC4.3'][IFCMATERIALPROFILESETUSAGE] = [IFCMATERIALPROFILESETUSAGETAPERING];
InversePropertyDef['IFC4.3'][IFCMATERIALPROFILESETUSAGE] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],];
FromRawLineData['IFC4_3'][IFCMATERIALPROFILESETUSAGETAPERING] = (d: RawLineData) => { new IFC4_3.IfcMaterialProfileSetUsageTapering(d.ID, new Reference<IFC4_3.IfcMaterialProfileSet>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcCardinalPointReference(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value), new Reference<IFC4_3.IfcMaterialProfileSet>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcCardinalPointReference(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCMATERIALPROFILESETUSAGETAPERING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialProfileSetUsageTapering(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCMATERIALPROFILESETUSAGETAPERING] = (i:IFC4_3.IfcMaterialProfileSetUsageTapering):unknown[] => { return [i.ForProfileSet, i.CardinalPoint, i.ReferenceExtent, i.ForProfileEndSet, i.CardinalEndPoint]; }
InversePropertyDef['IFC4.3'][IFCMATERIALPROFILESETUSAGETAPERING] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],];
FromRawLineData['IFC4_3'][IFCMATERIALPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcMaterialProperties(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcProperty>(p.value)), new Reference<IFC4_3.IfcMaterialDefinition>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialProperties(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCMATERIALPROPERTIES] = (i:IFC4_3.IfcMaterialProperties):unknown[] => { return [i.Name, i.Description, i.Properties, i.Material]; }
InversePropertyDef['IFC4.3'][IFCMATERIALPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCMATERIALRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcMaterialRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcMaterial>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcMaterial>(p.value)), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCMATERIALRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMaterialRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCMATERIALRELATIONSHIP] = (i:IFC4_3.IfcMaterialRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingMaterial, i.RelatedMaterials, i.MaterialExpression]; }
FromRawLineData['IFC4_3'][IFCMIRROREDPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcMirroredProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new Reference<IFC4_3.IfcProfileDef>(d.arguments[2].value), new Reference<IFC4_3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCMIRROREDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMirroredProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCMIRROREDPROFILEDEF] = (i:IFC4_3.IfcMirroredProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.ParentProfile, i.Operator, i.Label]; }
InversePropertyDef['IFC4.3'][IFCMIRROREDPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCOBJECTDEFINITION] = (d: RawLineData) => { new IFC4_3.IfcObjectDefinition(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCOBJECTDEFINITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcObjectDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCOBJECTDEFINITION] = (i:IFC4_3.IfcObjectDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCOBJECTDEFINITION] = [IFCASSET,IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILTSYSTEM,IFCBUILDINGSYSTEM,IFCZONE,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCWORKCALENDAR,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCALIGNMENT,IFCLINEARPOSITIONINGELEMENT,IFCGRID,IFCREFERENT,IFCPOSITIONINGELEMENT,IFCDISTRIBUTIONPORT,IFCPORT,IFCALIGNMENTVERTICAL,IFCALIGNMENTSEGMENT,IFCALIGNMENTHORIZONTAL,IFCALIGNMENTCANT,IFCLINEARELEMENT,IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCELECTRICFLOWTREATMENTDEVICE,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSIGNAL,IFCSANITARYTERMINAL,IFCOUTLET,IFCMOBILETELECOMMUNICATIONSAPPLIANCE,IFCMEDICALDEVICE,IFCLIQUIDTERMINAL,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCONVEYORSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBUILDINGELEMENTPROXY,IFCBEARING,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCTRACKELEMENT,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCRAIL,IFCPLATE,IFCPAVEMENT,IFCNAVIGATIONELEMENT,IFCMOORINGDEVICE,IFCMEMBER,IFCKERB,IFCFOOTING,IFCREINFORCEDSOIL,IFCEARTHWORKSFILL,IFCEARTHWORKSELEMENT,IFCDOOR,IFCCAISSONFOUNDATION,IFCPILE,IFCDEEPFOUNDATION,IFCCURTAINWALL,IFCCOVERING,IFCCOURSE,IFCCOLUMN,IFCCHIMNEY,IFCBUILTELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCVEHICLE,IFCTRANSPORTATIONDEVICE,IFCGEOSLICE,IFCGEOMODEL,IFCBOREHOLE,IFCGEOTECHNICALASSEMBLY,IFCGEOTECHNICALSTRATUM,IFCGEOTECHNICALELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCEARTHWORKSCUT,IFCVOIDINGFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCVIBRATIONDAMPER,IFCSIGN,IFCREINFORCINGBAR,IFCTENDONCONDUIT,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCIMPACTPROTECTIONDEVICE,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBRIDGEPART,IFCROADPART,IFCRAILWAYPART,IFCMARINEPART,IFCFACILITYPARTCOMMON,IFCFACILITYPART,IFCBUILDING,IFCBRIDGE,IFCROAD,IFCRAILWAY,IFCMARINEFACILITY,IFCFACILITY,IFCBUILDINGSTOREY,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALELEMENT,IFCPRODUCT,IFCPROCEDURE,IFCEVENT,IFCTASK,IFCPROCESS,IFCOBJECT,IFCPROJECTLIBRARY,IFCPROJECT,IFCCONTEXT,IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE,IFCCONSTRUCTIONRESOURCETYPE,IFCTYPERESOURCE,IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALELEMENTTYPE,IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCVIBRATIONDAMPERTYPE,IFCSIGNTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONCONDUITTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCIMPACTPROTECTIONDEVICETYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCELECTRICFLOWTREATMENTDEVICETYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSIGNALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE,IFCMEDICALDEVICETYPE,IFCLIQUIDTERMINALTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCONVEYORSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEARINGTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCTRACKELEMENTTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCRAILTYPE,IFCPLATETYPE,IFCPAVEMENTTYPE,IFCNAVIGATIONELEMENTTYPE,IFCMOORINGDEVICETYPE,IFCMEMBERTYPE,IFCKERBTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCAISSONFOUNDATIONTYPE,IFCPILETYPE,IFCDEEPFOUNDATIONTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOURSETYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILTELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCVEHICLETYPE,IFCTRANSPORTATIONDEVICETYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCTYPEPRODUCT,IFCTASKTYPE,IFCPROCEDURETYPE,IFCEVENTTYPE,IFCTYPEPROCESS,IFCTYPEOBJECT];
InversePropertyDef['IFC4.3'][IFCOBJECTDEFINITION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],];
FromRawLineData['IFC4_3'][IFCOPENCROSSPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcOpenCrossProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), new IFC4_3.IfcBoolean(d.arguments[2].value), d.arguments[3].map((p:any) => new IFC4_3.IfcNonNegativeLengthMeasure(p.value)), d.arguments[4].map((p:any) => new IFC4_3.IfcPlaneAngleMeasure(p.value)), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new IFC4_3.IfcLabel(p.value)), !d.arguments[6] ? null :new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCOPENCROSSPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOpenCrossProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCOPENCROSSPROFILEDEF] = (i:IFC4_3.IfcOpenCrossProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.HorizontalWidths, i.Widths, i.Slopes, i.Tags, i.OffsetPoint]; }
InversePropertyDef['IFC4.3'][IFCOPENCROSSPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCOPENSHELL] = (d: RawLineData) => { new IFC4_3.IfcOpenShell(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcFace>(p.value))); }
Constructors['IFC4_3'][IFCOPENSHELL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOpenShell(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCOPENSHELL] = (i:IFC4_3.IfcOpenShell):unknown[] => { return [i.CfsFaces]; }
InversePropertyDef['IFC4.3'][IFCOPENSHELL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCORGANIZATIONRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcOrganizationRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcOrganization>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcOrganization>(p.value))); }
Constructors['IFC4_3'][IFCORGANIZATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOrganizationRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCORGANIZATIONRELATIONSHIP] = (i:IFC4_3.IfcOrganizationRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingOrganization, i.RelatedOrganizations]; }
FromRawLineData['IFC4_3'][IFCORIENTEDEDGE] = (d: RawLineData) => { new IFC4_3.IfcOrientedEdge(d.ID, new Reference<IFC4_3.IfcVertex>(d.arguments[0].value), new Reference<IFC4_3.IfcEdge>(d.arguments[1].value), new IFC4_3.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCORIENTEDEDGE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOrientedEdge(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCORIENTEDEDGE] = (i:IFC4_3.IfcOrientedEdge):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.EdgeElement, i.Orientation]; }
InversePropertyDef['IFC4.3'][IFCORIENTEDEDGE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPARAMETERIZEDPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcParameterizedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCPARAMETERIZEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcParameterizedProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCPARAMETERIZEDPROFILEDEF] = (i:IFC4_3.IfcParameterizedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position]; }
InheritanceDef['IFC4.3'][IFCPARAMETERIZEDPROFILEDEF] = [IFCLSHAPEPROFILEDEF,IFCISHAPEPROFILEDEF,IFCELLIPSEPROFILEDEF,IFCCIRCLEHOLLOWPROFILEDEF,IFCCIRCLEPROFILEDEF,IFCCSHAPEPROFILEDEF,IFCASYMMETRICISHAPEPROFILEDEF,IFCZSHAPEPROFILEDEF,IFCUSHAPEPROFILEDEF,IFCTRAPEZIUMPROFILEDEF,IFCTSHAPEPROFILEDEF,IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF,IFCRECTANGLEPROFILEDEF];
InversePropertyDef['IFC4.3'][IFCPARAMETERIZEDPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCPATH] = (d: RawLineData) => { new IFC4_3.IfcPath(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcOrientedEdge>(p.value))); }
Constructors['IFC4_3'][IFCPATH] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPath(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPATH] = (i:IFC4_3.IfcPath):unknown[] => { return [i.EdgeList]; }
InversePropertyDef['IFC4.3'][IFCPATH] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPHYSICALCOMPLEXQUANTITY] = (d: RawLineData) => { new IFC4_3.IfcPhysicalComplexQuantity(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcPhysicalQuantity>(p.value)), new IFC4_3.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCPHYSICALCOMPLEXQUANTITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPhysicalComplexQuantity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCPHYSICALCOMPLEXQUANTITY] = (i:IFC4_3.IfcPhysicalComplexQuantity):unknown[] => { return [i.Name, i.Description, i.HasQuantities, i.Discrimination, i.Quality, i.Usage]; }
InversePropertyDef['IFC4.3'][IFCPHYSICALCOMPLEXQUANTITY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4_3'][IFCPIXELTEXTURE] = (d: RawLineData) => { new IFC4_3.IfcPixelTexture(d.ID, new IFC4_3.IfcBoolean(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcIdentifier(p.value)), new IFC4_3.IfcInteger(d.arguments[5].value), new IFC4_3.IfcInteger(d.arguments[6].value), new IFC4_3.IfcInteger(d.arguments[7].value), d.arguments[8].map((p:any) => new IFC4_3.IfcBinary(p.value))); }
Constructors['IFC4_3'][IFCPIXELTEXTURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPixelTexture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPIXELTEXTURE] = (i:IFC4_3.IfcPixelTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.Mode, i.TextureTransform, i.Parameter, i.Width, i.Height, i.ColourComponents, i.Pixel]; }
InversePropertyDef['IFC4.3'][IFCPIXELTEXTURE] = [['IsMappedBy',IFCTEXTURECOORDINATE,0,true],['UsedInStyles',IFCSURFACESTYLEWITHTEXTURES,0,true],];
FromRawLineData['IFC4_3'][IFCPLACEMENT] = (d: RawLineData) => { new IFC4_3.IfcPlacement(d.ID, new Reference<IFC4_3.IfcPoint>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPlacement(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPLACEMENT] = (i:IFC4_3.IfcPlacement):unknown[] => { return [i.Location]; }
InheritanceDef['IFC4.3'][IFCPLACEMENT] = [IFCAXIS2PLACEMENTLINEAR,IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT];
InversePropertyDef['IFC4.3'][IFCPLACEMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPLANAREXTENT] = (d: RawLineData) => { new IFC4_3.IfcPlanarExtent(d.ID, new IFC4_3.IfcLengthMeasure(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCPLANAREXTENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPlanarExtent(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCPLANAREXTENT] = (i:IFC4_3.IfcPlanarExtent):unknown[] => { return [i.SizeInX, i.SizeInY]; }
InheritanceDef['IFC4.3'][IFCPLANAREXTENT] = [IFCPLANARBOX];
InversePropertyDef['IFC4.3'][IFCPLANAREXTENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPOINT] = (d: RawLineData) => { new IFC4_3.IfcPoint(d.ID, ); }
Constructors['IFC4_3'][IFCPOINT] = (expressID:number, _:any) => { return new IFC4_3.IfcPoint(expressID, ); }
ToRawLineData['IFC4_3'][IFCPOINT] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCPOINT] = [IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE,IFCPOINTBYDISTANCEEXPRESSION];
InversePropertyDef['IFC4.3'][IFCPOINT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPOINTBYDISTANCEEXPRESSION] = (d: RawLineData) => { new IFC4_3.IfcPointByDistanceExpression(d.ID, TypeInitialiser('IFC4_3',d.arguments[0]), !d.arguments[1] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value), new Reference<IFC4_3.IfcCurve>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCPOINTBYDISTANCEEXPRESSION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPointByDistanceExpression(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCPOINTBYDISTANCEEXPRESSION] = (i:IFC4_3.IfcPointByDistanceExpression):unknown[] => { return [Labelise(i.DistanceAlong), i.OffsetLateral, i.OffsetVertical, i.OffsetLongitudinal, i.BasisCurve]; }
InversePropertyDef['IFC4.3'][IFCPOINTBYDISTANCEEXPRESSION] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPOINTONCURVE] = (d: RawLineData) => { new IFC4_3.IfcPointOnCurve(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), new IFC4_3.IfcParameterValue(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCPOINTONCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPointOnCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCPOINTONCURVE] = (i:IFC4_3.IfcPointOnCurve):unknown[] => { return [i.BasisCurve, i.PointParameter]; }
InversePropertyDef['IFC4.3'][IFCPOINTONCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPOINTONSURFACE] = (d: RawLineData) => { new IFC4_3.IfcPointOnSurface(d.ID, new Reference<IFC4_3.IfcSurface>(d.arguments[0].value), new IFC4_3.IfcParameterValue(d.arguments[1].value), new IFC4_3.IfcParameterValue(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCPOINTONSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPointOnSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCPOINTONSURFACE] = (i:IFC4_3.IfcPointOnSurface):unknown[] => { return [i.BasisSurface, i.PointParameterU, i.PointParameterV]; }
InversePropertyDef['IFC4.3'][IFCPOINTONSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPOLYLOOP] = (d: RawLineData) => { new IFC4_3.IfcPolyLoop(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcCartesianPoint>(p.value))); }
Constructors['IFC4_3'][IFCPOLYLOOP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPolyLoop(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPOLYLOOP] = (i:IFC4_3.IfcPolyLoop):unknown[] => { return [i.Polygon]; }
InversePropertyDef['IFC4.3'][IFCPOLYLOOP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPOLYGONALBOUNDEDHALFSPACE] = (d: RawLineData) => { new IFC4_3.IfcPolygonalBoundedHalfSpace(d.ID, new Reference<IFC4_3.IfcSurface>(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value), new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[2].value), new Reference<IFC4_3.IfcBoundedCurve>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPOLYGONALBOUNDEDHALFSPACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPolygonalBoundedHalfSpace(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPOLYGONALBOUNDEDHALFSPACE] = (i:IFC4_3.IfcPolygonalBoundedHalfSpace):unknown[] => { return [i.BaseSurface, i.AgreementFlag, i.Position, i.PolygonalBoundary]; }
InversePropertyDef['IFC4.3'][IFCPOLYGONALBOUNDEDHALFSPACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPREDEFINEDITEM] = (d: RawLineData) => { new IFC4_3.IfcPreDefinedItem(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCPREDEFINEDITEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPreDefinedItem(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPREDEFINEDITEM] = (i:IFC4_3.IfcPreDefinedItem):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCPREDEFINEDITEM] = [IFCDRAUGHTINGPREDEFINEDCURVEFONT,IFCPREDEFINEDCURVEFONT,IFCDRAUGHTINGPREDEFINEDCOLOUR,IFCPREDEFINEDCOLOUR,IFCTEXTSTYLEFONTMODEL,IFCPREDEFINEDTEXTFONT];
FromRawLineData['IFC4_3'][IFCPREDEFINEDPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcPreDefinedProperties(d.ID, ); }
Constructors['IFC4_3'][IFCPREDEFINEDPROPERTIES] = (expressID:number, _:any) => { return new IFC4_3.IfcPreDefinedProperties(expressID, ); }
ToRawLineData['IFC4_3'][IFCPREDEFINEDPROPERTIES] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCPREDEFINEDPROPERTIES] = [IFCSECTIONREINFORCEMENTPROPERTIES,IFCSECTIONPROPERTIES,IFCREINFORCEMENTBARPROPERTIES];
InversePropertyDef['IFC4.3'][IFCPREDEFINEDPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCPREDEFINEDTEXTFONT] = (d: RawLineData) => { new IFC4_3.IfcPreDefinedTextFont(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCPREDEFINEDTEXTFONT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPreDefinedTextFont(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPREDEFINEDTEXTFONT] = (i:IFC4_3.IfcPreDefinedTextFont):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCPREDEFINEDTEXTFONT] = [IFCTEXTSTYLEFONTMODEL];
FromRawLineData['IFC4_3'][IFCPRODUCTDEFINITIONSHAPE] = (d: RawLineData) => { new IFC4_3.IfcProductDefinitionShape(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcRepresentation>(p.value))); }
Constructors['IFC4_3'][IFCPRODUCTDEFINITIONSHAPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProductDefinitionShape(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCPRODUCTDEFINITIONSHAPE] = (i:IFC4_3.IfcProductDefinitionShape):unknown[] => { return [i.Name, i.Description, i.Representations]; }
InversePropertyDef['IFC4.3'][IFCPRODUCTDEFINITIONSHAPE] = [['ShapeOfProduct',IFCPRODUCT,6,true],['HasShapeAspects',IFCSHAPEASPECT,4,true],];
FromRawLineData['IFC4_3'][IFCPROFILEPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcProfileProperties(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcProperty>(p.value)), new Reference<IFC4_3.IfcProfileDef>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROFILEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProfileProperties(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROFILEPROPERTIES] = (i:IFC4_3.IfcProfileProperties):unknown[] => { return [i.Name, i.Description, i.Properties, i.ProfileDefinition]; }
InversePropertyDef['IFC4.3'][IFCPROFILEPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCPROPERTY] = (d: RawLineData) => { new IFC4_3.IfcProperty(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCPROPERTY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProperty(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCPROPERTY] = (i:IFC4_3.IfcProperty):unknown[] => { return [i.Name, i.Specification]; }
InheritanceDef['IFC4.3'][IFCPROPERTY] = [IFCCOMPLEXPROPERTY,IFCPROPERTYTABLEVALUE,IFCPROPERTYSINGLEVALUE,IFCPROPERTYREFERENCEVALUE,IFCPROPERTYLISTVALUE,IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYBOUNDEDVALUE,IFCSIMPLEPROPERTY];
InversePropertyDef['IFC4.3'][IFCPROPERTY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYDEFINITION] = (d: RawLineData) => { new IFC4_3.IfcPropertyDefinition(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROPERTYDEFINITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROPERTYDEFINITION] = (i:IFC4_3.IfcPropertyDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCPROPERTYDEFINITION] = [IFCCOMPLEXPROPERTYTEMPLATE,IFCSIMPLEPROPERTYTEMPLATE,IFCPROPERTYTEMPLATE,IFCPROPERTYSETTEMPLATE,IFCPROPERTYTEMPLATEDEFINITION,IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCPREDEFINEDPROPERTYSET,IFCELEMENTQUANTITY,IFCQUANTITYSET,IFCPROPERTYSETDEFINITION];
InversePropertyDef['IFC4.3'][IFCPROPERTYDEFINITION] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcPropertyDependencyRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcProperty>(d.arguments[2].value), new Reference<IFC4_3.IfcProperty>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcText(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyDependencyRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (i:IFC4_3.IfcPropertyDependencyRelationship):unknown[] => { return [i.Name, i.Description, i.DependingProperty, i.DependantProperty, i.Expression]; }
FromRawLineData['IFC4_3'][IFCPROPERTYSETDEFINITION] = (d: RawLineData) => { new IFC4_3.IfcPropertySetDefinition(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROPERTYSETDEFINITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertySetDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROPERTYSETDEFINITION] = (i:IFC4_3.IfcPropertySetDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCPROPERTYSETDEFINITION] = [IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCPREDEFINEDPROPERTYSET,IFCELEMENTQUANTITY,IFCQUANTITYSET];
InversePropertyDef['IFC4.3'][IFCPROPERTYSETDEFINITION] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYTEMPLATEDEFINITION] = (d: RawLineData) => { new IFC4_3.IfcPropertyTemplateDefinition(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROPERTYTEMPLATEDEFINITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyTemplateDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROPERTYTEMPLATEDEFINITION] = (i:IFC4_3.IfcPropertyTemplateDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCPROPERTYTEMPLATEDEFINITION] = [IFCCOMPLEXPROPERTYTEMPLATE,IFCSIMPLEPROPERTYTEMPLATE,IFCPROPERTYTEMPLATE,IFCPROPERTYSETTEMPLATE];
InversePropertyDef['IFC4.3'][IFCPROPERTYTEMPLATEDEFINITION] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],];
FromRawLineData['IFC4_3'][IFCQUANTITYSET] = (d: RawLineData) => { new IFC4_3.IfcQuantitySet(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCQUANTITYSET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcQuantitySet(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCQUANTITYSET] = (i:IFC4_3.IfcQuantitySet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCQUANTITYSET] = [IFCELEMENTQUANTITY];
InversePropertyDef['IFC4.3'][IFCQUANTITYSET] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCRECTANGLEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcRectangleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCRECTANGLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRectangleProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCRECTANGLEPROFILEDEF] = (i:IFC4_3.IfcRectangleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim]; }
InheritanceDef['IFC4.3'][IFCRECTANGLEPROFILEDEF] = [IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF];
InversePropertyDef['IFC4.3'][IFCRECTANGLEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCREGULARTIMESERIES] = (d: RawLineData) => { new IFC4_3.IfcRegularTimeSeries(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new IFC4_3.IfcDateTime(d.arguments[2].value), new IFC4_3.IfcDateTime(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), new IFC4_3.IfcTimeMeasure(d.arguments[8].value), d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcTimeSeriesValue>(p.value))); }
Constructors['IFC4_3'][IFCREGULARTIMESERIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRegularTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCREGULARTIMESERIES] = (i:IFC4_3.IfcRegularTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit, i.TimeStep, i.Values]; }
InversePropertyDef['IFC4.3'][IFCREGULARTIMESERIES] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCREINFORCEMENTBARPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcReinforcementBarProperties(d.ID, new IFC4_3.IfcAreaMeasure(d.arguments[0].value), new IFC4_3.IfcLabel(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcCountMeasure(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCREINFORCEMENTBARPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcementBarProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCREINFORCEMENTBARPROPERTIES] = (i:IFC4_3.IfcReinforcementBarProperties):unknown[] => { return [i.TotalCrossSectionArea, i.SteelGrade, i.BarSurface, i.EffectiveDepth, i.NominalBarDiameter, i.BarCount]; }
InversePropertyDef['IFC4.3'][IFCREINFORCEMENTBARPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcRelationship(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCRELATIONSHIP] = (i:IFC4_3.IfcRelationship):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCRELATIONSHIP] = [IFCRELDEFINESBYTYPE,IFCRELDEFINESBYTEMPLATE,IFCRELDEFINESBYPROPERTIES,IFCRELDEFINESBYOBJECT,IFCRELDEFINES,IFCRELAGGREGATES,IFCRELADHERESTOELEMENT,IFCRELVOIDSELEMENT,IFCRELPROJECTSELEMENT,IFCRELNESTS,IFCRELDECOMPOSES,IFCRELDECLARES,IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELSPACEBOUNDARY1STLEVEL,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELPOSITIONS,IFCRELINTERFERESELEMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS,IFCRELCONNECTS,IFCRELASSOCIATESPROFILEDEF,IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL,IFCRELASSOCIATES,IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUPBYFACTOR,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTOCONTROL,IFCRELASSIGNSTOACTOR,IFCRELASSIGNS];
FromRawLineData['IFC4_3'][IFCRESOURCEAPPROVALRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcResourceApprovalRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference(p.value)), new Reference<IFC4_3.IfcApproval>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCRESOURCEAPPROVALRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcResourceApprovalRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCRESOURCEAPPROVALRELATIONSHIP] = (i:IFC4_3.IfcResourceApprovalRelationship):unknown[] => { return [i.Name, i.Description, i.RelatedResourceObjects, i.RelatingApproval]; }
FromRawLineData['IFC4_3'][IFCRESOURCECONSTRAINTRELATIONSHIP] = (d: RawLineData) => { new IFC4_3.IfcResourceConstraintRelationship(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new Reference<IFC4_3.IfcConstraint>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCRESOURCECONSTRAINTRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcResourceConstraintRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCRESOURCECONSTRAINTRELATIONSHIP] = (i:IFC4_3.IfcResourceConstraintRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingConstraint, i.RelatedResourceObjects]; }
FromRawLineData['IFC4_3'][IFCRESOURCETIME] = (d: RawLineData) => { new IFC4_3.IfcResourceTime(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcDuration(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPositiveRatioMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcDuration(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcBoolean(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcDateTime(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcDuration(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcPositiveRatioMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcDateTime(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcDateTime(d.arguments[14].value), !d.arguments[15] ? null :new IFC4_3.IfcDuration(d.arguments[15].value), !d.arguments[16] ? null :new IFC4_3.IfcPositiveRatioMeasure(d.arguments[16].value), !d.arguments[17] ? null :new IFC4_3.IfcPositiveRatioMeasure(d.arguments[17].value)); }
Constructors['IFC4_3'][IFCRESOURCETIME] = (expressID:number, args: any[]) => { return new IFC4_3.IfcResourceTime(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17]); }
ToRawLineData['IFC4_3'][IFCRESOURCETIME] = (i:IFC4_3.IfcResourceTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.ScheduleWork, i.ScheduleUsage, i.ScheduleStart, i.ScheduleFinish, i.ScheduleContour, i.LevelingDelay, i.IsOverAllocated, i.StatusTime, i.ActualWork, i.ActualUsage, i.ActualStart, i.ActualFinish, i.RemainingWork, i.RemainingUsage, i.Completion]; }
FromRawLineData['IFC4_3'][IFCROUNDEDRECTANGLEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcRoundedRectangleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCROUNDEDRECTANGLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRoundedRectangleProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCROUNDEDRECTANGLEPROFILEDEF] = (i:IFC4_3.IfcRoundedRectangleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim, i.RoundingRadius]; }
InversePropertyDef['IFC4.3'][IFCROUNDEDRECTANGLEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCSECTIONPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcSectionProperties(d.ID, d.arguments[0], new Reference<IFC4_3.IfcProfileDef>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcProfileDef>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCSECTIONPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSectionProperties(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSECTIONPROPERTIES] = (i:IFC4_3.IfcSectionProperties):unknown[] => { return [i.SectionType, i.StartProfile, i.EndProfile]; }
InversePropertyDef['IFC4.3'][IFCSECTIONPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCSECTIONREINFORCEMENTPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcSectionReinforcementProperties(d.ID, new IFC4_3.IfcLengthMeasure(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), d.arguments[3], new Reference<IFC4_3.IfcSectionProperties>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcReinforcementBarProperties>(p.value))); }
Constructors['IFC4_3'][IFCSECTIONREINFORCEMENTPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSectionReinforcementProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCSECTIONREINFORCEMENTPROPERTIES] = (i:IFC4_3.IfcSectionReinforcementProperties):unknown[] => { return [i.LongitudinalStartPosition, i.LongitudinalEndPosition, i.TransversePosition, i.ReinforcementRole, i.SectionDefinition, i.CrossSectionReinforcementDefinitions]; }
InversePropertyDef['IFC4.3'][IFCSECTIONREINFORCEMENTPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4_3'][IFCSECTIONEDSPINE] = (d: RawLineData) => { new IFC4_3.IfcSectionedSpine(d.ID, new Reference<IFC4_3.IfcCompositeCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcProfileDef>(p.value)), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcAxis2Placement3D>(p.value))); }
Constructors['IFC4_3'][IFCSECTIONEDSPINE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSectionedSpine(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSECTIONEDSPINE] = (i:IFC4_3.IfcSectionedSpine):unknown[] => { return [i.SpineCurve, i.CrossSections, i.CrossSectionPositions]; }
InversePropertyDef['IFC4.3'][IFCSECTIONEDSPINE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcSegment(d.ID, d.arguments[0]); }
Constructors['IFC4_3'][IFCSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSegment(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCSEGMENT] = (i:IFC4_3.IfcSegment):unknown[] => { return [i.Transition]; }
InheritanceDef['IFC4.3'][IFCSEGMENT] = [IFCCURVESEGMENT,IFCREPARAMETRISEDCOMPOSITECURVESEGMENT,IFCCOMPOSITECURVESEGMENT];
InversePropertyDef['IFC4.3'][IFCSEGMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['UsingCurves',IFCCOMPOSITECURVE,0,true],];
FromRawLineData['IFC4_3'][IFCSHELLBASEDSURFACEMODEL] = (d: RawLineData) => { new IFC4_3.IfcShellBasedSurfaceModel(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCSHELLBASEDSURFACEMODEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcShellBasedSurfaceModel(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCSHELLBASEDSURFACEMODEL] = (i:IFC4_3.IfcShellBasedSurfaceModel):unknown[] => { return [i.SbsmBoundary]; }
InversePropertyDef['IFC4.3'][IFCSHELLBASEDSURFACEMODEL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSIMPLEPROPERTY] = (d: RawLineData) => { new IFC4_3.IfcSimpleProperty(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCSIMPLEPROPERTY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSimpleProperty(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCSIMPLEPROPERTY] = (i:IFC4_3.IfcSimpleProperty):unknown[] => { return [i.Name, i.Specification]; }
InheritanceDef['IFC4.3'][IFCSIMPLEPROPERTY] = [IFCPROPERTYTABLEVALUE,IFCPROPERTYSINGLEVALUE,IFCPROPERTYREFERENCEVALUE,IFCPROPERTYLISTVALUE,IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYBOUNDEDVALUE];
InversePropertyDef['IFC4.3'][IFCSIMPLEPROPERTY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCSLIPPAGECONNECTIONCONDITION] = (d: RawLineData) => { new IFC4_3.IfcSlippageConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSLIPPAGECONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSlippageConnectionCondition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSLIPPAGECONNECTIONCONDITION] = (i:IFC4_3.IfcSlippageConnectionCondition):unknown[] => { return [i.Name, i.SlippageX, i.SlippageY, i.SlippageZ]; }
FromRawLineData['IFC4_3'][IFCSOLIDMODEL] = (d: RawLineData) => { new IFC4_3.IfcSolidModel(d.ID, ); }
Constructors['IFC4_3'][IFCSOLIDMODEL] = (expressID:number, _:any) => { return new IFC4_3.IfcSolidModel(expressID, ); }
ToRawLineData['IFC4_3'][IFCSOLIDMODEL] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCSOLIDMODEL] = [IFCSECTIONEDSOLIDHORIZONTAL,IFCSECTIONEDSOLID,IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLIDPOLYGONAL,IFCSWEPTDISKSOLID,IFCREVOLVEDAREASOLIDTAPERED,IFCREVOLVEDAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED,IFCEXTRUDEDAREASOLID,IFCSURFACECURVESWEPTAREASOLID,IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID,IFCDIRECTRIXCURVESWEPTAREASOLID,IFCSWEPTAREASOLID];
InversePropertyDef['IFC4.3'][IFCSOLIDMODEL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADLINEARFORCE] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadLinearForce(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLinearForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLinearForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLinearForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLinearMomentMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLinearMomentMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLinearMomentMeasure(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADLINEARFORCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadLinearForce(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADLINEARFORCE] = (i:IFC4_3.IfcStructuralLoadLinearForce):unknown[] => { return [i.Name, i.LinearForceX, i.LinearForceY, i.LinearForceZ, i.LinearMomentX, i.LinearMomentY, i.LinearMomentZ]; }
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADPLANARFORCE] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadPlanarForce(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcPlanarForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcPlanarForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcPlanarForceMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADPLANARFORCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadPlanarForce(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADPLANARFORCE] = (i:IFC4_3.IfcStructuralLoadPlanarForce):unknown[] => { return [i.Name, i.PlanarForceX, i.PlanarForceY, i.PlanarForceZ]; }
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadSingleDisplacement(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadSingleDisplacement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (i:IFC4_3.IfcStructuralLoadSingleDisplacement):unknown[] => { return [i.Name, i.DisplacementX, i.DisplacementY, i.DisplacementZ, i.RotationalDisplacementRX, i.RotationalDisplacementRY, i.RotationalDisplacementRZ]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = [IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadSingleDisplacementDistortion(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcCurvatureMeasure(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadSingleDisplacementDistortion(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (i:IFC4_3.IfcStructuralLoadSingleDisplacementDistortion):unknown[] => { return [i.Name, i.DisplacementX, i.DisplacementY, i.DisplacementZ, i.RotationalDisplacementRX, i.RotationalDisplacementRY, i.RotationalDisplacementRZ, i.Distortion]; }
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADSINGLEFORCE] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadSingleForce(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcTorqueMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcTorqueMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcTorqueMeasure(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADSINGLEFORCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadSingleForce(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADSINGLEFORCE] = (i:IFC4_3.IfcStructuralLoadSingleForce):unknown[] => { return [i.Name, i.ForceX, i.ForceY, i.ForceZ, i.MomentX, i.MomentY, i.MomentZ]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALLOADSINGLEFORCE] = [IFCSTRUCTURALLOADSINGLEFORCEWARPING];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadSingleForceWarping(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcTorqueMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcTorqueMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcTorqueMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcWarpingMomentMeasure(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadSingleForceWarping(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (i:IFC4_3.IfcStructuralLoadSingleForceWarping):unknown[] => { return [i.Name, i.ForceX, i.ForceY, i.ForceZ, i.MomentX, i.MomentY, i.MomentZ, i.WarpingMoment]; }
FromRawLineData['IFC4_3'][IFCSUBEDGE] = (d: RawLineData) => { new IFC4_3.IfcSubedge(d.ID, new Reference<IFC4_3.IfcVertex>(d.arguments[0].value), new Reference<IFC4_3.IfcVertex>(d.arguments[1].value), new Reference<IFC4_3.IfcEdge>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCSUBEDGE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSubedge(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSUBEDGE] = (i:IFC4_3.IfcSubedge):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.ParentEdge]; }
InversePropertyDef['IFC4.3'][IFCSUBEDGE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSURFACE] = (d: RawLineData) => { new IFC4_3.IfcSurface(d.ID, ); }
Constructors['IFC4_3'][IFCSURFACE] = (expressID:number, _:any) => { return new IFC4_3.IfcSurface(expressID, ); }
ToRawLineData['IFC4_3'][IFCSURFACE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCSURFACE] = [IFCSECTIONEDSURFACE,IFCCYLINDRICALSURFACE,IFCTOROIDALSURFACE,IFCSPHERICALSURFACE,IFCPLANE,IFCELEMENTARYSURFACE,IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE];
InversePropertyDef['IFC4.3'][IFCSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSURFACESTYLERENDERING] = (d: RawLineData) => { new IFC4_3.IfcSurfaceStyleRendering(d.ID, new Reference<IFC4_3.IfcColourRgb>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference(d.arguments[6].value), !d.arguments[7] ? null :TypeInitialiser('IFC4_3',d.arguments[7]), d.arguments[8]); }
Constructors['IFC4_3'][IFCSURFACESTYLERENDERING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceStyleRendering(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSURFACESTYLERENDERING] = (i:IFC4_3.IfcSurfaceStyleRendering):unknown[] => { return [i.SurfaceColour, i.Transparency, i.DiffuseColour, i.TransmissionColour, i.DiffuseTransmissionColour, i.ReflectionColour, i.SpecularColour, !i.SpecularHighlight ? null :Labelise(i.SpecularHighlight), i.ReflectanceMethod]; }
FromRawLineData['IFC4_3'][IFCSWEPTAREASOLID] = (d: RawLineData) => { new IFC4_3.IfcSweptAreaSolid(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCSWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSweptAreaSolid(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCSWEPTAREASOLID] = (i:IFC4_3.IfcSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position]; }
InheritanceDef['IFC4.3'][IFCSWEPTAREASOLID] = [IFCREVOLVEDAREASOLIDTAPERED,IFCREVOLVEDAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED,IFCEXTRUDEDAREASOLID,IFCSURFACECURVESWEPTAREASOLID,IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID,IFCDIRECTRIXCURVESWEPTAREASOLID];
InversePropertyDef['IFC4.3'][IFCSWEPTAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSWEPTDISKSOLID] = (d: RawLineData) => { new IFC4_3.IfcSweptDiskSolid(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcParameterValue(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcParameterValue(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCSWEPTDISKSOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSweptDiskSolid(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCSWEPTDISKSOLID] = (i:IFC4_3.IfcSweptDiskSolid):unknown[] => { return [i.Directrix, i.Radius, i.InnerRadius, i.StartParam, i.EndParam]; }
InheritanceDef['IFC4.3'][IFCSWEPTDISKSOLID] = [IFCSWEPTDISKSOLIDPOLYGONAL];
InversePropertyDef['IFC4.3'][IFCSWEPTDISKSOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSWEPTDISKSOLIDPOLYGONAL] = (d: RawLineData) => { new IFC4_3.IfcSweptDiskSolidPolygonal(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcParameterValue(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcParameterValue(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCSWEPTDISKSOLIDPOLYGONAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSweptDiskSolidPolygonal(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCSWEPTDISKSOLIDPOLYGONAL] = (i:IFC4_3.IfcSweptDiskSolidPolygonal):unknown[] => { return [i.Directrix, i.Radius, i.InnerRadius, i.StartParam, i.EndParam, i.FilletRadius]; }
InversePropertyDef['IFC4.3'][IFCSWEPTDISKSOLIDPOLYGONAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSWEPTSURFACE] = (d: RawLineData) => { new IFC4_3.IfcSweptSurface(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCSWEPTSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSweptSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCSWEPTSURFACE] = (i:IFC4_3.IfcSweptSurface):unknown[] => { return [i.SweptCurve, i.Position]; }
InheritanceDef['IFC4.3'][IFCSWEPTSURFACE] = [IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION];
InversePropertyDef['IFC4.3'][IFCSWEPTSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCTSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcTShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[11].value)); }
Constructors['IFC4_3'][IFCTSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCTSHAPEPROFILEDEF] = (i:IFC4_3.IfcTShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.FlangeEdgeRadius, i.WebEdgeRadius, i.WebSlope, i.FlangeSlope]; }
InversePropertyDef['IFC4.3'][IFCTSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCTESSELLATEDITEM] = (d: RawLineData) => { new IFC4_3.IfcTessellatedItem(d.ID, ); }
Constructors['IFC4_3'][IFCTESSELLATEDITEM] = (expressID:number, _:any) => { return new IFC4_3.IfcTessellatedItem(expressID, ); }
ToRawLineData['IFC4_3'][IFCTESSELLATEDITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCTESSELLATEDITEM] = [IFCPOLYGONALFACESET,IFCTRIANGULATEDIRREGULARNETWORK,IFCTRIANGULATEDFACESET,IFCTESSELLATEDFACESET,IFCINDEXEDPOLYGONALFACEWITHVOIDS,IFCINDEXEDPOLYGONALFACE];
InversePropertyDef['IFC4.3'][IFCTESSELLATEDITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCTEXTLITERAL] = (d: RawLineData) => { new IFC4_3.IfcTextLiteral(d.ID, new IFC4_3.IfcPresentableText(d.arguments[0].value), new Reference(d.arguments[1].value), d.arguments[2]); }
Constructors['IFC4_3'][IFCTEXTLITERAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextLiteral(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCTEXTLITERAL] = (i:IFC4_3.IfcTextLiteral):unknown[] => { return [i.Literal, i.Placement, i.Path]; }
InheritanceDef['IFC4.3'][IFCTEXTLITERAL] = [IFCTEXTLITERALWITHEXTENT];
InversePropertyDef['IFC4.3'][IFCTEXTLITERAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCTEXTLITERALWITHEXTENT] = (d: RawLineData) => { new IFC4_3.IfcTextLiteralWithExtent(d.ID, new IFC4_3.IfcPresentableText(d.arguments[0].value), new Reference(d.arguments[1].value), d.arguments[2], new Reference<IFC4_3.IfcPlanarExtent>(d.arguments[3].value), new IFC4_3.IfcBoxAlignment(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCTEXTLITERALWITHEXTENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextLiteralWithExtent(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCTEXTLITERALWITHEXTENT] = (i:IFC4_3.IfcTextLiteralWithExtent):unknown[] => { return [i.Literal, i.Placement, i.Path, i.Extent, i.BoxAlignment]; }
InversePropertyDef['IFC4.3'][IFCTEXTLITERALWITHEXTENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCTEXTSTYLEFONTMODEL] = (d: RawLineData) => { new IFC4_3.IfcTextStyleFontModel(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new IFC4_3.IfcTextFontName(p.value)), !d.arguments[2] ? null :new IFC4_3.IfcFontStyle(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcFontVariant(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcFontWeight(d.arguments[4].value), TypeInitialiser('IFC4_3',d.arguments[5])); }
Constructors['IFC4_3'][IFCTEXTSTYLEFONTMODEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTextStyleFontModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCTEXTSTYLEFONTMODEL] = (i:IFC4_3.IfcTextStyleFontModel):unknown[] => { return [i.Name, i.FontFamily, i.FontStyle, i.FontVariant, i.FontWeight, Labelise(i.FontSize)]; }
FromRawLineData['IFC4_3'][IFCTRAPEZIUMPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcTrapeziumProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcLengthMeasure(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCTRAPEZIUMPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTrapeziumProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCTRAPEZIUMPROFILEDEF] = (i:IFC4_3.IfcTrapeziumProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.BottomXDim, i.TopXDim, i.YDim, i.TopXOffset]; }
InversePropertyDef['IFC4.3'][IFCTRAPEZIUMPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCTYPEOBJECT] = (d: RawLineData) => { new IFC4_3.IfcTypeObject(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value))); }
Constructors['IFC4_3'][IFCTYPEOBJECT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTypeObject(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCTYPEOBJECT] = (i:IFC4_3.IfcTypeObject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets]; }
InheritanceDef['IFC4.3'][IFCTYPEOBJECT] = [IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE,IFCCONSTRUCTIONRESOURCETYPE,IFCTYPERESOURCE,IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALELEMENTTYPE,IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCVIBRATIONDAMPERTYPE,IFCSIGNTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONCONDUITTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCIMPACTPROTECTIONDEVICETYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCELECTRICFLOWTREATMENTDEVICETYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSIGNALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE,IFCMEDICALDEVICETYPE,IFCLIQUIDTERMINALTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCONVEYORSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEARINGTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCTRACKELEMENTTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCRAILTYPE,IFCPLATETYPE,IFCPAVEMENTTYPE,IFCNAVIGATIONELEMENTTYPE,IFCMOORINGDEVICETYPE,IFCMEMBERTYPE,IFCKERBTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCAISSONFOUNDATIONTYPE,IFCPILETYPE,IFCDEEPFOUNDATIONTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOURSETYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILTELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCVEHICLETYPE,IFCTRANSPORTATIONDEVICETYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCTYPEPRODUCT,IFCTASKTYPE,IFCPROCEDURETYPE,IFCEVENTTYPE,IFCTYPEPROCESS];
InversePropertyDef['IFC4.3'][IFCTYPEOBJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC4_3'][IFCTYPEPROCESS] = (d: RawLineData) => { new IFC4_3.IfcTypeProcess(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCTYPEPROCESS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTypeProcess(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTYPEPROCESS] = (i:IFC4_3.IfcTypeProcess):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ProcessType]; }
InheritanceDef['IFC4.3'][IFCTYPEPROCESS] = [IFCTASKTYPE,IFCPROCEDURETYPE,IFCEVENTTYPE];
InversePropertyDef['IFC4.3'][IFCTYPEPROCESS] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4_3'][IFCTYPEPRODUCT] = (d: RawLineData) => { new IFC4_3.IfcTypeProduct(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCTYPEPRODUCT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTypeProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCTYPEPRODUCT] = (i:IFC4_3.IfcTypeProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag]; }
InheritanceDef['IFC4.3'][IFCTYPEPRODUCT] = [IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALELEMENTTYPE,IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCVIBRATIONDAMPERTYPE,IFCSIGNTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONCONDUITTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCIMPACTPROTECTIONDEVICETYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCELECTRICFLOWTREATMENTDEVICETYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSIGNALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE,IFCMEDICALDEVICETYPE,IFCLIQUIDTERMINALTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCONVEYORSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEARINGTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCTRACKELEMENTTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCRAILTYPE,IFCPLATETYPE,IFCPAVEMENTTYPE,IFCNAVIGATIONELEMENTTYPE,IFCMOORINGDEVICETYPE,IFCMEMBERTYPE,IFCKERBTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCAISSONFOUNDATIONTYPE,IFCPILETYPE,IFCDEEPFOUNDATIONTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOURSETYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILTELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCVEHICLETYPE,IFCTRANSPORTATIONDEVICETYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE];
InversePropertyDef['IFC4.3'][IFCTYPEPRODUCT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTYPERESOURCE] = (d: RawLineData) => { new IFC4_3.IfcTypeResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCTYPERESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTypeResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTYPERESOURCE] = (i:IFC4_3.IfcTypeResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType]; }
InheritanceDef['IFC4.3'][IFCTYPERESOURCE] = [IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE,IFCCONSTRUCTIONRESOURCETYPE];
InversePropertyDef['IFC4.3'][IFCTYPERESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCUSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcUShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCUSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcUShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCUSHAPEPROFILEDEF] = (i:IFC4_3.IfcUShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.EdgeRadius, i.FlangeSlope]; }
InversePropertyDef['IFC4.3'][IFCUSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCVECTOR] = (d: RawLineData) => { new IFC4_3.IfcVector(d.ID, new Reference<IFC4_3.IfcDirection>(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCVECTOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVector(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCVECTOR] = (i:IFC4_3.IfcVector):unknown[] => { return [i.Orientation, i.Magnitude]; }
InversePropertyDef['IFC4.3'][IFCVECTOR] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCVERTEXLOOP] = (d: RawLineData) => { new IFC4_3.IfcVertexLoop(d.ID, new Reference<IFC4_3.IfcVertex>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCVERTEXLOOP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVertexLoop(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCVERTEXLOOP] = (i:IFC4_3.IfcVertexLoop):unknown[] => { return [i.LoopVertex]; }
InversePropertyDef['IFC4.3'][IFCVERTEXLOOP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCZSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcZShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCZSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcZShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCZSHAPEPROFILEDEF] = (i:IFC4_3.IfcZShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.EdgeRadius]; }
InversePropertyDef['IFC4.3'][IFCZSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCADVANCEDFACE] = (d: RawLineData) => { new IFC4_3.IfcAdvancedFace(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcFaceBound>(p.value)), new Reference<IFC4_3.IfcSurface>(d.arguments[1].value), new IFC4_3.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCADVANCEDFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAdvancedFace(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCADVANCEDFACE] = (i:IFC4_3.IfcAdvancedFace):unknown[] => { return [i.Bounds, i.FaceSurface, i.SameSense]; }
InversePropertyDef['IFC4.3'][IFCADVANCEDFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasTextureMaps',IFCTEXTUREMAP,2,true],];
FromRawLineData['IFC4_3'][IFCANNOTATIONFILLAREA] = (d: RawLineData) => { new IFC4_3.IfcAnnotationFillArea(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcCurve>(p.value))); }
Constructors['IFC4_3'][IFCANNOTATIONFILLAREA] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAnnotationFillArea(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCANNOTATIONFILLAREA] = (i:IFC4_3.IfcAnnotationFillArea):unknown[] => { return [i.OuterBoundary, i.InnerBoundaries]; }
InversePropertyDef['IFC4.3'][IFCANNOTATIONFILLAREA] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCASYMMETRICISHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcAsymmetricIShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[14].value)); }
Constructors['IFC4_3'][IFCASYMMETRICISHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAsymmetricIShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]); }
ToRawLineData['IFC4_3'][IFCASYMMETRICISHAPEPROFILEDEF] = (i:IFC4_3.IfcAsymmetricIShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.BottomFlangeWidth, i.OverallDepth, i.WebThickness, i.BottomFlangeThickness, i.BottomFlangeFilletRadius, i.TopFlangeWidth, i.TopFlangeThickness, i.TopFlangeFilletRadius, i.BottomFlangeEdgeRadius, i.BottomFlangeSlope, i.TopFlangeEdgeRadius, i.TopFlangeSlope]; }
InversePropertyDef['IFC4.3'][IFCASYMMETRICISHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCAXIS1PLACEMENT] = (d: RawLineData) => { new IFC4_3.IfcAxis1Placement(d.ID, new Reference<IFC4_3.IfcPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCAXIS1PLACEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAxis1Placement(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCAXIS1PLACEMENT] = (i:IFC4_3.IfcAxis1Placement):unknown[] => { return [i.Location, i.Axis]; }
InversePropertyDef['IFC4.3'][IFCAXIS1PLACEMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCAXIS2PLACEMENT2D] = (d: RawLineData) => { new IFC4_3.IfcAxis2Placement2D(d.ID, new Reference<IFC4_3.IfcPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCAXIS2PLACEMENT2D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAxis2Placement2D(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCAXIS2PLACEMENT2D] = (i:IFC4_3.IfcAxis2Placement2D):unknown[] => { return [i.Location, i.RefDirection]; }
InversePropertyDef['IFC4.3'][IFCAXIS2PLACEMENT2D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCAXIS2PLACEMENT3D] = (d: RawLineData) => { new IFC4_3.IfcAxis2Placement3D(d.ID, new Reference<IFC4_3.IfcPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCAXIS2PLACEMENT3D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAxis2Placement3D(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCAXIS2PLACEMENT3D] = (i:IFC4_3.IfcAxis2Placement3D):unknown[] => { return [i.Location, i.Axis, i.RefDirection]; }
InversePropertyDef['IFC4.3'][IFCAXIS2PLACEMENT3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCAXIS2PLACEMENTLINEAR] = (d: RawLineData) => { new IFC4_3.IfcAxis2PlacementLinear(d.ID, new Reference<IFC4_3.IfcPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCAXIS2PLACEMENTLINEAR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAxis2PlacementLinear(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCAXIS2PLACEMENTLINEAR] = (i:IFC4_3.IfcAxis2PlacementLinear):unknown[] => { return [i.Location, i.Axis, i.RefDirection]; }
InversePropertyDef['IFC4.3'][IFCAXIS2PLACEMENTLINEAR] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBOOLEANRESULT] = (d: RawLineData) => { new IFC4_3.IfcBooleanResult(d.ID, d.arguments[0], new Reference(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCBOOLEANRESULT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBooleanResult(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCBOOLEANRESULT] = (i:IFC4_3.IfcBooleanResult):unknown[] => { return [i.Operator, i.FirstOperand, i.SecondOperand]; }
InheritanceDef['IFC4.3'][IFCBOOLEANRESULT] = [IFCBOOLEANCLIPPINGRESULT];
InversePropertyDef['IFC4.3'][IFCBOOLEANRESULT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBOUNDEDSURFACE] = (d: RawLineData) => { new IFC4_3.IfcBoundedSurface(d.ID, ); }
Constructors['IFC4_3'][IFCBOUNDEDSURFACE] = (expressID:number, _:any) => { return new IFC4_3.IfcBoundedSurface(expressID, ); }
ToRawLineData['IFC4_3'][IFCBOUNDEDSURFACE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCBOUNDEDSURFACE] = [IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDSURFACE,IFCCURVEBOUNDEDPLANE];
InversePropertyDef['IFC4.3'][IFCBOUNDEDSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBOUNDINGBOX] = (d: RawLineData) => { new IFC4_3.IfcBoundingBox(d.ID, new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCBOUNDINGBOX] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoundingBox(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCBOUNDINGBOX] = (i:IFC4_3.IfcBoundingBox):unknown[] => { return [i.Corner, i.XDim, i.YDim, i.ZDim]; }
InversePropertyDef['IFC4.3'][IFCBOUNDINGBOX] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBOXEDHALFSPACE] = (d: RawLineData) => { new IFC4_3.IfcBoxedHalfSpace(d.ID, new Reference<IFC4_3.IfcSurface>(d.arguments[0].value), new IFC4_3.IfcBoolean(d.arguments[1].value), new Reference<IFC4_3.IfcBoundingBox>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCBOXEDHALFSPACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoxedHalfSpace(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCBOXEDHALFSPACE] = (i:IFC4_3.IfcBoxedHalfSpace):unknown[] => { return [i.BaseSurface, i.AgreementFlag, i.Enclosure]; }
InversePropertyDef['IFC4.3'][IFCBOXEDHALFSPACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcCShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCCSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCCSHAPEPROFILEDEF] = (i:IFC4_3.IfcCShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.Width, i.WallThickness, i.Girth, i.InternalFilletRadius]; }
InversePropertyDef['IFC4.3'][IFCCSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANPOINT] = (d: RawLineData) => { new IFC4_3.IfcCartesianPoint(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcLengthMeasure(p.value))); }
Constructors['IFC4_3'][IFCCARTESIANPOINT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCartesianPoint(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCCARTESIANPOINT] = (i:IFC4_3.IfcCartesianPoint):unknown[] => { return [i.Coordinates]; }
InversePropertyDef['IFC4.3'][IFCCARTESIANPOINT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANPOINTLIST] = (d: RawLineData) => { new IFC4_3.IfcCartesianPointList(d.ID, ); }
Constructors['IFC4_3'][IFCCARTESIANPOINTLIST] = (expressID:number, _:any) => { return new IFC4_3.IfcCartesianPointList(expressID, ); }
ToRawLineData['IFC4_3'][IFCCARTESIANPOINTLIST] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCCARTESIANPOINTLIST] = [IFCCARTESIANPOINTLIST3D,IFCCARTESIANPOINTLIST2D];
InversePropertyDef['IFC4.3'][IFCCARTESIANPOINTLIST] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANPOINTLIST2D] = (d: RawLineData) => { new IFC4_3.IfcCartesianPointList2D(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcLengthMeasure(p.value)), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC4_3.IfcLabel(p.value))); }
Constructors['IFC4_3'][IFCCARTESIANPOINTLIST2D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCartesianPointList2D(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCARTESIANPOINTLIST2D] = (i:IFC4_3.IfcCartesianPointList2D):unknown[] => { return [i.CoordList, i.TagList]; }
InversePropertyDef['IFC4.3'][IFCCARTESIANPOINTLIST2D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANPOINTLIST3D] = (d: RawLineData) => { new IFC4_3.IfcCartesianPointList3D(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcLengthMeasure(p.value)), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC4_3.IfcLabel(p.value))); }
Constructors['IFC4_3'][IFCCARTESIANPOINTLIST3D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCartesianPointList3D(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCARTESIANPOINTLIST3D] = (i:IFC4_3.IfcCartesianPointList3D):unknown[] => { return [i.CoordList, i.TagList]; }
InversePropertyDef['IFC4.3'][IFCCARTESIANPOINTLIST3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (d: RawLineData) => { new IFC4_3.IfcCartesianTransformationOperator(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value), new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcReal(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCartesianTransformationOperator(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (i:IFC4_3.IfcCartesianTransformationOperator):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale]; }
InheritanceDef['IFC4.3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = [IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D];
InversePropertyDef['IFC4.3'][IFCCARTESIANTRANSFORMATIONOPERATOR] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (d: RawLineData) => { new IFC4_3.IfcCartesianTransformationOperator2D(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value), new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcReal(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCartesianTransformationOperator2D(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (i:IFC4_3.IfcCartesianTransformationOperator2D):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale]; }
InheritanceDef['IFC4.3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM];
InversePropertyDef['IFC4.3'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (d: RawLineData) => { new IFC4_3.IfcCartesianTransformationOperator2DnonUniform(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value), new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcReal(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcReal(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCartesianTransformationOperator2DnonUniform(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (i:IFC4_3.IfcCartesianTransformationOperator2DnonUniform):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Scale2]; }
InversePropertyDef['IFC4.3'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (d: RawLineData) => { new IFC4_3.IfcCartesianTransformationOperator3D(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value), new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcReal(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCartesianTransformationOperator3D(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (i:IFC4_3.IfcCartesianTransformationOperator3D):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Axis3]; }
InheritanceDef['IFC4.3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM];
InversePropertyDef['IFC4.3'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (d: RawLineData) => { new IFC4_3.IfcCartesianTransformationOperator3DnonUniform(d.ID, !d.arguments[0] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[1].value), new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcReal(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4_3.IfcDirection>(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcReal(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcReal(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCartesianTransformationOperator3DnonUniform(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (i:IFC4_3.IfcCartesianTransformationOperator3DnonUniform):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Axis3, i.Scale2, i.Scale3]; }
InversePropertyDef['IFC4.3'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCIRCLEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcCircleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCCIRCLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCircleProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCIRCLEPROFILEDEF] = (i:IFC4_3.IfcCircleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Radius]; }
InheritanceDef['IFC4.3'][IFCCIRCLEPROFILEDEF] = [IFCCIRCLEHOLLOWPROFILEDEF];
InversePropertyDef['IFC4.3'][IFCCIRCLEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCCLOSEDSHELL] = (d: RawLineData) => { new IFC4_3.IfcClosedShell(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcFace>(p.value))); }
Constructors['IFC4_3'][IFCCLOSEDSHELL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcClosedShell(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCCLOSEDSHELL] = (i:IFC4_3.IfcClosedShell):unknown[] => { return [i.CfsFaces]; }
InversePropertyDef['IFC4.3'][IFCCLOSEDSHELL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCOLOURRGB] = (d: RawLineData) => { new IFC4_3.IfcColourRgb(d.ID, !d.arguments[0] ? null :new IFC4_3.IfcLabel(d.arguments[0].value), new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[1].value), new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[2].value), new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCCOLOURRGB] = (expressID:number, args: any[]) => { return new IFC4_3.IfcColourRgb(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCOLOURRGB] = (i:IFC4_3.IfcColourRgb):unknown[] => { return [i.Name, i.Red, i.Green, i.Blue]; }
FromRawLineData['IFC4_3'][IFCCOMPLEXPROPERTY] = (d: RawLineData) => { new IFC4_3.IfcComplexProperty(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), new IFC4_3.IfcIdentifier(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcProperty>(p.value))); }
Constructors['IFC4_3'][IFCCOMPLEXPROPERTY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcComplexProperty(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCCOMPLEXPROPERTY] = (i:IFC4_3.IfcComplexProperty):unknown[] => { return [i.Name, i.Specification, i.UsageName, i.HasProperties]; }
InversePropertyDef['IFC4.3'][IFCCOMPLEXPROPERTY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCCOMPOSITECURVESEGMENT] = (d: RawLineData) => { new IFC4_3.IfcCompositeCurveSegment(d.ID, d.arguments[0], new IFC4_3.IfcBoolean(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCCOMPOSITECURVESEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCompositeCurveSegment(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCCOMPOSITECURVESEGMENT] = (i:IFC4_3.IfcCompositeCurveSegment):unknown[] => { return [i.Transition, i.SameSense, i.ParentCurve]; }
InheritanceDef['IFC4.3'][IFCCOMPOSITECURVESEGMENT] = [IFCREPARAMETRISEDCOMPOSITECURVESEGMENT];
InversePropertyDef['IFC4.3'][IFCCOMPOSITECURVESEGMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['UsingCurves',IFCCOMPOSITECURVE,0,true],];
FromRawLineData['IFC4_3'][IFCCONSTRUCTIONRESOURCETYPE] = (d: RawLineData) => { new IFC4_3.IfcConstructionResourceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCCONSTRUCTIONRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstructionResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCCONSTRUCTIONRESOURCETYPE] = (i:IFC4_3.IfcConstructionResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity]; }
InheritanceDef['IFC4.3'][IFCCONSTRUCTIONRESOURCETYPE] = [IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE];
InversePropertyDef['IFC4.3'][IFCCONSTRUCTIONRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCONTEXT] = (d: RawLineData) => { new IFC4_3.IfcContext(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcRepresentationContext>(p.value)), !d.arguments[8] ? null :new Reference<IFC4_3.IfcUnitAssignment>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCCONTEXT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcContext(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCONTEXT] = (i:IFC4_3.IfcContext):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.Phase, i.RepresentationContexts, i.UnitsInContext]; }
InheritanceDef['IFC4.3'][IFCCONTEXT] = [IFCPROJECTLIBRARY,IFCPROJECT];
InversePropertyDef['IFC4.3'][IFCCONTEXT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Declares',IFCRELDECLARES,4,true],];
FromRawLineData['IFC4_3'][IFCCREWRESOURCETYPE] = (d: RawLineData) => { new IFC4_3.IfcCrewResourceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4_3'][IFCCREWRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCrewResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCCREWRESOURCETYPE] = (i:IFC4_3.IfcCrewResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCREWRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCSGPRIMITIVE3D] = (d: RawLineData) => { new IFC4_3.IfcCsgPrimitive3D(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCCSGPRIMITIVE3D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCsgPrimitive3D(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCCSGPRIMITIVE3D] = (i:IFC4_3.IfcCsgPrimitive3D):unknown[] => { return [i.Position]; }
InheritanceDef['IFC4.3'][IFCCSGPRIMITIVE3D] = [IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID];
InversePropertyDef['IFC4.3'][IFCCSGPRIMITIVE3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCSGSOLID] = (d: RawLineData) => { new IFC4_3.IfcCsgSolid(d.ID, new Reference(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCCSGSOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCsgSolid(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCCSGSOLID] = (i:IFC4_3.IfcCsgSolid):unknown[] => { return [i.TreeRootExpression]; }
InversePropertyDef['IFC4.3'][IFCCSGSOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCURVE] = (d: RawLineData) => { new IFC4_3.IfcCurve(d.ID, ); }
Constructors['IFC4_3'][IFCCURVE] = (expressID:number, _:any) => { return new IFC4_3.IfcCurve(expressID, ); }
ToRawLineData['IFC4_3'][IFCCURVE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCCURVE] = [IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFCINDEXEDPOLYCURVE,IFCSEGMENTEDREFERENCECURVE,IFCGRADIENTCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCSEAMCURVE,IFCINTERSECTIONCURVE,IFCSURFACECURVE,IFCSINESPIRAL,IFCSEVENTHORDERPOLYNOMIALSPIRAL,IFCSECONDORDERPOLYNOMIALSPIRAL,IFCCOSINESPIRAL,IFCCLOTHOID,IFCTHIRDORDERPOLYNOMIALSPIRAL,IFCSPIRAL,IFCPOLYNOMIALCURVE,IFCPCURVE,IFCOFFSETCURVEBYDISTANCES,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCOFFSETCURVE,IFCLINE];
InversePropertyDef['IFC4.3'][IFCCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCURVEBOUNDEDPLANE] = (d: RawLineData) => { new IFC4_3.IfcCurveBoundedPlane(d.ID, new Reference<IFC4_3.IfcPlane>(d.arguments[0].value), new Reference<IFC4_3.IfcCurve>(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcCurve>(p.value))); }
Constructors['IFC4_3'][IFCCURVEBOUNDEDPLANE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurveBoundedPlane(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCCURVEBOUNDEDPLANE] = (i:IFC4_3.IfcCurveBoundedPlane):unknown[] => { return [i.BasisSurface, i.OuterBoundary, i.InnerBoundaries]; }
InversePropertyDef['IFC4.3'][IFCCURVEBOUNDEDPLANE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCURVEBOUNDEDSURFACE] = (d: RawLineData) => { new IFC4_3.IfcCurveBoundedSurface(d.ID, new Reference<IFC4_3.IfcSurface>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcBoundaryCurve>(p.value)), new IFC4_3.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCCURVEBOUNDEDSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurveBoundedSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCCURVEBOUNDEDSURFACE] = (i:IFC4_3.IfcCurveBoundedSurface):unknown[] => { return [i.BasisSurface, i.Boundaries, i.ImplicitOuter]; }
InversePropertyDef['IFC4.3'][IFCCURVEBOUNDEDSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCURVESEGMENT] = (d: RawLineData) => { new IFC4_3.IfcCurveSegment(d.ID, d.arguments[0], new Reference<IFC4_3.IfcPlacement>(d.arguments[1].value), TypeInitialiser('IFC4_3',d.arguments[2]), TypeInitialiser('IFC4_3',d.arguments[3]), new Reference<IFC4_3.IfcCurve>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCCURVESEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurveSegment(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCCURVESEGMENT] = (i:IFC4_3.IfcCurveSegment):unknown[] => { return [i.Transition, i.Placement, Labelise(i.SegmentStart), Labelise(i.SegmentLength), i.ParentCurve]; }
InversePropertyDef['IFC4.3'][IFCCURVESEGMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['UsingCurves',IFCCOMPOSITECURVE,0,true],];
FromRawLineData['IFC4_3'][IFCDIRECTION] = (d: RawLineData) => { new IFC4_3.IfcDirection(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcReal(p.value))); }
Constructors['IFC4_3'][IFCDIRECTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDirection(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCDIRECTION] = (i:IFC4_3.IfcDirection):unknown[] => { return [i.DirectionRatios]; }
InversePropertyDef['IFC4.3'][IFCDIRECTION] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCDIRECTRIXCURVESWEPTAREASOLID] = (d: RawLineData) => { new IFC4_3.IfcDirectrixCurveSweptAreaSolid(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4_3',d.arguments[4])); }
Constructors['IFC4_3'][IFCDIRECTRIXCURVESWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDirectrixCurveSweptAreaSolid(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCDIRECTRIXCURVESWEPTAREASOLID] = (i:IFC4_3.IfcDirectrixCurveSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Directrix, !i.StartParam ? null :Labelise(i.StartParam), !i.EndParam ? null :Labelise(i.EndParam)]; }
InheritanceDef['IFC4.3'][IFCDIRECTRIXCURVESWEPTAREASOLID] = [IFCSURFACECURVESWEPTAREASOLID,IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID];
InversePropertyDef['IFC4.3'][IFCDIRECTRIXCURVESWEPTAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCEDGELOOP] = (d: RawLineData) => { new IFC4_3.IfcEdgeLoop(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcOrientedEdge>(p.value))); }
Constructors['IFC4_3'][IFCEDGELOOP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEdgeLoop(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCEDGELOOP] = (i:IFC4_3.IfcEdgeLoop):unknown[] => { return [i.EdgeList]; }
InversePropertyDef['IFC4.3'][IFCEDGELOOP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCELEMENTQUANTITY] = (d: RawLineData) => { new IFC4_3.IfcElementQuantity(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPhysicalQuantity>(p.value))); }
Constructors['IFC4_3'][IFCELEMENTQUANTITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElementQuantity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCELEMENTQUANTITY] = (i:IFC4_3.IfcElementQuantity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.MethodOfMeasurement, i.Quantities]; }
InversePropertyDef['IFC4.3'][IFCELEMENTQUANTITY] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELEMENTTYPE] = (i:IFC4_3.IfcElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCELEMENTTYPE] = [IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCVIBRATIONDAMPERTYPE,IFCSIGNTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONCONDUITTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCIMPACTPROTECTIONDEVICETYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCELECTRICFLOWTREATMENTDEVICETYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSIGNALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE,IFCMEDICALDEVICETYPE,IFCLIQUIDTERMINALTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCONVEYORSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEARINGTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCTRACKELEMENTTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCRAILTYPE,IFCPLATETYPE,IFCPAVEMENTTYPE,IFCNAVIGATIONELEMENTTYPE,IFCMOORINGDEVICETYPE,IFCMEMBERTYPE,IFCKERBTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCAISSONFOUNDATIONTYPE,IFCPILETYPE,IFCDEEPFOUNDATIONTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOURSETYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILTELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCVEHICLETYPE,IFCTRANSPORTATIONDEVICETYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE];
InversePropertyDef['IFC4.3'][IFCELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELEMENTARYSURFACE] = (d: RawLineData) => { new IFC4_3.IfcElementarySurface(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCELEMENTARYSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElementarySurface(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCELEMENTARYSURFACE] = (i:IFC4_3.IfcElementarySurface):unknown[] => { return [i.Position]; }
InheritanceDef['IFC4.3'][IFCELEMENTARYSURFACE] = [IFCCYLINDRICALSURFACE,IFCTOROIDALSURFACE,IFCSPHERICALSURFACE,IFCPLANE];
InversePropertyDef['IFC4.3'][IFCELEMENTARYSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCELLIPSEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcEllipseProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCELLIPSEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEllipseProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCELLIPSEPROFILEDEF] = (i:IFC4_3.IfcEllipseProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.SemiAxis1, i.SemiAxis2]; }
InversePropertyDef['IFC4.3'][IFCELLIPSEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCEVENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcEventType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], d.arguments[10], !d.arguments[11] ? null :new IFC4_3.IfcLabel(d.arguments[11].value)); }
Constructors['IFC4_3'][IFCEVENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEventType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCEVENTTYPE] = (i:IFC4_3.IfcEventType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ProcessType, i.PredefinedType, i.EventTriggerType, i.UserDefinedEventTriggerType]; }
InversePropertyDef['IFC4.3'][IFCEVENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4_3'][IFCEXTRUDEDAREASOLID] = (d: RawLineData) => { new IFC4_3.IfcExtrudedAreaSolid(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcDirection>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCEXTRUDEDAREASOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExtrudedAreaSolid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCEXTRUDEDAREASOLID] = (i:IFC4_3.IfcExtrudedAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.ExtrudedDirection, i.Depth]; }
InheritanceDef['IFC4.3'][IFCEXTRUDEDAREASOLID] = [IFCEXTRUDEDAREASOLIDTAPERED];
InversePropertyDef['IFC4.3'][IFCEXTRUDEDAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCEXTRUDEDAREASOLIDTAPERED] = (d: RawLineData) => { new IFC4_3.IfcExtrudedAreaSolidTapered(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcDirection>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new Reference<IFC4_3.IfcProfileDef>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCEXTRUDEDAREASOLIDTAPERED] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExtrudedAreaSolidTapered(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCEXTRUDEDAREASOLIDTAPERED] = (i:IFC4_3.IfcExtrudedAreaSolidTapered):unknown[] => { return [i.SweptArea, i.Position, i.ExtrudedDirection, i.Depth, i.EndSweptArea]; }
InversePropertyDef['IFC4.3'][IFCEXTRUDEDAREASOLIDTAPERED] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFACEBASEDSURFACEMODEL] = (d: RawLineData) => { new IFC4_3.IfcFaceBasedSurfaceModel(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcConnectedFaceSet>(p.value))); }
Constructors['IFC4_3'][IFCFACEBASEDSURFACEMODEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFaceBasedSurfaceModel(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCFACEBASEDSURFACEMODEL] = (i:IFC4_3.IfcFaceBasedSurfaceModel):unknown[] => { return [i.FbsmFaces]; }
InversePropertyDef['IFC4.3'][IFCFACEBASEDSURFACEMODEL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFILLAREASTYLEHATCHING] = (d: RawLineData) => { new IFC4_3.IfcFillAreaStyleHatching(d.ID, new Reference<IFC4_3.IfcCurveStyle>(d.arguments[0].value), new Reference(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[3].value), new IFC4_3.IfcPlaneAngleMeasure(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCFILLAREASTYLEHATCHING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFillAreaStyleHatching(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCFILLAREASTYLEHATCHING] = (i:IFC4_3.IfcFillAreaStyleHatching):unknown[] => { return [i.HatchLineAppearance, i.StartOfNextHatchLine, i.PointOfReferenceHatchLine, i.PatternStart, i.HatchLineAngle]; }
InversePropertyDef['IFC4.3'][IFCFILLAREASTYLEHATCHING] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFILLAREASTYLETILES] = (d: RawLineData) => { new IFC4_3.IfcFillAreaStyleTiles(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcVector>(p.value)), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcStyledItem>(p.value)), new IFC4_3.IfcPositiveRatioMeasure(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCFILLAREASTYLETILES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFillAreaStyleTiles(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCFILLAREASTYLETILES] = (i:IFC4_3.IfcFillAreaStyleTiles):unknown[] => { return [i.TilingPattern, i.Tiles, i.TilingScale]; }
InversePropertyDef['IFC4.3'][IFCFILLAREASTYLETILES] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFIXEDREFERENCESWEPTAREASOLID] = (d: RawLineData) => { new IFC4_3.IfcFixedReferenceSweptAreaSolid(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4_3',d.arguments[4]), new Reference<IFC4_3.IfcDirection>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCFIXEDREFERENCESWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFixedReferenceSweptAreaSolid(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCFIXEDREFERENCESWEPTAREASOLID] = (i:IFC4_3.IfcFixedReferenceSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Directrix, !i.StartParam ? null :Labelise(i.StartParam), !i.EndParam ? null :Labelise(i.EndParam), i.FixedReference]; }
InheritanceDef['IFC4.3'][IFCFIXEDREFERENCESWEPTAREASOLID] = [IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID];
InversePropertyDef['IFC4.3'][IFCFIXEDREFERENCESWEPTAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFURNISHINGELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcFurnishingElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCFURNISHINGELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFurnishingElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFURNISHINGELEMENTTYPE] = (i:IFC4_3.IfcFurnishingElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCFURNISHINGELEMENTTYPE] = [IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE];
InversePropertyDef['IFC4.3'][IFCFURNISHINGELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFURNITURETYPE] = (d: RawLineData) => { new IFC4_3.IfcFurnitureType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], d.arguments[10]); }
Constructors['IFC4_3'][IFCFURNITURETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFurnitureType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCFURNITURETYPE] = (i:IFC4_3.IfcFurnitureType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.AssemblyPlace, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFURNITURETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCGEOGRAPHICELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcGeographicElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCGEOGRAPHICELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeographicElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCGEOGRAPHICELEMENTTYPE] = (i:IFC4_3.IfcGeographicElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCGEOGRAPHICELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCGEOMETRICCURVESET] = (d: RawLineData) => { new IFC4_3.IfcGeometricCurveSet(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCGEOMETRICCURVESET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeometricCurveSet(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCGEOMETRICCURVESET] = (i:IFC4_3.IfcGeometricCurveSet):unknown[] => { return [i.Elements]; }
InversePropertyDef['IFC4.3'][IFCGEOMETRICCURVESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCISHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcIShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCISHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCISHAPEPROFILEDEF] = (i:IFC4_3.IfcIShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.OverallWidth, i.OverallDepth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.FlangeEdgeRadius, i.FlangeSlope]; }
InversePropertyDef['IFC4.3'][IFCISHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCINDEXEDPOLYGONALFACE] = (d: RawLineData) => { new IFC4_3.IfcIndexedPolygonalFace(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value))); }
Constructors['IFC4_3'][IFCINDEXEDPOLYGONALFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIndexedPolygonalFace(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCINDEXEDPOLYGONALFACE] = (i:IFC4_3.IfcIndexedPolygonalFace):unknown[] => { return [i.CoordIndex]; }
InheritanceDef['IFC4.3'][IFCINDEXEDPOLYGONALFACE] = [IFCINDEXEDPOLYGONALFACEWITHVOIDS];
InversePropertyDef['IFC4.3'][IFCINDEXEDPOLYGONALFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['ToFaceSet',IFCPOLYGONALFACESET,2,true],['HasTexCoords',IFCTEXTURECOORDINATEINDICES,1,true],];
FromRawLineData['IFC4_3'][IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (d: RawLineData) => { new IFC4_3.IfcIndexedPolygonalFaceWithVoids(d.ID, d.arguments[0].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value)), d.arguments[1].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value))); }
Constructors['IFC4_3'][IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIndexedPolygonalFaceWithVoids(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (i:IFC4_3.IfcIndexedPolygonalFaceWithVoids):unknown[] => { return [i.CoordIndex, i.InnerCoordIndices]; }
InversePropertyDef['IFC4.3'][IFCINDEXEDPOLYGONALFACEWITHVOIDS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['ToFaceSet',IFCPOLYGONALFACESET,2,true],['HasTexCoords',IFCTEXTURECOORDINATEINDICES,1,true],];
FromRawLineData['IFC4_3'][IFCINDEXEDPOLYGONALTEXTUREMAP] = (d: RawLineData) => { new IFC4_3.IfcIndexedPolygonalTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSurfaceTexture>(p.value)), new Reference<IFC4_3.IfcTessellatedFaceSet>(d.arguments[1].value), new Reference<IFC4_3.IfcTextureVertexList>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4_3.IfcTextureCoordinateIndices>(p.value))); }
Constructors['IFC4_3'][IFCINDEXEDPOLYGONALTEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIndexedPolygonalTextureMap(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCINDEXEDPOLYGONALTEXTUREMAP] = (i:IFC4_3.IfcIndexedPolygonalTextureMap):unknown[] => { return [i.Maps, i.MappedTo, i.TexCoords, i.TexCoordIndices]; }
FromRawLineData['IFC4_3'][IFCLSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcLShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcPlaneAngleMeasure(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCLSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCLSHAPEPROFILEDEF] = (i:IFC4_3.IfcLShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.Width, i.Thickness, i.FilletRadius, i.EdgeRadius, i.LegSlope]; }
InversePropertyDef['IFC4.3'][IFCLSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCLABORRESOURCETYPE] = (d: RawLineData) => { new IFC4_3.IfcLaborResourceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4_3'][IFCLABORRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLaborResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCLABORRESOURCETYPE] = (i:IFC4_3.IfcLaborResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCLABORRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCLINE] = (d: RawLineData) => { new IFC4_3.IfcLine(d.ID, new Reference<IFC4_3.IfcCartesianPoint>(d.arguments[0].value), new Reference<IFC4_3.IfcVector>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCLINE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLine(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCLINE] = (i:IFC4_3.IfcLine):unknown[] => { return [i.Pnt, i.Dir]; }
InversePropertyDef['IFC4.3'][IFCLINE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCMANIFOLDSOLIDBREP] = (d: RawLineData) => { new IFC4_3.IfcManifoldSolidBrep(d.ID, new Reference<IFC4_3.IfcClosedShell>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCMANIFOLDSOLIDBREP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcManifoldSolidBrep(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCMANIFOLDSOLIDBREP] = (i:IFC4_3.IfcManifoldSolidBrep):unknown[] => { return [i.Outer]; }
InheritanceDef['IFC4.3'][IFCMANIFOLDSOLIDBREP] = [IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDBREP];
InversePropertyDef['IFC4.3'][IFCMANIFOLDSOLIDBREP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCOBJECT] = (d: RawLineData) => { new IFC4_3.IfcObject(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCOBJECT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcObject(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCOBJECT] = (i:IFC4_3.IfcObject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC4.3'][IFCOBJECT] = [IFCASSET,IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILTSYSTEM,IFCBUILDINGSYSTEM,IFCZONE,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCWORKCALENDAR,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCALIGNMENT,IFCLINEARPOSITIONINGELEMENT,IFCGRID,IFCREFERENT,IFCPOSITIONINGELEMENT,IFCDISTRIBUTIONPORT,IFCPORT,IFCALIGNMENTVERTICAL,IFCALIGNMENTSEGMENT,IFCALIGNMENTHORIZONTAL,IFCALIGNMENTCANT,IFCLINEARELEMENT,IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCELECTRICFLOWTREATMENTDEVICE,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSIGNAL,IFCSANITARYTERMINAL,IFCOUTLET,IFCMOBILETELECOMMUNICATIONSAPPLIANCE,IFCMEDICALDEVICE,IFCLIQUIDTERMINAL,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCONVEYORSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBUILDINGELEMENTPROXY,IFCBEARING,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCTRACKELEMENT,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCRAIL,IFCPLATE,IFCPAVEMENT,IFCNAVIGATIONELEMENT,IFCMOORINGDEVICE,IFCMEMBER,IFCKERB,IFCFOOTING,IFCREINFORCEDSOIL,IFCEARTHWORKSFILL,IFCEARTHWORKSELEMENT,IFCDOOR,IFCCAISSONFOUNDATION,IFCPILE,IFCDEEPFOUNDATION,IFCCURTAINWALL,IFCCOVERING,IFCCOURSE,IFCCOLUMN,IFCCHIMNEY,IFCBUILTELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCVEHICLE,IFCTRANSPORTATIONDEVICE,IFCGEOSLICE,IFCGEOMODEL,IFCBOREHOLE,IFCGEOTECHNICALASSEMBLY,IFCGEOTECHNICALSTRATUM,IFCGEOTECHNICALELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCEARTHWORKSCUT,IFCVOIDINGFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCVIBRATIONDAMPER,IFCSIGN,IFCREINFORCINGBAR,IFCTENDONCONDUIT,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCIMPACTPROTECTIONDEVICE,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBRIDGEPART,IFCROADPART,IFCRAILWAYPART,IFCMARINEPART,IFCFACILITYPARTCOMMON,IFCFACILITYPART,IFCBUILDING,IFCBRIDGE,IFCROAD,IFCRAILWAY,IFCMARINEFACILITY,IFCFACILITY,IFCBUILDINGSTOREY,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALELEMENT,IFCPRODUCT,IFCPROCEDURE,IFCEVENT,IFCTASK,IFCPROCESS];
InversePropertyDef['IFC4.3'][IFCOBJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],];
FromRawLineData['IFC4_3'][IFCOFFSETCURVE] = (d: RawLineData) => { new IFC4_3.IfcOffsetCurve(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCOFFSETCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOffsetCurve(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCOFFSETCURVE] = (i:IFC4_3.IfcOffsetCurve):unknown[] => { return [i.BasisCurve]; }
InheritanceDef['IFC4.3'][IFCOFFSETCURVE] = [IFCOFFSETCURVEBYDISTANCES,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D];
InversePropertyDef['IFC4.3'][IFCOFFSETCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCOFFSETCURVE2D] = (d: RawLineData) => { new IFC4_3.IfcOffsetCurve2D(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), new IFC4_3.IfcLogical(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCOFFSETCURVE2D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOffsetCurve2D(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCOFFSETCURVE2D] = (i:IFC4_3.IfcOffsetCurve2D):unknown[] => { return [i.BasisCurve, i.Distance, i.SelfIntersect]; }
InversePropertyDef['IFC4.3'][IFCOFFSETCURVE2D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCOFFSETCURVE3D] = (d: RawLineData) => { new IFC4_3.IfcOffsetCurve3D(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), new IFC4_3.IfcLogical(d.arguments[2].value), new Reference<IFC4_3.IfcDirection>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCOFFSETCURVE3D] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOffsetCurve3D(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCOFFSETCURVE3D] = (i:IFC4_3.IfcOffsetCurve3D):unknown[] => { return [i.BasisCurve, i.Distance, i.SelfIntersect, i.RefDirection]; }
InversePropertyDef['IFC4.3'][IFCOFFSETCURVE3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCOFFSETCURVEBYDISTANCES] = (d: RawLineData) => { new IFC4_3.IfcOffsetCurveByDistances(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcPointByDistanceExpression>(p.value)), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCOFFSETCURVEBYDISTANCES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOffsetCurveByDistances(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCOFFSETCURVEBYDISTANCES] = (i:IFC4_3.IfcOffsetCurveByDistances):unknown[] => { return [i.BasisCurve, i.OffsetValues, i.Tag]; }
InversePropertyDef['IFC4.3'][IFCOFFSETCURVEBYDISTANCES] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPCURVE] = (d: RawLineData) => { new IFC4_3.IfcPcurve(d.ID, new Reference<IFC4_3.IfcSurface>(d.arguments[0].value), new Reference<IFC4_3.IfcCurve>(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCPCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPcurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCPCURVE] = (i:IFC4_3.IfcPcurve):unknown[] => { return [i.BasisSurface, i.ReferenceCurve]; }
InversePropertyDef['IFC4.3'][IFCPCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPLANARBOX] = (d: RawLineData) => { new IFC4_3.IfcPlanarBox(d.ID, new IFC4_3.IfcLengthMeasure(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCPLANARBOX] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPlanarBox(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCPLANARBOX] = (i:IFC4_3.IfcPlanarBox):unknown[] => { return [i.SizeInX, i.SizeInY, i.Placement]; }
InversePropertyDef['IFC4.3'][IFCPLANARBOX] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPLANE] = (d: RawLineData) => { new IFC4_3.IfcPlane(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCPLANE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPlane(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPLANE] = (i:IFC4_3.IfcPlane):unknown[] => { return [i.Position]; }
InversePropertyDef['IFC4.3'][IFCPLANE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPOLYNOMIALCURVE] = (d: RawLineData) => { new IFC4_3.IfcPolynomialCurve(d.ID, new Reference<IFC4_3.IfcPlacement>(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC4_3.IfcReal(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4_3.IfcReal(p.value)), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4_3.IfcReal(p.value))); }
Constructors['IFC4_3'][IFCPOLYNOMIALCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPolynomialCurve(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPOLYNOMIALCURVE] = (i:IFC4_3.IfcPolynomialCurve):unknown[] => { return [i.Position, i.CoefficientsX, i.CoefficientsY, i.CoefficientsZ]; }
InversePropertyDef['IFC4.3'][IFCPOLYNOMIALCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPREDEFINEDCOLOUR] = (d: RawLineData) => { new IFC4_3.IfcPreDefinedColour(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCPREDEFINEDCOLOUR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPreDefinedColour(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPREDEFINEDCOLOUR] = (i:IFC4_3.IfcPreDefinedColour):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCPREDEFINEDCOLOUR] = [IFCDRAUGHTINGPREDEFINEDCOLOUR];
FromRawLineData['IFC4_3'][IFCPREDEFINEDCURVEFONT] = (d: RawLineData) => { new IFC4_3.IfcPreDefinedCurveFont(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCPREDEFINEDCURVEFONT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPreDefinedCurveFont(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPREDEFINEDCURVEFONT] = (i:IFC4_3.IfcPreDefinedCurveFont):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4.3'][IFCPREDEFINEDCURVEFONT] = [IFCDRAUGHTINGPREDEFINEDCURVEFONT];
FromRawLineData['IFC4_3'][IFCPREDEFINEDPROPERTYSET] = (d: RawLineData) => { new IFC4_3.IfcPreDefinedPropertySet(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPREDEFINEDPROPERTYSET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPreDefinedPropertySet(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPREDEFINEDPROPERTYSET] = (i:IFC4_3.IfcPreDefinedPropertySet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCPREDEFINEDPROPERTYSET] = [IFCPERMEABLECOVERINGPROPERTIES,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES];
InversePropertyDef['IFC4.3'][IFCPREDEFINEDPROPERTYSET] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCPROCEDURETYPE] = (d: RawLineData) => { new IFC4_3.IfcProcedureType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPROCEDURETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProcedureType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPROCEDURETYPE] = (i:IFC4_3.IfcProcedureType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ProcessType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPROCEDURETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4_3'][IFCPROCESS] = (d: RawLineData) => { new IFC4_3.IfcProcess(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCPROCESS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProcess(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCPROCESS] = (i:IFC4_3.IfcProcess):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription]; }
InheritanceDef['IFC4.3'][IFCPROCESS] = [IFCPROCEDURE,IFCEVENT,IFCTASK];
InversePropertyDef['IFC4.3'][IFCPROCESS] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4_3'][IFCPRODUCT] = (d: RawLineData) => { new IFC4_3.IfcProduct(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCPRODUCT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCPRODUCT] = (i:IFC4_3.IfcProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4.3'][IFCPRODUCT] = [IFCALIGNMENT,IFCLINEARPOSITIONINGELEMENT,IFCGRID,IFCREFERENT,IFCPOSITIONINGELEMENT,IFCDISTRIBUTIONPORT,IFCPORT,IFCALIGNMENTVERTICAL,IFCALIGNMENTSEGMENT,IFCALIGNMENTHORIZONTAL,IFCALIGNMENTCANT,IFCLINEARELEMENT,IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCELECTRICFLOWTREATMENTDEVICE,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSIGNAL,IFCSANITARYTERMINAL,IFCOUTLET,IFCMOBILETELECOMMUNICATIONSAPPLIANCE,IFCMEDICALDEVICE,IFCLIQUIDTERMINAL,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCONVEYORSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBUILDINGELEMENTPROXY,IFCBEARING,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCTRACKELEMENT,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCRAIL,IFCPLATE,IFCPAVEMENT,IFCNAVIGATIONELEMENT,IFCMOORINGDEVICE,IFCMEMBER,IFCKERB,IFCFOOTING,IFCREINFORCEDSOIL,IFCEARTHWORKSFILL,IFCEARTHWORKSELEMENT,IFCDOOR,IFCCAISSONFOUNDATION,IFCPILE,IFCDEEPFOUNDATION,IFCCURTAINWALL,IFCCOVERING,IFCCOURSE,IFCCOLUMN,IFCCHIMNEY,IFCBUILTELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCVEHICLE,IFCTRANSPORTATIONDEVICE,IFCGEOSLICE,IFCGEOMODEL,IFCBOREHOLE,IFCGEOTECHNICALASSEMBLY,IFCGEOTECHNICALSTRATUM,IFCGEOTECHNICALELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCEARTHWORKSCUT,IFCVOIDINGFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCVIBRATIONDAMPER,IFCSIGN,IFCREINFORCINGBAR,IFCTENDONCONDUIT,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCIMPACTPROTECTIONDEVICE,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBRIDGEPART,IFCROADPART,IFCRAILWAYPART,IFCMARINEPART,IFCFACILITYPARTCOMMON,IFCFACILITYPART,IFCBUILDING,IFCBRIDGE,IFCROAD,IFCRAILWAY,IFCMARINEFACILITY,IFCFACILITY,IFCBUILDINGSTOREY,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALELEMENT];
InversePropertyDef['IFC4.3'][IFCPRODUCT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCPROJECT] = (d: RawLineData) => { new IFC4_3.IfcProject(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcRepresentationContext>(p.value)), !d.arguments[8] ? null :new Reference<IFC4_3.IfcUnitAssignment>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCPROJECT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProject(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPROJECT] = (i:IFC4_3.IfcProject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.Phase, i.RepresentationContexts, i.UnitsInContext]; }
InversePropertyDef['IFC4.3'][IFCPROJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Declares',IFCRELDECLARES,4,true],];
FromRawLineData['IFC4_3'][IFCPROJECTLIBRARY] = (d: RawLineData) => { new IFC4_3.IfcProjectLibrary(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcRepresentationContext>(p.value)), !d.arguments[8] ? null :new Reference<IFC4_3.IfcUnitAssignment>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCPROJECTLIBRARY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProjectLibrary(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPROJECTLIBRARY] = (i:IFC4_3.IfcProjectLibrary):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.Phase, i.RepresentationContexts, i.UnitsInContext]; }
InversePropertyDef['IFC4.3'][IFCPROJECTLIBRARY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Declares',IFCRELDECLARES,4,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYBOUNDEDVALUE] = (d: RawLineData) => { new IFC4_3.IfcPropertyBoundedValue(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC4_3',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :TypeInitialiser('IFC4_3',d.arguments[5])); }
Constructors['IFC4_3'][IFCPROPERTYBOUNDEDVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyBoundedValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCPROPERTYBOUNDEDVALUE] = (i:IFC4_3.IfcPropertyBoundedValue):unknown[] => { return [i.Name, i.Specification, !i.UpperBoundValue ? null :Labelise(i.UpperBoundValue), !i.LowerBoundValue ? null :Labelise(i.LowerBoundValue), i.Unit, !i.SetPointValue ? null :Labelise(i.SetPointValue)]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYBOUNDEDVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYENUMERATEDVALUE] = (d: RawLineData) => { new IFC4_3.IfcPropertyEnumeratedValue(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => TypeInitialiser('IFC4_3',p)), !d.arguments[3] ? null :new Reference<IFC4_3.IfcPropertyEnumeration>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROPERTYENUMERATEDVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyEnumeratedValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROPERTYENUMERATEDVALUE] = (i:IFC4_3.IfcPropertyEnumeratedValue):unknown[] => { return [i.Name, i.Specification, !i.EnumerationValues ? null :i.EnumerationValues.map((p:any) => Labelise(p)), i.EnumerationReference]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYENUMERATEDVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYLISTVALUE] = (d: RawLineData) => { new IFC4_3.IfcPropertyListValue(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => TypeInitialiser('IFC4_3',p)), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROPERTYLISTVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyListValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROPERTYLISTVALUE] = (i:IFC4_3.IfcPropertyListValue):unknown[] => { return [i.Name, i.Specification, !i.ListValues ? null :i.ListValues.map((p:any) => Labelise(p)), i.Unit]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYLISTVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYREFERENCEVALUE] = (d: RawLineData) => { new IFC4_3.IfcPropertyReferenceValue(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcText(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROPERTYREFERENCEVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyReferenceValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROPERTYREFERENCEVALUE] = (i:IFC4_3.IfcPropertyReferenceValue):unknown[] => { return [i.Name, i.Specification, i.UsageName, i.PropertyReference]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYREFERENCEVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYSET] = (d: RawLineData) => { new IFC4_3.IfcPropertySet(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcProperty>(p.value))); }
Constructors['IFC4_3'][IFCPROPERTYSET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertySet(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCPROPERTYSET] = (i:IFC4_3.IfcPropertySet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.HasProperties]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYSET] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYSETTEMPLATE] = (d: RawLineData) => { new IFC4_3.IfcPropertySetTemplate(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcPropertyTemplate>(p.value))); }
Constructors['IFC4_3'][IFCPROPERTYSETTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertySetTemplate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCPROPERTYSETTEMPLATE] = (i:IFC4_3.IfcPropertySetTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.TemplateType, i.ApplicableEntity, i.HasPropertyTemplates]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYSETTEMPLATE] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Defines',IFCRELDEFINESBYTEMPLATE,5,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYSINGLEVALUE] = (d: RawLineData) => { new IFC4_3.IfcPropertySingleValue(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC4_3',d.arguments[2]), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROPERTYSINGLEVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertySingleValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROPERTYSINGLEVALUE] = (i:IFC4_3.IfcPropertySingleValue):unknown[] => { return [i.Name, i.Specification, !i.NominalValue ? null :Labelise(i.NominalValue), i.Unit]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYSINGLEVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYTABLEVALUE] = (d: RawLineData) => { new IFC4_3.IfcPropertyTableValue(d.ID, new IFC4_3.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcText(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => TypeInitialiser('IFC4_3',p)), !d.arguments[3] ? null :d.arguments[3].map((p:any) => TypeInitialiser('IFC4_3',p)), !d.arguments[4] ? null :new IFC4_3.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4_3'][IFCPROPERTYTABLEVALUE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyTableValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCPROPERTYTABLEVALUE] = (i:IFC4_3.IfcPropertyTableValue):unknown[] => { return [i.Name, i.Specification, !i.DefiningValues ? null :i.DefiningValues.map((p:any) => Labelise(p)), !i.DefinedValues ? null :i.DefinedValues.map((p:any) => Labelise(p)), i.Expression, i.DefiningUnit, i.DefinedUnit, i.CurveInterpolation]; }
InversePropertyDef['IFC4.3'][IFCPROPERTYTABLEVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4_3'][IFCPROPERTYTEMPLATE] = (d: RawLineData) => { new IFC4_3.IfcPropertyTemplate(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCPROPERTYTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPropertyTemplate(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPROPERTYTEMPLATE] = (i:IFC4_3.IfcPropertyTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCPROPERTYTEMPLATE] = [IFCCOMPLEXPROPERTYTEMPLATE,IFCSIMPLEPROPERTYTEMPLATE];
InversePropertyDef['IFC4.3'][IFCPROPERTYTEMPLATE] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['PartOfComplexTemplate',IFCCOMPLEXPROPERTYTEMPLATE,6,true],['PartOfPsetTemplate',IFCPROPERTYSETTEMPLATE,6,true],];
FromRawLineData['IFC4_3'][IFCRECTANGLEHOLLOWPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcRectangleHollowProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCRECTANGLEHOLLOWPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRectangleHollowProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCRECTANGLEHOLLOWPROFILEDEF] = (i:IFC4_3.IfcRectangleHollowProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim, i.WallThickness, i.InnerFilletRadius, i.OuterFilletRadius]; }
InversePropertyDef['IFC4.3'][IFCRECTANGLEHOLLOWPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCRECTANGULARPYRAMID] = (d: RawLineData) => { new IFC4_3.IfcRectangularPyramid(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCRECTANGULARPYRAMID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRectangularPyramid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCRECTANGULARPYRAMID] = (i:IFC4_3.IfcRectangularPyramid):unknown[] => { return [i.Position, i.XLength, i.YLength, i.Height]; }
InversePropertyDef['IFC4.3'][IFCRECTANGULARPYRAMID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCRECTANGULARTRIMMEDSURFACE] = (d: RawLineData) => { new IFC4_3.IfcRectangularTrimmedSurface(d.ID, new Reference<IFC4_3.IfcSurface>(d.arguments[0].value), new IFC4_3.IfcParameterValue(d.arguments[1].value), new IFC4_3.IfcParameterValue(d.arguments[2].value), new IFC4_3.IfcParameterValue(d.arguments[3].value), new IFC4_3.IfcParameterValue(d.arguments[4].value), new IFC4_3.IfcBoolean(d.arguments[5].value), new IFC4_3.IfcBoolean(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRECTANGULARTRIMMEDSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRectangularTrimmedSurface(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRECTANGULARTRIMMEDSURFACE] = (i:IFC4_3.IfcRectangularTrimmedSurface):unknown[] => { return [i.BasisSurface, i.U1, i.V1, i.U2, i.V2, i.Usense, i.Vsense]; }
InversePropertyDef['IFC4.3'][IFCRECTANGULARTRIMMEDSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcReinforcementDefinitionProperties(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcSectionReinforcementProperties>(p.value))); }
Constructors['IFC4_3'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcementDefinitionProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (i:IFC4_3.IfcReinforcementDefinitionProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.DefinitionType, i.ReinforcementSectionDefinitions]; }
InversePropertyDef['IFC4.3'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCRELASSIGNS] = (d: RawLineData) => { new IFC4_3.IfcRelAssigns(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), d.arguments[5]); }
Constructors['IFC4_3'][IFCRELASSIGNS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssigns(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELASSIGNS] = (i:IFC4_3.IfcRelAssigns):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType]; }
InheritanceDef['IFC4.3'][IFCRELASSIGNS] = [IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUPBYFACTOR,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTOCONTROL,IFCRELASSIGNSTOACTOR];
FromRawLineData['IFC4_3'][IFCRELASSIGNSTOACTOR] = (d: RawLineData) => { new IFC4_3.IfcRelAssignsToActor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC4_3.IfcActor>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcActorRole>(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCRELASSIGNSTOACTOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssignsToActor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCRELASSIGNSTOACTOR] = (i:IFC4_3.IfcRelAssignsToActor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingActor, i.ActingRole]; }
FromRawLineData['IFC4_3'][IFCRELASSIGNSTOCONTROL] = (d: RawLineData) => { new IFC4_3.IfcRelAssignsToControl(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC4_3.IfcControl>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRELASSIGNSTOCONTROL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssignsToControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRELASSIGNSTOCONTROL] = (i:IFC4_3.IfcRelAssignsToControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingControl]; }
FromRawLineData['IFC4_3'][IFCRELASSIGNSTOGROUP] = (d: RawLineData) => { new IFC4_3.IfcRelAssignsToGroup(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC4_3.IfcGroup>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRELASSIGNSTOGROUP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssignsToGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRELASSIGNSTOGROUP] = (i:IFC4_3.IfcRelAssignsToGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingGroup]; }
InheritanceDef['IFC4.3'][IFCRELASSIGNSTOGROUP] = [IFCRELASSIGNSTOGROUPBYFACTOR];
FromRawLineData['IFC4_3'][IFCRELASSIGNSTOGROUPBYFACTOR] = (d: RawLineData) => { new IFC4_3.IfcRelAssignsToGroupByFactor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC4_3.IfcGroup>(d.arguments[6].value), new IFC4_3.IfcRatioMeasure(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCRELASSIGNSTOGROUPBYFACTOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssignsToGroupByFactor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCRELASSIGNSTOGROUPBYFACTOR] = (i:IFC4_3.IfcRelAssignsToGroupByFactor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingGroup, i.Factor]; }
FromRawLineData['IFC4_3'][IFCRELASSIGNSTOPROCESS] = (d: RawLineData) => { new IFC4_3.IfcRelAssignsToProcess(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcMeasureWithUnit>(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCRELASSIGNSTOPROCESS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssignsToProcess(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCRELASSIGNSTOPROCESS] = (i:IFC4_3.IfcRelAssignsToProcess):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingProcess, i.QuantityInProcess]; }
FromRawLineData['IFC4_3'][IFCRELASSIGNSTOPRODUCT] = (d: RawLineData) => { new IFC4_3.IfcRelAssignsToProduct(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRELASSIGNSTOPRODUCT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssignsToProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRELASSIGNSTOPRODUCT] = (i:IFC4_3.IfcRelAssignsToProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingProduct]; }
FromRawLineData['IFC4_3'][IFCRELASSIGNSTORESOURCE] = (d: RawLineData) => { new IFC4_3.IfcRelAssignsToResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRELASSIGNSTORESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssignsToResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRELASSIGNSTORESOURCE] = (i:IFC4_3.IfcRelAssignsToResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingResource]; }
FromRawLineData['IFC4_3'][IFCRELASSOCIATES] = (d: RawLineData) => { new IFC4_3.IfcRelAssociates(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCRELASSOCIATES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssociates(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCRELASSOCIATES] = (i:IFC4_3.IfcRelAssociates):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects]; }
InheritanceDef['IFC4.3'][IFCRELASSOCIATES] = [IFCRELASSOCIATESPROFILEDEF,IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL];
FromRawLineData['IFC4_3'][IFCRELASSOCIATESAPPROVAL] = (d: RawLineData) => { new IFC4_3.IfcRelAssociatesApproval(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference<IFC4_3.IfcApproval>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELASSOCIATESAPPROVAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssociatesApproval(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELASSOCIATESAPPROVAL] = (i:IFC4_3.IfcRelAssociatesApproval):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingApproval]; }
FromRawLineData['IFC4_3'][IFCRELASSOCIATESCLASSIFICATION] = (d: RawLineData) => { new IFC4_3.IfcRelAssociatesClassification(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELASSOCIATESCLASSIFICATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssociatesClassification(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELASSOCIATESCLASSIFICATION] = (i:IFC4_3.IfcRelAssociatesClassification):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingClassification]; }
FromRawLineData['IFC4_3'][IFCRELASSOCIATESCONSTRAINT] = (d: RawLineData) => { new IFC4_3.IfcRelAssociatesConstraint(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), new Reference<IFC4_3.IfcConstraint>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRELASSOCIATESCONSTRAINT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssociatesConstraint(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRELASSOCIATESCONSTRAINT] = (i:IFC4_3.IfcRelAssociatesConstraint):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.Intent, i.RelatingConstraint]; }
FromRawLineData['IFC4_3'][IFCRELASSOCIATESDOCUMENT] = (d: RawLineData) => { new IFC4_3.IfcRelAssociatesDocument(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELASSOCIATESDOCUMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssociatesDocument(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELASSOCIATESDOCUMENT] = (i:IFC4_3.IfcRelAssociatesDocument):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingDocument]; }
FromRawLineData['IFC4_3'][IFCRELASSOCIATESLIBRARY] = (d: RawLineData) => { new IFC4_3.IfcRelAssociatesLibrary(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELASSOCIATESLIBRARY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssociatesLibrary(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELASSOCIATESLIBRARY] = (i:IFC4_3.IfcRelAssociatesLibrary):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingLibrary]; }
FromRawLineData['IFC4_3'][IFCRELASSOCIATESMATERIAL] = (d: RawLineData) => { new IFC4_3.IfcRelAssociatesMaterial(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELASSOCIATESMATERIAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssociatesMaterial(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELASSOCIATESMATERIAL] = (i:IFC4_3.IfcRelAssociatesMaterial):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingMaterial]; }
FromRawLineData['IFC4_3'][IFCRELASSOCIATESPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcRelAssociatesProfileDef(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference<IFC4_3.IfcProfileDef>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELASSOCIATESPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAssociatesProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELASSOCIATESPROFILEDEF] = (i:IFC4_3.IfcRelAssociatesProfileDef):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingProfileDef]; }
FromRawLineData['IFC4_3'][IFCRELCONNECTS] = (d: RawLineData) => { new IFC4_3.IfcRelConnects(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCRELCONNECTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnects(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTS] = (i:IFC4_3.IfcRelConnects):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCRELCONNECTS] = [IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELSPACEBOUNDARY1STLEVEL,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELPOSITIONS,IFCRELINTERFERESELEMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS];
FromRawLineData['IFC4_3'][IFCRELCONNECTSELEMENTS] = (d: RawLineData) => { new IFC4_3.IfcRelConnectsElements(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4_3.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC4_3.IfcElement>(d.arguments[5].value), new Reference<IFC4_3.IfcElement>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRELCONNECTSELEMENTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnectsElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTSELEMENTS] = (i:IFC4_3.IfcRelConnectsElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement]; }
InheritanceDef['IFC4.3'][IFCRELCONNECTSELEMENTS] = [IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS];
FromRawLineData['IFC4_3'][IFCRELCONNECTSPATHELEMENTS] = (d: RawLineData) => { new IFC4_3.IfcRelConnectsPathElements(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4_3.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC4_3.IfcElement>(d.arguments[5].value), new Reference<IFC4_3.IfcElement>(d.arguments[6].value), d.arguments[7].map((p:any) => new IFC4_3.IfcInteger(p.value)), d.arguments[8].map((p:any) => new IFC4_3.IfcInteger(p.value)), d.arguments[9], d.arguments[10]); }
Constructors['IFC4_3'][IFCRELCONNECTSPATHELEMENTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnectsPathElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTSPATHELEMENTS] = (i:IFC4_3.IfcRelConnectsPathElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement, i.RelatingPriorities, i.RelatedPriorities, i.RelatedConnectionType, i.RelatingConnectionType]; }
FromRawLineData['IFC4_3'][IFCRELCONNECTSPORTTOELEMENT] = (d: RawLineData) => { new IFC4_3.IfcRelConnectsPortToElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcPort>(d.arguments[4].value), new Reference<IFC4_3.IfcDistributionElement>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELCONNECTSPORTTOELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnectsPortToElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTSPORTTOELEMENT] = (i:IFC4_3.IfcRelConnectsPortToElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingPort, i.RelatedElement]; }
FromRawLineData['IFC4_3'][IFCRELCONNECTSPORTS] = (d: RawLineData) => { new IFC4_3.IfcRelConnectsPorts(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcPort>(d.arguments[4].value), new Reference<IFC4_3.IfcPort>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcElement>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRELCONNECTSPORTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnectsPorts(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTSPORTS] = (i:IFC4_3.IfcRelConnectsPorts):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingPort, i.RelatedPort, i.RealizingElement]; }
FromRawLineData['IFC4_3'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (d: RawLineData) => { new IFC4_3.IfcRelConnectsStructuralActivity(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC4_3.IfcStructuralActivity>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnectsStructuralActivity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (i:IFC4_3.IfcRelConnectsStructuralActivity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedStructuralActivity]; }
FromRawLineData['IFC4_3'][IFCRELCONNECTSSTRUCTURALMEMBER] = (d: RawLineData) => { new IFC4_3.IfcRelConnectsStructuralMember(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcStructuralMember>(d.arguments[4].value), new Reference<IFC4_3.IfcStructuralConnection>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcBoundaryCondition>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcStructuralConnectionCondition>(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCRELCONNECTSSTRUCTURALMEMBER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnectsStructuralMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTSSTRUCTURALMEMBER] = (i:IFC4_3.IfcRelConnectsStructuralMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingStructuralMember, i.RelatedStructuralConnection, i.AppliedCondition, i.AdditionalConditions, i.SupportedLength, i.ConditionCoordinateSystem]; }
InheritanceDef['IFC4.3'][IFCRELCONNECTSSTRUCTURALMEMBER] = [IFCRELCONNECTSWITHECCENTRICITY];
FromRawLineData['IFC4_3'][IFCRELCONNECTSWITHECCENTRICITY] = (d: RawLineData) => { new IFC4_3.IfcRelConnectsWithEccentricity(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcStructuralMember>(d.arguments[4].value), new Reference<IFC4_3.IfcStructuralConnection>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcBoundaryCondition>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcStructuralConnectionCondition>(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[9].value), new Reference<IFC4_3.IfcConnectionGeometry>(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCRELCONNECTSWITHECCENTRICITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnectsWithEccentricity(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTSWITHECCENTRICITY] = (i:IFC4_3.IfcRelConnectsWithEccentricity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingStructuralMember, i.RelatedStructuralConnection, i.AppliedCondition, i.AdditionalConditions, i.SupportedLength, i.ConditionCoordinateSystem, i.ConnectionConstraint]; }
FromRawLineData['IFC4_3'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (d: RawLineData) => { new IFC4_3.IfcRelConnectsWithRealizingElements(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4_3.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC4_3.IfcElement>(d.arguments[5].value), new Reference<IFC4_3.IfcElement>(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcElement>(p.value)), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelConnectsWithRealizingElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (i:IFC4_3.IfcRelConnectsWithRealizingElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement, i.RealizingElements, i.ConnectionType]; }
FromRawLineData['IFC4_3'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (d: RawLineData) => { new IFC4_3.IfcRelContainedInSpatialStructure(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcProduct>(p.value)), new Reference<IFC4_3.IfcSpatialElement>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelContainedInSpatialStructure(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (i:IFC4_3.IfcRelContainedInSpatialStructure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedElements, i.RelatingStructure]; }
FromRawLineData['IFC4_3'][IFCRELCOVERSBLDGELEMENTS] = (d: RawLineData) => { new IFC4_3.IfcRelCoversBldgElements(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcElement>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcCovering>(p.value))); }
Constructors['IFC4_3'][IFCRELCOVERSBLDGELEMENTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelCoversBldgElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELCOVERSBLDGELEMENTS] = (i:IFC4_3.IfcRelCoversBldgElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingBuildingElement, i.RelatedCoverings]; }
FromRawLineData['IFC4_3'][IFCRELCOVERSSPACES] = (d: RawLineData) => { new IFC4_3.IfcRelCoversSpaces(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcSpace>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcCovering>(p.value))); }
Constructors['IFC4_3'][IFCRELCOVERSSPACES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelCoversSpaces(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELCOVERSSPACES] = (i:IFC4_3.IfcRelCoversSpaces):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedCoverings]; }
FromRawLineData['IFC4_3'][IFCRELDECLARES] = (d: RawLineData) => { new IFC4_3.IfcRelDeclares(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcContext>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference(p.value))); }
Constructors['IFC4_3'][IFCRELDECLARES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelDeclares(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELDECLARES] = (i:IFC4_3.IfcRelDeclares):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingContext, i.RelatedDefinitions]; }
FromRawLineData['IFC4_3'][IFCRELDECOMPOSES] = (d: RawLineData) => { new IFC4_3.IfcRelDecomposes(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCRELDECOMPOSES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelDecomposes(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCRELDECOMPOSES] = (i:IFC4_3.IfcRelDecomposes):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCRELDECOMPOSES] = [IFCRELAGGREGATES,IFCRELADHERESTOELEMENT,IFCRELVOIDSELEMENT,IFCRELPROJECTSELEMENT,IFCRELNESTS];
FromRawLineData['IFC4_3'][IFCRELDEFINES] = (d: RawLineData) => { new IFC4_3.IfcRelDefines(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCRELDEFINES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelDefines(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCRELDEFINES] = (i:IFC4_3.IfcRelDefines):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4.3'][IFCRELDEFINES] = [IFCRELDEFINESBYTYPE,IFCRELDEFINESBYTEMPLATE,IFCRELDEFINESBYPROPERTIES,IFCRELDEFINESBYOBJECT];
FromRawLineData['IFC4_3'][IFCRELDEFINESBYOBJECT] = (d: RawLineData) => { new IFC4_3.IfcRelDefinesByObject(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObject>(p.value)), new Reference<IFC4_3.IfcObject>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELDEFINESBYOBJECT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelDefinesByObject(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELDEFINESBYOBJECT] = (i:IFC4_3.IfcRelDefinesByObject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingObject]; }
FromRawLineData['IFC4_3'][IFCRELDEFINESBYPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcRelDefinesByProperties(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELDEFINESBYPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelDefinesByProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELDEFINESBYPROPERTIES] = (i:IFC4_3.IfcRelDefinesByProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingPropertyDefinition]; }
FromRawLineData['IFC4_3'][IFCRELDEFINESBYTEMPLATE] = (d: RawLineData) => { new IFC4_3.IfcRelDefinesByTemplate(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), new Reference<IFC4_3.IfcPropertySetTemplate>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELDEFINESBYTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelDefinesByTemplate(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELDEFINESBYTEMPLATE] = (i:IFC4_3.IfcRelDefinesByTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedPropertySets, i.RelatingTemplate]; }
FromRawLineData['IFC4_3'][IFCRELDEFINESBYTYPE] = (d: RawLineData) => { new IFC4_3.IfcRelDefinesByType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcObject>(p.value)), new Reference<IFC4_3.IfcTypeObject>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELDEFINESBYTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelDefinesByType(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELDEFINESBYTYPE] = (i:IFC4_3.IfcRelDefinesByType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingType]; }
FromRawLineData['IFC4_3'][IFCRELFILLSELEMENT] = (d: RawLineData) => { new IFC4_3.IfcRelFillsElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcOpeningElement>(d.arguments[4].value), new Reference<IFC4_3.IfcElement>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELFILLSELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelFillsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELFILLSELEMENT] = (i:IFC4_3.IfcRelFillsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingOpeningElement, i.RelatedBuildingElement]; }
FromRawLineData['IFC4_3'][IFCRELFLOWCONTROLELEMENTS] = (d: RawLineData) => { new IFC4_3.IfcRelFlowControlElements(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4_3.IfcDistributionControlElement>(p.value)), new Reference<IFC4_3.IfcDistributionFlowElement>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELFLOWCONTROLELEMENTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelFlowControlElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELFLOWCONTROLELEMENTS] = (i:IFC4_3.IfcRelFlowControlElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedControlElements, i.RelatingFlowElement]; }
FromRawLineData['IFC4_3'][IFCRELINTERFERESELEMENTS] = (d: RawLineData) => { new IFC4_3.IfcRelInterferesElements(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcConnectionGeometry>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcSpatialZone>(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcIdentifier(d.arguments[8].value), new IFC4_3.IfcLogical(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCRELINTERFERESELEMENTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelInterferesElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCRELINTERFERESELEMENTS] = (i:IFC4_3.IfcRelInterferesElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedElement, i.InterferenceGeometry, i.InterferenceSpace, i.InterferenceType, i.ImpliedOrder]; }
FromRawLineData['IFC4_3'][IFCRELNESTS] = (d: RawLineData) => { new IFC4_3.IfcRelNests(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcObjectDefinition>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value))); }
Constructors['IFC4_3'][IFCRELNESTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelNests(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELNESTS] = (i:IFC4_3.IfcRelNests):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingObject, i.RelatedObjects]; }
FromRawLineData['IFC4_3'][IFCRELPOSITIONS] = (d: RawLineData) => { new IFC4_3.IfcRelPositions(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcPositioningElement>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcProduct>(p.value))); }
Constructors['IFC4_3'][IFCRELPOSITIONS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelPositions(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELPOSITIONS] = (i:IFC4_3.IfcRelPositions):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingPositioningElement, i.RelatedProducts]; }
FromRawLineData['IFC4_3'][IFCRELPROJECTSELEMENT] = (d: RawLineData) => { new IFC4_3.IfcRelProjectsElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcElement>(d.arguments[4].value), new Reference<IFC4_3.IfcFeatureElementAddition>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELPROJECTSELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelProjectsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELPROJECTSELEMENT] = (i:IFC4_3.IfcRelProjectsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedFeatureElement]; }
FromRawLineData['IFC4_3'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (d: RawLineData) => { new IFC4_3.IfcRelReferencedInSpatialStructure(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference<IFC4_3.IfcSpatialElement>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelReferencedInSpatialStructure(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (i:IFC4_3.IfcRelReferencedInSpatialStructure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedElements, i.RelatingStructure]; }
FromRawLineData['IFC4_3'][IFCRELSEQUENCE] = (d: RawLineData) => { new IFC4_3.IfcRelSequence(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcProcess>(d.arguments[4].value), new Reference<IFC4_3.IfcProcess>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcLagTime>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCRELSEQUENCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelSequence(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCRELSEQUENCE] = (i:IFC4_3.IfcRelSequence):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingProcess, i.RelatedProcess, i.TimeLag, i.SequenceType, i.UserDefinedSequenceType]; }
FromRawLineData['IFC4_3'][IFCRELSERVICESBUILDINGS] = (d: RawLineData) => { new IFC4_3.IfcRelServicesBuildings(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcSystem>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcSpatialElement>(p.value))); }
Constructors['IFC4_3'][IFCRELSERVICESBUILDINGS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelServicesBuildings(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELSERVICESBUILDINGS] = (i:IFC4_3.IfcRelServicesBuildings):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSystem, i.RelatedBuildings]; }
FromRawLineData['IFC4_3'][IFCRELSPACEBOUNDARY] = (d: RawLineData) => { new IFC4_3.IfcRelSpaceBoundary(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC4_3.IfcElement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcConnectionGeometry>(d.arguments[6].value), d.arguments[7], d.arguments[8]); }
Constructors['IFC4_3'][IFCRELSPACEBOUNDARY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelSpaceBoundary(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCRELSPACEBOUNDARY] = (i:IFC4_3.IfcRelSpaceBoundary):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedBuildingElement, i.ConnectionGeometry, i.PhysicalOrVirtualBoundary, i.InternalOrExternalBoundary]; }
InheritanceDef['IFC4.3'][IFCRELSPACEBOUNDARY] = [IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELSPACEBOUNDARY1STLEVEL];
FromRawLineData['IFC4_3'][IFCRELSPACEBOUNDARY1STLEVEL] = (d: RawLineData) => { new IFC4_3.IfcRelSpaceBoundary1stLevel(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC4_3.IfcElement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcConnectionGeometry>(d.arguments[6].value), d.arguments[7], d.arguments[8], !d.arguments[9] ? null :new Reference<IFC4_3.IfcRelSpaceBoundary1stLevel>(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCRELSPACEBOUNDARY1STLEVEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelSpaceBoundary1stLevel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCRELSPACEBOUNDARY1STLEVEL] = (i:IFC4_3.IfcRelSpaceBoundary1stLevel):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedBuildingElement, i.ConnectionGeometry, i.PhysicalOrVirtualBoundary, i.InternalOrExternalBoundary, i.ParentBoundary]; }
InheritanceDef['IFC4.3'][IFCRELSPACEBOUNDARY1STLEVEL] = [IFCRELSPACEBOUNDARY2NDLEVEL];
InversePropertyDef['IFC4.3'][IFCRELSPACEBOUNDARY1STLEVEL] = [['InnerBoundaries',IFCRELSPACEBOUNDARY1STLEVEL,9,true],];
FromRawLineData['IFC4_3'][IFCRELSPACEBOUNDARY2NDLEVEL] = (d: RawLineData) => { new IFC4_3.IfcRelSpaceBoundary2ndLevel(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC4_3.IfcElement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcConnectionGeometry>(d.arguments[6].value), d.arguments[7], d.arguments[8], !d.arguments[9] ? null :new Reference<IFC4_3.IfcRelSpaceBoundary1stLevel>(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC4_3.IfcRelSpaceBoundary2ndLevel>(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCRELSPACEBOUNDARY2NDLEVEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelSpaceBoundary2ndLevel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCRELSPACEBOUNDARY2NDLEVEL] = (i:IFC4_3.IfcRelSpaceBoundary2ndLevel):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedBuildingElement, i.ConnectionGeometry, i.PhysicalOrVirtualBoundary, i.InternalOrExternalBoundary, i.ParentBoundary, i.CorrespondingBoundary]; }
InversePropertyDef['IFC4.3'][IFCRELSPACEBOUNDARY2NDLEVEL] = [['InnerBoundaries',IFCRELSPACEBOUNDARY1STLEVEL,9,true],['Corresponds',IFCRELSPACEBOUNDARY2NDLEVEL,10,true],];
FromRawLineData['IFC4_3'][IFCRELVOIDSELEMENT] = (d: RawLineData) => { new IFC4_3.IfcRelVoidsElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcElement>(d.arguments[4].value), new Reference<IFC4_3.IfcFeatureElementSubtraction>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCRELVOIDSELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelVoidsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELVOIDSELEMENT] = (i:IFC4_3.IfcRelVoidsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingBuildingElement, i.RelatedOpeningElement]; }
FromRawLineData['IFC4_3'][IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (d: RawLineData) => { new IFC4_3.IfcReparametrisedCompositeCurveSegment(d.ID, d.arguments[0], new IFC4_3.IfcBoolean(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value), new IFC4_3.IfcParameterValue(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReparametrisedCompositeCurveSegment(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (i:IFC4_3.IfcReparametrisedCompositeCurveSegment):unknown[] => { return [i.Transition, i.SameSense, i.ParentCurve, i.ParamLength]; }
InversePropertyDef['IFC4.3'][IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['UsingCurves',IFCCOMPOSITECURVE,0,true],];
FromRawLineData['IFC4_3'][IFCRESOURCE] = (d: RawLineData) => { new IFC4_3.IfcResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCRESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCRESOURCE] = (i:IFC4_3.IfcResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription]; }
InheritanceDef['IFC4.3'][IFCRESOURCE] = [IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE];
InversePropertyDef['IFC4.3'][IFCRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCREVOLVEDAREASOLID] = (d: RawLineData) => { new IFC4_3.IfcRevolvedAreaSolid(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcAxis1Placement>(d.arguments[2].value), new IFC4_3.IfcPlaneAngleMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCREVOLVEDAREASOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRevolvedAreaSolid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCREVOLVEDAREASOLID] = (i:IFC4_3.IfcRevolvedAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Axis, i.Angle]; }
InheritanceDef['IFC4.3'][IFCREVOLVEDAREASOLID] = [IFCREVOLVEDAREASOLIDTAPERED];
InversePropertyDef['IFC4.3'][IFCREVOLVEDAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCREVOLVEDAREASOLIDTAPERED] = (d: RawLineData) => { new IFC4_3.IfcRevolvedAreaSolidTapered(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcAxis1Placement>(d.arguments[2].value), new IFC4_3.IfcPlaneAngleMeasure(d.arguments[3].value), new Reference<IFC4_3.IfcProfileDef>(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCREVOLVEDAREASOLIDTAPERED] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRevolvedAreaSolidTapered(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCREVOLVEDAREASOLIDTAPERED] = (i:IFC4_3.IfcRevolvedAreaSolidTapered):unknown[] => { return [i.SweptArea, i.Position, i.Axis, i.Angle, i.EndSweptArea]; }
InversePropertyDef['IFC4.3'][IFCREVOLVEDAREASOLIDTAPERED] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCRIGHTCIRCULARCONE] = (d: RawLineData) => { new IFC4_3.IfcRightCircularCone(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCRIGHTCIRCULARCONE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRightCircularCone(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCRIGHTCIRCULARCONE] = (i:IFC4_3.IfcRightCircularCone):unknown[] => { return [i.Position, i.Height, i.BottomRadius]; }
InversePropertyDef['IFC4.3'][IFCRIGHTCIRCULARCONE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCRIGHTCIRCULARCYLINDER] = (d: RawLineData) => { new IFC4_3.IfcRightCircularCylinder(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCRIGHTCIRCULARCYLINDER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRightCircularCylinder(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCRIGHTCIRCULARCYLINDER] = (i:IFC4_3.IfcRightCircularCylinder):unknown[] => { return [i.Position, i.Height, i.Radius]; }
InversePropertyDef['IFC4.3'][IFCRIGHTCIRCULARCYLINDER] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSECTIONEDSOLID] = (d: RawLineData) => { new IFC4_3.IfcSectionedSolid(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcProfileDef>(p.value))); }
Constructors['IFC4_3'][IFCSECTIONEDSOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSectionedSolid(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCSECTIONEDSOLID] = (i:IFC4_3.IfcSectionedSolid):unknown[] => { return [i.Directrix, i.CrossSections]; }
InheritanceDef['IFC4.3'][IFCSECTIONEDSOLID] = [IFCSECTIONEDSOLIDHORIZONTAL];
InversePropertyDef['IFC4.3'][IFCSECTIONEDSOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSECTIONEDSOLIDHORIZONTAL] = (d: RawLineData) => { new IFC4_3.IfcSectionedSolidHorizontal(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcProfileDef>(p.value)), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcAxis2PlacementLinear>(p.value))); }
Constructors['IFC4_3'][IFCSECTIONEDSOLIDHORIZONTAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSectionedSolidHorizontal(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSECTIONEDSOLIDHORIZONTAL] = (i:IFC4_3.IfcSectionedSolidHorizontal):unknown[] => { return [i.Directrix, i.CrossSections, i.CrossSectionPositions]; }
InversePropertyDef['IFC4.3'][IFCSECTIONEDSOLIDHORIZONTAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSECTIONEDSURFACE] = (d: RawLineData) => { new IFC4_3.IfcSectionedSurface(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcAxis2PlacementLinear>(p.value)), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcProfileDef>(p.value))); }
Constructors['IFC4_3'][IFCSECTIONEDSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSectionedSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSECTIONEDSURFACE] = (i:IFC4_3.IfcSectionedSurface):unknown[] => { return [i.Directrix, i.CrossSectionPositions, i.CrossSections]; }
InversePropertyDef['IFC4.3'][IFCSECTIONEDSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSIMPLEPROPERTYTEMPLATE] = (d: RawLineData) => { new IFC4_3.IfcSimplePropertyTemplate(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcPropertyEnumeration>(d.arguments[7].value), !d.arguments[8] ? null :new Reference(d.arguments[8].value), !d.arguments[9] ? null :new Reference(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcLabel(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4_3'][IFCSIMPLEPROPERTYTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSimplePropertyTemplate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCSIMPLEPROPERTYTEMPLATE] = (i:IFC4_3.IfcSimplePropertyTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.TemplateType, i.PrimaryMeasureType, i.SecondaryMeasureType, i.Enumerators, i.PrimaryUnit, i.SecondaryUnit, i.Expression, i.AccessState]; }
InversePropertyDef['IFC4.3'][IFCSIMPLEPROPERTYTEMPLATE] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['PartOfComplexTemplate',IFCCOMPLEXPROPERTYTEMPLATE,6,true],['PartOfPsetTemplate',IFCPROPERTYSETTEMPLATE,6,true],];
FromRawLineData['IFC4_3'][IFCSPATIALELEMENT] = (d: RawLineData) => { new IFC4_3.IfcSpatialElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCSPATIALELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpatialElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCSPATIALELEMENT] = (i:IFC4_3.IfcSpatialElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName]; }
InheritanceDef['IFC4.3'][IFCSPATIALELEMENT] = [IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBRIDGEPART,IFCROADPART,IFCRAILWAYPART,IFCMARINEPART,IFCFACILITYPARTCOMMON,IFCFACILITYPART,IFCBUILDING,IFCBRIDGE,IFCROAD,IFCRAILWAY,IFCMARINEFACILITY,IFCFACILITY,IFCBUILDINGSTOREY,IFCSPATIALSTRUCTUREELEMENT];
InversePropertyDef['IFC4.3'][IFCSPATIALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCSPATIALELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcSpatialElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSPATIALELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpatialElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSPATIALELEMENTTYPE] = (i:IFC4_3.IfcSpatialElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCSPATIALELEMENTTYPE] = [IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE];
InversePropertyDef['IFC4.3'][IFCSPATIALELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSPATIALSTRUCTUREELEMENT] = (d: RawLineData) => { new IFC4_3.IfcSpatialStructureElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSPATIALSTRUCTUREELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpatialStructureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSPATIALSTRUCTUREELEMENT] = (i:IFC4_3.IfcSpatialStructureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType]; }
InheritanceDef['IFC4.3'][IFCSPATIALSTRUCTUREELEMENT] = [IFCSPACE,IFCSITE,IFCBRIDGEPART,IFCROADPART,IFCRAILWAYPART,IFCMARINEPART,IFCFACILITYPARTCOMMON,IFCFACILITYPART,IFCBUILDING,IFCBRIDGE,IFCROAD,IFCRAILWAY,IFCMARINEFACILITY,IFCFACILITY,IFCBUILDINGSTOREY];
InversePropertyDef['IFC4.3'][IFCSPATIALSTRUCTUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcSpatialStructureElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpatialStructureElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (i:IFC4_3.IfcSpatialStructureElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = [IFCSPACETYPE];
InversePropertyDef['IFC4.3'][IFCSPATIALSTRUCTUREELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSPATIALZONE] = (d: RawLineData) => { new IFC4_3.IfcSpatialZone(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSPATIALZONE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpatialZone(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSPATIALZONE] = (i:IFC4_3.IfcSpatialZone):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSPATIALZONE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCSPATIALZONETYPE] = (d: RawLineData) => { new IFC4_3.IfcSpatialZoneType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcLabel(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCSPATIALZONETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpatialZoneType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCSPATIALZONETYPE] = (i:IFC4_3.IfcSpatialZoneType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.LongName]; }
InversePropertyDef['IFC4.3'][IFCSPATIALZONETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSPHERE] = (d: RawLineData) => { new IFC4_3.IfcSphere(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCSPHERE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSphere(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCSPHERE] = (i:IFC4_3.IfcSphere):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC4.3'][IFCSPHERE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSPHERICALSURFACE] = (d: RawLineData) => { new IFC4_3.IfcSphericalSurface(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCSPHERICALSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSphericalSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCSPHERICALSURFACE] = (i:IFC4_3.IfcSphericalSurface):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC4.3'][IFCSPHERICALSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSPIRAL] = (d: RawLineData) => { new IFC4_3.IfcSpiral(d.ID, !d.arguments[0] ? null :new Reference(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCSPIRAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpiral(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCSPIRAL] = (i:IFC4_3.IfcSpiral):unknown[] => { return [i.Position]; }
InheritanceDef['IFC4.3'][IFCSPIRAL] = [IFCSINESPIRAL,IFCSEVENTHORDERPOLYNOMIALSPIRAL,IFCSECONDORDERPOLYNOMIALSPIRAL,IFCCOSINESPIRAL,IFCCLOTHOID,IFCTHIRDORDERPOLYNOMIALSPIRAL];
InversePropertyDef['IFC4.3'][IFCSPIRAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALACTIVITY] = (d: RawLineData) => { new IFC4_3.IfcStructuralActivity(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSTRUCTURALACTIVITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralActivity(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALACTIVITY] = (i:IFC4_3.IfcStructuralActivity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALACTIVITY] = [IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALACTIVITY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALITEM] = (d: RawLineData) => { new IFC4_3.IfcStructuralItem(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALITEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralItem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALITEM] = (i:IFC4_3.IfcStructuralItem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALITEM] = [IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALITEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALMEMBER] = (d: RawLineData) => { new IFC4_3.IfcStructuralMember(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALMEMBER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALMEMBER] = (i:IFC4_3.IfcStructuralMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALMEMBER] = [IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALREACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralReaction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSTRUCTURALREACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALREACTION] = (i:IFC4_3.IfcStructuralReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALREACTION] = [IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALSURFACEMEMBER] = (d: RawLineData) => { new IFC4_3.IfcStructuralSurfaceMember(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALSURFACEMEMBER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralSurfaceMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALSURFACEMEMBER] = (i:IFC4_3.IfcStructuralSurfaceMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Thickness]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALSURFACEMEMBER] = [IFCSTRUCTURALSURFACEMEMBERVARYING];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALSURFACEMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (d: RawLineData) => { new IFC4_3.IfcStructuralSurfaceMemberVarying(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralSurfaceMemberVarying(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (i:IFC4_3.IfcStructuralSurfaceMemberVarying):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Thickness]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALSURFACEMEMBERVARYING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALSURFACEREACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralSurfaceReaction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCSTRUCTURALSURFACEREACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralSurfaceReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALSURFACEREACTION] = (i:IFC4_3.IfcStructuralSurfaceReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALSURFACEREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSUBCONTRACTRESOURCETYPE] = (d: RawLineData) => { new IFC4_3.IfcSubContractResourceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4_3'][IFCSUBCONTRACTRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSubContractResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCSUBCONTRACTRESOURCETYPE] = (i:IFC4_3.IfcSubContractResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSUBCONTRACTRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCSURFACECURVE] = (d: RawLineData) => { new IFC4_3.IfcSurfaceCurve(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcPcurve>(p.value)), d.arguments[2]); }
Constructors['IFC4_3'][IFCSURFACECURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSURFACECURVE] = (i:IFC4_3.IfcSurfaceCurve):unknown[] => { return [i.Curve3D, i.AssociatedGeometry, i.MasterRepresentation]; }
InheritanceDef['IFC4.3'][IFCSURFACECURVE] = [IFCSEAMCURVE,IFCINTERSECTIONCURVE];
InversePropertyDef['IFC4.3'][IFCSURFACECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSURFACECURVESWEPTAREASOLID] = (d: RawLineData) => { new IFC4_3.IfcSurfaceCurveSweptAreaSolid(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4_3',d.arguments[4]), new Reference<IFC4_3.IfcSurface>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCSURFACECURVESWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceCurveSweptAreaSolid(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCSURFACECURVESWEPTAREASOLID] = (i:IFC4_3.IfcSurfaceCurveSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Directrix, !i.StartParam ? null :Labelise(i.StartParam), !i.EndParam ? null :Labelise(i.EndParam), i.ReferenceSurface]; }
InversePropertyDef['IFC4.3'][IFCSURFACECURVESWEPTAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSURFACEOFLINEAREXTRUSION] = (d: RawLineData) => { new IFC4_3.IfcSurfaceOfLinearExtrusion(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcDirection>(d.arguments[2].value), new IFC4_3.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSURFACEOFLINEAREXTRUSION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceOfLinearExtrusion(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSURFACEOFLINEAREXTRUSION] = (i:IFC4_3.IfcSurfaceOfLinearExtrusion):unknown[] => { return [i.SweptCurve, i.Position, i.ExtrudedDirection, i.Depth]; }
InversePropertyDef['IFC4.3'][IFCSURFACEOFLINEAREXTRUSION] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSURFACEOFREVOLUTION] = (d: RawLineData) => { new IFC4_3.IfcSurfaceOfRevolution(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcAxis1Placement>(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCSURFACEOFREVOLUTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceOfRevolution(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSURFACEOFREVOLUTION] = (i:IFC4_3.IfcSurfaceOfRevolution):unknown[] => { return [i.SweptCurve, i.Position, i.AxisPosition]; }
InversePropertyDef['IFC4.3'][IFCSURFACEOFREVOLUTION] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSYSTEMFURNITUREELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcSystemFurnitureElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSYSTEMFURNITUREELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSystemFurnitureElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSYSTEMFURNITUREELEMENTTYPE] = (i:IFC4_3.IfcSystemFurnitureElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSYSTEMFURNITUREELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTASK] = (d: RawLineData) => { new IFC4_3.IfcTask(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), new IFC4_3.IfcBoolean(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcInteger(d.arguments[10].value), !d.arguments[11] ? null :new Reference<IFC4_3.IfcTaskTime>(d.arguments[11].value), d.arguments[12]); }
Constructors['IFC4_3'][IFCTASK] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTask(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCTASK] = (i:IFC4_3.IfcTask):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Status, i.WorkMethod, i.IsMilestone, i.Priority, i.TaskTime, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTASK] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4_3'][IFCTASKTYPE] = (d: RawLineData) => { new IFC4_3.IfcTaskType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcLabel(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCTASKTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTaskType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCTASKTYPE] = (i:IFC4_3.IfcTaskType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ProcessType, i.PredefinedType, i.WorkMethod]; }
InversePropertyDef['IFC4.3'][IFCTASKTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4_3'][IFCTESSELLATEDFACESET] = (d: RawLineData) => { new IFC4_3.IfcTessellatedFaceSet(d.ID, new Reference<IFC4_3.IfcCartesianPointList3D>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCTESSELLATEDFACESET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTessellatedFaceSet(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCTESSELLATEDFACESET] = (i:IFC4_3.IfcTessellatedFaceSet):unknown[] => { return [i.Coordinates, i.Closed]; }
InheritanceDef['IFC4.3'][IFCTESSELLATEDFACESET] = [IFCPOLYGONALFACESET,IFCTRIANGULATEDIRREGULARNETWORK,IFCTRIANGULATEDFACESET];
InversePropertyDef['IFC4.3'][IFCTESSELLATEDFACESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasColours',IFCINDEXEDCOLOURMAP,0,true],['HasTextures',IFCINDEXEDTEXTUREMAP,1,true],];
FromRawLineData['IFC4_3'][IFCTHIRDORDERPOLYNOMIALSPIRAL] = (d: RawLineData) => { new IFC4_3.IfcThirdOrderPolynomialSpiral(d.ID, !d.arguments[0] ? null :new Reference(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCTHIRDORDERPOLYNOMIALSPIRAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcThirdOrderPolynomialSpiral(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCTHIRDORDERPOLYNOMIALSPIRAL] = (i:IFC4_3.IfcThirdOrderPolynomialSpiral):unknown[] => { return [i.Position, i.CubicTerm, i.QuadraticTerm, i.LinearTerm, i.ConstantTerm]; }
InversePropertyDef['IFC4.3'][IFCTHIRDORDERPOLYNOMIALSPIRAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCTOROIDALSURFACE] = (d: RawLineData) => { new IFC4_3.IfcToroidalSurface(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCTOROIDALSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcToroidalSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCTOROIDALSURFACE] = (i:IFC4_3.IfcToroidalSurface):unknown[] => { return [i.Position, i.MajorRadius, i.MinorRadius]; }
InversePropertyDef['IFC4.3'][IFCTOROIDALSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCTRANSPORTATIONDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcTransportationDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCTRANSPORTATIONDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTransportationDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTRANSPORTATIONDEVICETYPE] = (i:IFC4_3.IfcTransportationDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCTRANSPORTATIONDEVICETYPE] = [IFCTRANSPORTELEMENTTYPE,IFCVEHICLETYPE];
InversePropertyDef['IFC4.3'][IFCTRANSPORTATIONDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTRIANGULATEDFACESET] = (d: RawLineData) => { new IFC4_3.IfcTriangulatedFaceSet(d.ID, new Reference<IFC4_3.IfcCartesianPointList3D>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4_3.IfcParameterValue(p.value)), d.arguments[3].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value))); }
Constructors['IFC4_3'][IFCTRIANGULATEDFACESET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTriangulatedFaceSet(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCTRIANGULATEDFACESET] = (i:IFC4_3.IfcTriangulatedFaceSet):unknown[] => { return [i.Coordinates, i.Closed, i.Normals, i.CoordIndex, i.PnIndex]; }
InheritanceDef['IFC4.3'][IFCTRIANGULATEDFACESET] = [IFCTRIANGULATEDIRREGULARNETWORK];
InversePropertyDef['IFC4.3'][IFCTRIANGULATEDFACESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasColours',IFCINDEXEDCOLOURMAP,0,true],['HasTextures',IFCINDEXEDTEXTUREMAP,1,true],];
FromRawLineData['IFC4_3'][IFCTRIANGULATEDIRREGULARNETWORK] = (d: RawLineData) => { new IFC4_3.IfcTriangulatedIrregularNetwork(d.ID, new Reference<IFC4_3.IfcCartesianPointList3D>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4_3.IfcParameterValue(p.value)), d.arguments[3].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value)), d.arguments[5].map((p:any) => new IFC4_3.IfcInteger(p.value))); }
Constructors['IFC4_3'][IFCTRIANGULATEDIRREGULARNETWORK] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTriangulatedIrregularNetwork(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCTRIANGULATEDIRREGULARNETWORK] = (i:IFC4_3.IfcTriangulatedIrregularNetwork):unknown[] => { return [i.Coordinates, i.Closed, i.Normals, i.CoordIndex, i.PnIndex, i.Flags]; }
InversePropertyDef['IFC4.3'][IFCTRIANGULATEDIRREGULARNETWORK] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasColours',IFCINDEXEDCOLOURMAP,0,true],['HasTextures',IFCINDEXEDTEXTUREMAP,1,true],];
FromRawLineData['IFC4_3'][IFCVEHICLETYPE] = (d: RawLineData) => { new IFC4_3.IfcVehicleType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCVEHICLETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVehicleType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCVEHICLETYPE] = (i:IFC4_3.IfcVehicleType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVEHICLETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCWINDOWLININGPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcWindowLiningProperties(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[11].value), !d.arguments[12] ? null :new Reference<IFC4_3.IfcShapeAspect>(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[15].value)); }
Constructors['IFC4_3'][IFCWINDOWLININGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWindowLiningProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15]); }
ToRawLineData['IFC4_3'][IFCWINDOWLININGPROPERTIES] = (i:IFC4_3.IfcWindowLiningProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.LiningDepth, i.LiningThickness, i.TransomThickness, i.MullionThickness, i.FirstTransomOffset, i.SecondTransomOffset, i.FirstMullionOffset, i.SecondMullionOffset, i.ShapeAspectStyle, i.LiningOffset, i.LiningToPanelOffsetX, i.LiningToPanelOffsetY]; }
InversePropertyDef['IFC4.3'][IFCWINDOWLININGPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCWINDOWPANELPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcWindowPanelProperties(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC4_3.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCWINDOWPANELPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWindowPanelProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCWINDOWPANELPROPERTIES] = (i:IFC4_3.IfcWindowPanelProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.OperationType, i.PanelPosition, i.FrameDepth, i.FrameThickness, i.ShapeAspectStyle]; }
InversePropertyDef['IFC4.3'][IFCWINDOWPANELPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCACTOR] = (d: RawLineData) => { new IFC4_3.IfcActor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), new Reference(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCACTOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcActor(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCACTOR] = (i:IFC4_3.IfcActor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheActor]; }
InheritanceDef['IFC4.3'][IFCACTOR] = [IFCOCCUPANT];
InversePropertyDef['IFC4.3'][IFCACTOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsActingUpon',IFCRELASSIGNSTOACTOR,6,true],];
FromRawLineData['IFC4_3'][IFCADVANCEDBREP] = (d: RawLineData) => { new IFC4_3.IfcAdvancedBrep(d.ID, new Reference<IFC4_3.IfcClosedShell>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCADVANCEDBREP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAdvancedBrep(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCADVANCEDBREP] = (i:IFC4_3.IfcAdvancedBrep):unknown[] => { return [i.Outer]; }
InheritanceDef['IFC4.3'][IFCADVANCEDBREP] = [IFCADVANCEDBREPWITHVOIDS];
InversePropertyDef['IFC4.3'][IFCADVANCEDBREP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCADVANCEDBREPWITHVOIDS] = (d: RawLineData) => { new IFC4_3.IfcAdvancedBrepWithVoids(d.ID, new Reference<IFC4_3.IfcClosedShell>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcClosedShell>(p.value))); }
Constructors['IFC4_3'][IFCADVANCEDBREPWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAdvancedBrepWithVoids(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCADVANCEDBREPWITHVOIDS] = (i:IFC4_3.IfcAdvancedBrepWithVoids):unknown[] => { return [i.Outer, i.Voids]; }
InversePropertyDef['IFC4.3'][IFCADVANCEDBREPWITHVOIDS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCANNOTATION] = (d: RawLineData) => { new IFC4_3.IfcAnnotation(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4_3'][IFCANNOTATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAnnotation(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCANNOTATION] = (i:IFC4_3.IfcAnnotation):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCANNOTATION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCBSPLINESURFACE] = (d: RawLineData) => { new IFC4_3.IfcBSplineSurface(d.ID, new IFC4_3.IfcInteger(d.arguments[0].value), new IFC4_3.IfcInteger(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcCartesianPoint>(p.value)), d.arguments[3], new IFC4_3.IfcLogical(d.arguments[4].value), new IFC4_3.IfcLogical(d.arguments[5].value), new IFC4_3.IfcLogical(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCBSPLINESURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBSplineSurface(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCBSPLINESURFACE] = (i:IFC4_3.IfcBSplineSurface):unknown[] => { return [i.UDegree, i.VDegree, i.ControlPointsList, i.SurfaceForm, i.UClosed, i.VClosed, i.SelfIntersect]; }
InheritanceDef['IFC4.3'][IFCBSPLINESURFACE] = [IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS];
InversePropertyDef['IFC4.3'][IFCBSPLINESURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBSPLINESURFACEWITHKNOTS] = (d: RawLineData) => { new IFC4_3.IfcBSplineSurfaceWithKnots(d.ID, new IFC4_3.IfcInteger(d.arguments[0].value), new IFC4_3.IfcInteger(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcCartesianPoint>(p.value)), d.arguments[3], new IFC4_3.IfcLogical(d.arguments[4].value), new IFC4_3.IfcLogical(d.arguments[5].value), new IFC4_3.IfcLogical(d.arguments[6].value), d.arguments[7].map((p:any) => new IFC4_3.IfcInteger(p.value)), d.arguments[8].map((p:any) => new IFC4_3.IfcInteger(p.value)), d.arguments[9].map((p:any) => new IFC4_3.IfcParameterValue(p.value)), d.arguments[10].map((p:any) => new IFC4_3.IfcParameterValue(p.value)), d.arguments[11]); }
Constructors['IFC4_3'][IFCBSPLINESURFACEWITHKNOTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBSplineSurfaceWithKnots(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCBSPLINESURFACEWITHKNOTS] = (i:IFC4_3.IfcBSplineSurfaceWithKnots):unknown[] => { return [i.UDegree, i.VDegree, i.ControlPointsList, i.SurfaceForm, i.UClosed, i.VClosed, i.SelfIntersect, i.UMultiplicities, i.VMultiplicities, i.UKnots, i.VKnots, i.KnotSpec]; }
InheritanceDef['IFC4.3'][IFCBSPLINESURFACEWITHKNOTS] = [IFCRATIONALBSPLINESURFACEWITHKNOTS];
InversePropertyDef['IFC4.3'][IFCBSPLINESURFACEWITHKNOTS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBLOCK] = (d: RawLineData) => { new IFC4_3.IfcBlock(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCBLOCK] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBlock(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCBLOCK] = (i:IFC4_3.IfcBlock):unknown[] => { return [i.Position, i.XLength, i.YLength, i.ZLength]; }
InversePropertyDef['IFC4.3'][IFCBLOCK] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBOOLEANCLIPPINGRESULT] = (d: RawLineData) => { new IFC4_3.IfcBooleanClippingResult(d.ID, d.arguments[0], new Reference(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCBOOLEANCLIPPINGRESULT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBooleanClippingResult(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCBOOLEANCLIPPINGRESULT] = (i:IFC4_3.IfcBooleanClippingResult):unknown[] => { return [i.Operator, i.FirstOperand, i.SecondOperand]; }
InversePropertyDef['IFC4.3'][IFCBOOLEANCLIPPINGRESULT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBOUNDEDCURVE] = (d: RawLineData) => { new IFC4_3.IfcBoundedCurve(d.ID, ); }
Constructors['IFC4_3'][IFCBOUNDEDCURVE] = (expressID:number, _:any) => { return new IFC4_3.IfcBoundedCurve(expressID, ); }
ToRawLineData['IFC4_3'][IFCBOUNDEDCURVE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4.3'][IFCBOUNDEDCURVE] = [IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFCINDEXEDPOLYCURVE,IFCSEGMENTEDREFERENCECURVE,IFCGRADIENTCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVE];
InversePropertyDef['IFC4.3'][IFCBOUNDEDCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBUILDINGSTOREY] = (d: RawLineData) => { new IFC4_3.IfcBuildingStorey(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCBUILDINGSTOREY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuildingStorey(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCBUILDINGSTOREY] = (i:IFC4_3.IfcBuildingStorey):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.Elevation]; }
InversePropertyDef['IFC4.3'][IFCBUILDINGSTOREY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCBUILTELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcBuiltElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCBUILTELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuiltElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCBUILTELEMENTTYPE] = (i:IFC4_3.IfcBuiltElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCBUILTELEMENTTYPE] = [IFCBUILDINGELEMENTPROXYTYPE,IFCBEARINGTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCTRACKELEMENTTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCRAILTYPE,IFCPLATETYPE,IFCPAVEMENTTYPE,IFCNAVIGATIONELEMENTTYPE,IFCMOORINGDEVICETYPE,IFCMEMBERTYPE,IFCKERBTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCAISSONFOUNDATIONTYPE,IFCPILETYPE,IFCDEEPFOUNDATIONTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOURSETYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE];
InversePropertyDef['IFC4.3'][IFCBUILTELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCHIMNEYTYPE] = (d: RawLineData) => { new IFC4_3.IfcChimneyType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCHIMNEYTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcChimneyType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCHIMNEYTYPE] = (i:IFC4_3.IfcChimneyType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCHIMNEYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCIRCLEHOLLOWPROFILEDEF] = (d: RawLineData) => { new IFC4_3.IfcCircleHollowProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4_3.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4_3.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCCIRCLEHOLLOWPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCircleHollowProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCCIRCLEHOLLOWPROFILEDEF] = (i:IFC4_3.IfcCircleHollowProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Radius, i.WallThickness]; }
InversePropertyDef['IFC4.3'][IFCCIRCLEHOLLOWPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4_3'][IFCCIVILELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcCivilElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCCIVILELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCivilElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCIVILELEMENTTYPE] = (i:IFC4_3.IfcCivilElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InversePropertyDef['IFC4.3'][IFCCIVILELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCLOTHOID] = (d: RawLineData) => { new IFC4_3.IfcClothoid(d.ID, !d.arguments[0] ? null :new Reference(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCLOTHOID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcClothoid(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCLOTHOID] = (i:IFC4_3.IfcClothoid):unknown[] => { return [i.Position, i.ClothoidConstant]; }
InversePropertyDef['IFC4.3'][IFCCLOTHOID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCOLUMNTYPE] = (d: RawLineData) => { new IFC4_3.IfcColumnType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCOLUMNTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcColumnType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOLUMNTYPE] = (i:IFC4_3.IfcColumnType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOLUMNTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCOMPLEXPROPERTYTEMPLATE] = (d: RawLineData) => { new IFC4_3.IfcComplexPropertyTemplate(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcPropertyTemplate>(p.value))); }
Constructors['IFC4_3'][IFCCOMPLEXPROPERTYTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcComplexPropertyTemplate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCCOMPLEXPROPERTYTEMPLATE] = (i:IFC4_3.IfcComplexPropertyTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.UsageName, i.TemplateType, i.HasPropertyTemplates]; }
InversePropertyDef['IFC4.3'][IFCCOMPLEXPROPERTYTEMPLATE] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['PartOfComplexTemplate',IFCCOMPLEXPROPERTYTEMPLATE,6,true],['PartOfPsetTemplate',IFCPROPERTYSETTEMPLATE,6,true],];
FromRawLineData['IFC4_3'][IFCCOMPOSITECURVE] = (d: RawLineData) => { new IFC4_3.IfcCompositeCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSegment>(p.value)), new IFC4_3.IfcLogical(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCOMPOSITECURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCompositeCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCOMPOSITECURVE] = (i:IFC4_3.IfcCompositeCurve):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InheritanceDef['IFC4.3'][IFCCOMPOSITECURVE] = [IFCSEGMENTEDREFERENCECURVE,IFCGRADIENTCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE];
InversePropertyDef['IFC4.3'][IFCCOMPOSITECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCOMPOSITECURVEONSURFACE] = (d: RawLineData) => { new IFC4_3.IfcCompositeCurveOnSurface(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSegment>(p.value)), new IFC4_3.IfcLogical(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCOMPOSITECURVEONSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCompositeCurveOnSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCOMPOSITECURVEONSURFACE] = (i:IFC4_3.IfcCompositeCurveOnSurface):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InheritanceDef['IFC4.3'][IFCCOMPOSITECURVEONSURFACE] = [IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE];
InversePropertyDef['IFC4.3'][IFCCOMPOSITECURVEONSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCONIC] = (d: RawLineData) => { new IFC4_3.IfcConic(d.ID, new Reference(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCCONIC] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConic(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCCONIC] = (i:IFC4_3.IfcConic):unknown[] => { return [i.Position]; }
InheritanceDef['IFC4.3'][IFCCONIC] = [IFCCIRCLE,IFCELLIPSE];
InversePropertyDef['IFC4.3'][IFCCONIC] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (d: RawLineData) => { new IFC4_3.IfcConstructionEquipmentResourceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4_3'][IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstructionEquipmentResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (i:IFC4_3.IfcConstructionEquipmentResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (d: RawLineData) => { new IFC4_3.IfcConstructionMaterialResourceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4_3'][IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstructionMaterialResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (i:IFC4_3.IfcConstructionMaterialResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONSTRUCTIONMATERIALRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (d: RawLineData) => { new IFC4_3.IfcConstructionProductResourceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4_3.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4_3'][IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstructionProductResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (i:IFC4_3.IfcConstructionProductResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCONSTRUCTIONRESOURCE] = (d: RawLineData) => { new IFC4_3.IfcConstructionResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCCONSTRUCTIONRESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstructionResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCONSTRUCTIONRESOURCE] = (i:IFC4_3.IfcConstructionResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity]; }
InheritanceDef['IFC4.3'][IFCCONSTRUCTIONRESOURCE] = [IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE];
InversePropertyDef['IFC4.3'][IFCCONSTRUCTIONRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCONTROL] = (d: RawLineData) => { new IFC4_3.IfcControl(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCCONTROL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCCONTROL] = (i:IFC4_3.IfcControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification]; }
InheritanceDef['IFC4.3'][IFCCONTROL] = [IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCWORKCALENDAR,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCCOSTSCHEDULE,IFCCOSTITEM];
InversePropertyDef['IFC4.3'][IFCCONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCCOSINESPIRAL] = (d: RawLineData) => { new IFC4_3.IfcCosineSpiral(d.ID, !d.arguments[0] ? null :new Reference(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCCOSINESPIRAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCosineSpiral(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCCOSINESPIRAL] = (i:IFC4_3.IfcCosineSpiral):unknown[] => { return [i.Position, i.CosineTerm, i.ConstantTerm]; }
InversePropertyDef['IFC4.3'][IFCCOSINESPIRAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCOSTITEM] = (d: RawLineData) => { new IFC4_3.IfcCostItem(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcCostValue>(p.value)), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcPhysicalQuantity>(p.value))); }
Constructors['IFC4_3'][IFCCOSTITEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCostItem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOSTITEM] = (i:IFC4_3.IfcCostItem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.CostValues, i.CostQuantities]; }
InversePropertyDef['IFC4.3'][IFCCOSTITEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCCOSTSCHEDULE] = (d: RawLineData) => { new IFC4_3.IfcCostSchedule(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcDateTime(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcDateTime(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCCOSTSCHEDULE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCostSchedule(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOSTSCHEDULE] = (i:IFC4_3.IfcCostSchedule):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.Status, i.SubmittedOn, i.UpdateDate]; }
InversePropertyDef['IFC4.3'][IFCCOSTSCHEDULE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCCOURSETYPE] = (d: RawLineData) => { new IFC4_3.IfcCourseType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCOURSETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCourseType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOURSETYPE] = (i:IFC4_3.IfcCourseType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOURSETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCOVERINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcCoveringType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCOVERINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCoveringType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOVERINGTYPE] = (i:IFC4_3.IfcCoveringType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOVERINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCREWRESOURCE] = (d: RawLineData) => { new IFC4_3.IfcCrewResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4_3'][IFCCREWRESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCrewResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCCREWRESOURCE] = (i:IFC4_3.IfcCrewResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCREWRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCURTAINWALLTYPE] = (d: RawLineData) => { new IFC4_3.IfcCurtainWallType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCURTAINWALLTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurtainWallType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCURTAINWALLTYPE] = (i:IFC4_3.IfcCurtainWallType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCURTAINWALLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCYLINDRICALSURFACE] = (d: RawLineData) => { new IFC4_3.IfcCylindricalSurface(d.ID, new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCYLINDRICALSURFACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCylindricalSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCYLINDRICALSURFACE] = (i:IFC4_3.IfcCylindricalSurface):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC4.3'][IFCCYLINDRICALSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCDEEPFOUNDATIONTYPE] = (d: RawLineData) => { new IFC4_3.IfcDeepFoundationType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCDEEPFOUNDATIONTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDeepFoundationType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDEEPFOUNDATIONTYPE] = (i:IFC4_3.IfcDeepFoundationType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCDEEPFOUNDATIONTYPE] = [IFCCAISSONFOUNDATIONTYPE,IFCPILETYPE];
InversePropertyDef['IFC4.3'][IFCDEEPFOUNDATIONTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID] = (d: RawLineData) => { new IFC4_3.IfcDirectrixDerivedReferenceSweptAreaSolid(d.ID, new Reference<IFC4_3.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4_3.IfcCurve>(d.arguments[2].value), !d.arguments[3] ? null :TypeInitialiser('IFC4_3',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4_3',d.arguments[4]), new Reference<IFC4_3.IfcDirection>(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDirectrixDerivedReferenceSweptAreaSolid(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID] = (i:IFC4_3.IfcDirectrixDerivedReferenceSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Directrix, !i.StartParam ? null :Labelise(i.StartParam), !i.EndParam ? null :Labelise(i.EndParam), i.FixedReference]; }
InversePropertyDef['IFC4.3'][IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcDistributionElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCDISTRIBUTIONELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONELEMENTTYPE] = (i:IFC4_3.IfcDistributionElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCDISTRIBUTIONELEMENTTYPE] = [IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCELECTRICFLOWTREATMENTDEVICETYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSIGNALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE,IFCMEDICALDEVICETYPE,IFCLIQUIDTERMINALTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCONVEYORSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE];
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcDistributionFlowElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionFlowElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (i:IFC4_3.IfcDistributionFlowElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = [IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCELECTRICFLOWTREATMENTDEVICETYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSIGNALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE,IFCMEDICALDEVICETYPE,IFCLIQUIDTERMINALTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCONVEYORSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE];
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDOORLININGPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcDoorLiningProperties(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcNonNegativeLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new Reference<IFC4_3.IfcShapeAspect>(d.arguments[14].value), !d.arguments[15] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[16].value)); }
Constructors['IFC4_3'][IFCDOORLININGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDoorLiningProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC4_3'][IFCDOORLININGPROPERTIES] = (i:IFC4_3.IfcDoorLiningProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.LiningDepth, i.LiningThickness, i.ThresholdDepth, i.ThresholdThickness, i.TransomThickness, i.TransomOffset, i.LiningOffset, i.ThresholdOffset, i.CasingThickness, i.CasingDepth, i.ShapeAspectStyle, i.LiningToPanelOffsetX, i.LiningToPanelOffsetY]; }
InversePropertyDef['IFC4.3'][IFCDOORLININGPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCDOORPANELPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcDoorPanelProperties(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC4_3.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCDOORPANELPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDoorPanelProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDOORPANELPROPERTIES] = (i:IFC4_3.IfcDoorPanelProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.PanelDepth, i.PanelOperation, i.PanelWidth, i.PanelPosition, i.ShapeAspectStyle]; }
InversePropertyDef['IFC4.3'][IFCDOORPANELPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCDOORTYPE] = (d: RawLineData) => { new IFC4_3.IfcDoorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], d.arguments[10], !d.arguments[11] ? null :new IFC4_3.IfcBoolean(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4_3'][IFCDOORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDoorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCDOORTYPE] = (i:IFC4_3.IfcDoorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.OperationType, i.ParameterTakesPrecedence, i.UserDefinedOperationType]; }
InversePropertyDef['IFC4.3'][IFCDOORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (d: RawLineData) => { new IFC4_3.IfcDraughtingPreDefinedColour(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDraughtingPreDefinedColour(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (i:IFC4_3.IfcDraughtingPreDefinedColour):unknown[] => { return [i.Name]; }
FromRawLineData['IFC4_3'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (d: RawLineData) => { new IFC4_3.IfcDraughtingPreDefinedCurveFont(d.ID, new IFC4_3.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDraughtingPreDefinedCurveFont(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (i:IFC4_3.IfcDraughtingPreDefinedCurveFont):unknown[] => { return [i.Name]; }
FromRawLineData['IFC4_3'][IFCELEMENT] = (d: RawLineData) => { new IFC4_3.IfcElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCELEMENT] = (i:IFC4_3.IfcElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCELEMENT] = [IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCELECTRICFLOWTREATMENTDEVICE,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSIGNAL,IFCSANITARYTERMINAL,IFCOUTLET,IFCMOBILETELECOMMUNICATIONSAPPLIANCE,IFCMEDICALDEVICE,IFCLIQUIDTERMINAL,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCONVEYORSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBUILDINGELEMENTPROXY,IFCBEARING,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCTRACKELEMENT,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCRAIL,IFCPLATE,IFCPAVEMENT,IFCNAVIGATIONELEMENT,IFCMOORINGDEVICE,IFCMEMBER,IFCKERB,IFCFOOTING,IFCREINFORCEDSOIL,IFCEARTHWORKSFILL,IFCEARTHWORKSELEMENT,IFCDOOR,IFCCAISSONFOUNDATION,IFCPILE,IFCDEEPFOUNDATION,IFCCURTAINWALL,IFCCOVERING,IFCCOURSE,IFCCOLUMN,IFCCHIMNEY,IFCBUILTELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCVEHICLE,IFCTRANSPORTATIONDEVICE,IFCGEOSLICE,IFCGEOMODEL,IFCBOREHOLE,IFCGEOTECHNICALASSEMBLY,IFCGEOTECHNICALSTRATUM,IFCGEOTECHNICALELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCEARTHWORKSCUT,IFCVOIDINGFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCVIBRATIONDAMPER,IFCSIGN,IFCREINFORCINGBAR,IFCTENDONCONDUIT,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCIMPACTPROTECTIONDEVICE,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY];
InversePropertyDef['IFC4.3'][IFCELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCELEMENTASSEMBLY] = (d: RawLineData) => { new IFC4_3.IfcElementAssembly(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCELEMENTASSEMBLY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElementAssembly(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELEMENTASSEMBLY] = (i:IFC4_3.IfcElementAssembly):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.AssemblyPlace, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELEMENTASSEMBLY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCELEMENTASSEMBLYTYPE] = (d: RawLineData) => { new IFC4_3.IfcElementAssemblyType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCELEMENTASSEMBLYTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElementAssemblyType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELEMENTASSEMBLYTYPE] = (i:IFC4_3.IfcElementAssemblyType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELEMENTASSEMBLYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELEMENTCOMPONENT] = (d: RawLineData) => { new IFC4_3.IfcElementComponent(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCELEMENTCOMPONENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElementComponent(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCELEMENTCOMPONENT] = (i:IFC4_3.IfcElementComponent):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCELEMENTCOMPONENT] = [IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCVIBRATIONDAMPER,IFCSIGN,IFCREINFORCINGBAR,IFCTENDONCONDUIT,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCIMPACTPROTECTIONDEVICE,IFCFASTENER];
InversePropertyDef['IFC4.3'][IFCELEMENTCOMPONENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCELEMENTCOMPONENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcElementComponentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCELEMENTCOMPONENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElementComponentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELEMENTCOMPONENTTYPE] = (i:IFC4_3.IfcElementComponentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCELEMENTCOMPONENTTYPE] = [IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCVIBRATIONDAMPERTYPE,IFCSIGNTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONCONDUITTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCIMPACTPROTECTIONDEVICETYPE,IFCFASTENERTYPE];
InversePropertyDef['IFC4.3'][IFCELEMENTCOMPONENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELLIPSE] = (d: RawLineData) => { new IFC4_3.IfcEllipse(d.ID, new Reference(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCELLIPSE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEllipse(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCELLIPSE] = (i:IFC4_3.IfcEllipse):unknown[] => { return [i.Position, i.SemiAxis1, i.SemiAxis2]; }
InversePropertyDef['IFC4.3'][IFCELLIPSE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCENERGYCONVERSIONDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcEnergyConversionDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCENERGYCONVERSIONDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEnergyConversionDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCENERGYCONVERSIONDEVICETYPE] = (i:IFC4_3.IfcEnergyConversionDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCENERGYCONVERSIONDEVICETYPE] = [IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE];
InversePropertyDef['IFC4.3'][IFCENERGYCONVERSIONDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCENGINETYPE] = (d: RawLineData) => { new IFC4_3.IfcEngineType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCENGINETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEngineType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCENGINETYPE] = (i:IFC4_3.IfcEngineType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCENGINETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCEVAPORATIVECOOLERTYPE] = (d: RawLineData) => { new IFC4_3.IfcEvaporativeCoolerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCEVAPORATIVECOOLERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEvaporativeCoolerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCEVAPORATIVECOOLERTYPE] = (i:IFC4_3.IfcEvaporativeCoolerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCEVAPORATIVECOOLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCEVAPORATORTYPE] = (d: RawLineData) => { new IFC4_3.IfcEvaporatorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCEVAPORATORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEvaporatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCEVAPORATORTYPE] = (i:IFC4_3.IfcEvaporatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCEVAPORATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCEVENT] = (d: RawLineData) => { new IFC4_3.IfcEvent(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), d.arguments[7], d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcLabel(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC4_3.IfcEventTime>(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCEVENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEvent(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCEVENT] = (i:IFC4_3.IfcEvent):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.PredefinedType, i.EventTriggerType, i.UserDefinedEventTriggerType, i.EventOccurenceTime]; }
InversePropertyDef['IFC4.3'][IFCEVENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4_3'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (d: RawLineData) => { new IFC4_3.IfcExternalSpatialStructureElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExternalSpatialStructureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (i:IFC4_3.IfcExternalSpatialStructureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName]; }
InheritanceDef['IFC4.3'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = [IFCEXTERNALSPATIALELEMENT];
InversePropertyDef['IFC4.3'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCFACETEDBREP] = (d: RawLineData) => { new IFC4_3.IfcFacetedBrep(d.ID, new Reference<IFC4_3.IfcClosedShell>(d.arguments[0].value)); }
Constructors['IFC4_3'][IFCFACETEDBREP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFacetedBrep(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCFACETEDBREP] = (i:IFC4_3.IfcFacetedBrep):unknown[] => { return [i.Outer]; }
InheritanceDef['IFC4.3'][IFCFACETEDBREP] = [IFCFACETEDBREPWITHVOIDS];
InversePropertyDef['IFC4.3'][IFCFACETEDBREP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFACETEDBREPWITHVOIDS] = (d: RawLineData) => { new IFC4_3.IfcFacetedBrepWithVoids(d.ID, new Reference<IFC4_3.IfcClosedShell>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcClosedShell>(p.value))); }
Constructors['IFC4_3'][IFCFACETEDBREPWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFacetedBrepWithVoids(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCFACETEDBREPWITHVOIDS] = (i:IFC4_3.IfcFacetedBrepWithVoids):unknown[] => { return [i.Outer, i.Voids]; }
InversePropertyDef['IFC4.3'][IFCFACETEDBREPWITHVOIDS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCFACILITY] = (d: RawLineData) => { new IFC4_3.IfcFacility(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFACILITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFacility(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFACILITY] = (i:IFC4_3.IfcFacility):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType]; }
InheritanceDef['IFC4.3'][IFCFACILITY] = [IFCBUILDING,IFCBRIDGE,IFCROAD,IFCRAILWAY,IFCMARINEFACILITY];
InversePropertyDef['IFC4.3'][IFCFACILITY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCFACILITYPART] = (d: RawLineData) => { new IFC4_3.IfcFacilityPart(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCFACILITYPART] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFacilityPart(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCFACILITYPART] = (i:IFC4_3.IfcFacilityPart):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.UsageType]; }
InheritanceDef['IFC4.3'][IFCFACILITYPART] = [IFCBRIDGEPART,IFCROADPART,IFCRAILWAYPART,IFCMARINEPART,IFCFACILITYPARTCOMMON];
InversePropertyDef['IFC4.3'][IFCFACILITYPART] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCFACILITYPARTCOMMON] = (d: RawLineData) => { new IFC4_3.IfcFacilityPartCommon(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], d.arguments[10]); }
Constructors['IFC4_3'][IFCFACILITYPARTCOMMON] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFacilityPartCommon(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCFACILITYPARTCOMMON] = (i:IFC4_3.IfcFacilityPartCommon):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.UsageType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFACILITYPARTCOMMON] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCFASTENER] = (d: RawLineData) => { new IFC4_3.IfcFastener(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFASTENER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFastener(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFASTENER] = (i:IFC4_3.IfcFastener):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFASTENER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCFASTENERTYPE] = (d: RawLineData) => { new IFC4_3.IfcFastenerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCFASTENERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFastenerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCFASTENERTYPE] = (i:IFC4_3.IfcFastenerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFASTENERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFEATUREELEMENT] = (d: RawLineData) => { new IFC4_3.IfcFeatureElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFEATUREELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFeatureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFEATUREELEMENT] = (i:IFC4_3.IfcFeatureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFEATUREELEMENT] = [IFCSURFACEFEATURE,IFCEARTHWORKSCUT,IFCVOIDINGFEATURE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION];
InversePropertyDef['IFC4.3'][IFCFEATUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCFEATUREELEMENTADDITION] = (d: RawLineData) => { new IFC4_3.IfcFeatureElementAddition(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFEATUREELEMENTADDITION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFeatureElementAddition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFEATUREELEMENTADDITION] = (i:IFC4_3.IfcFeatureElementAddition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFEATUREELEMENTADDITION] = [IFCPROJECTIONELEMENT];
InversePropertyDef['IFC4.3'][IFCFEATUREELEMENTADDITION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['ProjectsElements',IFCRELPROJECTSELEMENT,5,false],];
FromRawLineData['IFC4_3'][IFCFEATUREELEMENTSUBTRACTION] = (d: RawLineData) => { new IFC4_3.IfcFeatureElementSubtraction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFEATUREELEMENTSUBTRACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFeatureElementSubtraction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFEATUREELEMENTSUBTRACTION] = (i:IFC4_3.IfcFeatureElementSubtraction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFEATUREELEMENTSUBTRACTION] = [IFCEARTHWORKSCUT,IFCVOIDINGFEATURE,IFCOPENINGELEMENT];
InversePropertyDef['IFC4.3'][IFCFEATUREELEMENTSUBTRACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC4_3'][IFCFLOWCONTROLLERTYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowControllerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCFLOWCONTROLLERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowControllerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWCONTROLLERTYPE] = (i:IFC4_3.IfcFlowControllerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCFLOWCONTROLLERTYPE] = [IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE];
InversePropertyDef['IFC4.3'][IFCFLOWCONTROLLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWFITTINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowFittingType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCFLOWFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWFITTINGTYPE] = (i:IFC4_3.IfcFlowFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCFLOWFITTINGTYPE] = [IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE];
InversePropertyDef['IFC4.3'][IFCFLOWFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWMETERTYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowMeterType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCFLOWMETERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowMeterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCFLOWMETERTYPE] = (i:IFC4_3.IfcFlowMeterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFLOWMETERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWMOVINGDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowMovingDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCFLOWMOVINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowMovingDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWMOVINGDEVICETYPE] = (i:IFC4_3.IfcFlowMovingDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCFLOWMOVINGDEVICETYPE] = [IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE];
InversePropertyDef['IFC4.3'][IFCFLOWMOVINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWSEGMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowSegmentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCFLOWSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWSEGMENTTYPE] = (i:IFC4_3.IfcFlowSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCFLOWSEGMENTTYPE] = [IFCDUCTSEGMENTTYPE,IFCCONVEYORSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE];
InversePropertyDef['IFC4.3'][IFCFLOWSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowStorageDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCFLOWSTORAGEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowStorageDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWSTORAGEDEVICETYPE] = (i:IFC4_3.IfcFlowStorageDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCFLOWSTORAGEDEVICETYPE] = [IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE];
InversePropertyDef['IFC4.3'][IFCFLOWSTORAGEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWTERMINALTYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowTerminalType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCFLOWTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWTERMINALTYPE] = (i:IFC4_3.IfcFlowTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCFLOWTERMINALTYPE] = [IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSIGNALTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE,IFCMEDICALDEVICETYPE,IFCLIQUIDTERMINALTYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE];
InversePropertyDef['IFC4.3'][IFCFLOWTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWTREATMENTDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowTreatmentDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCFLOWTREATMENTDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowTreatmentDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWTREATMENTDEVICETYPE] = (i:IFC4_3.IfcFlowTreatmentDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCFLOWTREATMENTDEVICETYPE] = [IFCFILTERTYPE,IFCELECTRICFLOWTREATMENTDEVICETYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE];
InversePropertyDef['IFC4.3'][IFCFLOWTREATMENTDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFOOTINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcFootingType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCFOOTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFootingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCFOOTINGTYPE] = (i:IFC4_3.IfcFootingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFOOTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFURNISHINGELEMENT] = (d: RawLineData) => { new IFC4_3.IfcFurnishingElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFURNISHINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFurnishingElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFURNISHINGELEMENT] = (i:IFC4_3.IfcFurnishingElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFURNISHINGELEMENT] = [IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE];
InversePropertyDef['IFC4.3'][IFCFURNISHINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCFURNITURE] = (d: RawLineData) => { new IFC4_3.IfcFurniture(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFURNITURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFurniture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFURNITURE] = (i:IFC4_3.IfcFurniture):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFURNITURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCGEOGRAPHICELEMENT] = (d: RawLineData) => { new IFC4_3.IfcGeographicElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCGEOGRAPHICELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeographicElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCGEOGRAPHICELEMENT] = (i:IFC4_3.IfcGeographicElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCGEOGRAPHICELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCGEOTECHNICALELEMENT] = (d: RawLineData) => { new IFC4_3.IfcGeotechnicalElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCGEOTECHNICALELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeotechnicalElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCGEOTECHNICALELEMENT] = (i:IFC4_3.IfcGeotechnicalElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCGEOTECHNICALELEMENT] = [IFCGEOSLICE,IFCGEOMODEL,IFCBOREHOLE,IFCGEOTECHNICALASSEMBLY,IFCGEOTECHNICALSTRATUM];
InversePropertyDef['IFC4.3'][IFCGEOTECHNICALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCGEOTECHNICALSTRATUM] = (d: RawLineData) => { new IFC4_3.IfcGeotechnicalStratum(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCGEOTECHNICALSTRATUM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeotechnicalStratum(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCGEOTECHNICALSTRATUM] = (i:IFC4_3.IfcGeotechnicalStratum):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCGEOTECHNICALSTRATUM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCGRADIENTCURVE] = (d: RawLineData) => { new IFC4_3.IfcGradientCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSegment>(p.value)), new IFC4_3.IfcLogical(d.arguments[1].value), new Reference<IFC4_3.IfcBoundedCurve>(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcPlacement>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCGRADIENTCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGradientCurve(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCGRADIENTCURVE] = (i:IFC4_3.IfcGradientCurve):unknown[] => { return [i.Segments, i.SelfIntersect, i.BaseCurve, i.EndPoint]; }
InversePropertyDef['IFC4.3'][IFCGRADIENTCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCGROUP] = (d: RawLineData) => { new IFC4_3.IfcGroup(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCGROUP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGroup(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCGROUP] = (i:IFC4_3.IfcGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC4.3'][IFCGROUP] = [IFCASSET,IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILTSYSTEM,IFCBUILDINGSYSTEM,IFCZONE,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADGROUP,IFCINVENTORY];
InversePropertyDef['IFC4.3'][IFCGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCHEATEXCHANGERTYPE] = (d: RawLineData) => { new IFC4_3.IfcHeatExchangerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCHEATEXCHANGERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcHeatExchangerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCHEATEXCHANGERTYPE] = (i:IFC4_3.IfcHeatExchangerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCHEATEXCHANGERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCHUMIDIFIERTYPE] = (d: RawLineData) => { new IFC4_3.IfcHumidifierType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCHUMIDIFIERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcHumidifierType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCHUMIDIFIERTYPE] = (i:IFC4_3.IfcHumidifierType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCHUMIDIFIERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCIMPACTPROTECTIONDEVICE] = (d: RawLineData) => { new IFC4_3.IfcImpactProtectionDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCIMPACTPROTECTIONDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcImpactProtectionDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCIMPACTPROTECTIONDEVICE] = (i:IFC4_3.IfcImpactProtectionDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCIMPACTPROTECTIONDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCIMPACTPROTECTIONDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcImpactProtectionDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCIMPACTPROTECTIONDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcImpactProtectionDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCIMPACTPROTECTIONDEVICETYPE] = (i:IFC4_3.IfcImpactProtectionDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCIMPACTPROTECTIONDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCINDEXEDPOLYCURVE] = (d: RawLineData) => { new IFC4_3.IfcIndexedPolyCurve(d.ID, new Reference<IFC4_3.IfcCartesianPointList>(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => TypeInitialiser('IFC4_3',p)), new IFC4_3.IfcLogical(d.arguments[2].value)); }
Constructors['IFC4_3'][IFCINDEXEDPOLYCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIndexedPolyCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCINDEXEDPOLYCURVE] = (i:IFC4_3.IfcIndexedPolyCurve):unknown[] => { return [i.Points, !i.Segments ? null :i.Segments.map((p:any) => Labelise(p)), i.SelfIntersect]; }
InversePropertyDef['IFC4.3'][IFCINDEXEDPOLYCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCINTERCEPTORTYPE] = (d: RawLineData) => { new IFC4_3.IfcInterceptorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCINTERCEPTORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcInterceptorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCINTERCEPTORTYPE] = (i:IFC4_3.IfcInterceptorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCINTERCEPTORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCINTERSECTIONCURVE] = (d: RawLineData) => { new IFC4_3.IfcIntersectionCurve(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcPcurve>(p.value)), d.arguments[2]); }
Constructors['IFC4_3'][IFCINTERSECTIONCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcIntersectionCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCINTERSECTIONCURVE] = (i:IFC4_3.IfcIntersectionCurve):unknown[] => { return [i.Curve3D, i.AssociatedGeometry, i.MasterRepresentation]; }
InversePropertyDef['IFC4.3'][IFCINTERSECTIONCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCINVENTORY] = (d: RawLineData) => { new IFC4_3.IfcInventory(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new Reference(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC4_3.IfcDate(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC4_3.IfcCostValue>(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC4_3.IfcCostValue>(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCINVENTORY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcInventory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCINVENTORY] = (i:IFC4_3.IfcInventory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.Jurisdiction, i.ResponsiblePersons, i.LastUpdateDate, i.CurrentValue, i.OriginalValue]; }
InversePropertyDef['IFC4.3'][IFCINVENTORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCJUNCTIONBOXTYPE] = (d: RawLineData) => { new IFC4_3.IfcJunctionBoxType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCJUNCTIONBOXTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcJunctionBoxType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCJUNCTIONBOXTYPE] = (i:IFC4_3.IfcJunctionBoxType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCJUNCTIONBOXTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCKERBTYPE] = (d: RawLineData) => { new IFC4_3.IfcKerbType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), new IFC4_3.IfcBoolean(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCKERBTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcKerbType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCKERBTYPE] = (i:IFC4_3.IfcKerbType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.Mountable]; }
InversePropertyDef['IFC4.3'][IFCKERBTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCLABORRESOURCE] = (d: RawLineData) => { new IFC4_3.IfcLaborResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4_3'][IFCLABORRESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLaborResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCLABORRESOURCE] = (i:IFC4_3.IfcLaborResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCLABORRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCLAMPTYPE] = (d: RawLineData) => { new IFC4_3.IfcLampType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCLAMPTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLampType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCLAMPTYPE] = (i:IFC4_3.IfcLampType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCLAMPTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCLIGHTFIXTURETYPE] = (d: RawLineData) => { new IFC4_3.IfcLightFixtureType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCLIGHTFIXTURETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightFixtureType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCLIGHTFIXTURETYPE] = (i:IFC4_3.IfcLightFixtureType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCLIGHTFIXTURETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCLINEARELEMENT] = (d: RawLineData) => { new IFC4_3.IfcLinearElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCLINEARELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLinearElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCLINEARELEMENT] = (i:IFC4_3.IfcLinearElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4.3'][IFCLINEARELEMENT] = [IFCALIGNMENTVERTICAL,IFCALIGNMENTSEGMENT,IFCALIGNMENTHORIZONTAL,IFCALIGNMENTCANT];
InversePropertyDef['IFC4.3'][IFCLINEARELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCLIQUIDTERMINALTYPE] = (d: RawLineData) => { new IFC4_3.IfcLiquidTerminalType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCLIQUIDTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLiquidTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCLIQUIDTERMINALTYPE] = (i:IFC4_3.IfcLiquidTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCLIQUIDTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCMARINEFACILITY] = (d: RawLineData) => { new IFC4_3.IfcMarineFacility(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCMARINEFACILITY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMarineFacility(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCMARINEFACILITY] = (i:IFC4_3.IfcMarineFacility):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMARINEFACILITY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCMARINEPART] = (d: RawLineData) => { new IFC4_3.IfcMarinePart(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], d.arguments[10]); }
Constructors['IFC4_3'][IFCMARINEPART] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMarinePart(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCMARINEPART] = (i:IFC4_3.IfcMarinePart):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.UsageType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMARINEPART] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCMECHANICALFASTENER] = (d: RawLineData) => { new IFC4_3.IfcMechanicalFastener(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4_3'][IFCMECHANICALFASTENER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMechanicalFastener(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCMECHANICALFASTENER] = (i:IFC4_3.IfcMechanicalFastener):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.NominalDiameter, i.NominalLength, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMECHANICALFASTENER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCMECHANICALFASTENERTYPE] = (d: RawLineData) => { new IFC4_3.IfcMechanicalFastenerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[11].value)); }
Constructors['IFC4_3'][IFCMECHANICALFASTENERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMechanicalFastenerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCMECHANICALFASTENERTYPE] = (i:IFC4_3.IfcMechanicalFastenerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.NominalDiameter, i.NominalLength]; }
InversePropertyDef['IFC4.3'][IFCMECHANICALFASTENERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCMEDICALDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcMedicalDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCMEDICALDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMedicalDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCMEDICALDEVICETYPE] = (i:IFC4_3.IfcMedicalDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMEDICALDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCMEMBERTYPE] = (d: RawLineData) => { new IFC4_3.IfcMemberType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCMEMBERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMemberType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCMEMBERTYPE] = (i:IFC4_3.IfcMemberType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMEMBERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE] = (d: RawLineData) => { new IFC4_3.IfcMobileTelecommunicationsApplianceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMobileTelecommunicationsApplianceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE] = (i:IFC4_3.IfcMobileTelecommunicationsApplianceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCMOORINGDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcMooringDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCMOORINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMooringDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCMOORINGDEVICETYPE] = (i:IFC4_3.IfcMooringDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMOORINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCMOTORCONNECTIONTYPE] = (d: RawLineData) => { new IFC4_3.IfcMotorConnectionType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCMOTORCONNECTIONTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMotorConnectionType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCMOTORCONNECTIONTYPE] = (i:IFC4_3.IfcMotorConnectionType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMOTORCONNECTIONTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCNAVIGATIONELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcNavigationElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCNAVIGATIONELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcNavigationElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCNAVIGATIONELEMENTTYPE] = (i:IFC4_3.IfcNavigationElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCNAVIGATIONELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCOCCUPANT] = (d: RawLineData) => { new IFC4_3.IfcOccupant(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), new Reference(d.arguments[5].value), d.arguments[6]); }
Constructors['IFC4_3'][IFCOCCUPANT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOccupant(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCOCCUPANT] = (i:IFC4_3.IfcOccupant):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheActor, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCOCCUPANT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsActingUpon',IFCRELASSIGNSTOACTOR,6,true],];
FromRawLineData['IFC4_3'][IFCOPENINGELEMENT] = (d: RawLineData) => { new IFC4_3.IfcOpeningElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCOPENINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOpeningElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCOPENINGELEMENT] = (i:IFC4_3.IfcOpeningElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCOPENINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],['HasFillings',IFCRELFILLSELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCOUTLETTYPE] = (d: RawLineData) => { new IFC4_3.IfcOutletType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCOUTLETTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOutletType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCOUTLETTYPE] = (i:IFC4_3.IfcOutletType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCOUTLETTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCPAVEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcPavementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPAVEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPavementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPAVEMENTTYPE] = (i:IFC4_3.IfcPavementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPAVEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCPERFORMANCEHISTORY] = (d: RawLineData) => { new IFC4_3.IfcPerformanceHistory(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), new IFC4_3.IfcLabel(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4_3'][IFCPERFORMANCEHISTORY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPerformanceHistory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCPERFORMANCEHISTORY] = (i:IFC4_3.IfcPerformanceHistory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LifeCyclePhase, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPERFORMANCEHISTORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCPERMEABLECOVERINGPROPERTIES] = (d: RawLineData) => { new IFC4_3.IfcPermeableCoveringProperties(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC4_3.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCPERMEABLECOVERINGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPermeableCoveringProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPERMEABLECOVERINGPROPERTIES] = (i:IFC4_3.IfcPermeableCoveringProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.OperationType, i.PanelPosition, i.FrameDepth, i.FrameThickness, i.ShapeAspectStyle]; }
InversePropertyDef['IFC4.3'][IFCPERMEABLECOVERINGPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4_3'][IFCPERMIT] = (d: RawLineData) => { new IFC4_3.IfcPermit(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcText(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCPERMIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPermit(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPERMIT] = (i:IFC4_3.IfcPermit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.Status, i.LongDescription]; }
InversePropertyDef['IFC4.3'][IFCPERMIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCPILETYPE] = (d: RawLineData) => { new IFC4_3.IfcPileType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPILETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPileType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPILETYPE] = (i:IFC4_3.IfcPileType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPILETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCPIPEFITTINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcPipeFittingType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPIPEFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPipeFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPIPEFITTINGTYPE] = (i:IFC4_3.IfcPipeFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPIPEFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCPIPESEGMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcPipeSegmentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPIPESEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPipeSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPIPESEGMENTTYPE] = (i:IFC4_3.IfcPipeSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPIPESEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCPLATETYPE] = (d: RawLineData) => { new IFC4_3.IfcPlateType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPLATETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPlateType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPLATETYPE] = (i:IFC4_3.IfcPlateType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPLATETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCPOLYGONALFACESET] = (d: RawLineData) => { new IFC4_3.IfcPolygonalFaceSet(d.ID, new Reference<IFC4_3.IfcCartesianPointList3D>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4_3.IfcBoolean(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcIndexedPolygonalFace>(p.value)), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4_3.IfcPositiveInteger(p.value))); }
Constructors['IFC4_3'][IFCPOLYGONALFACESET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPolygonalFaceSet(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCPOLYGONALFACESET] = (i:IFC4_3.IfcPolygonalFaceSet):unknown[] => { return [i.Coordinates, i.Closed, i.Faces, i.PnIndex]; }
InversePropertyDef['IFC4.3'][IFCPOLYGONALFACESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasColours',IFCINDEXEDCOLOURMAP,0,true],['HasTextures',IFCINDEXEDTEXTUREMAP,1,true],];
FromRawLineData['IFC4_3'][IFCPOLYLINE] = (d: RawLineData) => { new IFC4_3.IfcPolyline(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcCartesianPoint>(p.value))); }
Constructors['IFC4_3'][IFCPOLYLINE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPolyline(expressID, args[0]); }
ToRawLineData['IFC4_3'][IFCPOLYLINE] = (i:IFC4_3.IfcPolyline):unknown[] => { return [i.Points]; }
InversePropertyDef['IFC4.3'][IFCPOLYLINE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCPORT] = (d: RawLineData) => { new IFC4_3.IfcPort(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCPORT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPort(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCPORT] = (i:IFC4_3.IfcPort):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4.3'][IFCPORT] = [IFCDISTRIBUTIONPORT];
InversePropertyDef['IFC4.3'][IFCPORT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainedIn',IFCRELCONNECTSPORTTOELEMENT,4,true],['ConnectedFrom',IFCRELCONNECTSPORTS,5,true],['ConnectedTo',IFCRELCONNECTSPORTS,4,true],];
FromRawLineData['IFC4_3'][IFCPOSITIONINGELEMENT] = (d: RawLineData) => { new IFC4_3.IfcPositioningElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCPOSITIONINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPositioningElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCPOSITIONINGELEMENT] = (i:IFC4_3.IfcPositioningElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4.3'][IFCPOSITIONINGELEMENT] = [IFCALIGNMENT,IFCLINEARPOSITIONINGELEMENT,IFCGRID,IFCREFERENT];
InversePropertyDef['IFC4.3'][IFCPOSITIONINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['Positions',IFCRELPOSITIONS,4,true],];
FromRawLineData['IFC4_3'][IFCPROCEDURE] = (d: RawLineData) => { new IFC4_3.IfcProcedure(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4_3'][IFCPROCEDURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProcedure(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCPROCEDURE] = (i:IFC4_3.IfcProcedure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPROCEDURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4_3'][IFCPROJECTORDER] = (d: RawLineData) => { new IFC4_3.IfcProjectOrder(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcText(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCPROJECTORDER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProjectOrder(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPROJECTORDER] = (i:IFC4_3.IfcProjectOrder):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.Status, i.LongDescription]; }
InversePropertyDef['IFC4.3'][IFCPROJECTORDER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCPROJECTIONELEMENT] = (d: RawLineData) => { new IFC4_3.IfcProjectionElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCPROJECTIONELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProjectionElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPROJECTIONELEMENT] = (i:IFC4_3.IfcProjectionElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPROJECTIONELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['ProjectsElements',IFCRELPROJECTSELEMENT,5,false],];
FromRawLineData['IFC4_3'][IFCPROTECTIVEDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcProtectiveDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPROTECTIVEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProtectiveDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPROTECTIVEDEVICETYPE] = (i:IFC4_3.IfcProtectiveDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPROTECTIVEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCPUMPTYPE] = (d: RawLineData) => { new IFC4_3.IfcPumpType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPUMPTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPumpType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPUMPTYPE] = (i:IFC4_3.IfcPumpType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPUMPTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCRAILTYPE] = (d: RawLineData) => { new IFC4_3.IfcRailType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCRAILTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRailType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCRAILTYPE] = (i:IFC4_3.IfcRailType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAILTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCRAILINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcRailingType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCRAILINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRailingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCRAILINGTYPE] = (i:IFC4_3.IfcRailingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAILINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCRAILWAY] = (d: RawLineData) => { new IFC4_3.IfcRailway(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCRAILWAY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRailway(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCRAILWAY] = (i:IFC4_3.IfcRailway):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAILWAY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCRAILWAYPART] = (d: RawLineData) => { new IFC4_3.IfcRailwayPart(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], d.arguments[10]); }
Constructors['IFC4_3'][IFCRAILWAYPART] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRailwayPart(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCRAILWAYPART] = (i:IFC4_3.IfcRailwayPart):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.UsageType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAILWAYPART] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCRAMPFLIGHTTYPE] = (d: RawLineData) => { new IFC4_3.IfcRampFlightType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCRAMPFLIGHTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRampFlightType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCRAMPFLIGHTTYPE] = (i:IFC4_3.IfcRampFlightType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAMPFLIGHTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCRAMPTYPE] = (d: RawLineData) => { new IFC4_3.IfcRampType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCRAMPTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRampType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCRAMPTYPE] = (i:IFC4_3.IfcRampType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAMPTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCRATIONALBSPLINESURFACEWITHKNOTS] = (d: RawLineData) => { new IFC4_3.IfcRationalBSplineSurfaceWithKnots(d.ID, new IFC4_3.IfcInteger(d.arguments[0].value), new IFC4_3.IfcInteger(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4_3.IfcCartesianPoint>(p.value)), d.arguments[3], new IFC4_3.IfcLogical(d.arguments[4].value), new IFC4_3.IfcLogical(d.arguments[5].value), new IFC4_3.IfcLogical(d.arguments[6].value), d.arguments[7].map((p:any) => new IFC4_3.IfcInteger(p.value)), d.arguments[8].map((p:any) => new IFC4_3.IfcInteger(p.value)), d.arguments[9].map((p:any) => new IFC4_3.IfcParameterValue(p.value)), d.arguments[10].map((p:any) => new IFC4_3.IfcParameterValue(p.value)), d.arguments[11], d.arguments[12].map((p:any) => new IFC4_3.IfcReal(p.value))); }
Constructors['IFC4_3'][IFCRATIONALBSPLINESURFACEWITHKNOTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRationalBSplineSurfaceWithKnots(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCRATIONALBSPLINESURFACEWITHKNOTS] = (i:IFC4_3.IfcRationalBSplineSurfaceWithKnots):unknown[] => { return [i.UDegree, i.VDegree, i.ControlPointsList, i.SurfaceForm, i.UClosed, i.VClosed, i.SelfIntersect, i.UMultiplicities, i.VMultiplicities, i.UKnots, i.VKnots, i.KnotSpec, i.WeightsData]; }
InversePropertyDef['IFC4.3'][IFCRATIONALBSPLINESURFACEWITHKNOTS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCREFERENT] = (d: RawLineData) => { new IFC4_3.IfcReferent(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4_3'][IFCREFERENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReferent(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCREFERENT] = (i:IFC4_3.IfcReferent):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCREFERENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['Positions',IFCRELPOSITIONS,4,true],];
FromRawLineData['IFC4_3'][IFCREINFORCINGELEMENT] = (d: RawLineData) => { new IFC4_3.IfcReinforcingElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCREINFORCINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcingElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCREINFORCINGELEMENT] = (i:IFC4_3.IfcReinforcingElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade]; }
InheritanceDef['IFC4.3'][IFCREINFORCINGELEMENT] = [IFCREINFORCINGBAR,IFCTENDONCONDUIT,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH];
InversePropertyDef['IFC4.3'][IFCREINFORCINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCREINFORCINGELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcReinforcingElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCREINFORCINGELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcingElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCREINFORCINGELEMENTTYPE] = (i:IFC4_3.IfcReinforcingElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCREINFORCINGELEMENTTYPE] = [IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONCONDUITTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE];
InversePropertyDef['IFC4.3'][IFCREINFORCINGELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCREINFORCINGMESH] = (d: RawLineData) => { new IFC4_3.IfcReinforcingMesh(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcAreaMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcAreaMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[16].value), d.arguments[17]); }
Constructors['IFC4_3'][IFCREINFORCINGMESH] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcingMesh(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17]); }
ToRawLineData['IFC4_3'][IFCREINFORCINGMESH] = (i:IFC4_3.IfcReinforcingMesh):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.MeshLength, i.MeshWidth, i.LongitudinalBarNominalDiameter, i.TransverseBarNominalDiameter, i.LongitudinalBarCrossSectionArea, i.TransverseBarCrossSectionArea, i.LongitudinalBarSpacing, i.TransverseBarSpacing, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCREINFORCINGMESH] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCREINFORCINGMESHTYPE] = (d: RawLineData) => { new IFC4_3.IfcReinforcingMeshType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcAreaMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC4_3.IfcAreaMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[16].value), !d.arguments[17] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[17].value), !d.arguments[18] ? null :new IFC4_3.IfcLabel(d.arguments[18].value), !d.arguments[19] ? null :d.arguments[19].map((p:any) => TypeInitialiser('IFC4_3',p))); }
Constructors['IFC4_3'][IFCREINFORCINGMESHTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcingMeshType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19]); }
ToRawLineData['IFC4_3'][IFCREINFORCINGMESHTYPE] = (i:IFC4_3.IfcReinforcingMeshType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.MeshLength, i.MeshWidth, i.LongitudinalBarNominalDiameter, i.TransverseBarNominalDiameter, i.LongitudinalBarCrossSectionArea, i.TransverseBarCrossSectionArea, i.LongitudinalBarSpacing, i.TransverseBarSpacing, i.BendingShapeCode, !i.BendingParameters ? null :i.BendingParameters.map((p:any) => Labelise(p))]; }
InversePropertyDef['IFC4.3'][IFCREINFORCINGMESHTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCRELADHERESTOELEMENT] = (d: RawLineData) => { new IFC4_3.IfcRelAdheresToElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcElement>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcSurfaceFeature>(p.value))); }
Constructors['IFC4_3'][IFCRELADHERESTOELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAdheresToElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELADHERESTOELEMENT] = (i:IFC4_3.IfcRelAdheresToElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedSurfaceFeatures]; }
FromRawLineData['IFC4_3'][IFCRELAGGREGATES] = (d: RawLineData) => { new IFC4_3.IfcRelAggregates(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), new Reference<IFC4_3.IfcObjectDefinition>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcObjectDefinition>(p.value))); }
Constructors['IFC4_3'][IFCRELAGGREGATES] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRelAggregates(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCRELAGGREGATES] = (i:IFC4_3.IfcRelAggregates):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingObject, i.RelatedObjects]; }
FromRawLineData['IFC4_3'][IFCROAD] = (d: RawLineData) => { new IFC4_3.IfcRoad(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCROAD] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRoad(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCROAD] = (i:IFC4_3.IfcRoad):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCROAD] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCROADPART] = (d: RawLineData) => { new IFC4_3.IfcRoadPart(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], d.arguments[10]); }
Constructors['IFC4_3'][IFCROADPART] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRoadPart(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCROADPART] = (i:IFC4_3.IfcRoadPart):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.UsageType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCROADPART] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCROOFTYPE] = (d: RawLineData) => { new IFC4_3.IfcRoofType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCROOFTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRoofType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCROOFTYPE] = (i:IFC4_3.IfcRoofType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCROOFTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSANITARYTERMINALTYPE] = (d: RawLineData) => { new IFC4_3.IfcSanitaryTerminalType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSANITARYTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSanitaryTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSANITARYTERMINALTYPE] = (i:IFC4_3.IfcSanitaryTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSANITARYTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSEAMCURVE] = (d: RawLineData) => { new IFC4_3.IfcSeamCurve(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcPcurve>(p.value)), d.arguments[2]); }
Constructors['IFC4_3'][IFCSEAMCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSeamCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4_3'][IFCSEAMCURVE] = (i:IFC4_3.IfcSeamCurve):unknown[] => { return [i.Curve3D, i.AssociatedGeometry, i.MasterRepresentation]; }
InversePropertyDef['IFC4.3'][IFCSEAMCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSECONDORDERPOLYNOMIALSPIRAL] = (d: RawLineData) => { new IFC4_3.IfcSecondOrderPolynomialSpiral(d.ID, !d.arguments[0] ? null :new Reference(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSECONDORDERPOLYNOMIALSPIRAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSecondOrderPolynomialSpiral(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSECONDORDERPOLYNOMIALSPIRAL] = (i:IFC4_3.IfcSecondOrderPolynomialSpiral):unknown[] => { return [i.Position, i.QuadraticTerm, i.LinearTerm, i.ConstantTerm]; }
InversePropertyDef['IFC4.3'][IFCSECONDORDERPOLYNOMIALSPIRAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSEGMENTEDREFERENCECURVE] = (d: RawLineData) => { new IFC4_3.IfcSegmentedReferenceCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSegment>(p.value)), new IFC4_3.IfcLogical(d.arguments[1].value), new Reference<IFC4_3.IfcBoundedCurve>(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4_3.IfcPlacement>(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSEGMENTEDREFERENCECURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSegmentedReferenceCurve(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSEGMENTEDREFERENCECURVE] = (i:IFC4_3.IfcSegmentedReferenceCurve):unknown[] => { return [i.Segments, i.SelfIntersect, i.BaseCurve, i.EndPoint]; }
InversePropertyDef['IFC4.3'][IFCSEGMENTEDREFERENCECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSEVENTHORDERPOLYNOMIALSPIRAL] = (d: RawLineData) => { new IFC4_3.IfcSeventhOrderPolynomialSpiral(d.ID, !d.arguments[0] ? null :new Reference(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSEVENTHORDERPOLYNOMIALSPIRAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSeventhOrderPolynomialSpiral(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSEVENTHORDERPOLYNOMIALSPIRAL] = (i:IFC4_3.IfcSeventhOrderPolynomialSpiral):unknown[] => { return [i.Position, i.SepticTerm, i.SexticTerm, i.QuinticTerm, i.QuarticTerm, i.CubicTerm, i.QuadraticTerm, i.LinearTerm, i.ConstantTerm]; }
InversePropertyDef['IFC4.3'][IFCSEVENTHORDERPOLYNOMIALSPIRAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSHADINGDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcShadingDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSHADINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcShadingDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSHADINGDEVICETYPE] = (i:IFC4_3.IfcShadingDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSHADINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSIGN] = (d: RawLineData) => { new IFC4_3.IfcSign(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSIGN] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSign(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSIGN] = (i:IFC4_3.IfcSign):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSIGN] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCSIGNTYPE] = (d: RawLineData) => { new IFC4_3.IfcSignType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSIGNTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSignType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSIGNTYPE] = (i:IFC4_3.IfcSignType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSIGNTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSIGNALTYPE] = (d: RawLineData) => { new IFC4_3.IfcSignalType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSIGNALTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSignalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSIGNALTYPE] = (i:IFC4_3.IfcSignalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSIGNALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSINESPIRAL] = (d: RawLineData) => { new IFC4_3.IfcSineSpiral(d.ID, !d.arguments[0] ? null :new Reference(d.arguments[0].value), new IFC4_3.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4_3'][IFCSINESPIRAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSineSpiral(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4_3'][IFCSINESPIRAL] = (i:IFC4_3.IfcSineSpiral):unknown[] => { return [i.Position, i.SineTerm, i.LinearTerm, i.ConstantTerm]; }
InversePropertyDef['IFC4.3'][IFCSINESPIRAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCSITE] = (d: RawLineData) => { new IFC4_3.IfcSite(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcCompoundPlaneAngleMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcCompoundPlaneAngleMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcLabel(d.arguments[12].value), !d.arguments[13] ? null :new Reference<IFC4_3.IfcPostalAddress>(d.arguments[13].value)); }
Constructors['IFC4_3'][IFCSITE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSite(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4_3'][IFCSITE] = (i:IFC4_3.IfcSite):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.RefLatitude, i.RefLongitude, i.RefElevation, i.LandTitleNumber, i.SiteAddress]; }
InversePropertyDef['IFC4.3'][IFCSITE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCSLABTYPE] = (d: RawLineData) => { new IFC4_3.IfcSlabType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSLABTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSlabType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSLABTYPE] = (i:IFC4_3.IfcSlabType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSLABTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSOLARDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcSolarDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSOLARDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSolarDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSOLARDEVICETYPE] = (i:IFC4_3.IfcSolarDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSOLARDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSPACE] = (d: RawLineData) => { new IFC4_3.IfcSpace(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCSPACE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpace(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCSPACE] = (i:IFC4_3.IfcSpace):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.PredefinedType, i.ElevationWithFlooring]; }
InversePropertyDef['IFC4.3'][IFCSPACE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasCoverings',IFCRELCOVERSSPACES,4,true],['BoundedBy',IFCRELSPACEBOUNDARY,4,true],];
FromRawLineData['IFC4_3'][IFCSPACEHEATERTYPE] = (d: RawLineData) => { new IFC4_3.IfcSpaceHeaterType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSPACEHEATERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpaceHeaterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSPACEHEATERTYPE] = (i:IFC4_3.IfcSpaceHeaterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSPACEHEATERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSPACETYPE] = (d: RawLineData) => { new IFC4_3.IfcSpaceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcLabel(d.arguments[10].value)); }
Constructors['IFC4_3'][IFCSPACETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpaceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCSPACETYPE] = (i:IFC4_3.IfcSpaceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.LongName]; }
InversePropertyDef['IFC4.3'][IFCSPACETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSTACKTERMINALTYPE] = (d: RawLineData) => { new IFC4_3.IfcStackTerminalType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSTACKTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStackTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTACKTERMINALTYPE] = (i:IFC4_3.IfcStackTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTACKTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSTAIRFLIGHTTYPE] = (d: RawLineData) => { new IFC4_3.IfcStairFlightType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSTAIRFLIGHTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStairFlightType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTAIRFLIGHTTYPE] = (i:IFC4_3.IfcStairFlightType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTAIRFLIGHTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSTAIRTYPE] = (d: RawLineData) => { new IFC4_3.IfcStairType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSTAIRTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStairType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTAIRTYPE] = (i:IFC4_3.IfcStairType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTAIRTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralAction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcBoolean(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALACTION] = (i:IFC4_3.IfcStructuralAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALACTION] = [IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALCONNECTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralConnection(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcBoundaryCondition>(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALCONNECTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALCONNECTION] = (i:IFC4_3.IfcStructuralConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALCONNECTION] = [IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALCONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALCURVEACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralCurveAction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcBoolean(d.arguments[9].value), d.arguments[10], d.arguments[11]); }
Constructors['IFC4_3'][IFCSTRUCTURALCURVEACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralCurveAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALCURVEACTION] = (i:IFC4_3.IfcStructuralCurveAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.ProjectedOrTrue, i.PredefinedType]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALCURVEACTION] = [IFCSTRUCTURALLINEARACTION];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALCURVEACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALCURVECONNECTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralCurveConnection(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcBoundaryCondition>(d.arguments[7].value), new Reference<IFC4_3.IfcDirection>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALCURVECONNECTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralCurveConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALCURVECONNECTION] = (i:IFC4_3.IfcStructuralCurveConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition, i.AxisDirection]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALCURVECONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALCURVEMEMBER] = (d: RawLineData) => { new IFC4_3.IfcStructuralCurveMember(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], new Reference<IFC4_3.IfcDirection>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALCURVEMEMBER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralCurveMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALCURVEMEMBER] = (i:IFC4_3.IfcStructuralCurveMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Axis]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALCURVEMEMBER] = [IFCSTRUCTURALCURVEMEMBERVARYING];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALCURVEMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALCURVEMEMBERVARYING] = (d: RawLineData) => { new IFC4_3.IfcStructuralCurveMemberVarying(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], new Reference<IFC4_3.IfcDirection>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALCURVEMEMBERVARYING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralCurveMemberVarying(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALCURVEMEMBERVARYING] = (i:IFC4_3.IfcStructuralCurveMemberVarying):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Axis]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALCURVEMEMBERVARYING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALCURVEREACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralCurveReaction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCSTRUCTURALCURVEREACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralCurveReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALCURVEREACTION] = (i:IFC4_3.IfcStructuralCurveReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALCURVEREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLINEARACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralLinearAction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcBoolean(d.arguments[9].value), d.arguments[10], d.arguments[11]); }
Constructors['IFC4_3'][IFCSTRUCTURALLINEARACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLinearAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLINEARACTION] = (i:IFC4_3.IfcStructuralLinearAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.ProjectedOrTrue, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALLINEARACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADGROUP] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadGroup(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5], d.arguments[6], d.arguments[7], !d.arguments[8] ? null :new IFC4_3.IfcRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcLabel(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADGROUP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADGROUP] = (i:IFC4_3.IfcStructuralLoadGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.ActionType, i.ActionSource, i.Coefficient, i.Purpose]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALLOADGROUP] = [IFCSTRUCTURALLOADCASE];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALLOADGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['SourceOfResultGroup',IFCSTRUCTURALRESULTGROUP,6,true],['LoadGroupFor',IFCSTRUCTURALANALYSISMODEL,7,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALPOINTACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralPointAction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcBoolean(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALPOINTACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralPointAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALPOINTACTION] = (i:IFC4_3.IfcStructuralPointAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALPOINTACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALPOINTCONNECTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralPointConnection(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcBoundaryCondition>(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALPOINTCONNECTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralPointConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALPOINTCONNECTION] = (i:IFC4_3.IfcStructuralPointConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition, i.ConditionCoordinateSystem]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALPOINTCONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALPOINTREACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralPointReaction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSTRUCTURALPOINTREACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralPointReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALPOINTREACTION] = (i:IFC4_3.IfcStructuralPointReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALPOINTREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALRESULTGROUP] = (d: RawLineData) => { new IFC4_3.IfcStructuralResultGroup(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new Reference<IFC4_3.IfcStructuralLoadGroup>(d.arguments[6].value), new IFC4_3.IfcBoolean(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALRESULTGROUP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralResultGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALRESULTGROUP] = (i:IFC4_3.IfcStructuralResultGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheoryType, i.ResultForLoadGroup, i.IsLinear]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALRESULTGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ResultGroupFor',IFCSTRUCTURALANALYSISMODEL,8,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALSURFACEACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralSurfaceAction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcBoolean(d.arguments[9].value), d.arguments[10], d.arguments[11]); }
Constructors['IFC4_3'][IFCSTRUCTURALSURFACEACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralSurfaceAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALSURFACEACTION] = (i:IFC4_3.IfcStructuralSurfaceAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.ProjectedOrTrue, i.PredefinedType]; }
InheritanceDef['IFC4.3'][IFCSTRUCTURALSURFACEACTION] = [IFCSTRUCTURALPLANARACTION];
InversePropertyDef['IFC4.3'][IFCSTRUCTURALSURFACEACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALSURFACECONNECTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralSurfaceConnection(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcBoundaryCondition>(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALSURFACECONNECTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralSurfaceConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALSURFACECONNECTION] = (i:IFC4_3.IfcStructuralSurfaceConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALSURFACECONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC4_3'][IFCSUBCONTRACTRESOURCE] = (d: RawLineData) => { new IFC4_3.IfcSubContractResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4_3'][IFCSUBCONTRACTRESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSubContractResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCSUBCONTRACTRESOURCE] = (i:IFC4_3.IfcSubContractResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSUBCONTRACTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCSURFACEFEATURE] = (d: RawLineData) => { new IFC4_3.IfcSurfaceFeature(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSURFACEFEATURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSurfaceFeature(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSURFACEFEATURE] = (i:IFC4_3.IfcSurfaceFeature):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSURFACEFEATURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['AdheresToElement',IFCRELADHERESTOELEMENT,5,false],];
FromRawLineData['IFC4_3'][IFCSWITCHINGDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcSwitchingDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSWITCHINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSwitchingDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSWITCHINGDEVICETYPE] = (i:IFC4_3.IfcSwitchingDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSWITCHINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSYSTEM] = (d: RawLineData) => { new IFC4_3.IfcSystem(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCSYSTEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSystem(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCSYSTEM] = (i:IFC4_3.IfcSystem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC4.3'][IFCSYSTEM] = [IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILTSYSTEM,IFCBUILDINGSYSTEM,IFCZONE];
InversePropertyDef['IFC4.3'][IFCSYSTEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],['ServicesFacilities',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCSYSTEMFURNITUREELEMENT] = (d: RawLineData) => { new IFC4_3.IfcSystemFurnitureElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSYSTEMFURNITUREELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSystemFurnitureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSYSTEMFURNITUREELEMENT] = (i:IFC4_3.IfcSystemFurnitureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSYSTEMFURNITUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCTANKTYPE] = (d: RawLineData) => { new IFC4_3.IfcTankType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTANKTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTankType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTANKTYPE] = (i:IFC4_3.IfcTankType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTANKTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTENDON] = (d: RawLineData) => { new IFC4_3.IfcTendon(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcAreaMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcForceMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4_3.IfcPressureMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4_3.IfcNormalisedRatioMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[16].value)); }
Constructors['IFC4_3'][IFCTENDON] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTendon(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC4_3'][IFCTENDON] = (i:IFC4_3.IfcTendon):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.PredefinedType, i.NominalDiameter, i.CrossSectionArea, i.TensionForce, i.PreStress, i.FrictionCoefficient, i.AnchorageSlip, i.MinCurvatureRadius]; }
InversePropertyDef['IFC4.3'][IFCTENDON] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCTENDONANCHOR] = (d: RawLineData) => { new IFC4_3.IfcTendonAnchor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTENDONANCHOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTendonAnchor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTENDONANCHOR] = (i:IFC4_3.IfcTendonAnchor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTENDONANCHOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCTENDONANCHORTYPE] = (d: RawLineData) => { new IFC4_3.IfcTendonAnchorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTENDONANCHORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTendonAnchorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTENDONANCHORTYPE] = (i:IFC4_3.IfcTendonAnchorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTENDONANCHORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTENDONCONDUIT] = (d: RawLineData) => { new IFC4_3.IfcTendonConduit(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTENDONCONDUIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTendonConduit(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTENDONCONDUIT] = (i:IFC4_3.IfcTendonConduit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTENDONCONDUIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCTENDONCONDUITTYPE] = (d: RawLineData) => { new IFC4_3.IfcTendonConduitType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTENDONCONDUITTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTendonConduitType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTENDONCONDUITTYPE] = (i:IFC4_3.IfcTendonConduitType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTENDONCONDUITTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTENDONTYPE] = (d: RawLineData) => { new IFC4_3.IfcTendonType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcAreaMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[12].value)); }
Constructors['IFC4_3'][IFCTENDONTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTendonType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCTENDONTYPE] = (i:IFC4_3.IfcTendonType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.NominalDiameter, i.CrossSectionArea, i.SheathDiameter]; }
InversePropertyDef['IFC4.3'][IFCTENDONTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTRACKELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcTrackElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTRACKELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTrackElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTRACKELEMENTTYPE] = (i:IFC4_3.IfcTrackElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTRACKELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTRANSFORMERTYPE] = (d: RawLineData) => { new IFC4_3.IfcTransformerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTRANSFORMERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTransformerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTRANSFORMERTYPE] = (i:IFC4_3.IfcTransformerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTRANSFORMERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTRANSPORTELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcTransportElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTRANSPORTELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTransportElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTRANSPORTELEMENTTYPE] = (i:IFC4_3.IfcTransportElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTRANSPORTELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCTRANSPORTATIONDEVICE] = (d: RawLineData) => { new IFC4_3.IfcTransportationDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCTRANSPORTATIONDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTransportationDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCTRANSPORTATIONDEVICE] = (i:IFC4_3.IfcTransportationDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCTRANSPORTATIONDEVICE] = [IFCTRANSPORTELEMENT,IFCVEHICLE];
InversePropertyDef['IFC4.3'][IFCTRANSPORTATIONDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCTRIMMEDCURVE] = (d: RawLineData) => { new IFC4_3.IfcTrimmedCurve(d.ID, new Reference<IFC4_3.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value)), d.arguments[2].map((p:any) => new Reference(p.value)), new IFC4_3.IfcBoolean(d.arguments[3].value), d.arguments[4]); }
Constructors['IFC4_3'][IFCTRIMMEDCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTrimmedCurve(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCTRIMMEDCURVE] = (i:IFC4_3.IfcTrimmedCurve):unknown[] => { return [i.BasisCurve, i.Trim1, i.Trim2, i.SenseAgreement, i.MasterRepresentation]; }
InversePropertyDef['IFC4.3'][IFCTRIMMEDCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCTUBEBUNDLETYPE] = (d: RawLineData) => { new IFC4_3.IfcTubeBundleType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCTUBEBUNDLETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTubeBundleType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCTUBEBUNDLETYPE] = (i:IFC4_3.IfcTubeBundleType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTUBEBUNDLETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCUNITARYEQUIPMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcUnitaryEquipmentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCUNITARYEQUIPMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcUnitaryEquipmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCUNITARYEQUIPMENTTYPE] = (i:IFC4_3.IfcUnitaryEquipmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCUNITARYEQUIPMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCVALVETYPE] = (d: RawLineData) => { new IFC4_3.IfcValveType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCVALVETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcValveType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCVALVETYPE] = (i:IFC4_3.IfcValveType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVALVETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCVEHICLE] = (d: RawLineData) => { new IFC4_3.IfcVehicle(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCVEHICLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVehicle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCVEHICLE] = (i:IFC4_3.IfcVehicle):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVEHICLE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCVIBRATIONDAMPER] = (d: RawLineData) => { new IFC4_3.IfcVibrationDamper(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCVIBRATIONDAMPER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVibrationDamper(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCVIBRATIONDAMPER] = (i:IFC4_3.IfcVibrationDamper):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVIBRATIONDAMPER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCVIBRATIONDAMPERTYPE] = (d: RawLineData) => { new IFC4_3.IfcVibrationDamperType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCVIBRATIONDAMPERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVibrationDamperType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCVIBRATIONDAMPERTYPE] = (i:IFC4_3.IfcVibrationDamperType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVIBRATIONDAMPERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCVIBRATIONISOLATOR] = (d: RawLineData) => { new IFC4_3.IfcVibrationIsolator(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCVIBRATIONISOLATOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVibrationIsolator(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCVIBRATIONISOLATOR] = (i:IFC4_3.IfcVibrationIsolator):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVIBRATIONISOLATOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCVIBRATIONISOLATORTYPE] = (d: RawLineData) => { new IFC4_3.IfcVibrationIsolatorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCVIBRATIONISOLATORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVibrationIsolatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCVIBRATIONISOLATORTYPE] = (i:IFC4_3.IfcVibrationIsolatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVIBRATIONISOLATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCVIRTUALELEMENT] = (d: RawLineData) => { new IFC4_3.IfcVirtualElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCVIRTUALELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVirtualElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCVIRTUALELEMENT] = (i:IFC4_3.IfcVirtualElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVIRTUALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCVOIDINGFEATURE] = (d: RawLineData) => { new IFC4_3.IfcVoidingFeature(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCVOIDINGFEATURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcVoidingFeature(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCVOIDINGFEATURE] = (i:IFC4_3.IfcVoidingFeature):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVOIDINGFEATURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC4_3'][IFCWALLTYPE] = (d: RawLineData) => { new IFC4_3.IfcWallType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCWALLTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWallType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCWALLTYPE] = (i:IFC4_3.IfcWallType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCWALLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCWASTETERMINALTYPE] = (d: RawLineData) => { new IFC4_3.IfcWasteTerminalType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCWASTETERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWasteTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCWASTETERMINALTYPE] = (i:IFC4_3.IfcWasteTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCWASTETERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCWINDOWTYPE] = (d: RawLineData) => { new IFC4_3.IfcWindowType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], d.arguments[10], !d.arguments[11] ? null :new IFC4_3.IfcBoolean(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4_3'][IFCWINDOWTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWindowType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCWINDOWTYPE] = (i:IFC4_3.IfcWindowType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.PartitioningType, i.ParameterTakesPrecedence, i.UserDefinedPartitioningType]; }
InversePropertyDef['IFC4.3'][IFCWINDOWTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCWORKCALENDAR] = (d: RawLineData) => { new IFC4_3.IfcWorkCalendar(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcWorkTime>(p.value)), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcWorkTime>(p.value)), d.arguments[8]); }
Constructors['IFC4_3'][IFCWORKCALENDAR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWorkCalendar(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCWORKCALENDAR] = (i:IFC4_3.IfcWorkCalendar):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.WorkingTimes, i.ExceptionTimes, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCWORKCALENDAR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCWORKCONTROL] = (d: RawLineData) => { new IFC4_3.IfcWorkControl(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), new IFC4_3.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcDuration(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcDuration(d.arguments[10].value), new IFC4_3.IfcDateTime(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcDateTime(d.arguments[12].value)); }
Constructors['IFC4_3'][IFCWORKCONTROL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWorkControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCWORKCONTROL] = (i:IFC4_3.IfcWorkControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime]; }
InheritanceDef['IFC4.3'][IFCWORKCONTROL] = [IFCWORKSCHEDULE,IFCWORKPLAN];
InversePropertyDef['IFC4.3'][IFCWORKCONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCWORKPLAN] = (d: RawLineData) => { new IFC4_3.IfcWorkPlan(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), new IFC4_3.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcDuration(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcDuration(d.arguments[10].value), new IFC4_3.IfcDateTime(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcDateTime(d.arguments[12].value), d.arguments[13]); }
Constructors['IFC4_3'][IFCWORKPLAN] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWorkPlan(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4_3'][IFCWORKPLAN] = (i:IFC4_3.IfcWorkPlan):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCWORKPLAN] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCWORKSCHEDULE] = (d: RawLineData) => { new IFC4_3.IfcWorkSchedule(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), new IFC4_3.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcDuration(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcDuration(d.arguments[10].value), new IFC4_3.IfcDateTime(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcDateTime(d.arguments[12].value), d.arguments[13]); }
Constructors['IFC4_3'][IFCWORKSCHEDULE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWorkSchedule(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4_3'][IFCWORKSCHEDULE] = (i:IFC4_3.IfcWorkSchedule):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCWORKSCHEDULE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCZONE] = (d: RawLineData) => { new IFC4_3.IfcZone(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value)); }
Constructors['IFC4_3'][IFCZONE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcZone(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4_3'][IFCZONE] = (i:IFC4_3.IfcZone):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName]; }
InversePropertyDef['IFC4.3'][IFCZONE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],['ServicesFacilities',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCACTIONREQUEST] = (d: RawLineData) => { new IFC4_3.IfcActionRequest(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcText(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCACTIONREQUEST] = (expressID:number, args: any[]) => { return new IFC4_3.IfcActionRequest(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCACTIONREQUEST] = (i:IFC4_3.IfcActionRequest):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.Status, i.LongDescription]; }
InversePropertyDef['IFC4.3'][IFCACTIONREQUEST] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4_3'][IFCAIRTERMINALBOXTYPE] = (d: RawLineData) => { new IFC4_3.IfcAirTerminalBoxType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCAIRTERMINALBOXTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAirTerminalBoxType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCAIRTERMINALBOXTYPE] = (i:IFC4_3.IfcAirTerminalBoxType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCAIRTERMINALBOXTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCAIRTERMINALTYPE] = (d: RawLineData) => { new IFC4_3.IfcAirTerminalType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCAIRTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAirTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCAIRTERMINALTYPE] = (i:IFC4_3.IfcAirTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCAIRTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCAIRTOAIRHEATRECOVERYTYPE] = (d: RawLineData) => { new IFC4_3.IfcAirToAirHeatRecoveryType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCAIRTOAIRHEATRECOVERYTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAirToAirHeatRecoveryType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCAIRTOAIRHEATRECOVERYTYPE] = (i:IFC4_3.IfcAirToAirHeatRecoveryType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCAIRTOAIRHEATRECOVERYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCALIGNMENTCANT] = (d: RawLineData) => { new IFC4_3.IfcAlignmentCant(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCALIGNMENTCANT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignmentCant(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCALIGNMENTCANT] = (i:IFC4_3.IfcAlignmentCant):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.RailHeadDistance]; }
InversePropertyDef['IFC4.3'][IFCALIGNMENTCANT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCALIGNMENTHORIZONTAL] = (d: RawLineData) => { new IFC4_3.IfcAlignmentHorizontal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCALIGNMENTHORIZONTAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignmentHorizontal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCALIGNMENTHORIZONTAL] = (i:IFC4_3.IfcAlignmentHorizontal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InversePropertyDef['IFC4.3'][IFCALIGNMENTHORIZONTAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCALIGNMENTSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcAlignmentSegment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcAlignmentParameterSegment>(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCALIGNMENTSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignmentSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCALIGNMENTSEGMENT] = (i:IFC4_3.IfcAlignmentSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.DesignParameters]; }
InversePropertyDef['IFC4.3'][IFCALIGNMENTSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCALIGNMENTVERTICAL] = (d: RawLineData) => { new IFC4_3.IfcAlignmentVertical(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCALIGNMENTVERTICAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignmentVertical(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCALIGNMENTVERTICAL] = (i:IFC4_3.IfcAlignmentVertical):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InversePropertyDef['IFC4.3'][IFCALIGNMENTVERTICAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCASSET] = (d: RawLineData) => { new IFC4_3.IfcAsset(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcCostValue>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcCostValue>(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC4_3.IfcCostValue>(d.arguments[8].value), !d.arguments[9] ? null :new Reference(d.arguments[9].value), !d.arguments[10] ? null :new Reference(d.arguments[10].value), !d.arguments[11] ? null :new Reference<IFC4_3.IfcPerson>(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcDate(d.arguments[12].value), !d.arguments[13] ? null :new Reference<IFC4_3.IfcCostValue>(d.arguments[13].value)); }
Constructors['IFC4_3'][IFCASSET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAsset(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4_3'][IFCASSET] = (i:IFC4_3.IfcAsset):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.OriginalValue, i.CurrentValue, i.TotalReplacementCost, i.Owner, i.User, i.ResponsiblePerson, i.IncorporationDate, i.DepreciatedValue]; }
InversePropertyDef['IFC4.3'][IFCASSET] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCAUDIOVISUALAPPLIANCETYPE] = (d: RawLineData) => { new IFC4_3.IfcAudioVisualApplianceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCAUDIOVISUALAPPLIANCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAudioVisualApplianceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCAUDIOVISUALAPPLIANCETYPE] = (i:IFC4_3.IfcAudioVisualApplianceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCAUDIOVISUALAPPLIANCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCBSPLINECURVE] = (d: RawLineData) => { new IFC4_3.IfcBSplineCurve(d.ID, new IFC4_3.IfcInteger(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcCartesianPoint>(p.value)), d.arguments[2], new IFC4_3.IfcLogical(d.arguments[3].value), new IFC4_3.IfcLogical(d.arguments[4].value)); }
Constructors['IFC4_3'][IFCBSPLINECURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBSplineCurve(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4_3'][IFCBSPLINECURVE] = (i:IFC4_3.IfcBSplineCurve):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect]; }
InheritanceDef['IFC4.3'][IFCBSPLINECURVE] = [IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS];
InversePropertyDef['IFC4.3'][IFCBSPLINECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBSPLINECURVEWITHKNOTS] = (d: RawLineData) => { new IFC4_3.IfcBSplineCurveWithKnots(d.ID, new IFC4_3.IfcInteger(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcCartesianPoint>(p.value)), d.arguments[2], new IFC4_3.IfcLogical(d.arguments[3].value), new IFC4_3.IfcLogical(d.arguments[4].value), d.arguments[5].map((p:any) => new IFC4_3.IfcInteger(p.value)), d.arguments[6].map((p:any) => new IFC4_3.IfcParameterValue(p.value)), d.arguments[7]); }
Constructors['IFC4_3'][IFCBSPLINECURVEWITHKNOTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBSplineCurveWithKnots(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCBSPLINECURVEWITHKNOTS] = (i:IFC4_3.IfcBSplineCurveWithKnots):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect, i.KnotMultiplicities, i.Knots, i.KnotSpec]; }
InheritanceDef['IFC4.3'][IFCBSPLINECURVEWITHKNOTS] = [IFCRATIONALBSPLINECURVEWITHKNOTS];
InversePropertyDef['IFC4.3'][IFCBSPLINECURVEWITHKNOTS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBEAMTYPE] = (d: RawLineData) => { new IFC4_3.IfcBeamType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCBEAMTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBeamType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCBEAMTYPE] = (i:IFC4_3.IfcBeamType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBEAMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCBEARINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcBearingType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCBEARINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBearingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCBEARINGTYPE] = (i:IFC4_3.IfcBearingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBEARINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCBOILERTYPE] = (d: RawLineData) => { new IFC4_3.IfcBoilerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCBOILERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoilerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCBOILERTYPE] = (i:IFC4_3.IfcBoilerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBOILERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCBOUNDARYCURVE] = (d: RawLineData) => { new IFC4_3.IfcBoundaryCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSegment>(p.value)), new IFC4_3.IfcLogical(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCBOUNDARYCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoundaryCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCBOUNDARYCURVE] = (i:IFC4_3.IfcBoundaryCurve):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InheritanceDef['IFC4.3'][IFCBOUNDARYCURVE] = [IFCOUTERBOUNDARYCURVE];
InversePropertyDef['IFC4.3'][IFCBOUNDARYCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCBRIDGE] = (d: RawLineData) => { new IFC4_3.IfcBridge(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCBRIDGE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBridge(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCBRIDGE] = (i:IFC4_3.IfcBridge):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBRIDGE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCBRIDGEPART] = (d: RawLineData) => { new IFC4_3.IfcBridgePart(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], d.arguments[10]); }
Constructors['IFC4_3'][IFCBRIDGEPART] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBridgePart(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCBRIDGEPART] = (i:IFC4_3.IfcBridgePart):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.UsageType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBRIDGEPART] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCBUILDING] = (d: RawLineData) => { new IFC4_3.IfcBuilding(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new Reference<IFC4_3.IfcPostalAddress>(d.arguments[11].value)); }
Constructors['IFC4_3'][IFCBUILDING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuilding(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCBUILDING] = (i:IFC4_3.IfcBuilding):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.ElevationOfRefHeight, i.ElevationOfTerrain, i.BuildingAddress]; }
InversePropertyDef['IFC4.3'][IFCBUILDING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCBUILDINGELEMENTPART] = (d: RawLineData) => { new IFC4_3.IfcBuildingElementPart(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCBUILDINGELEMENTPART] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuildingElementPart(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCBUILDINGELEMENTPART] = (i:IFC4_3.IfcBuildingElementPart):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBUILDINGELEMENTPART] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCBUILDINGELEMENTPARTTYPE] = (d: RawLineData) => { new IFC4_3.IfcBuildingElementPartType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCBUILDINGELEMENTPARTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuildingElementPartType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCBUILDINGELEMENTPARTTYPE] = (i:IFC4_3.IfcBuildingElementPartType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBUILDINGELEMENTPARTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCBUILDINGELEMENTPROXYTYPE] = (d: RawLineData) => { new IFC4_3.IfcBuildingElementProxyType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCBUILDINGELEMENTPROXYTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuildingElementProxyType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCBUILDINGELEMENTPROXYTYPE] = (i:IFC4_3.IfcBuildingElementProxyType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBUILDINGELEMENTPROXYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCBUILDINGSYSTEM] = (d: RawLineData) => { new IFC4_3.IfcBuildingSystem(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCBUILDINGSYSTEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuildingSystem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCBUILDINGSYSTEM] = (i:IFC4_3.IfcBuildingSystem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.LongName]; }
InversePropertyDef['IFC4.3'][IFCBUILDINGSYSTEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],['ServicesFacilities',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCBUILTELEMENT] = (d: RawLineData) => { new IFC4_3.IfcBuiltElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCBUILTELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuiltElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCBUILTELEMENT] = (i:IFC4_3.IfcBuiltElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCBUILTELEMENT] = [IFCBUILDINGELEMENTPROXY,IFCBEARING,IFCBEAM,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALL,IFCTRACKELEMENT,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCRAIL,IFCPLATE,IFCPAVEMENT,IFCNAVIGATIONELEMENT,IFCMOORINGDEVICE,IFCMEMBER,IFCKERB,IFCFOOTING,IFCREINFORCEDSOIL,IFCEARTHWORKSFILL,IFCEARTHWORKSELEMENT,IFCDOOR,IFCCAISSONFOUNDATION,IFCPILE,IFCDEEPFOUNDATION,IFCCURTAINWALL,IFCCOVERING,IFCCOURSE,IFCCOLUMN,IFCCHIMNEY];
InversePropertyDef['IFC4.3'][IFCBUILTELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCBUILTSYSTEM] = (d: RawLineData) => { new IFC4_3.IfcBuiltSystem(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new IFC4_3.IfcLabel(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCBUILTSYSTEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuiltSystem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCBUILTSYSTEM] = (i:IFC4_3.IfcBuiltSystem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.LongName]; }
InversePropertyDef['IFC4.3'][IFCBUILTSYSTEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],['ServicesFacilities',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCBURNERTYPE] = (d: RawLineData) => { new IFC4_3.IfcBurnerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCBURNERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBurnerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCBURNERTYPE] = (i:IFC4_3.IfcBurnerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBURNERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCABLECARRIERFITTINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcCableCarrierFittingType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCABLECARRIERFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCableCarrierFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCABLECARRIERFITTINGTYPE] = (i:IFC4_3.IfcCableCarrierFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCABLECARRIERFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCABLECARRIERSEGMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcCableCarrierSegmentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCABLECARRIERSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCableCarrierSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCABLECARRIERSEGMENTTYPE] = (i:IFC4_3.IfcCableCarrierSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCABLECARRIERSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCABLEFITTINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcCableFittingType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCABLEFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCableFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCABLEFITTINGTYPE] = (i:IFC4_3.IfcCableFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCABLEFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCABLESEGMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcCableSegmentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCABLESEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCableSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCABLESEGMENTTYPE] = (i:IFC4_3.IfcCableSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCABLESEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCAISSONFOUNDATIONTYPE] = (d: RawLineData) => { new IFC4_3.IfcCaissonFoundationType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCAISSONFOUNDATIONTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCaissonFoundationType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCAISSONFOUNDATIONTYPE] = (i:IFC4_3.IfcCaissonFoundationType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCAISSONFOUNDATIONTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCHILLERTYPE] = (d: RawLineData) => { new IFC4_3.IfcChillerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCHILLERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcChillerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCHILLERTYPE] = (i:IFC4_3.IfcChillerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCHILLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCHIMNEY] = (d: RawLineData) => { new IFC4_3.IfcChimney(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCHIMNEY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcChimney(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCHIMNEY] = (i:IFC4_3.IfcChimney):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCHIMNEY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCCIRCLE] = (d: RawLineData) => { new IFC4_3.IfcCircle(d.ID, new Reference(d.arguments[0].value), new IFC4_3.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCCIRCLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCircle(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCCIRCLE] = (i:IFC4_3.IfcCircle):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC4.3'][IFCCIRCLE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCCIVILELEMENT] = (d: RawLineData) => { new IFC4_3.IfcCivilElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCCIVILELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCivilElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCCIVILELEMENT] = (i:IFC4_3.IfcCivilElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC4.3'][IFCCIVILELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCCOILTYPE] = (d: RawLineData) => { new IFC4_3.IfcCoilType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCOILTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCoilType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOILTYPE] = (i:IFC4_3.IfcCoilType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOILTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCOLUMN] = (d: RawLineData) => { new IFC4_3.IfcColumn(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCOLUMN] = (expressID:number, args: any[]) => { return new IFC4_3.IfcColumn(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOLUMN] = (i:IFC4_3.IfcColumn):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOLUMN] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCCOMMUNICATIONSAPPLIANCETYPE] = (d: RawLineData) => { new IFC4_3.IfcCommunicationsApplianceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCOMMUNICATIONSAPPLIANCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCommunicationsApplianceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOMMUNICATIONSAPPLIANCETYPE] = (i:IFC4_3.IfcCommunicationsApplianceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOMMUNICATIONSAPPLIANCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCOMPRESSORTYPE] = (d: RawLineData) => { new IFC4_3.IfcCompressorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCOMPRESSORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCompressorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOMPRESSORTYPE] = (i:IFC4_3.IfcCompressorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOMPRESSORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCONDENSERTYPE] = (d: RawLineData) => { new IFC4_3.IfcCondenserType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCONDENSERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCondenserType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCONDENSERTYPE] = (i:IFC4_3.IfcCondenserType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONDENSERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (d: RawLineData) => { new IFC4_3.IfcConstructionEquipmentResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4_3'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstructionEquipmentResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (i:IFC4_3.IfcConstructionEquipmentResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCONSTRUCTIONMATERIALRESOURCE] = (d: RawLineData) => { new IFC4_3.IfcConstructionMaterialResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4_3'][IFCCONSTRUCTIONMATERIALRESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstructionMaterialResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCCONSTRUCTIONMATERIALRESOURCE] = (i:IFC4_3.IfcConstructionMaterialResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONSTRUCTIONMATERIALRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (d: RawLineData) => { new IFC4_3.IfcConstructionProductResource(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4_3.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4_3.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4_3.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4_3'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConstructionProductResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (i:IFC4_3.IfcConstructionProductResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONSTRUCTIONPRODUCTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4_3'][IFCCONVEYORSEGMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcConveyorSegmentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCONVEYORSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConveyorSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCONVEYORSEGMENTTYPE] = (i:IFC4_3.IfcConveyorSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONVEYORSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCOOLEDBEAMTYPE] = (d: RawLineData) => { new IFC4_3.IfcCooledBeamType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCOOLEDBEAMTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCooledBeamType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOOLEDBEAMTYPE] = (i:IFC4_3.IfcCooledBeamType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOOLEDBEAMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCOOLINGTOWERTYPE] = (d: RawLineData) => { new IFC4_3.IfcCoolingTowerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCOOLINGTOWERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCoolingTowerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCOOLINGTOWERTYPE] = (i:IFC4_3.IfcCoolingTowerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOOLINGTOWERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCOURSE] = (d: RawLineData) => { new IFC4_3.IfcCourse(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCOURSE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCourse(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOURSE] = (i:IFC4_3.IfcCourse):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOURSE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCCOVERING] = (d: RawLineData) => { new IFC4_3.IfcCovering(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCOVERING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCovering(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOVERING] = (i:IFC4_3.IfcCovering):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOVERING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['CoversSpaces',IFCRELCOVERSSPACES,5,true],['CoversElements',IFCRELCOVERSBLDGELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCURTAINWALL] = (d: RawLineData) => { new IFC4_3.IfcCurtainWall(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCURTAINWALL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCurtainWall(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCURTAINWALL] = (i:IFC4_3.IfcCurtainWall):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCURTAINWALL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCDAMPERTYPE] = (d: RawLineData) => { new IFC4_3.IfcDamperType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCDAMPERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDamperType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCDAMPERTYPE] = (i:IFC4_3.IfcDamperType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDAMPERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDEEPFOUNDATION] = (d: RawLineData) => { new IFC4_3.IfcDeepFoundation(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCDEEPFOUNDATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDeepFoundation(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCDEEPFOUNDATION] = (i:IFC4_3.IfcDeepFoundation):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCDEEPFOUNDATION] = [IFCCAISSONFOUNDATION,IFCPILE];
InversePropertyDef['IFC4.3'][IFCDEEPFOUNDATION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCDISCRETEACCESSORY] = (d: RawLineData) => { new IFC4_3.IfcDiscreteAccessory(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCDISCRETEACCESSORY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDiscreteAccessory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDISCRETEACCESSORY] = (i:IFC4_3.IfcDiscreteAccessory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDISCRETEACCESSORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCDISCRETEACCESSORYTYPE] = (d: RawLineData) => { new IFC4_3.IfcDiscreteAccessoryType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCDISCRETEACCESSORYTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDiscreteAccessoryType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCDISCRETEACCESSORYTYPE] = (i:IFC4_3.IfcDiscreteAccessoryType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDISCRETEACCESSORYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONBOARDTYPE] = (d: RawLineData) => { new IFC4_3.IfcDistributionBoardType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCDISTRIBUTIONBOARDTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionBoardType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONBOARDTYPE] = (i:IFC4_3.IfcDistributionBoardType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONBOARDTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcDistributionChamberElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionChamberElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (i:IFC4_3.IfcDistributionChamberElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcDistributionControlElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionControlElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (i:IFC4_3.IfcDistributionControlElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4.3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE];
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONELEMENT] = (d: RawLineData) => { new IFC4_3.IfcDistributionElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCDISTRIBUTIONELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONELEMENT] = (i:IFC4_3.IfcDistributionElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCDISTRIBUTIONELEMENT] = [IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCELECTRICFLOWTREATMENTDEVICE,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSIGNAL,IFCSANITARYTERMINAL,IFCOUTLET,IFCMOBILETELECOMMUNICATIONSAPPLIANCE,IFCMEDICALDEVICE,IFCLIQUIDTERMINAL,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCONVEYORSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT];
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONFLOWELEMENT] = (d: RawLineData) => { new IFC4_3.IfcDistributionFlowElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCDISTRIBUTIONFLOWELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionFlowElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONFLOWELEMENT] = (i:IFC4_3.IfcDistributionFlowElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCDISTRIBUTIONFLOWELEMENT] = [IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCELECTRICFLOWTREATMENTDEVICE,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSIGNAL,IFCSANITARYTERMINAL,IFCOUTLET,IFCMOBILETELECOMMUNICATIONSAPPLIANCE,IFCMEDICALDEVICE,IFCLIQUIDTERMINAL,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCONVEYORSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE];
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONFLOWELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONPORT] = (d: RawLineData) => { new IFC4_3.IfcDistributionPort(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCDISTRIBUTIONPORT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionPort(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONPORT] = (i:IFC4_3.IfcDistributionPort):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.FlowDirection, i.PredefinedType, i.SystemType]; }
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONPORT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainedIn',IFCRELCONNECTSPORTTOELEMENT,4,true],['ConnectedFrom',IFCRELCONNECTSPORTS,5,true],['ConnectedTo',IFCRELCONNECTSPORTS,4,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONSYSTEM] = (d: RawLineData) => { new IFC4_3.IfcDistributionSystem(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), d.arguments[6]); }
Constructors['IFC4_3'][IFCDISTRIBUTIONSYSTEM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionSystem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONSYSTEM] = (i:IFC4_3.IfcDistributionSystem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.PredefinedType]; }
InheritanceDef['IFC4.3'][IFCDISTRIBUTIONSYSTEM] = [IFCDISTRIBUTIONCIRCUIT];
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONSYSTEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],['ServicesFacilities',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCDOOR] = (d: RawLineData) => { new IFC4_3.IfcDoor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[9].value), d.arguments[10], d.arguments[11], !d.arguments[12] ? null :new IFC4_3.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4_3'][IFCDOOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDoor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCDOOR] = (i:IFC4_3.IfcDoor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OverallHeight, i.OverallWidth, i.PredefinedType, i.OperationType, i.UserDefinedOperationType]; }
InversePropertyDef['IFC4.3'][IFCDOOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCDUCTFITTINGTYPE] = (d: RawLineData) => { new IFC4_3.IfcDuctFittingType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCDUCTFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDuctFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCDUCTFITTINGTYPE] = (i:IFC4_3.IfcDuctFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDUCTFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDUCTSEGMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcDuctSegmentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCDUCTSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDuctSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCDUCTSEGMENTTYPE] = (i:IFC4_3.IfcDuctSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDUCTSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCDUCTSILENCERTYPE] = (d: RawLineData) => { new IFC4_3.IfcDuctSilencerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCDUCTSILENCERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDuctSilencerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCDUCTSILENCERTYPE] = (i:IFC4_3.IfcDuctSilencerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDUCTSILENCERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCEARTHWORKSCUT] = (d: RawLineData) => { new IFC4_3.IfcEarthworksCut(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCEARTHWORKSCUT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEarthworksCut(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCEARTHWORKSCUT] = (i:IFC4_3.IfcEarthworksCut):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCEARTHWORKSCUT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC4_3'][IFCEARTHWORKSELEMENT] = (d: RawLineData) => { new IFC4_3.IfcEarthworksElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCEARTHWORKSELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEarthworksElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCEARTHWORKSELEMENT] = (i:IFC4_3.IfcEarthworksElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCEARTHWORKSELEMENT] = [IFCREINFORCEDSOIL,IFCEARTHWORKSFILL];
InversePropertyDef['IFC4.3'][IFCEARTHWORKSELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCEARTHWORKSFILL] = (d: RawLineData) => { new IFC4_3.IfcEarthworksFill(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCEARTHWORKSFILL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEarthworksFill(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCEARTHWORKSFILL] = (i:IFC4_3.IfcEarthworksFill):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCEARTHWORKSFILL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCELECTRICAPPLIANCETYPE] = (d: RawLineData) => { new IFC4_3.IfcElectricApplianceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCELECTRICAPPLIANCETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricApplianceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELECTRICAPPLIANCETYPE] = (i:IFC4_3.IfcElectricApplianceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICAPPLIANCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELECTRICDISTRIBUTIONBOARDTYPE] = (d: RawLineData) => { new IFC4_3.IfcElectricDistributionBoardType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCELECTRICDISTRIBUTIONBOARDTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricDistributionBoardType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELECTRICDISTRIBUTIONBOARDTYPE] = (i:IFC4_3.IfcElectricDistributionBoardType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICDISTRIBUTIONBOARDTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcElectricFlowStorageDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricFlowStorageDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (i:IFC4_3.IfcElectricFlowStorageDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELECTRICFLOWTREATMENTDEVICETYPE] = (d: RawLineData) => { new IFC4_3.IfcElectricFlowTreatmentDeviceType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCELECTRICFLOWTREATMENTDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricFlowTreatmentDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELECTRICFLOWTREATMENTDEVICETYPE] = (i:IFC4_3.IfcElectricFlowTreatmentDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICFLOWTREATMENTDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELECTRICGENERATORTYPE] = (d: RawLineData) => { new IFC4_3.IfcElectricGeneratorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCELECTRICGENERATORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricGeneratorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELECTRICGENERATORTYPE] = (i:IFC4_3.IfcElectricGeneratorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICGENERATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELECTRICMOTORTYPE] = (d: RawLineData) => { new IFC4_3.IfcElectricMotorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCELECTRICMOTORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricMotorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELECTRICMOTORTYPE] = (i:IFC4_3.IfcElectricMotorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICMOTORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCELECTRICTIMECONTROLTYPE] = (d: RawLineData) => { new IFC4_3.IfcElectricTimeControlType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCELECTRICTIMECONTROLTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricTimeControlType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCELECTRICTIMECONTROLTYPE] = (i:IFC4_3.IfcElectricTimeControlType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICTIMECONTROLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCENERGYCONVERSIONDEVICE] = (d: RawLineData) => { new IFC4_3.IfcEnergyConversionDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCENERGYCONVERSIONDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEnergyConversionDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCENERGYCONVERSIONDEVICE] = (i:IFC4_3.IfcEnergyConversionDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCENERGYCONVERSIONDEVICE] = [IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE];
InversePropertyDef['IFC4.3'][IFCENERGYCONVERSIONDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCENGINE] = (d: RawLineData) => { new IFC4_3.IfcEngine(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCENGINE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEngine(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCENGINE] = (i:IFC4_3.IfcEngine):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCENGINE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCEVAPORATIVECOOLER] = (d: RawLineData) => { new IFC4_3.IfcEvaporativeCooler(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCEVAPORATIVECOOLER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEvaporativeCooler(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCEVAPORATIVECOOLER] = (i:IFC4_3.IfcEvaporativeCooler):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCEVAPORATIVECOOLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCEVAPORATOR] = (d: RawLineData) => { new IFC4_3.IfcEvaporator(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCEVAPORATOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcEvaporator(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCEVAPORATOR] = (i:IFC4_3.IfcEvaporator):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCEVAPORATOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCEXTERNALSPATIALELEMENT] = (d: RawLineData) => { new IFC4_3.IfcExternalSpatialElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCEXTERNALSPATIALELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcExternalSpatialElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCEXTERNALSPATIALELEMENT] = (i:IFC4_3.IfcExternalSpatialElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCEXTERNALSPATIALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['BoundedBy',IFCRELSPACEBOUNDARY,4,true],];
FromRawLineData['IFC4_3'][IFCFANTYPE] = (d: RawLineData) => { new IFC4_3.IfcFanType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCFANTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFanType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCFANTYPE] = (i:IFC4_3.IfcFanType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFANTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFILTERTYPE] = (d: RawLineData) => { new IFC4_3.IfcFilterType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCFILTERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFilterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCFILTERTYPE] = (i:IFC4_3.IfcFilterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFILTERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFIRESUPPRESSIONTERMINALTYPE] = (d: RawLineData) => { new IFC4_3.IfcFireSuppressionTerminalType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCFIRESUPPRESSIONTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFireSuppressionTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCFIRESUPPRESSIONTERMINALTYPE] = (i:IFC4_3.IfcFireSuppressionTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFIRESUPPRESSIONTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWCONTROLLER] = (d: RawLineData) => { new IFC4_3.IfcFlowController(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFLOWCONTROLLER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowController(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFLOWCONTROLLER] = (i:IFC4_3.IfcFlowController):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFLOWCONTROLLER] = [IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER];
InversePropertyDef['IFC4.3'][IFCFLOWCONTROLLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFLOWFITTING] = (d: RawLineData) => { new IFC4_3.IfcFlowFitting(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFLOWFITTING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFLOWFITTING] = (i:IFC4_3.IfcFlowFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFLOWFITTING] = [IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX];
InversePropertyDef['IFC4.3'][IFCFLOWFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFLOWINSTRUMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcFlowInstrumentType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCFLOWINSTRUMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowInstrumentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCFLOWINSTRUMENTTYPE] = (i:IFC4_3.IfcFlowInstrumentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFLOWINSTRUMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCFLOWMETER] = (d: RawLineData) => { new IFC4_3.IfcFlowMeter(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFLOWMETER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowMeter(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWMETER] = (i:IFC4_3.IfcFlowMeter):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFLOWMETER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFLOWMOVINGDEVICE] = (d: RawLineData) => { new IFC4_3.IfcFlowMovingDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFLOWMOVINGDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowMovingDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFLOWMOVINGDEVICE] = (i:IFC4_3.IfcFlowMovingDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFLOWMOVINGDEVICE] = [IFCFAN,IFCCOMPRESSOR,IFCPUMP];
InversePropertyDef['IFC4.3'][IFCFLOWMOVINGDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFLOWSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcFlowSegment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFLOWSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFLOWSEGMENT] = (i:IFC4_3.IfcFlowSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFLOWSEGMENT] = [IFCDUCTSEGMENT,IFCCONVEYORSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT];
InversePropertyDef['IFC4.3'][IFCFLOWSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFLOWSTORAGEDEVICE] = (d: RawLineData) => { new IFC4_3.IfcFlowStorageDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFLOWSTORAGEDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowStorageDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFLOWSTORAGEDEVICE] = (i:IFC4_3.IfcFlowStorageDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFLOWSTORAGEDEVICE] = [IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK];
InversePropertyDef['IFC4.3'][IFCFLOWSTORAGEDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFLOWTERMINAL] = (d: RawLineData) => { new IFC4_3.IfcFlowTerminal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFLOWTERMINAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFLOWTERMINAL] = (i:IFC4_3.IfcFlowTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFLOWTERMINAL] = [IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSIGNAL,IFCSANITARYTERMINAL,IFCOUTLET,IFCMOBILETELECOMMUNICATIONSAPPLIANCE,IFCMEDICALDEVICE,IFCLIQUIDTERMINAL,IFCLIGHTFIXTURE,IFCLAMP];
InversePropertyDef['IFC4.3'][IFCFLOWTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFLOWTREATMENTDEVICE] = (d: RawLineData) => { new IFC4_3.IfcFlowTreatmentDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCFLOWTREATMENTDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowTreatmentDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCFLOWTREATMENTDEVICE] = (i:IFC4_3.IfcFlowTreatmentDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCFLOWTREATMENTDEVICE] = [IFCFILTER,IFCELECTRICFLOWTREATMENTDEVICE,IFCDUCTSILENCER,IFCINTERCEPTOR];
InversePropertyDef['IFC4.3'][IFCFLOWTREATMENTDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFOOTING] = (d: RawLineData) => { new IFC4_3.IfcFooting(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFOOTING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFooting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFOOTING] = (i:IFC4_3.IfcFooting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFOOTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCGEOTECHNICALASSEMBLY] = (d: RawLineData) => { new IFC4_3.IfcGeotechnicalAssembly(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCGEOTECHNICALASSEMBLY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeotechnicalAssembly(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCGEOTECHNICALASSEMBLY] = (i:IFC4_3.IfcGeotechnicalAssembly):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCGEOTECHNICALASSEMBLY] = [IFCGEOSLICE,IFCGEOMODEL,IFCBOREHOLE];
InversePropertyDef['IFC4.3'][IFCGEOTECHNICALASSEMBLY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCGRID] = (d: RawLineData) => { new IFC4_3.IfcGrid(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcGridAxis>(p.value)), d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcGridAxis>(p.value)), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4_3.IfcGridAxis>(p.value)), d.arguments[10]); }
Constructors['IFC4_3'][IFCGRID] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGrid(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCGRID] = (i:IFC4_3.IfcGrid):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.UAxes, i.VAxes, i.WAxes, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCGRID] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['Positions',IFCRELPOSITIONS,4,true],];
FromRawLineData['IFC4_3'][IFCHEATEXCHANGER] = (d: RawLineData) => { new IFC4_3.IfcHeatExchanger(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCHEATEXCHANGER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcHeatExchanger(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCHEATEXCHANGER] = (i:IFC4_3.IfcHeatExchanger):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCHEATEXCHANGER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCHUMIDIFIER] = (d: RawLineData) => { new IFC4_3.IfcHumidifier(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCHUMIDIFIER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcHumidifier(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCHUMIDIFIER] = (i:IFC4_3.IfcHumidifier):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCHUMIDIFIER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCINTERCEPTOR] = (d: RawLineData) => { new IFC4_3.IfcInterceptor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCINTERCEPTOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcInterceptor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCINTERCEPTOR] = (i:IFC4_3.IfcInterceptor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCINTERCEPTOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCJUNCTIONBOX] = (d: RawLineData) => { new IFC4_3.IfcJunctionBox(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCJUNCTIONBOX] = (expressID:number, args: any[]) => { return new IFC4_3.IfcJunctionBox(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCJUNCTIONBOX] = (i:IFC4_3.IfcJunctionBox):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCJUNCTIONBOX] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCKERB] = (d: RawLineData) => { new IFC4_3.IfcKerb(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), new IFC4_3.IfcBoolean(d.arguments[8].value)); }
Constructors['IFC4_3'][IFCKERB] = (expressID:number, args: any[]) => { return new IFC4_3.IfcKerb(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCKERB] = (i:IFC4_3.IfcKerb):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.Mountable]; }
InversePropertyDef['IFC4.3'][IFCKERB] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCLAMP] = (d: RawLineData) => { new IFC4_3.IfcLamp(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCLAMP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLamp(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCLAMP] = (i:IFC4_3.IfcLamp):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCLAMP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCLIGHTFIXTURE] = (d: RawLineData) => { new IFC4_3.IfcLightFixture(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCLIGHTFIXTURE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLightFixture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCLIGHTFIXTURE] = (i:IFC4_3.IfcLightFixture):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCLIGHTFIXTURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCLINEARPOSITIONINGELEMENT] = (d: RawLineData) => { new IFC4_3.IfcLinearPositioningElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4_3'][IFCLINEARPOSITIONINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLinearPositioningElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCLINEARPOSITIONINGELEMENT] = (i:IFC4_3.IfcLinearPositioningElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4.3'][IFCLINEARPOSITIONINGELEMENT] = [IFCALIGNMENT];
InversePropertyDef['IFC4.3'][IFCLINEARPOSITIONINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['Positions',IFCRELPOSITIONS,4,true],];
FromRawLineData['IFC4_3'][IFCLIQUIDTERMINAL] = (d: RawLineData) => { new IFC4_3.IfcLiquidTerminal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCLIQUIDTERMINAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcLiquidTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCLIQUIDTERMINAL] = (i:IFC4_3.IfcLiquidTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCLIQUIDTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCMEDICALDEVICE] = (d: RawLineData) => { new IFC4_3.IfcMedicalDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCMEDICALDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMedicalDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCMEDICALDEVICE] = (i:IFC4_3.IfcMedicalDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMEDICALDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCMEMBER] = (d: RawLineData) => { new IFC4_3.IfcMember(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCMEMBER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCMEMBER] = (i:IFC4_3.IfcMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCMOBILETELECOMMUNICATIONSAPPLIANCE] = (d: RawLineData) => { new IFC4_3.IfcMobileTelecommunicationsAppliance(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCMOBILETELECOMMUNICATIONSAPPLIANCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMobileTelecommunicationsAppliance(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCMOBILETELECOMMUNICATIONSAPPLIANCE] = (i:IFC4_3.IfcMobileTelecommunicationsAppliance):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMOBILETELECOMMUNICATIONSAPPLIANCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCMOORINGDEVICE] = (d: RawLineData) => { new IFC4_3.IfcMooringDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCMOORINGDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMooringDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCMOORINGDEVICE] = (i:IFC4_3.IfcMooringDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMOORINGDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCMOTORCONNECTION] = (d: RawLineData) => { new IFC4_3.IfcMotorConnection(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCMOTORCONNECTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcMotorConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCMOTORCONNECTION] = (i:IFC4_3.IfcMotorConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCMOTORCONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCNAVIGATIONELEMENT] = (d: RawLineData) => { new IFC4_3.IfcNavigationElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCNAVIGATIONELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcNavigationElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCNAVIGATIONELEMENT] = (i:IFC4_3.IfcNavigationElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCNAVIGATIONELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCOUTERBOUNDARYCURVE] = (d: RawLineData) => { new IFC4_3.IfcOuterBoundaryCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4_3.IfcSegment>(p.value)), new IFC4_3.IfcLogical(d.arguments[1].value)); }
Constructors['IFC4_3'][IFCOUTERBOUNDARYCURVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOuterBoundaryCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4_3'][IFCOUTERBOUNDARYCURVE] = (i:IFC4_3.IfcOuterBoundaryCurve):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InversePropertyDef['IFC4.3'][IFCOUTERBOUNDARYCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCOUTLET] = (d: RawLineData) => { new IFC4_3.IfcOutlet(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCOUTLET] = (expressID:number, args: any[]) => { return new IFC4_3.IfcOutlet(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCOUTLET] = (i:IFC4_3.IfcOutlet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCOUTLET] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCPAVEMENT] = (d: RawLineData) => { new IFC4_3.IfcPavement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCPAVEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPavement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPAVEMENT] = (i:IFC4_3.IfcPavement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPAVEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCPILE] = (d: RawLineData) => { new IFC4_3.IfcPile(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4_3'][IFCPILE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPile(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPILE] = (i:IFC4_3.IfcPile):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType, i.ConstructionType]; }
InversePropertyDef['IFC4.3'][IFCPILE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCPIPEFITTING] = (d: RawLineData) => { new IFC4_3.IfcPipeFitting(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCPIPEFITTING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPipeFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPIPEFITTING] = (i:IFC4_3.IfcPipeFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPIPEFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCPIPESEGMENT] = (d: RawLineData) => { new IFC4_3.IfcPipeSegment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCPIPESEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPipeSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPIPESEGMENT] = (i:IFC4_3.IfcPipeSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPIPESEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCPLATE] = (d: RawLineData) => { new IFC4_3.IfcPlate(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCPLATE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPlate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPLATE] = (i:IFC4_3.IfcPlate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPLATE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCPROTECTIVEDEVICE] = (d: RawLineData) => { new IFC4_3.IfcProtectiveDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCPROTECTIVEDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProtectiveDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPROTECTIVEDEVICE] = (i:IFC4_3.IfcProtectiveDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPROTECTIVEDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (d: RawLineData) => { new IFC4_3.IfcProtectiveDeviceTrippingUnitType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProtectiveDeviceTrippingUnitType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (i:IFC4_3.IfcProtectiveDeviceTrippingUnitType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCPUMP] = (d: RawLineData) => { new IFC4_3.IfcPump(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCPUMP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcPump(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPUMP] = (i:IFC4_3.IfcPump):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPUMP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCRAIL] = (d: RawLineData) => { new IFC4_3.IfcRail(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCRAIL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRail(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCRAIL] = (i:IFC4_3.IfcRail):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAIL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCRAILING] = (d: RawLineData) => { new IFC4_3.IfcRailing(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCRAILING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRailing(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCRAILING] = (i:IFC4_3.IfcRailing):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAILING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCRAMP] = (d: RawLineData) => { new IFC4_3.IfcRamp(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCRAMP] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRamp(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCRAMP] = (i:IFC4_3.IfcRamp):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAMP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCRAMPFLIGHT] = (d: RawLineData) => { new IFC4_3.IfcRampFlight(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCRAMPFLIGHT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRampFlight(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCRAMPFLIGHT] = (i:IFC4_3.IfcRampFlight):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCRAMPFLIGHT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCRATIONALBSPLINECURVEWITHKNOTS] = (d: RawLineData) => { new IFC4_3.IfcRationalBSplineCurveWithKnots(d.ID, new IFC4_3.IfcInteger(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4_3.IfcCartesianPoint>(p.value)), d.arguments[2], new IFC4_3.IfcLogical(d.arguments[3].value), new IFC4_3.IfcLogical(d.arguments[4].value), d.arguments[5].map((p:any) => new IFC4_3.IfcInteger(p.value)), d.arguments[6].map((p:any) => new IFC4_3.IfcParameterValue(p.value)), d.arguments[7], d.arguments[8].map((p:any) => new IFC4_3.IfcReal(p.value))); }
Constructors['IFC4_3'][IFCRATIONALBSPLINECURVEWITHKNOTS] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRationalBSplineCurveWithKnots(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCRATIONALBSPLINECURVEWITHKNOTS] = (i:IFC4_3.IfcRationalBSplineCurveWithKnots):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect, i.KnotMultiplicities, i.Knots, i.KnotSpec, i.WeightsData]; }
InversePropertyDef['IFC4.3'][IFCRATIONALBSPLINECURVEWITHKNOTS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4_3'][IFCREINFORCEDSOIL] = (d: RawLineData) => { new IFC4_3.IfcReinforcedSoil(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCREINFORCEDSOIL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcedSoil(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCREINFORCEDSOIL] = (i:IFC4_3.IfcReinforcedSoil):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCREINFORCEDSOIL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCREINFORCINGBAR] = (d: RawLineData) => { new IFC4_3.IfcReinforcingBar(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcAreaMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[11].value), d.arguments[12], d.arguments[13]); }
Constructors['IFC4_3'][IFCREINFORCINGBAR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcingBar(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4_3'][IFCREINFORCINGBAR] = (i:IFC4_3.IfcReinforcingBar):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.NominalDiameter, i.CrossSectionArea, i.BarLength, i.PredefinedType, i.BarSurface]; }
InversePropertyDef['IFC4.3'][IFCREINFORCINGBAR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCREINFORCINGBARTYPE] = (d: RawLineData) => { new IFC4_3.IfcReinforcingBarType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcAreaMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[12].value), d.arguments[13], !d.arguments[14] ? null :new IFC4_3.IfcLabel(d.arguments[14].value), !d.arguments[15] ? null :d.arguments[15].map((p:any) => TypeInitialiser('IFC4_3',p))); }
Constructors['IFC4_3'][IFCREINFORCINGBARTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcReinforcingBarType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15]); }
ToRawLineData['IFC4_3'][IFCREINFORCINGBARTYPE] = (i:IFC4_3.IfcReinforcingBarType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.NominalDiameter, i.CrossSectionArea, i.BarLength, i.BarSurface, i.BendingShapeCode, !i.BendingParameters ? null :i.BendingParameters.map((p:any) => Labelise(p))]; }
InversePropertyDef['IFC4.3'][IFCREINFORCINGBARTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCROOF] = (d: RawLineData) => { new IFC4_3.IfcRoof(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCROOF] = (expressID:number, args: any[]) => { return new IFC4_3.IfcRoof(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCROOF] = (i:IFC4_3.IfcRoof):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCROOF] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCSANITARYTERMINAL] = (d: RawLineData) => { new IFC4_3.IfcSanitaryTerminal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSANITARYTERMINAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSanitaryTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSANITARYTERMINAL] = (i:IFC4_3.IfcSanitaryTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSANITARYTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCSENSORTYPE] = (d: RawLineData) => { new IFC4_3.IfcSensorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCSENSORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSensorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSENSORTYPE] = (i:IFC4_3.IfcSensorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSENSORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCSHADINGDEVICE] = (d: RawLineData) => { new IFC4_3.IfcShadingDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSHADINGDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcShadingDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSHADINGDEVICE] = (i:IFC4_3.IfcShadingDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSHADINGDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCSIGNAL] = (d: RawLineData) => { new IFC4_3.IfcSignal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSIGNAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSignal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSIGNAL] = (i:IFC4_3.IfcSignal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSIGNAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCSLAB] = (d: RawLineData) => { new IFC4_3.IfcSlab(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSLAB] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSlab(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSLAB] = (i:IFC4_3.IfcSlab):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSLAB] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCSOLARDEVICE] = (d: RawLineData) => { new IFC4_3.IfcSolarDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSOLARDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSolarDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSOLARDEVICE] = (i:IFC4_3.IfcSolarDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSOLARDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCSPACEHEATER] = (d: RawLineData) => { new IFC4_3.IfcSpaceHeater(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSPACEHEATER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSpaceHeater(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSPACEHEATER] = (i:IFC4_3.IfcSpaceHeater):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSPACEHEATER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCSTACKTERMINAL] = (d: RawLineData) => { new IFC4_3.IfcStackTerminal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSTACKTERMINAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStackTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTACKTERMINAL] = (i:IFC4_3.IfcStackTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTACKTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCSTAIR] = (d: RawLineData) => { new IFC4_3.IfcStair(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSTAIR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStair(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSTAIR] = (i:IFC4_3.IfcStair):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTAIR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCSTAIRFLIGHT] = (d: RawLineData) => { new IFC4_3.IfcStairFlight(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcInteger(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcInteger(d.arguments[9].value), !d.arguments[10] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[11].value), d.arguments[12]); }
Constructors['IFC4_3'][IFCSTAIRFLIGHT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStairFlight(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCSTAIRFLIGHT] = (i:IFC4_3.IfcStairFlight):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.NumberOfRisers, i.NumberOfTreads, i.RiserHeight, i.TreadLength, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTAIRFLIGHT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALANALYSISMODEL] = (d: RawLineData) => { new IFC4_3.IfcStructuralAnalysisModel(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new Reference<IFC4_3.IfcAxis2Placement3D>(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4_3.IfcStructuralLoadGroup>(p.value)), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4_3.IfcStructuralResultGroup>(p.value)), !d.arguments[9] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[9].value)); }
Constructors['IFC4_3'][IFCSTRUCTURALANALYSISMODEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralAnalysisModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALANALYSISMODEL] = (i:IFC4_3.IfcStructuralAnalysisModel):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.OrientationOf2DPlane, i.LoadedBy, i.HasResults, i.SharedPlacement]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALANALYSISMODEL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],['ServicesFacilities',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALLOADCASE] = (d: RawLineData) => { new IFC4_3.IfcStructuralLoadCase(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), d.arguments[5], d.arguments[6], d.arguments[7], !d.arguments[8] ? null :new IFC4_3.IfcRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcLabel(d.arguments[9].value), !d.arguments[10] ? null :d.arguments[10].map((p:any) => new IFC4_3.IfcRatioMeasure(p.value))); }
Constructors['IFC4_3'][IFCSTRUCTURALLOADCASE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralLoadCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALLOADCASE] = (i:IFC4_3.IfcStructuralLoadCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.ActionType, i.ActionSource, i.Coefficient, i.Purpose, i.SelfWeightCoefficients]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALLOADCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['SourceOfResultGroup',IFCSTRUCTURALRESULTGROUP,6,true],['LoadGroupFor',IFCSTRUCTURALANALYSISMODEL,7,true],];
FromRawLineData['IFC4_3'][IFCSTRUCTURALPLANARACTION] = (d: RawLineData) => { new IFC4_3.IfcStructuralPlanarAction(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4_3.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4_3.IfcBoolean(d.arguments[9].value), d.arguments[10], d.arguments[11]); }
Constructors['IFC4_3'][IFCSTRUCTURALPLANARACTION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcStructuralPlanarAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4_3'][IFCSTRUCTURALPLANARACTION] = (i:IFC4_3.IfcStructuralPlanarAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.ProjectedOrTrue, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSTRUCTURALPLANARACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4_3'][IFCSWITCHINGDEVICE] = (d: RawLineData) => { new IFC4_3.IfcSwitchingDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSWITCHINGDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSwitchingDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSWITCHINGDEVICE] = (i:IFC4_3.IfcSwitchingDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSWITCHINGDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCTANK] = (d: RawLineData) => { new IFC4_3.IfcTank(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCTANK] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTank(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTANK] = (i:IFC4_3.IfcTank):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTANK] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCTRACKELEMENT] = (d: RawLineData) => { new IFC4_3.IfcTrackElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCTRACKELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTrackElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTRACKELEMENT] = (i:IFC4_3.IfcTrackElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTRACKELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCTRANSFORMER] = (d: RawLineData) => { new IFC4_3.IfcTransformer(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCTRANSFORMER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTransformer(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTRANSFORMER] = (i:IFC4_3.IfcTransformer):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTRANSFORMER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCTRANSPORTELEMENT] = (d: RawLineData) => { new IFC4_3.IfcTransportElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCTRANSPORTELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTransportElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTRANSPORTELEMENT] = (i:IFC4_3.IfcTransportElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTRANSPORTELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCTUBEBUNDLE] = (d: RawLineData) => { new IFC4_3.IfcTubeBundle(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCTUBEBUNDLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcTubeBundle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCTUBEBUNDLE] = (i:IFC4_3.IfcTubeBundle):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCTUBEBUNDLE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCUNITARYCONTROLELEMENTTYPE] = (d: RawLineData) => { new IFC4_3.IfcUnitaryControlElementType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCUNITARYCONTROLELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcUnitaryControlElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCUNITARYCONTROLELEMENTTYPE] = (i:IFC4_3.IfcUnitaryControlElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCUNITARYCONTROLELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCUNITARYEQUIPMENT] = (d: RawLineData) => { new IFC4_3.IfcUnitaryEquipment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCUNITARYEQUIPMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcUnitaryEquipment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCUNITARYEQUIPMENT] = (i:IFC4_3.IfcUnitaryEquipment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCUNITARYEQUIPMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCVALVE] = (d: RawLineData) => { new IFC4_3.IfcValve(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCVALVE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcValve(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCVALVE] = (i:IFC4_3.IfcValve):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCVALVE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCWALL] = (d: RawLineData) => { new IFC4_3.IfcWall(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCWALL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWall(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCWALL] = (i:IFC4_3.IfcWall):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InheritanceDef['IFC4.3'][IFCWALL] = [IFCWALLSTANDARDCASE];
InversePropertyDef['IFC4.3'][IFCWALL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCWALLSTANDARDCASE] = (d: RawLineData) => { new IFC4_3.IfcWallStandardCase(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCWALLSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWallStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCWALLSTANDARDCASE] = (i:IFC4_3.IfcWallStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCWALLSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCWASTETERMINAL] = (d: RawLineData) => { new IFC4_3.IfcWasteTerminal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCWASTETERMINAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWasteTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCWASTETERMINAL] = (i:IFC4_3.IfcWasteTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCWASTETERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCWINDOW] = (d: RawLineData) => { new IFC4_3.IfcWindow(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4_3.IfcPositiveLengthMeasure(d.arguments[9].value), d.arguments[10], d.arguments[11], !d.arguments[12] ? null :new IFC4_3.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4_3'][IFCWINDOW] = (expressID:number, args: any[]) => { return new IFC4_3.IfcWindow(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4_3'][IFCWINDOW] = (i:IFC4_3.IfcWindow):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OverallHeight, i.OverallWidth, i.PredefinedType, i.PartitioningType, i.UserDefinedPartitioningType]; }
InversePropertyDef['IFC4.3'][IFCWINDOW] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCACTUATORTYPE] = (d: RawLineData) => { new IFC4_3.IfcActuatorType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCACTUATORTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcActuatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCACTUATORTYPE] = (i:IFC4_3.IfcActuatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCACTUATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCAIRTERMINAL] = (d: RawLineData) => { new IFC4_3.IfcAirTerminal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCAIRTERMINAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAirTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCAIRTERMINAL] = (i:IFC4_3.IfcAirTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCAIRTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCAIRTERMINALBOX] = (d: RawLineData) => { new IFC4_3.IfcAirTerminalBox(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCAIRTERMINALBOX] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAirTerminalBox(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCAIRTERMINALBOX] = (i:IFC4_3.IfcAirTerminalBox):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCAIRTERMINALBOX] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCAIRTOAIRHEATRECOVERY] = (d: RawLineData) => { new IFC4_3.IfcAirToAirHeatRecovery(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCAIRTOAIRHEATRECOVERY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAirToAirHeatRecovery(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCAIRTOAIRHEATRECOVERY] = (i:IFC4_3.IfcAirToAirHeatRecovery):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCAIRTOAIRHEATRECOVERY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCALARMTYPE] = (d: RawLineData) => { new IFC4_3.IfcAlarmType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCALARMTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlarmType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCALARMTYPE] = (i:IFC4_3.IfcAlarmType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCALARMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCALIGNMENT] = (d: RawLineData) => { new IFC4_3.IfcAlignment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4_3'][IFCALIGNMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlignment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCALIGNMENT] = (i:IFC4_3.IfcAlignment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCALIGNMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['Positions',IFCRELPOSITIONS,4,true],];
FromRawLineData['IFC4_3'][IFCAUDIOVISUALAPPLIANCE] = (d: RawLineData) => { new IFC4_3.IfcAudioVisualAppliance(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCAUDIOVISUALAPPLIANCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAudioVisualAppliance(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCAUDIOVISUALAPPLIANCE] = (i:IFC4_3.IfcAudioVisualAppliance):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCAUDIOVISUALAPPLIANCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCBEAM] = (d: RawLineData) => { new IFC4_3.IfcBeam(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCBEAM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBeam(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCBEAM] = (i:IFC4_3.IfcBeam):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBEAM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCBEARING] = (d: RawLineData) => { new IFC4_3.IfcBearing(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCBEARING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBearing(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCBEARING] = (i:IFC4_3.IfcBearing):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBEARING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCBOILER] = (d: RawLineData) => { new IFC4_3.IfcBoiler(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCBOILER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBoiler(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCBOILER] = (i:IFC4_3.IfcBoiler):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBOILER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCBOREHOLE] = (d: RawLineData) => { new IFC4_3.IfcBorehole(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCBOREHOLE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBorehole(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCBOREHOLE] = (i:IFC4_3.IfcBorehole):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC4.3'][IFCBOREHOLE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCBUILDINGELEMENTPROXY] = (d: RawLineData) => { new IFC4_3.IfcBuildingElementProxy(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCBUILDINGELEMENTPROXY] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBuildingElementProxy(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCBUILDINGELEMENTPROXY] = (i:IFC4_3.IfcBuildingElementProxy):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBUILDINGELEMENTPROXY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCBURNER] = (d: RawLineData) => { new IFC4_3.IfcBurner(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCBURNER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcBurner(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCBURNER] = (i:IFC4_3.IfcBurner):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCBURNER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCABLECARRIERFITTING] = (d: RawLineData) => { new IFC4_3.IfcCableCarrierFitting(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCABLECARRIERFITTING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCableCarrierFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCABLECARRIERFITTING] = (i:IFC4_3.IfcCableCarrierFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCABLECARRIERFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCABLECARRIERSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcCableCarrierSegment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCABLECARRIERSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCableCarrierSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCABLECARRIERSEGMENT] = (i:IFC4_3.IfcCableCarrierSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCABLECARRIERSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCABLEFITTING] = (d: RawLineData) => { new IFC4_3.IfcCableFitting(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCABLEFITTING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCableFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCABLEFITTING] = (i:IFC4_3.IfcCableFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCABLEFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCABLESEGMENT] = (d: RawLineData) => { new IFC4_3.IfcCableSegment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCABLESEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCableSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCABLESEGMENT] = (i:IFC4_3.IfcCableSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCABLESEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCAISSONFOUNDATION] = (d: RawLineData) => { new IFC4_3.IfcCaissonFoundation(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCAISSONFOUNDATION] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCaissonFoundation(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCAISSONFOUNDATION] = (i:IFC4_3.IfcCaissonFoundation):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCAISSONFOUNDATION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCCHILLER] = (d: RawLineData) => { new IFC4_3.IfcChiller(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCHILLER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcChiller(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCHILLER] = (i:IFC4_3.IfcChiller):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCHILLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCOIL] = (d: RawLineData) => { new IFC4_3.IfcCoil(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCOIL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCoil(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOIL] = (i:IFC4_3.IfcCoil):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOIL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCOMMUNICATIONSAPPLIANCE] = (d: RawLineData) => { new IFC4_3.IfcCommunicationsAppliance(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCOMMUNICATIONSAPPLIANCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCommunicationsAppliance(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOMMUNICATIONSAPPLIANCE] = (i:IFC4_3.IfcCommunicationsAppliance):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOMMUNICATIONSAPPLIANCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCOMPRESSOR] = (d: RawLineData) => { new IFC4_3.IfcCompressor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCOMPRESSOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCompressor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOMPRESSOR] = (i:IFC4_3.IfcCompressor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOMPRESSOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCONDENSER] = (d: RawLineData) => { new IFC4_3.IfcCondenser(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCONDENSER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCondenser(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCONDENSER] = (i:IFC4_3.IfcCondenser):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONDENSER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCONTROLLERTYPE] = (d: RawLineData) => { new IFC4_3.IfcControllerType(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4_3.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4_3.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4_3.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4_3.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4_3'][IFCCONTROLLERTYPE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcControllerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4_3'][IFCCONTROLLERTYPE] = (i:IFC4_3.IfcControllerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONTROLLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4_3'][IFCCONVEYORSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcConveyorSegment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCONVEYORSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcConveyorSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCONVEYORSEGMENT] = (i:IFC4_3.IfcConveyorSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONVEYORSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCOOLEDBEAM] = (d: RawLineData) => { new IFC4_3.IfcCooledBeam(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCOOLEDBEAM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCooledBeam(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOOLEDBEAM] = (i:IFC4_3.IfcCooledBeam):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOOLEDBEAM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCCOOLINGTOWER] = (d: RawLineData) => { new IFC4_3.IfcCoolingTower(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCOOLINGTOWER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcCoolingTower(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCOOLINGTOWER] = (i:IFC4_3.IfcCoolingTower):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCOOLINGTOWER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCDAMPER] = (d: RawLineData) => { new IFC4_3.IfcDamper(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCDAMPER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDamper(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDAMPER] = (i:IFC4_3.IfcDamper):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDAMPER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONBOARD] = (d: RawLineData) => { new IFC4_3.IfcDistributionBoard(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCDISTRIBUTIONBOARD] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionBoard(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONBOARD] = (i:IFC4_3.IfcDistributionBoard):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONBOARD] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONCHAMBERELEMENT] = (d: RawLineData) => { new IFC4_3.IfcDistributionChamberElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCDISTRIBUTIONCHAMBERELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionChamberElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONCHAMBERELEMENT] = (i:IFC4_3.IfcDistributionChamberElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONCHAMBERELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONCIRCUIT] = (d: RawLineData) => { new IFC4_3.IfcDistributionCircuit(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4_3.IfcLabel(d.arguments[5].value), d.arguments[6]); }
Constructors['IFC4_3'][IFCDISTRIBUTIONCIRCUIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionCircuit(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONCIRCUIT] = (i:IFC4_3.IfcDistributionCircuit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONCIRCUIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],['ServicesFacilities',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4_3'][IFCDISTRIBUTIONCONTROLELEMENT] = (d: RawLineData) => { new IFC4_3.IfcDistributionControlElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCDISTRIBUTIONCONTROLELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDistributionControlElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCDISTRIBUTIONCONTROLELEMENT] = (i:IFC4_3.IfcDistributionControlElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4.3'][IFCDISTRIBUTIONCONTROLELEMENT] = [IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT];
InversePropertyDef['IFC4.3'][IFCDISTRIBUTIONCONTROLELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCDUCTFITTING] = (d: RawLineData) => { new IFC4_3.IfcDuctFitting(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCDUCTFITTING] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDuctFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDUCTFITTING] = (i:IFC4_3.IfcDuctFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDUCTFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCDUCTSEGMENT] = (d: RawLineData) => { new IFC4_3.IfcDuctSegment(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCDUCTSEGMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDuctSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDUCTSEGMENT] = (i:IFC4_3.IfcDuctSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDUCTSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCDUCTSILENCER] = (d: RawLineData) => { new IFC4_3.IfcDuctSilencer(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCDUCTSILENCER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcDuctSilencer(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCDUCTSILENCER] = (i:IFC4_3.IfcDuctSilencer):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCDUCTSILENCER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCELECTRICAPPLIANCE] = (d: RawLineData) => { new IFC4_3.IfcElectricAppliance(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCELECTRICAPPLIANCE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricAppliance(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELECTRICAPPLIANCE] = (i:IFC4_3.IfcElectricAppliance):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICAPPLIANCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCELECTRICDISTRIBUTIONBOARD] = (d: RawLineData) => { new IFC4_3.IfcElectricDistributionBoard(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCELECTRICDISTRIBUTIONBOARD] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricDistributionBoard(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELECTRICDISTRIBUTIONBOARD] = (i:IFC4_3.IfcElectricDistributionBoard):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICDISTRIBUTIONBOARD] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCELECTRICFLOWSTORAGEDEVICE] = (d: RawLineData) => { new IFC4_3.IfcElectricFlowStorageDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCELECTRICFLOWSTORAGEDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricFlowStorageDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELECTRICFLOWSTORAGEDEVICE] = (i:IFC4_3.IfcElectricFlowStorageDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICFLOWSTORAGEDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCELECTRICFLOWTREATMENTDEVICE] = (d: RawLineData) => { new IFC4_3.IfcElectricFlowTreatmentDevice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCELECTRICFLOWTREATMENTDEVICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricFlowTreatmentDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELECTRICFLOWTREATMENTDEVICE] = (i:IFC4_3.IfcElectricFlowTreatmentDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICFLOWTREATMENTDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCELECTRICGENERATOR] = (d: RawLineData) => { new IFC4_3.IfcElectricGenerator(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCELECTRICGENERATOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricGenerator(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELECTRICGENERATOR] = (i:IFC4_3.IfcElectricGenerator):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICGENERATOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCELECTRICMOTOR] = (d: RawLineData) => { new IFC4_3.IfcElectricMotor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCELECTRICMOTOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricMotor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELECTRICMOTOR] = (i:IFC4_3.IfcElectricMotor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICMOTOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCELECTRICTIMECONTROL] = (d: RawLineData) => { new IFC4_3.IfcElectricTimeControl(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCELECTRICTIMECONTROL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcElectricTimeControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCELECTRICTIMECONTROL] = (i:IFC4_3.IfcElectricTimeControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCELECTRICTIMECONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFAN] = (d: RawLineData) => { new IFC4_3.IfcFan(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFAN] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFan(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFAN] = (i:IFC4_3.IfcFan):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFAN] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFILTER] = (d: RawLineData) => { new IFC4_3.IfcFilter(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFILTER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFilter(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFILTER] = (i:IFC4_3.IfcFilter):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFILTER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFIRESUPPRESSIONTERMINAL] = (d: RawLineData) => { new IFC4_3.IfcFireSuppressionTerminal(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFIRESUPPRESSIONTERMINAL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFireSuppressionTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFIRESUPPRESSIONTERMINAL] = (i:IFC4_3.IfcFireSuppressionTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFIRESUPPRESSIONTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4_3'][IFCFLOWINSTRUMENT] = (d: RawLineData) => { new IFC4_3.IfcFlowInstrument(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCFLOWINSTRUMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcFlowInstrument(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCFLOWINSTRUMENT] = (i:IFC4_3.IfcFlowInstrument):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCFLOWINSTRUMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCGEOMODEL] = (d: RawLineData) => { new IFC4_3.IfcGeomodel(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCGEOMODEL] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeomodel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCGEOMODEL] = (i:IFC4_3.IfcGeomodel):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC4.3'][IFCGEOMODEL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCGEOSLICE] = (d: RawLineData) => { new IFC4_3.IfcGeoslice(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4_3'][IFCGEOSLICE] = (expressID:number, args: any[]) => { return new IFC4_3.IfcGeoslice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4_3'][IFCGEOSLICE] = (i:IFC4_3.IfcGeoslice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC4.3'][IFCGEOSLICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],];
FromRawLineData['IFC4_3'][IFCPROTECTIVEDEVICETRIPPINGUNIT] = (d: RawLineData) => { new IFC4_3.IfcProtectiveDeviceTrippingUnit(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCPROTECTIVEDEVICETRIPPINGUNIT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcProtectiveDeviceTrippingUnit(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCPROTECTIVEDEVICETRIPPINGUNIT] = (i:IFC4_3.IfcProtectiveDeviceTrippingUnit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCPROTECTIVEDEVICETRIPPINGUNIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCSENSOR] = (d: RawLineData) => { new IFC4_3.IfcSensor(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCSENSOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcSensor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCSENSOR] = (i:IFC4_3.IfcSensor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCSENSOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCUNITARYCONTROLELEMENT] = (d: RawLineData) => { new IFC4_3.IfcUnitaryControlElement(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCUNITARYCONTROLELEMENT] = (expressID:number, args: any[]) => { return new IFC4_3.IfcUnitaryControlElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCUNITARYCONTROLELEMENT] = (i:IFC4_3.IfcUnitaryControlElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCUNITARYCONTROLELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCACTUATOR] = (d: RawLineData) => { new IFC4_3.IfcActuator(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCACTUATOR] = (expressID:number, args: any[]) => { return new IFC4_3.IfcActuator(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCACTUATOR] = (i:IFC4_3.IfcActuator):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCACTUATOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCALARM] = (d: RawLineData) => { new IFC4_3.IfcAlarm(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCALARM] = (expressID:number, args: any[]) => { return new IFC4_3.IfcAlarm(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCALARM] = (i:IFC4_3.IfcAlarm):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCALARM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4_3'][IFCCONTROLLER] = (d: RawLineData) => { new IFC4_3.IfcController(d.ID, new IFC4_3.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4_3.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4_3.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4_3.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4_3.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4_3.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4_3.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4_3.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4_3'][IFCCONTROLLER] = (expressID:number, args: any[]) => { return new IFC4_3.IfcController(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4_3'][IFCCONTROLLER] = (i:IFC4_3.IfcController):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4.3'][IFCCONTROLLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['PositionedRelativeTo',IFCRELPOSITIONS,5,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasSurfaceFeatures',IFCRELADHERESTOELEMENT,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
import * as IFC4 from './ifc-schema_IFC4';
FromRawLineData['IFC4'] = {};
Constructors['IFC4'] = {};
InversePropertyDef['IFC4'] = {};
InheritanceDef['IFC4'] = {};
ToRawLineData['IFC4'] = {};
TypeInitialisers['IFC4'] = {};
TypeInitialisers['IFC4'][3699917729] = (v: any) => { return new IFC4.IfcAbsorbedDoseMeasure(v); }
TypeInitialisers['IFC4'][4182062534] = (v: any) => { return new IFC4.IfcAccelerationMeasure(v); }
TypeInitialisers['IFC4'][632304761] = (v: any) => { return new IFC4.IfcAngularVelocityMeasure(v); }
TypeInitialisers['IFC4'][1500781891] = (v: any) => { return new IFC4.IfcAreaDensityMeasure(v); }
TypeInitialisers['IFC4'][3812528620] = (v: any) => { return new IFC4.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC4'][94842927] = (v: any) => { return new IFC4.IfcCurvatureMeasure(v); }
TypeInitialisers['IFC4'][524656162] = (v: any) => { return new IFC4.IfcDoseEquivalentMeasure(v); }
TypeInitialisers['IFC4'][69416015] = (v: any) => { return new IFC4.IfcDynamicViscosityMeasure(v); }
TypeInitialisers['IFC4'][1827137117] = (v: any) => { return new IFC4.IfcElectricCapacitanceMeasure(v); }
TypeInitialisers['IFC4'][3818826038] = (v: any) => { return new IFC4.IfcElectricChargeMeasure(v); }
TypeInitialisers['IFC4'][2093906313] = (v: any) => { return new IFC4.IfcElectricConductanceMeasure(v); }
TypeInitialisers['IFC4'][2951915441] = (v: any) => { return new IFC4.IfcElectricResistanceMeasure(v); }
TypeInitialisers['IFC4'][2506197118] = (v: any) => { return new IFC4.IfcElectricVoltageMeasure(v); }
TypeInitialisers['IFC4'][2078135608] = (v: any) => { return new IFC4.IfcEnergyMeasure(v); }
TypeInitialisers['IFC4'][1361398929] = (v: any) => { return new IFC4.IfcForceMeasure(v); }
TypeInitialisers['IFC4'][3044325142] = (v: any) => { return new IFC4.IfcFrequencyMeasure(v); }
TypeInitialisers['IFC4'][3113092358] = (v: any) => { return new IFC4.IfcHeatFluxDensityMeasure(v); }
TypeInitialisers['IFC4'][1158859006] = (v: any) => { return new IFC4.IfcHeatingValueMeasure(v); }
TypeInitialisers['IFC4'][3358199106] = (v: any) => { return new IFC4.IfcIlluminanceMeasure(v); }
TypeInitialisers['IFC4'][2679005408] = (v: any) => { return new IFC4.IfcInductanceMeasure(v); }
TypeInitialisers['IFC4'][3809634241] = (v: any) => { return new IFC4.IfcIntegerCountRateMeasure(v); }
TypeInitialisers['IFC4'][3686016028] = (v: any) => { return new IFC4.IfcIonConcentrationMeasure(v); }
TypeInitialisers['IFC4'][3192672207] = (v: any) => { return new IFC4.IfcIsothermalMoistureCapacityMeasure(v); }
TypeInitialisers['IFC4'][2054016361] = (v: any) => { return new IFC4.IfcKinematicViscosityMeasure(v); }
TypeInitialisers['IFC4'][191860431] = (v: any) => { return new IFC4.IfcLinearForceMeasure(v); }
TypeInitialisers['IFC4'][2128979029] = (v: any) => { return new IFC4.IfcLinearMomentMeasure(v); }
TypeInitialisers['IFC4'][1307019551] = (v: any) => { return new IFC4.IfcLinearStiffnessMeasure(v); }
TypeInitialisers['IFC4'][3086160713] = (v: any) => { return new IFC4.IfcLinearVelocityMeasure(v); }
TypeInitialisers['IFC4'][2095003142] = (v: any) => { return new IFC4.IfcLuminousFluxMeasure(v); }
TypeInitialisers['IFC4'][2755797622] = (v: any) => { return new IFC4.IfcLuminousIntensityDistributionMeasure(v); }
TypeInitialisers['IFC4'][286949696] = (v: any) => { return new IFC4.IfcMagneticFluxDensityMeasure(v); }
TypeInitialisers['IFC4'][2486716878] = (v: any) => { return new IFC4.IfcMagneticFluxMeasure(v); }
TypeInitialisers['IFC4'][1477762836] = (v: any) => { return new IFC4.IfcMassDensityMeasure(v); }
TypeInitialisers['IFC4'][4017473158] = (v: any) => { return new IFC4.IfcMassFlowRateMeasure(v); }
TypeInitialisers['IFC4'][3531705166] = (v: any) => { return new IFC4.IfcMassPerLengthMeasure(v); }
TypeInitialisers['IFC4'][3341486342] = (v: any) => { return new IFC4.IfcModulusOfElasticityMeasure(v); }
TypeInitialisers['IFC4'][2173214787] = (v: any) => { return new IFC4.IfcModulusOfLinearSubgradeReactionMeasure(v); }
TypeInitialisers['IFC4'][1052454078] = (v: any) => { return new IFC4.IfcModulusOfRotationalSubgradeReactionMeasure(v); }
TypeInitialisers['IFC4'][1753493141] = (v: any) => { return new IFC4.IfcModulusOfSubgradeReactionMeasure(v); }
TypeInitialisers['IFC4'][3177669450] = (v: any) => { return new IFC4.IfcMoistureDiffusivityMeasure(v); }
TypeInitialisers['IFC4'][1648970520] = (v: any) => { return new IFC4.IfcMolecularWeightMeasure(v); }
TypeInitialisers['IFC4'][3114022597] = (v: any) => { return new IFC4.IfcMomentOfInertiaMeasure(v); }
TypeInitialisers['IFC4'][2615040989] = (v: any) => { return new IFC4.IfcMonetaryMeasure(v); }
TypeInitialisers['IFC4'][929793134] = (v: any) => { return new IFC4.IfcPHMeasure(v); }
TypeInitialisers['IFC4'][2642773653] = (v: any) => { return new IFC4.IfcPlanarForceMeasure(v); }
TypeInitialisers['IFC4'][1364037233] = (v: any) => { return new IFC4.IfcPowerMeasure(v); }
TypeInitialisers['IFC4'][3665567075] = (v: any) => { return new IFC4.IfcPressureMeasure(v); }
TypeInitialisers['IFC4'][3972513137] = (v: any) => { return new IFC4.IfcRadioActivityMeasure(v); }
TypeInitialisers['IFC4'][2133746277] = (v: any) => { return new IFC4.IfcRotationalFrequencyMeasure(v); }
TypeInitialisers['IFC4'][1755127002] = (v: any) => { return new IFC4.IfcRotationalMassMeasure(v); }
TypeInitialisers['IFC4'][3211557302] = (v: any) => { return new IFC4.IfcRotationalStiffnessMeasure(v); }
TypeInitialisers['IFC4'][3467162246] = (v: any) => { return new IFC4.IfcSectionModulusMeasure(v); }
TypeInitialisers['IFC4'][2190458107] = (v: any) => { return new IFC4.IfcSectionalAreaIntegralMeasure(v); }
TypeInitialisers['IFC4'][408310005] = (v: any) => { return new IFC4.IfcShearModulusMeasure(v); }
TypeInitialisers['IFC4'][4157543285] = (v: any) => { return new IFC4.IfcSoundPowerLevelMeasure(v); }
TypeInitialisers['IFC4'][846465480] = (v: any) => { return new IFC4.IfcSoundPowerMeasure(v); }
TypeInitialisers['IFC4'][3457685358] = (v: any) => { return new IFC4.IfcSoundPressureLevelMeasure(v); }
TypeInitialisers['IFC4'][993287707] = (v: any) => { return new IFC4.IfcSoundPressureMeasure(v); }
TypeInitialisers['IFC4'][3477203348] = (v: any) => { return new IFC4.IfcSpecificHeatCapacityMeasure(v); }
TypeInitialisers['IFC4'][58845555] = (v: any) => { return new IFC4.IfcTemperatureGradientMeasure(v); }
TypeInitialisers['IFC4'][1209108979] = (v: any) => { return new IFC4.IfcTemperatureRateOfChangeMeasure(v); }
TypeInitialisers['IFC4'][232962298] = (v: any) => { return new IFC4.IfcThermalAdmittanceMeasure(v); }
TypeInitialisers['IFC4'][2645777649] = (v: any) => { return new IFC4.IfcThermalConductivityMeasure(v); }
TypeInitialisers['IFC4'][2281867870] = (v: any) => { return new IFC4.IfcThermalExpansionCoefficientMeasure(v); }
TypeInitialisers['IFC4'][857959152] = (v: any) => { return new IFC4.IfcThermalResistanceMeasure(v); }
TypeInitialisers['IFC4'][2016195849] = (v: any) => { return new IFC4.IfcThermalTransmittanceMeasure(v); }
TypeInitialisers['IFC4'][1278329552] = (v: any) => { return new IFC4.IfcTorqueMeasure(v); }
TypeInitialisers['IFC4'][3345633955] = (v: any) => { return new IFC4.IfcVaporPermeabilityMeasure(v); }
TypeInitialisers['IFC4'][2593997549] = (v: any) => { return new IFC4.IfcVolumetricFlowRateMeasure(v); }
TypeInitialisers['IFC4'][51269191] = (v: any) => { return new IFC4.IfcWarpingConstantMeasure(v); }
TypeInitialisers['IFC4'][1718600412] = (v: any) => { return new IFC4.IfcWarpingMomentMeasure(v); }
TypeInitialisers['IFC4'][360377573] = (v: any) => { return new IFC4.IfcAmountOfSubstanceMeasure(v); }
TypeInitialisers['IFC4'][2650437152] = (v: any) => { return new IFC4.IfcAreaMeasure(v); }
TypeInitialisers['IFC4'][2991860651] = (v: any) => { return new IFC4.IfcComplexNumber(v); }
TypeInitialisers['IFC4'][3238673880] = (v: any) => { return new IFC4.IfcContextDependentMeasure(v); }
TypeInitialisers['IFC4'][1778710042] = (v: any) => { return new IFC4.IfcCountMeasure(v); }
TypeInitialisers['IFC4'][1514641115] = (v: any) => { return new IFC4.IfcDescriptiveMeasure(v); }
TypeInitialisers['IFC4'][3790457270] = (v: any) => { return new IFC4.IfcElectricCurrentMeasure(v); }
TypeInitialisers['IFC4'][1243674935] = (v: any) => { return new IFC4.IfcLengthMeasure(v); }
TypeInitialisers['IFC4'][151039812] = (v: any) => { return new IFC4.IfcLuminousIntensityMeasure(v); }
TypeInitialisers['IFC4'][3124614049] = (v: any) => { return new IFC4.IfcMassMeasure(v); }
TypeInitialisers['IFC4'][525895558] = (v: any) => { return new IFC4.IfcNonNegativeLengthMeasure(v); }
TypeInitialisers['IFC4'][2095195183] = (v: any) => { return new IFC4.IfcNormalisedRatioMeasure(v); }
TypeInitialisers['IFC4'][2395907400] = (v: any) => { return new IFC4.IfcNumericMeasure(v); }
TypeInitialisers['IFC4'][2260317790] = (v: any) => { return new IFC4.IfcParameterValue(v); }
TypeInitialisers['IFC4'][4042175685] = (v: any) => { return new IFC4.IfcPlaneAngleMeasure(v); }
TypeInitialisers['IFC4'][2815919920] = (v: any) => { return new IFC4.IfcPositiveLengthMeasure(v); }
TypeInitialisers['IFC4'][3054510233] = (v: any) => { return new IFC4.IfcPositivePlaneAngleMeasure(v); }
TypeInitialisers['IFC4'][1245737093] = (v: any) => { return new IFC4.IfcPositiveRatioMeasure(v); }
TypeInitialisers['IFC4'][96294661] = (v: any) => { return new IFC4.IfcRatioMeasure(v); }
TypeInitialisers['IFC4'][3471399674] = (v: any) => { return new IFC4.IfcSolidAngleMeasure(v); }
TypeInitialisers['IFC4'][743184107] = (v: any) => { return new IFC4.IfcThermodynamicTemperatureMeasure(v); }
TypeInitialisers['IFC4'][2726807636] = (v: any) => { return new IFC4.IfcTimeMeasure(v); }
TypeInitialisers['IFC4'][3458127941] = (v: any) => { return new IFC4.IfcVolumeMeasure(v); }
TypeInitialisers['IFC4'][2314439260] = (v: any) => { return new IFC4.IfcBinary(v); }
TypeInitialisers['IFC4'][2735952531] = (v: any) => { return new IFC4.IfcBoolean(v); }
TypeInitialisers['IFC4'][937566702] = (v: any) => { return new IFC4.IfcDate(v); }
TypeInitialisers['IFC4'][2195413836] = (v: any) => { return new IFC4.IfcDateTime(v); }
TypeInitialisers['IFC4'][2541165894] = (v: any) => { return new IFC4.IfcDuration(v); }
TypeInitialisers['IFC4'][983778844] = (v: any) => { return new IFC4.IfcIdentifier(v); }
TypeInitialisers['IFC4'][1939436016] = (v: any) => { return new IFC4.IfcInteger(v); }
TypeInitialisers['IFC4'][3258342251] = (v: any) => { return new IFC4.IfcLabel(v); }
TypeInitialisers['IFC4'][503418787] = (v: any) => { return new IFC4.IfcLogical(v); }
TypeInitialisers['IFC4'][1790229001] = (v: any) => { return new IFC4.IfcPositiveInteger(v); }
TypeInitialisers['IFC4'][200335297] = (v: any) => { return new IFC4.IfcReal(v); }
TypeInitialisers['IFC4'][2801250643] = (v: any) => { return new IFC4.IfcText(v); }
TypeInitialisers['IFC4'][4075327185] = (v: any) => { return new IFC4.IfcTime(v); }
TypeInitialisers['IFC4'][2591213694] = (v: any) => { return new IFC4.IfcTimeStamp(v); }
TypeInitialisers['IFC4'][3812528620] = (v: any) => { return new IFC4.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC4'][2991860651] = (v: any) => { return new IFC4.IfcComplexNumber(v); }
TypeInitialisers['IFC4'][3812528620] = (v: any) => { return new IFC4.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC4'][2991860651] = (v: any) => { return new IFC4.IfcComplexNumber(v); }
TypeInitialisers['IFC4'][2798247006] = (v: any) => { return new IFC4.IfcPropertySetDefinitionSet(v); }
TypeInitialisers['IFC4'][3683503648] = (v: any) => { return new IFC4.IfcArcIndex(v); }
TypeInitialisers['IFC4'][1774176899] = (v: any) => { return new IFC4.IfcLineIndex(v); }
TypeInitialisers['IFC4'][2757832317] = (v: any) => { return new IFC4.IfcSpecularExponent(v); }
TypeInitialisers['IFC4'][361837227] = (v: any) => { return new IFC4.IfcSpecularRoughness(v); }
TypeInitialisers['IFC4'][3812528620] = (v: any) => { return new IFC4.IfcCompoundPlaneAngleMeasure(v); }
TypeInitialisers['IFC4'][2991860651] = (v: any) => { return new IFC4.IfcComplexNumber(v); }
FromRawLineData['IFC4'][IFCACTORROLE] = (d: RawLineData) => { new IFC4.IfcActorRole(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcText(d.arguments[2].value)); }
Constructors['IFC4'][IFCACTORROLE] = (expressID:number, args: any[]) => { return new IFC4.IfcActorRole(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCACTORROLE] = (i:IFC4.IfcActorRole):unknown[] => { return [i.Role, i.UserDefinedRole, i.Description]; }
InversePropertyDef['IFC4'][IFCACTORROLE] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCADDRESS] = (d: RawLineData) => { new IFC4.IfcAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCADDRESS] = (expressID:number, args: any[]) => { return new IFC4.IfcAddress(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCADDRESS] = (i:IFC4.IfcAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose]; }
InheritanceDef['IFC4'][IFCADDRESS] = [IFCTELECOMADDRESS,IFCPOSTALADDRESS];
InversePropertyDef['IFC4'][IFCADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC4'][IFCAPPLICATION] = (d: RawLineData) => { new IFC4.IfcApplication(d.ID, new Reference<IFC4.IfcOrganization>(d.arguments[0].value), new IFC4.IfcLabel(d.arguments[1].value), new IFC4.IfcLabel(d.arguments[2].value), new IFC4.IfcIdentifier(d.arguments[3].value)); }
Constructors['IFC4'][IFCAPPLICATION] = (expressID:number, args: any[]) => { return new IFC4.IfcApplication(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCAPPLICATION] = (i:IFC4.IfcApplication):unknown[] => { return [i.ApplicationDeveloper, i.Version, i.ApplicationFullName, i.ApplicationIdentifier]; }
FromRawLineData['IFC4'][IFCAPPLIEDVALUE] = (d: RawLineData) => { new IFC4.IfcAppliedValue(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4.IfcMeasureWithUnit>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcDate(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDate(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value))); }
Constructors['IFC4'][IFCAPPLIEDVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcAppliedValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCAPPLIEDVALUE] = (i:IFC4.IfcAppliedValue):unknown[] => { return [i.Name, i.Description, i.AppliedValue, i.UnitBasis, i.ApplicableDate, i.FixedUntilDate, i.Category, i.Condition, i.ArithmeticOperator, i.Components]; }
InheritanceDef['IFC4'][IFCAPPLIEDVALUE] = [IFCCOSTVALUE];
InversePropertyDef['IFC4'][IFCAPPLIEDVALUE] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCAPPROVAL] = (d: RawLineData) => { new IFC4.IfcApproval(d.ID, !d.arguments[0] ? null :new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcText(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcDateTime(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), !d.arguments[8] ? null :new Reference(d.arguments[8].value)); }
Constructors['IFC4'][IFCAPPROVAL] = (expressID:number, args: any[]) => { return new IFC4.IfcApproval(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCAPPROVAL] = (i:IFC4.IfcApproval):unknown[] => { return [i.Identifier, i.Name, i.Description, i.TimeOfApproval, i.Status, i.Level, i.Qualifier, i.RequestingApproval, i.GivingApproval]; }
InversePropertyDef['IFC4'][IFCAPPROVAL] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['ApprovedObjects',IFCRELASSOCIATESAPPROVAL,5,true],['ApprovedResources',IFCRESOURCEAPPROVALRELATIONSHIP,3,true],['IsRelatedWith',IFCAPPROVALRELATIONSHIP,3,true],['Relates',IFCAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCBOUNDARYCONDITION] = (d: RawLineData) => { new IFC4.IfcBoundaryCondition(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCBOUNDARYCONDITION] = (expressID:number, args: any[]) => { return new IFC4.IfcBoundaryCondition(expressID, args[0]); }
ToRawLineData['IFC4'][IFCBOUNDARYCONDITION] = (i:IFC4.IfcBoundaryCondition):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCBOUNDARYCONDITION] = [IFCBOUNDARYNODECONDITIONWARPING,IFCBOUNDARYNODECONDITION,IFCBOUNDARYFACECONDITION,IFCBOUNDARYEDGECONDITION];
FromRawLineData['IFC4'][IFCBOUNDARYEDGECONDITION] = (d: RawLineData) => { new IFC4.IfcBoundaryEdgeCondition(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :TypeInitialiser('IFC4',d.arguments[1]), !d.arguments[2] ? null :TypeInitialiser('IFC4',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4',d.arguments[4]), !d.arguments[5] ? null :TypeInitialiser('IFC4',d.arguments[5]), !d.arguments[6] ? null :TypeInitialiser('IFC4',d.arguments[6])); }
Constructors['IFC4'][IFCBOUNDARYEDGECONDITION] = (expressID:number, args: any[]) => { return new IFC4.IfcBoundaryEdgeCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCBOUNDARYEDGECONDITION] = (i:IFC4.IfcBoundaryEdgeCondition):unknown[] => { return [i.Name, !i.TranslationalStiffnessByLengthX ? null :Labelise(i.TranslationalStiffnessByLengthX), !i.TranslationalStiffnessByLengthY ? null :Labelise(i.TranslationalStiffnessByLengthY), !i.TranslationalStiffnessByLengthZ ? null :Labelise(i.TranslationalStiffnessByLengthZ), !i.RotationalStiffnessByLengthX ? null :Labelise(i.RotationalStiffnessByLengthX), !i.RotationalStiffnessByLengthY ? null :Labelise(i.RotationalStiffnessByLengthY), !i.RotationalStiffnessByLengthZ ? null :Labelise(i.RotationalStiffnessByLengthZ)]; }
FromRawLineData['IFC4'][IFCBOUNDARYFACECONDITION] = (d: RawLineData) => { new IFC4.IfcBoundaryFaceCondition(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :TypeInitialiser('IFC4',d.arguments[1]), !d.arguments[2] ? null :TypeInitialiser('IFC4',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4',d.arguments[3])); }
Constructors['IFC4'][IFCBOUNDARYFACECONDITION] = (expressID:number, args: any[]) => { return new IFC4.IfcBoundaryFaceCondition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCBOUNDARYFACECONDITION] = (i:IFC4.IfcBoundaryFaceCondition):unknown[] => { return [i.Name, !i.TranslationalStiffnessByAreaX ? null :Labelise(i.TranslationalStiffnessByAreaX), !i.TranslationalStiffnessByAreaY ? null :Labelise(i.TranslationalStiffnessByAreaY), !i.TranslationalStiffnessByAreaZ ? null :Labelise(i.TranslationalStiffnessByAreaZ)]; }
FromRawLineData['IFC4'][IFCBOUNDARYNODECONDITION] = (d: RawLineData) => { new IFC4.IfcBoundaryNodeCondition(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :TypeInitialiser('IFC4',d.arguments[1]), !d.arguments[2] ? null :TypeInitialiser('IFC4',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4',d.arguments[4]), !d.arguments[5] ? null :TypeInitialiser('IFC4',d.arguments[5]), !d.arguments[6] ? null :TypeInitialiser('IFC4',d.arguments[6])); }
Constructors['IFC4'][IFCBOUNDARYNODECONDITION] = (expressID:number, args: any[]) => { return new IFC4.IfcBoundaryNodeCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCBOUNDARYNODECONDITION] = (i:IFC4.IfcBoundaryNodeCondition):unknown[] => { return [i.Name, !i.TranslationalStiffnessX ? null :Labelise(i.TranslationalStiffnessX), !i.TranslationalStiffnessY ? null :Labelise(i.TranslationalStiffnessY), !i.TranslationalStiffnessZ ? null :Labelise(i.TranslationalStiffnessZ), !i.RotationalStiffnessX ? null :Labelise(i.RotationalStiffnessX), !i.RotationalStiffnessY ? null :Labelise(i.RotationalStiffnessY), !i.RotationalStiffnessZ ? null :Labelise(i.RotationalStiffnessZ)]; }
InheritanceDef['IFC4'][IFCBOUNDARYNODECONDITION] = [IFCBOUNDARYNODECONDITIONWARPING];
FromRawLineData['IFC4'][IFCBOUNDARYNODECONDITIONWARPING] = (d: RawLineData) => { new IFC4.IfcBoundaryNodeConditionWarping(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :TypeInitialiser('IFC4',d.arguments[1]), !d.arguments[2] ? null :TypeInitialiser('IFC4',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4',d.arguments[4]), !d.arguments[5] ? null :TypeInitialiser('IFC4',d.arguments[5]), !d.arguments[6] ? null :TypeInitialiser('IFC4',d.arguments[6]), !d.arguments[7] ? null :TypeInitialiser('IFC4',d.arguments[7])); }
Constructors['IFC4'][IFCBOUNDARYNODECONDITIONWARPING] = (expressID:number, args: any[]) => { return new IFC4.IfcBoundaryNodeConditionWarping(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCBOUNDARYNODECONDITIONWARPING] = (i:IFC4.IfcBoundaryNodeConditionWarping):unknown[] => { return [i.Name, !i.TranslationalStiffnessX ? null :Labelise(i.TranslationalStiffnessX), !i.TranslationalStiffnessY ? null :Labelise(i.TranslationalStiffnessY), !i.TranslationalStiffnessZ ? null :Labelise(i.TranslationalStiffnessZ), !i.RotationalStiffnessX ? null :Labelise(i.RotationalStiffnessX), !i.RotationalStiffnessY ? null :Labelise(i.RotationalStiffnessY), !i.RotationalStiffnessZ ? null :Labelise(i.RotationalStiffnessZ), !i.WarpingStiffness ? null :Labelise(i.WarpingStiffness)]; }
FromRawLineData['IFC4'][IFCCONNECTIONGEOMETRY] = (d: RawLineData) => { new IFC4.IfcConnectionGeometry(d.ID, ); }
Constructors['IFC4'][IFCCONNECTIONGEOMETRY] = (expressID:number, _:any) => { return new IFC4.IfcConnectionGeometry(expressID, ); }
ToRawLineData['IFC4'][IFCCONNECTIONGEOMETRY] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCCONNECTIONGEOMETRY] = [IFCCONNECTIONCURVEGEOMETRY,IFCCONNECTIONVOLUMEGEOMETRY,IFCCONNECTIONSURFACEGEOMETRY,IFCCONNECTIONPOINTECCENTRICITY,IFCCONNECTIONPOINTGEOMETRY];
FromRawLineData['IFC4'][IFCCONNECTIONPOINTGEOMETRY] = (d: RawLineData) => { new IFC4.IfcConnectionPointGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4'][IFCCONNECTIONPOINTGEOMETRY] = (expressID:number, args: any[]) => { return new IFC4.IfcConnectionPointGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCONNECTIONPOINTGEOMETRY] = (i:IFC4.IfcConnectionPointGeometry):unknown[] => { return [i.PointOnRelatingElement, i.PointOnRelatedElement]; }
InheritanceDef['IFC4'][IFCCONNECTIONPOINTGEOMETRY] = [IFCCONNECTIONPOINTECCENTRICITY];
FromRawLineData['IFC4'][IFCCONNECTIONSURFACEGEOMETRY] = (d: RawLineData) => { new IFC4.IfcConnectionSurfaceGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4'][IFCCONNECTIONSURFACEGEOMETRY] = (expressID:number, args: any[]) => { return new IFC4.IfcConnectionSurfaceGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCONNECTIONSURFACEGEOMETRY] = (i:IFC4.IfcConnectionSurfaceGeometry):unknown[] => { return [i.SurfaceOnRelatingElement, i.SurfaceOnRelatedElement]; }
FromRawLineData['IFC4'][IFCCONNECTIONVOLUMEGEOMETRY] = (d: RawLineData) => { new IFC4.IfcConnectionVolumeGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4'][IFCCONNECTIONVOLUMEGEOMETRY] = (expressID:number, args: any[]) => { return new IFC4.IfcConnectionVolumeGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCONNECTIONVOLUMEGEOMETRY] = (i:IFC4.IfcConnectionVolumeGeometry):unknown[] => { return [i.VolumeOnRelatingElement, i.VolumeOnRelatedElement]; }
FromRawLineData['IFC4'][IFCCONSTRAINT] = (d: RawLineData) => { new IFC4.IfcConstraint(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC4.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value)); }
Constructors['IFC4'][IFCCONSTRAINT] = (expressID:number, args: any[]) => { return new IFC4.IfcConstraint(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCCONSTRAINT] = (i:IFC4.IfcConstraint):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade]; }
InheritanceDef['IFC4'][IFCCONSTRAINT] = [IFCOBJECTIVE,IFCMETRIC];
InversePropertyDef['IFC4'][IFCCONSTRAINT] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PropertiesForConstraint',IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCCOORDINATEOPERATION] = (d: RawLineData) => { new IFC4.IfcCoordinateOperation(d.ID, new Reference(d.arguments[0].value), new Reference<IFC4.IfcCoordinateReferenceSystem>(d.arguments[1].value)); }
Constructors['IFC4'][IFCCOORDINATEOPERATION] = (expressID:number, args: any[]) => { return new IFC4.IfcCoordinateOperation(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCOORDINATEOPERATION] = (i:IFC4.IfcCoordinateOperation):unknown[] => { return [i.SourceCRS, i.TargetCRS]; }
InheritanceDef['IFC4'][IFCCOORDINATEOPERATION] = [IFCMAPCONVERSION];
FromRawLineData['IFC4'][IFCCOORDINATEREFERENCESYSTEM] = (d: RawLineData) => { new IFC4.IfcCoordinateReferenceSystem(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcIdentifier(d.arguments[3].value)); }
Constructors['IFC4'][IFCCOORDINATEREFERENCESYSTEM] = (expressID:number, args: any[]) => { return new IFC4.IfcCoordinateReferenceSystem(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCOORDINATEREFERENCESYSTEM] = (i:IFC4.IfcCoordinateReferenceSystem):unknown[] => { return [i.Name, i.Description, i.GeodeticDatum, i.VerticalDatum]; }
InheritanceDef['IFC4'][IFCCOORDINATEREFERENCESYSTEM] = [IFCPROJECTEDCRS];
InversePropertyDef['IFC4'][IFCCOORDINATEREFERENCESYSTEM] = [['HasCoordinateOperation',IFCCOORDINATEOPERATION,0,true],];
FromRawLineData['IFC4'][IFCCOSTVALUE] = (d: RawLineData) => { new IFC4.IfcCostValue(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4.IfcMeasureWithUnit>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcDate(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDate(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value))); }
Constructors['IFC4'][IFCCOSTVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcCostValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOSTVALUE] = (i:IFC4.IfcCostValue):unknown[] => { return [i.Name, i.Description, i.AppliedValue, i.UnitBasis, i.ApplicableDate, i.FixedUntilDate, i.Category, i.Condition, i.ArithmeticOperator, i.Components]; }
InversePropertyDef['IFC4'][IFCCOSTVALUE] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCDERIVEDUNIT] = (d: RawLineData) => { new IFC4.IfcDerivedUnit(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcDerivedUnitElement>(p.value)), d.arguments[1], !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCDERIVEDUNIT] = (expressID:number, args: any[]) => { return new IFC4.IfcDerivedUnit(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCDERIVEDUNIT] = (i:IFC4.IfcDerivedUnit):unknown[] => { return [i.Elements, i.UnitType, i.UserDefinedType]; }
FromRawLineData['IFC4'][IFCDERIVEDUNITELEMENT] = (d: RawLineData) => { new IFC4.IfcDerivedUnitElement(d.ID, new Reference<IFC4.IfcNamedUnit>(d.arguments[0].value), d.arguments[1].value); }
Constructors['IFC4'][IFCDERIVEDUNITELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcDerivedUnitElement(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCDERIVEDUNITELEMENT] = (i:IFC4.IfcDerivedUnitElement):unknown[] => { return [i.Unit, i.Exponent]; }
FromRawLineData['IFC4'][IFCDIMENSIONALEXPONENTS] = (d: RawLineData) => { new IFC4.IfcDimensionalExponents(d.ID, d.arguments[0].value, d.arguments[1].value, d.arguments[2].value, d.arguments[3].value, d.arguments[4].value, d.arguments[5].value, d.arguments[6].value); }
Constructors['IFC4'][IFCDIMENSIONALEXPONENTS] = (expressID:number, args: any[]) => { return new IFC4.IfcDimensionalExponents(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCDIMENSIONALEXPONENTS] = (i:IFC4.IfcDimensionalExponents):unknown[] => { return [i.LengthExponent, i.MassExponent, i.TimeExponent, i.ElectricCurrentExponent, i.ThermodynamicTemperatureExponent, i.AmountOfSubstanceExponent, i.LuminousIntensityExponent]; }
FromRawLineData['IFC4'][IFCEXTERNALINFORMATION] = (d: RawLineData) => { new IFC4.IfcExternalInformation(d.ID, ); }
Constructors['IFC4'][IFCEXTERNALINFORMATION] = (expressID:number, _:any) => { return new IFC4.IfcExternalInformation(expressID, ); }
ToRawLineData['IFC4'][IFCEXTERNALINFORMATION] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCEXTERNALINFORMATION] = [IFCDOCUMENTINFORMATION,IFCCLASSIFICATION,IFCLIBRARYINFORMATION];
FromRawLineData['IFC4'][IFCEXTERNALREFERENCE] = (d: RawLineData) => { new IFC4.IfcExternalReference(d.ID, !d.arguments[0] ? null :new IFC4.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCEXTERNALREFERENCE] = (expressID:number, args: any[]) => { return new IFC4.IfcExternalReference(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCEXTERNALREFERENCE] = (i:IFC4.IfcExternalReference):unknown[] => { return [i.Location, i.Identification, i.Name]; }
InheritanceDef['IFC4'][IFCEXTERNALREFERENCE] = [IFCDOCUMENTREFERENCE,IFCCLASSIFICATIONREFERENCE,IFCLIBRARYREFERENCE,IFCEXTERNALLYDEFINEDTEXTFONT,IFCEXTERNALLYDEFINEDSURFACESTYLE,IFCEXTERNALLYDEFINEDHATCHSTYLE];
InversePropertyDef['IFC4'][IFCEXTERNALREFERENCE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (d: RawLineData) => { new IFC4.IfcExternallyDefinedHatchStyle(d.ID, !d.arguments[0] ? null :new IFC4.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcExternallyDefinedHatchStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = (i:IFC4.IfcExternallyDefinedHatchStyle):unknown[] => { return [i.Location, i.Identification, i.Name]; }
InversePropertyDef['IFC4'][IFCEXTERNALLYDEFINEDHATCHSTYLE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (d: RawLineData) => { new IFC4.IfcExternallyDefinedSurfaceStyle(d.ID, !d.arguments[0] ? null :new IFC4.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcExternallyDefinedSurfaceStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = (i:IFC4.IfcExternallyDefinedSurfaceStyle):unknown[] => { return [i.Location, i.Identification, i.Name]; }
InversePropertyDef['IFC4'][IFCEXTERNALLYDEFINEDSURFACESTYLE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCEXTERNALLYDEFINEDTEXTFONT] = (d: RawLineData) => { new IFC4.IfcExternallyDefinedTextFont(d.ID, !d.arguments[0] ? null :new IFC4.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCEXTERNALLYDEFINEDTEXTFONT] = (expressID:number, args: any[]) => { return new IFC4.IfcExternallyDefinedTextFont(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCEXTERNALLYDEFINEDTEXTFONT] = (i:IFC4.IfcExternallyDefinedTextFont):unknown[] => { return [i.Location, i.Identification, i.Name]; }
InversePropertyDef['IFC4'][IFCEXTERNALLYDEFINEDTEXTFONT] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCGRIDAXIS] = (d: RawLineData) => { new IFC4.IfcGridAxis(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new Reference<IFC4.IfcCurve>(d.arguments[1].value), new IFC4.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4'][IFCGRIDAXIS] = (expressID:number, args: any[]) => { return new IFC4.IfcGridAxis(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCGRIDAXIS] = (i:IFC4.IfcGridAxis):unknown[] => { return [i.AxisTag, i.AxisCurve, i.SameSense]; }
InversePropertyDef['IFC4'][IFCGRIDAXIS] = [['PartOfW',IFCGRID,9,true],['PartOfV',IFCGRID,8,true],['PartOfU',IFCGRID,7,true],['HasIntersections',IFCVIRTUALGRIDINTERSECTION,0,true],];
FromRawLineData['IFC4'][IFCIRREGULARTIMESERIESVALUE] = (d: RawLineData) => { new IFC4.IfcIrregularTimeSeriesValue(d.ID, new IFC4.IfcDateTime(d.arguments[0].value), d.arguments[1].map((p:any) => TypeInitialiser('IFC4',p))); }
Constructors['IFC4'][IFCIRREGULARTIMESERIESVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcIrregularTimeSeriesValue(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCIRREGULARTIMESERIESVALUE] = (i:IFC4.IfcIrregularTimeSeriesValue):unknown[] => { return [i.TimeStamp, i.ListValues.map((p:any) => Labelise(p))]; }
FromRawLineData['IFC4'][IFCLIBRARYINFORMATION] = (d: RawLineData) => { new IFC4.IfcLibraryInformation(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcDateTime(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcURIReference(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcText(d.arguments[5].value)); }
Constructors['IFC4'][IFCLIBRARYINFORMATION] = (expressID:number, args: any[]) => { return new IFC4.IfcLibraryInformation(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCLIBRARYINFORMATION] = (i:IFC4.IfcLibraryInformation):unknown[] => { return [i.Name, i.Version, i.Publisher, i.VersionDate, i.Location, i.Description]; }
InversePropertyDef['IFC4'][IFCLIBRARYINFORMATION] = [['LibraryInfoForObjects',IFCRELASSOCIATESLIBRARY,5,true],['HasLibraryReferences',IFCLIBRARYREFERENCE,5,true],];
FromRawLineData['IFC4'][IFCLIBRARYREFERENCE] = (d: RawLineData) => { new IFC4.IfcLibraryReference(d.ID, !d.arguments[0] ? null :new IFC4.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLanguageId(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcLibraryInformation>(d.arguments[5].value)); }
Constructors['IFC4'][IFCLIBRARYREFERENCE] = (expressID:number, args: any[]) => { return new IFC4.IfcLibraryReference(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCLIBRARYREFERENCE] = (i:IFC4.IfcLibraryReference):unknown[] => { return [i.Location, i.Identification, i.Name, i.Description, i.Language, i.ReferencedLibrary]; }
InversePropertyDef['IFC4'][IFCLIBRARYREFERENCE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],['LibraryRefForObjects',IFCRELASSOCIATESLIBRARY,5,true],];
FromRawLineData['IFC4'][IFCLIGHTDISTRIBUTIONDATA] = (d: RawLineData) => { new IFC4.IfcLightDistributionData(d.ID, new IFC4.IfcPlaneAngleMeasure(d.arguments[0].value), d.arguments[1].map((p:any) => new IFC4.IfcPlaneAngleMeasure(p.value)), d.arguments[2].map((p:any) => new IFC4.IfcLuminousIntensityDistributionMeasure(p.value))); }
Constructors['IFC4'][IFCLIGHTDISTRIBUTIONDATA] = (expressID:number, args: any[]) => { return new IFC4.IfcLightDistributionData(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCLIGHTDISTRIBUTIONDATA] = (i:IFC4.IfcLightDistributionData):unknown[] => { return [i.MainPlaneAngle, i.SecondaryPlaneAngle, i.LuminousIntensity]; }
FromRawLineData['IFC4'][IFCLIGHTINTENSITYDISTRIBUTION] = (d: RawLineData) => { new IFC4.IfcLightIntensityDistribution(d.ID, d.arguments[0], d.arguments[1].map((p:any) => new Reference<IFC4.IfcLightDistributionData>(p.value))); }
Constructors['IFC4'][IFCLIGHTINTENSITYDISTRIBUTION] = (expressID:number, args: any[]) => { return new IFC4.IfcLightIntensityDistribution(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCLIGHTINTENSITYDISTRIBUTION] = (i:IFC4.IfcLightIntensityDistribution):unknown[] => { return [i.LightDistributionCurve, i.DistributionData]; }
FromRawLineData['IFC4'][IFCMAPCONVERSION] = (d: RawLineData) => { new IFC4.IfcMapConversion(d.ID, new Reference(d.arguments[0].value), new Reference<IFC4.IfcCoordinateReferenceSystem>(d.arguments[1].value), new IFC4.IfcLengthMeasure(d.arguments[2].value), new IFC4.IfcLengthMeasure(d.arguments[3].value), new IFC4.IfcLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcReal(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcReal(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcReal(d.arguments[7].value)); }
Constructors['IFC4'][IFCMAPCONVERSION] = (expressID:number, args: any[]) => { return new IFC4.IfcMapConversion(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCMAPCONVERSION] = (i:IFC4.IfcMapConversion):unknown[] => { return [i.SourceCRS, i.TargetCRS, i.Eastings, i.Northings, i.OrthogonalHeight, i.XAxisAbscissa, i.XAxisOrdinate, i.Scale]; }
FromRawLineData['IFC4'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcMaterialClassificationRelationship(d.ID, d.arguments[0].map((p:any) => new Reference(p.value)), new Reference<IFC4.IfcMaterial>(d.arguments[1].value)); }
Constructors['IFC4'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialClassificationRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCMATERIALCLASSIFICATIONRELATIONSHIP] = (i:IFC4.IfcMaterialClassificationRelationship):unknown[] => { return [i.MaterialClassifications, i.ClassifiedMaterial]; }
FromRawLineData['IFC4'][IFCMATERIALDEFINITION] = (d: RawLineData) => { new IFC4.IfcMaterialDefinition(d.ID, ); }
Constructors['IFC4'][IFCMATERIALDEFINITION] = (expressID:number, _:any) => { return new IFC4.IfcMaterialDefinition(expressID, ); }
ToRawLineData['IFC4'][IFCMATERIALDEFINITION] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCMATERIALDEFINITION] = [IFCMATERIALCONSTITUENTSET,IFCMATERIALCONSTITUENT,IFCMATERIAL,IFCMATERIALPROFILESET,IFCMATERIALPROFILEWITHOFFSETS,IFCMATERIALPROFILE,IFCMATERIALLAYERSET,IFCMATERIALLAYERWITHOFFSETS,IFCMATERIALLAYER];
InversePropertyDef['IFC4'][IFCMATERIALDEFINITION] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCMATERIALLAYER] = (d: RawLineData) => { new IFC4.IfcMaterialLayer(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcMaterial>(d.arguments[0].value), new IFC4.IfcNonNegativeLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLogical(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcInteger(d.arguments[6].value)); }
Constructors['IFC4'][IFCMATERIALLAYER] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialLayer(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCMATERIALLAYER] = (i:IFC4.IfcMaterialLayer):unknown[] => { return [i.Material, i.LayerThickness, i.IsVentilated, i.Name, i.Description, i.Category, i.Priority]; }
InheritanceDef['IFC4'][IFCMATERIALLAYER] = [IFCMATERIALLAYERWITHOFFSETS];
InversePropertyDef['IFC4'][IFCMATERIALLAYER] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialLayerSet',IFCMATERIALLAYERSET,0,false],];
FromRawLineData['IFC4'][IFCMATERIALLAYERSET] = (d: RawLineData) => { new IFC4.IfcMaterialLayerSet(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcMaterialLayer>(p.value)), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcText(d.arguments[2].value)); }
Constructors['IFC4'][IFCMATERIALLAYERSET] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialLayerSet(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCMATERIALLAYERSET] = (i:IFC4.IfcMaterialLayerSet):unknown[] => { return [i.MaterialLayers, i.LayerSetName, i.Description]; }
InversePropertyDef['IFC4'][IFCMATERIALLAYERSET] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCMATERIALLAYERWITHOFFSETS] = (d: RawLineData) => { new IFC4.IfcMaterialLayerWithOffsets(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcMaterial>(d.arguments[0].value), new IFC4.IfcNonNegativeLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLogical(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcInteger(d.arguments[6].value), d.arguments[7], new IFC4.IfcLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4'][IFCMATERIALLAYERWITHOFFSETS] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialLayerWithOffsets(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCMATERIALLAYERWITHOFFSETS] = (i:IFC4.IfcMaterialLayerWithOffsets):unknown[] => { return [i.Material, i.LayerThickness, i.IsVentilated, i.Name, i.Description, i.Category, i.Priority, i.OffsetDirection, i.OffsetValues]; }
InversePropertyDef['IFC4'][IFCMATERIALLAYERWITHOFFSETS] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialLayerSet',IFCMATERIALLAYERSET,0,false],];
FromRawLineData['IFC4'][IFCMATERIALLIST] = (d: RawLineData) => { new IFC4.IfcMaterialList(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcMaterial>(p.value))); }
Constructors['IFC4'][IFCMATERIALLIST] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialList(expressID, args[0]); }
ToRawLineData['IFC4'][IFCMATERIALLIST] = (i:IFC4.IfcMaterialList):unknown[] => { return [i.Materials]; }
FromRawLineData['IFC4'][IFCMATERIALPROFILE] = (d: RawLineData) => { new IFC4.IfcMaterialProfile(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcMaterial>(d.arguments[2].value), new Reference<IFC4.IfcProfileDef>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcInteger(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value)); }
Constructors['IFC4'][IFCMATERIALPROFILE] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialProfile(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCMATERIALPROFILE] = (i:IFC4.IfcMaterialProfile):unknown[] => { return [i.Name, i.Description, i.Material, i.Profile, i.Priority, i.Category]; }
InheritanceDef['IFC4'][IFCMATERIALPROFILE] = [IFCMATERIALPROFILEWITHOFFSETS];
InversePropertyDef['IFC4'][IFCMATERIALPROFILE] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialProfileSet',IFCMATERIALPROFILESET,2,false],];
FromRawLineData['IFC4'][IFCMATERIALPROFILESET] = (d: RawLineData) => { new IFC4.IfcMaterialProfileSet(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcMaterialProfile>(p.value)), !d.arguments[3] ? null :new Reference<IFC4.IfcCompositeProfileDef>(d.arguments[3].value)); }
Constructors['IFC4'][IFCMATERIALPROFILESET] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialProfileSet(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCMATERIALPROFILESET] = (i:IFC4.IfcMaterialProfileSet):unknown[] => { return [i.Name, i.Description, i.MaterialProfiles, i.CompositeProfile]; }
InversePropertyDef['IFC4'][IFCMATERIALPROFILESET] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCMATERIALPROFILEWITHOFFSETS] = (d: RawLineData) => { new IFC4.IfcMaterialProfileWithOffsets(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcMaterial>(d.arguments[2].value), new Reference<IFC4.IfcProfileDef>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcInteger(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), new IFC4.IfcLengthMeasure(d.arguments[6].value)); }
Constructors['IFC4'][IFCMATERIALPROFILEWITHOFFSETS] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialProfileWithOffsets(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCMATERIALPROFILEWITHOFFSETS] = (i:IFC4.IfcMaterialProfileWithOffsets):unknown[] => { return [i.Name, i.Description, i.Material, i.Profile, i.Priority, i.Category, i.OffsetValues]; }
InversePropertyDef['IFC4'][IFCMATERIALPROFILEWITHOFFSETS] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialProfileSet',IFCMATERIALPROFILESET,2,false],];
FromRawLineData['IFC4'][IFCMATERIALUSAGEDEFINITION] = (d: RawLineData) => { new IFC4.IfcMaterialUsageDefinition(d.ID, ); }
Constructors['IFC4'][IFCMATERIALUSAGEDEFINITION] = (expressID:number, _:any) => { return new IFC4.IfcMaterialUsageDefinition(expressID, ); }
ToRawLineData['IFC4'][IFCMATERIALUSAGEDEFINITION] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCMATERIALUSAGEDEFINITION] = [IFCMATERIALPROFILESETUSAGETAPERING,IFCMATERIALPROFILESETUSAGE,IFCMATERIALLAYERSETUSAGE];
InversePropertyDef['IFC4'][IFCMATERIALUSAGEDEFINITION] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],];
FromRawLineData['IFC4'][IFCMEASUREWITHUNIT] = (d: RawLineData) => { new IFC4.IfcMeasureWithUnit(d.ID, TypeInitialiser('IFC4',d.arguments[0]), new Reference(d.arguments[1].value)); }
Constructors['IFC4'][IFCMEASUREWITHUNIT] = (expressID:number, args: any[]) => { return new IFC4.IfcMeasureWithUnit(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCMEASUREWITHUNIT] = (i:IFC4.IfcMeasureWithUnit):unknown[] => { return [Labelise(i.ValueComponent), i.UnitComponent]; }
FromRawLineData['IFC4'][IFCMETRIC] = (d: RawLineData) => { new IFC4.IfcMetric(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC4.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new Reference(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC4.IfcReference>(d.arguments[10].value)); }
Constructors['IFC4'][IFCMETRIC] = (expressID:number, args: any[]) => { return new IFC4.IfcMetric(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCMETRIC] = (i:IFC4.IfcMetric):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade, i.Benchmark, i.ValueSource, i.DataValue, i.ReferencePath]; }
InversePropertyDef['IFC4'][IFCMETRIC] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PropertiesForConstraint',IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCMONETARYUNIT] = (d: RawLineData) => { new IFC4.IfcMonetaryUnit(d.ID, new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCMONETARYUNIT] = (expressID:number, args: any[]) => { return new IFC4.IfcMonetaryUnit(expressID, args[0]); }
ToRawLineData['IFC4'][IFCMONETARYUNIT] = (i:IFC4.IfcMonetaryUnit):unknown[] => { return [i.Currency]; }
FromRawLineData['IFC4'][IFCNAMEDUNIT] = (d: RawLineData) => { new IFC4.IfcNamedUnit(d.ID, new Reference<IFC4.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1]); }
Constructors['IFC4'][IFCNAMEDUNIT] = (expressID:number, args: any[]) => { return new IFC4.IfcNamedUnit(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCNAMEDUNIT] = (i:IFC4.IfcNamedUnit):unknown[] => { return [i.Dimensions, i.UnitType]; }
InheritanceDef['IFC4'][IFCNAMEDUNIT] = [IFCCONVERSIONBASEDUNITWITHOFFSET,IFCCONVERSIONBASEDUNIT,IFCCONTEXTDEPENDENTUNIT,IFCSIUNIT];
FromRawLineData['IFC4'][IFCOBJECTPLACEMENT] = (d: RawLineData) => { new IFC4.IfcObjectPlacement(d.ID, ); }
Constructors['IFC4'][IFCOBJECTPLACEMENT] = (expressID:number, _:any) => { return new IFC4.IfcObjectPlacement(expressID, ); }
ToRawLineData['IFC4'][IFCOBJECTPLACEMENT] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCOBJECTPLACEMENT] = [IFCLOCALPLACEMENT,IFCGRIDPLACEMENT];
InversePropertyDef['IFC4'][IFCOBJECTPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCLOCALPLACEMENT,0,true],];
FromRawLineData['IFC4'][IFCOBJECTIVE] = (d: RawLineData) => { new IFC4.IfcObjective(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC4.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcConstraint>(p.value)), d.arguments[8], d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcLabel(d.arguments[10].value)); }
Constructors['IFC4'][IFCOBJECTIVE] = (expressID:number, args: any[]) => { return new IFC4.IfcObjective(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCOBJECTIVE] = (i:IFC4.IfcObjective):unknown[] => { return [i.Name, i.Description, i.ConstraintGrade, i.ConstraintSource, i.CreatingActor, i.CreationTime, i.UserDefinedGrade, i.BenchmarkValues, i.LogicalAggregator, i.ObjectiveQualifier, i.UserDefinedQualifier]; }
InversePropertyDef['IFC4'][IFCOBJECTIVE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PropertiesForConstraint',IFCRESOURCECONSTRAINTRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCORGANIZATION] = (d: RawLineData) => { new IFC4.IfcOrganization(d.ID, !d.arguments[0] ? null :new IFC4.IfcIdentifier(d.arguments[0].value), new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcText(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new Reference<IFC4.IfcActorRole>(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new Reference<IFC4.IfcAddress>(p.value))); }
Constructors['IFC4'][IFCORGANIZATION] = (expressID:number, args: any[]) => { return new IFC4.IfcOrganization(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCORGANIZATION] = (i:IFC4.IfcOrganization):unknown[] => { return [i.Identification, i.Name, i.Description, i.Roles, i.Addresses]; }
InversePropertyDef['IFC4'][IFCORGANIZATION] = [['IsRelatedBy',IFCORGANIZATIONRELATIONSHIP,3,true],['Relates',IFCORGANIZATIONRELATIONSHIP,2,true],['Engages',IFCPERSONANDORGANIZATION,1,true],];
FromRawLineData['IFC4'][IFCOWNERHISTORY] = (d: RawLineData) => { new IFC4.IfcOwnerHistory(d.ID, new Reference<IFC4.IfcPersonAndOrganization>(d.arguments[0].value), new Reference<IFC4.IfcApplication>(d.arguments[1].value), d.arguments[2], d.arguments[3], !d.arguments[4] ? null :new IFC4.IfcTimeStamp(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcPersonAndOrganization>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcApplication>(d.arguments[6].value), new IFC4.IfcTimeStamp(d.arguments[7].value)); }
Constructors['IFC4'][IFCOWNERHISTORY] = (expressID:number, args: any[]) => { return new IFC4.IfcOwnerHistory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCOWNERHISTORY] = (i:IFC4.IfcOwnerHistory):unknown[] => { return [i.OwningUser, i.OwningApplication, i.State, i.ChangeAction, i.LastModifiedDate, i.LastModifyingUser, i.LastModifyingApplication, i.CreationDate]; }
FromRawLineData['IFC4'][IFCPERSON] = (d: RawLineData) => { new IFC4.IfcPerson(d.ID, !d.arguments[0] ? null :new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4.IfcLabel(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4.IfcLabel(p.value)), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new IFC4.IfcLabel(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcActorRole>(p.value)), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcAddress>(p.value))); }
Constructors['IFC4'][IFCPERSON] = (expressID:number, args: any[]) => { return new IFC4.IfcPerson(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCPERSON] = (i:IFC4.IfcPerson):unknown[] => { return [i.Identification, i.FamilyName, i.GivenName, i.MiddleNames, i.PrefixTitles, i.SuffixTitles, i.Roles, i.Addresses]; }
InversePropertyDef['IFC4'][IFCPERSON] = [['EngagedIn',IFCPERSONANDORGANIZATION,0,true],];
FromRawLineData['IFC4'][IFCPERSONANDORGANIZATION] = (d: RawLineData) => { new IFC4.IfcPersonAndOrganization(d.ID, new Reference<IFC4.IfcPerson>(d.arguments[0].value), new Reference<IFC4.IfcOrganization>(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new Reference<IFC4.IfcActorRole>(p.value))); }
Constructors['IFC4'][IFCPERSONANDORGANIZATION] = (expressID:number, args: any[]) => { return new IFC4.IfcPersonAndOrganization(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCPERSONANDORGANIZATION] = (i:IFC4.IfcPersonAndOrganization):unknown[] => { return [i.ThePerson, i.TheOrganization, i.Roles]; }
FromRawLineData['IFC4'][IFCPHYSICALQUANTITY] = (d: RawLineData) => { new IFC4.IfcPhysicalQuantity(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value)); }
Constructors['IFC4'][IFCPHYSICALQUANTITY] = (expressID:number, args: any[]) => { return new IFC4.IfcPhysicalQuantity(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCPHYSICALQUANTITY] = (i:IFC4.IfcPhysicalQuantity):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCPHYSICALQUANTITY] = [IFCPHYSICALCOMPLEXQUANTITY,IFCQUANTITYWEIGHT,IFCQUANTITYVOLUME,IFCQUANTITYTIME,IFCQUANTITYLENGTH,IFCQUANTITYCOUNT,IFCQUANTITYAREA,IFCPHYSICALSIMPLEQUANTITY];
InversePropertyDef['IFC4'][IFCPHYSICALQUANTITY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCPHYSICALSIMPLEQUANTITY] = (d: RawLineData) => { new IFC4.IfcPhysicalSimpleQuantity(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcNamedUnit>(d.arguments[2].value)); }
Constructors['IFC4'][IFCPHYSICALSIMPLEQUANTITY] = (expressID:number, args: any[]) => { return new IFC4.IfcPhysicalSimpleQuantity(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCPHYSICALSIMPLEQUANTITY] = (i:IFC4.IfcPhysicalSimpleQuantity):unknown[] => { return [i.Name, i.Description, i.Unit]; }
InheritanceDef['IFC4'][IFCPHYSICALSIMPLEQUANTITY] = [IFCQUANTITYWEIGHT,IFCQUANTITYVOLUME,IFCQUANTITYTIME,IFCQUANTITYLENGTH,IFCQUANTITYCOUNT,IFCQUANTITYAREA];
InversePropertyDef['IFC4'][IFCPHYSICALSIMPLEQUANTITY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCPOSTALADDRESS] = (d: RawLineData) => { new IFC4.IfcPostalAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4.IfcLabel(p.value)), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcLabel(d.arguments[9].value)); }
Constructors['IFC4'][IFCPOSTALADDRESS] = (expressID:number, args: any[]) => { return new IFC4.IfcPostalAddress(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPOSTALADDRESS] = (i:IFC4.IfcPostalAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose, i.InternalLocation, i.AddressLines, i.PostalBox, i.Town, i.Region, i.PostalCode, i.Country]; }
InversePropertyDef['IFC4'][IFCPOSTALADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC4'][IFCPRESENTATIONITEM] = (d: RawLineData) => { new IFC4.IfcPresentationItem(d.ID, ); }
Constructors['IFC4'][IFCPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC4.IfcPresentationItem(expressID, ); }
ToRawLineData['IFC4'][IFCPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCPRESENTATIONITEM] = [IFCDRAUGHTINGPREDEFINEDCURVEFONT,IFCPREDEFINEDCURVEFONT,IFCDRAUGHTINGPREDEFINEDCOLOUR,IFCPREDEFINEDCOLOUR,IFCTEXTSTYLEFONTMODEL,IFCPREDEFINEDTEXTFONT,IFCPREDEFINEDITEM,IFCINDEXEDCOLOURMAP,IFCCURVESTYLEFONTPATTERN,IFCCURVESTYLEFONTANDSCALING,IFCCURVESTYLEFONT,IFCCOLOURRGB,IFCCOLOURSPECIFICATION,IFCCOLOURRGBLIST,IFCTEXTUREVERTEXLIST,IFCTEXTUREVERTEX,IFCINDEXEDTRIANGLETEXTUREMAP,IFCINDEXEDTEXTUREMAP,IFCTEXTUREMAP,IFCTEXTURECOORDINATEGENERATOR,IFCTEXTURECOORDINATE,IFCTEXTSTYLETEXTMODEL,IFCTEXTSTYLEFORDEFINEDFONT,IFCPIXELTEXTURE,IFCIMAGETEXTURE,IFCBLOBTEXTURE,IFCSURFACETEXTURE,IFCSURFACESTYLEWITHTEXTURES,IFCSURFACESTYLERENDERING,IFCSURFACESTYLESHADING,IFCSURFACESTYLEREFRACTION,IFCSURFACESTYLELIGHTING];
FromRawLineData['IFC4'][IFCPRESENTATIONLAYERASSIGNMENT] = (d: RawLineData) => { new IFC4.IfcPresentationLayerAssignment(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference(p.value)), !d.arguments[3] ? null :new IFC4.IfcIdentifier(d.arguments[3].value)); }
Constructors['IFC4'][IFCPRESENTATIONLAYERASSIGNMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcPresentationLayerAssignment(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPRESENTATIONLAYERASSIGNMENT] = (i:IFC4.IfcPresentationLayerAssignment):unknown[] => { return [i.Name, i.Description, i.AssignedItems, i.Identifier]; }
InheritanceDef['IFC4'][IFCPRESENTATIONLAYERASSIGNMENT] = [IFCPRESENTATIONLAYERWITHSTYLE];
FromRawLineData['IFC4'][IFCPRESENTATIONLAYERWITHSTYLE] = (d: RawLineData) => { new IFC4.IfcPresentationLayerWithStyle(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference(p.value)), !d.arguments[3] ? null :new IFC4.IfcIdentifier(d.arguments[3].value), new IFC4.IfcLogical(d.arguments[4].value), new IFC4.IfcLogical(d.arguments[5].value), new IFC4.IfcLogical(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC4.IfcPresentationStyle>(p.value))); }
Constructors['IFC4'][IFCPRESENTATIONLAYERWITHSTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcPresentationLayerWithStyle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCPRESENTATIONLAYERWITHSTYLE] = (i:IFC4.IfcPresentationLayerWithStyle):unknown[] => { return [i.Name, i.Description, i.AssignedItems, i.Identifier, i.LayerOn, i.LayerFrozen, i.LayerBlocked, i.LayerStyles]; }
FromRawLineData['IFC4'][IFCPRESENTATIONSTYLE] = (d: RawLineData) => { new IFC4.IfcPresentationStyle(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCPRESENTATIONSTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcPresentationStyle(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPRESENTATIONSTYLE] = (i:IFC4.IfcPresentationStyle):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCPRESENTATIONSTYLE] = [IFCFILLAREASTYLE,IFCCURVESTYLE,IFCTEXTSTYLE,IFCSURFACESTYLE];
FromRawLineData['IFC4'][IFCPRESENTATIONSTYLEASSIGNMENT] = (d: RawLineData) => { new IFC4.IfcPresentationStyleAssignment(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCPRESENTATIONSTYLEASSIGNMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcPresentationStyleAssignment(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPRESENTATIONSTYLEASSIGNMENT] = (i:IFC4.IfcPresentationStyleAssignment):unknown[] => { return [i.Styles]; }
FromRawLineData['IFC4'][IFCPRODUCTREPRESENTATION] = (d: RawLineData) => { new IFC4.IfcProductRepresentation(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcRepresentation>(p.value))); }
Constructors['IFC4'][IFCPRODUCTREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4.IfcProductRepresentation(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCPRODUCTREPRESENTATION] = (i:IFC4.IfcProductRepresentation):unknown[] => { return [i.Name, i.Description, i.Representations]; }
InheritanceDef['IFC4'][IFCPRODUCTREPRESENTATION] = [IFCPRODUCTDEFINITIONSHAPE,IFCMATERIALDEFINITIONREPRESENTATION];
FromRawLineData['IFC4'][IFCPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value)); }
Constructors['IFC4'][IFCPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcProfileDef(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCPROFILEDEF] = (i:IFC4.IfcProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName]; }
InheritanceDef['IFC4'][IFCPROFILEDEF] = [IFCLSHAPEPROFILEDEF,IFCISHAPEPROFILEDEF,IFCELLIPSEPROFILEDEF,IFCCIRCLEHOLLOWPROFILEDEF,IFCCIRCLEPROFILEDEF,IFCCSHAPEPROFILEDEF,IFCASYMMETRICISHAPEPROFILEDEF,IFCZSHAPEPROFILEDEF,IFCUSHAPEPROFILEDEF,IFCTRAPEZIUMPROFILEDEF,IFCTSHAPEPROFILEDEF,IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF,IFCRECTANGLEPROFILEDEF,IFCPARAMETERIZEDPROFILEDEF,IFCMIRROREDPROFILEDEF,IFCDERIVEDPROFILEDEF,IFCCOMPOSITEPROFILEDEF,IFCCENTERLINEPROFILEDEF,IFCARBITRARYOPENPROFILEDEF,IFCARBITRARYPROFILEDEFWITHVOIDS,IFCARBITRARYCLOSEDPROFILEDEF];
InversePropertyDef['IFC4'][IFCPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCPROJECTEDCRS] = (d: RawLineData) => { new IFC4.IfcProjectedCRS(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcIdentifier(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcNamedUnit>(d.arguments[6].value)); }
Constructors['IFC4'][IFCPROJECTEDCRS] = (expressID:number, args: any[]) => { return new IFC4.IfcProjectedCRS(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCPROJECTEDCRS] = (i:IFC4.IfcProjectedCRS):unknown[] => { return [i.Name, i.Description, i.GeodeticDatum, i.VerticalDatum, i.MapProjection, i.MapZone, i.MapUnit]; }
InversePropertyDef['IFC4'][IFCPROJECTEDCRS] = [['HasCoordinateOperation',IFCCOORDINATEOPERATION,0,true],];
FromRawLineData['IFC4'][IFCPROPERTYABSTRACTION] = (d: RawLineData) => { new IFC4.IfcPropertyAbstraction(d.ID, ); }
Constructors['IFC4'][IFCPROPERTYABSTRACTION] = (expressID:number, _:any) => { return new IFC4.IfcPropertyAbstraction(expressID, ); }
ToRawLineData['IFC4'][IFCPROPERTYABSTRACTION] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCPROPERTYABSTRACTION] = [IFCCOMPLEXPROPERTY,IFCPROPERTYTABLEVALUE,IFCPROPERTYSINGLEVALUE,IFCPROPERTYREFERENCEVALUE,IFCPROPERTYLISTVALUE,IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYBOUNDEDVALUE,IFCSIMPLEPROPERTY,IFCPROPERTY,IFCSECTIONREINFORCEMENTPROPERTIES,IFCSECTIONPROPERTIES,IFCREINFORCEMENTBARPROPERTIES,IFCPREDEFINEDPROPERTIES,IFCPROFILEPROPERTIES,IFCMATERIALPROPERTIES,IFCEXTENDEDPROPERTIES,IFCPROPERTYENUMERATION];
InversePropertyDef['IFC4'][IFCPROPERTYABSTRACTION] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCPROPERTYENUMERATION] = (d: RawLineData) => { new IFC4.IfcPropertyEnumeration(d.ID, new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => TypeInitialiser('IFC4',p)), !d.arguments[2] ? null :new Reference(d.arguments[2].value)); }
Constructors['IFC4'][IFCPROPERTYENUMERATION] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyEnumeration(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCPROPERTYENUMERATION] = (i:IFC4.IfcPropertyEnumeration):unknown[] => { return [i.Name, i.EnumerationValues.map((p:any) => Labelise(p)), i.Unit]; }
InversePropertyDef['IFC4'][IFCPROPERTYENUMERATION] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCQUANTITYAREA] = (d: RawLineData) => { new IFC4.IfcQuantityArea(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcNamedUnit>(d.arguments[2].value), new IFC4.IfcAreaMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCQUANTITYAREA] = (expressID:number, args: any[]) => { return new IFC4.IfcQuantityArea(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCQUANTITYAREA] = (i:IFC4.IfcQuantityArea):unknown[] => { return [i.Name, i.Description, i.Unit, i.AreaValue, i.Formula]; }
InversePropertyDef['IFC4'][IFCQUANTITYAREA] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCQUANTITYCOUNT] = (d: RawLineData) => { new IFC4.IfcQuantityCount(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcNamedUnit>(d.arguments[2].value), new IFC4.IfcCountMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCQUANTITYCOUNT] = (expressID:number, args: any[]) => { return new IFC4.IfcQuantityCount(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCQUANTITYCOUNT] = (i:IFC4.IfcQuantityCount):unknown[] => { return [i.Name, i.Description, i.Unit, i.CountValue, i.Formula]; }
InversePropertyDef['IFC4'][IFCQUANTITYCOUNT] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCQUANTITYLENGTH] = (d: RawLineData) => { new IFC4.IfcQuantityLength(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcNamedUnit>(d.arguments[2].value), new IFC4.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCQUANTITYLENGTH] = (expressID:number, args: any[]) => { return new IFC4.IfcQuantityLength(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCQUANTITYLENGTH] = (i:IFC4.IfcQuantityLength):unknown[] => { return [i.Name, i.Description, i.Unit, i.LengthValue, i.Formula]; }
InversePropertyDef['IFC4'][IFCQUANTITYLENGTH] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCQUANTITYTIME] = (d: RawLineData) => { new IFC4.IfcQuantityTime(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcNamedUnit>(d.arguments[2].value), new IFC4.IfcTimeMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCQUANTITYTIME] = (expressID:number, args: any[]) => { return new IFC4.IfcQuantityTime(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCQUANTITYTIME] = (i:IFC4.IfcQuantityTime):unknown[] => { return [i.Name, i.Description, i.Unit, i.TimeValue, i.Formula]; }
InversePropertyDef['IFC4'][IFCQUANTITYTIME] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCQUANTITYVOLUME] = (d: RawLineData) => { new IFC4.IfcQuantityVolume(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcNamedUnit>(d.arguments[2].value), new IFC4.IfcVolumeMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCQUANTITYVOLUME] = (expressID:number, args: any[]) => { return new IFC4.IfcQuantityVolume(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCQUANTITYVOLUME] = (i:IFC4.IfcQuantityVolume):unknown[] => { return [i.Name, i.Description, i.Unit, i.VolumeValue, i.Formula]; }
InversePropertyDef['IFC4'][IFCQUANTITYVOLUME] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCQUANTITYWEIGHT] = (d: RawLineData) => { new IFC4.IfcQuantityWeight(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcNamedUnit>(d.arguments[2].value), new IFC4.IfcMassMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCQUANTITYWEIGHT] = (expressID:number, args: any[]) => { return new IFC4.IfcQuantityWeight(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCQUANTITYWEIGHT] = (i:IFC4.IfcQuantityWeight):unknown[] => { return [i.Name, i.Description, i.Unit, i.WeightValue, i.Formula]; }
InversePropertyDef['IFC4'][IFCQUANTITYWEIGHT] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCRECURRENCEPATTERN] = (d: RawLineData) => { new IFC4.IfcRecurrencePattern(d.ID, d.arguments[0], !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC4.IfcDayInMonthNumber(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4.IfcDayInWeekNumber(p.value)), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4.IfcMonthInYearNumber(p.value)), !d.arguments[4] ? null :new IFC4.IfcInteger(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcInteger(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcInteger(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcTimePeriod>(p.value))); }
Constructors['IFC4'][IFCRECURRENCEPATTERN] = (expressID:number, args: any[]) => { return new IFC4.IfcRecurrencePattern(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCRECURRENCEPATTERN] = (i:IFC4.IfcRecurrencePattern):unknown[] => { return [i.RecurrenceType, i.DayComponent, i.WeekdayComponent, i.MonthComponent, i.Position, i.Interval, i.Occurrences, i.TimePeriods]; }
FromRawLineData['IFC4'][IFCREFERENCE] = (d: RawLineData) => { new IFC4.IfcReference(d.ID, !d.arguments[0] ? null :new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4.IfcInteger(p.value)), !d.arguments[4] ? null :new Reference<IFC4.IfcReference>(d.arguments[4].value)); }
Constructors['IFC4'][IFCREFERENCE] = (expressID:number, args: any[]) => { return new IFC4.IfcReference(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCREFERENCE] = (i:IFC4.IfcReference):unknown[] => { return [i.TypeIdentifier, i.AttributeIdentifier, i.InstanceName, i.ListPositions, i.InnerReference]; }
FromRawLineData['IFC4'][IFCREPRESENTATION] = (d: RawLineData) => { new IFC4.IfcRepresentation(d.ID, new Reference<IFC4.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcRepresentationItem>(p.value))); }
Constructors['IFC4'][IFCREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4.IfcRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCREPRESENTATION] = (i:IFC4.IfcRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC4'][IFCREPRESENTATION] = [IFCSTYLEDREPRESENTATION,IFCSTYLEMODEL,IFCTOPOLOGYREPRESENTATION,IFCSHAPEREPRESENTATION,IFCSHAPEMODEL];
InversePropertyDef['IFC4'][IFCREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC4'][IFCREPRESENTATIONCONTEXT] = (d: RawLineData) => { new IFC4.IfcRepresentationContext(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value)); }
Constructors['IFC4'][IFCREPRESENTATIONCONTEXT] = (expressID:number, args: any[]) => { return new IFC4.IfcRepresentationContext(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCREPRESENTATIONCONTEXT] = (i:IFC4.IfcRepresentationContext):unknown[] => { return [i.ContextIdentifier, i.ContextType]; }
InheritanceDef['IFC4'][IFCREPRESENTATIONCONTEXT] = [IFCGEOMETRICREPRESENTATIONSUBCONTEXT,IFCGEOMETRICREPRESENTATIONCONTEXT];
InversePropertyDef['IFC4'][IFCREPRESENTATIONCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],];
FromRawLineData['IFC4'][IFCREPRESENTATIONITEM] = (d: RawLineData) => { new IFC4.IfcRepresentationItem(d.ID, ); }
Constructors['IFC4'][IFCREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC4.IfcRepresentationItem(expressID, ); }
ToRawLineData['IFC4'][IFCREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCREPRESENTATIONITEM] = [IFCMAPPEDITEM,IFCFILLAREASTYLETILES,IFCFILLAREASTYLEHATCHING,IFCFACEBASEDSURFACEMODEL,IFCDIRECTION,IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFCINDEXEDPOLYCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCSEAMCURVE,IFCINTERSECTIONCURVE,IFCSURFACECURVE,IFCPCURVE,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCLINE,IFCCURVE,IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID,IFCCSGPRIMITIVE3D,IFCREPARAMETRISEDCOMPOSITECURVESEGMENT,IFCCOMPOSITECURVESEGMENT,IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D,IFCCARTESIANTRANSFORMATIONOPERATOR,IFCCARTESIANPOINTLIST3D,IFCCARTESIANPOINTLIST2D,IFCCARTESIANPOINTLIST,IFCBOUNDINGBOX,IFCBOOLEANCLIPPINGRESULT,IFCBOOLEANRESULT,IFCANNOTATIONFILLAREA,IFCVECTOR,IFCTEXTLITERALWITHEXTENT,IFCTEXTLITERAL,IFCPOLYGONALFACESET,IFCTRIANGULATEDFACESET,IFCTESSELLATEDFACESET,IFCINDEXEDPOLYGONALFACEWITHVOIDS,IFCINDEXEDPOLYGONALFACE,IFCTESSELLATEDITEM,IFCCYLINDRICALSURFACE,IFCTOROIDALSURFACE,IFCSPHERICALSURFACE,IFCPLANE,IFCELEMENTARYSURFACE,IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE,IFCSURFACE,IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLIDPOLYGONAL,IFCSWEPTDISKSOLID,IFCSURFACECURVESWEPTAREASOLID,IFCREVOLVEDAREASOLIDTAPERED,IFCREVOLVEDAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED,IFCEXTRUDEDAREASOLID,IFCSWEPTAREASOLID,IFCSOLIDMODEL,IFCSHELLBASEDSURFACEMODEL,IFCSECTIONEDSPINE,IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE,IFCPOINT,IFCPLANARBOX,IFCPLANAREXTENT,IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT,IFCPLACEMENT,IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT,IFCLIGHTSOURCE,IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE,IFCHALFSPACESOLID,IFCGEOMETRICCURVESET,IFCGEOMETRICSET,IFCGEOMETRICREPRESENTATIONITEM,IFCPATH,IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP,IFCLOOP,IFCFACEOUTERBOUND,IFCFACEBOUND,IFCADVANCEDFACE,IFCFACESURFACE,IFCFACE,IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE,IFCEDGE,IFCCLOSEDSHELL,IFCOPENSHELL,IFCCONNECTEDFACESET,IFCVERTEXPOINT,IFCVERTEX,IFCTOPOLOGICALREPRESENTATIONITEM,IFCSTYLEDITEM];
InversePropertyDef['IFC4'][IFCREPRESENTATIONITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCREPRESENTATIONMAP] = (d: RawLineData) => { new IFC4.IfcRepresentationMap(d.ID, new Reference(d.arguments[0].value), new Reference<IFC4.IfcRepresentation>(d.arguments[1].value)); }
Constructors['IFC4'][IFCREPRESENTATIONMAP] = (expressID:number, args: any[]) => { return new IFC4.IfcRepresentationMap(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCREPRESENTATIONMAP] = (i:IFC4.IfcRepresentationMap):unknown[] => { return [i.MappingOrigin, i.MappedRepresentation]; }
InversePropertyDef['IFC4'][IFCREPRESENTATIONMAP] = [['HasShapeAspects',IFCSHAPEASPECT,4,true],['MapUsage',IFCMAPPEDITEM,0,true],];
FromRawLineData['IFC4'][IFCRESOURCELEVELRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcResourceLevelRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value)); }
Constructors['IFC4'][IFCRESOURCELEVELRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcResourceLevelRelationship(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCRESOURCELEVELRELATIONSHIP] = (i:IFC4.IfcResourceLevelRelationship):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCRESOURCELEVELRELATIONSHIP] = [IFCRESOURCECONSTRAINTRELATIONSHIP,IFCRESOURCEAPPROVALRELATIONSHIP,IFCPROPERTYDEPENDENCYRELATIONSHIP,IFCORGANIZATIONRELATIONSHIP,IFCMATERIALRELATIONSHIP,IFCEXTERNALREFERENCERELATIONSHIP,IFCDOCUMENTINFORMATIONRELATIONSHIP,IFCCURRENCYRELATIONSHIP,IFCAPPROVALRELATIONSHIP];
FromRawLineData['IFC4'][IFCROOT] = (d: RawLineData) => { new IFC4.IfcRoot(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCROOT] = (expressID:number, args: any[]) => { return new IFC4.IfcRoot(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCROOT] = (i:IFC4.IfcRoot):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCROOT] = [IFCRELDEFINESBYTYPE,IFCRELDEFINESBYTEMPLATE,IFCRELDEFINESBYPROPERTIES,IFCRELDEFINESBYOBJECT,IFCRELDEFINES,IFCRELAGGREGATES,IFCRELVOIDSELEMENT,IFCRELPROJECTSELEMENT,IFCRELNESTS,IFCRELDECOMPOSES,IFCRELDECLARES,IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELSPACEBOUNDARY1STLEVEL,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELINTERFERESELEMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS,IFCRELCONNECTS,IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL,IFCRELASSOCIATES,IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUPBYFACTOR,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTOCONTROL,IFCRELASSIGNSTOACTOR,IFCRELASSIGNS,IFCRELATIONSHIP,IFCCOMPLEXPROPERTYTEMPLATE,IFCSIMPLEPROPERTYTEMPLATE,IFCPROPERTYTEMPLATE,IFCPROPERTYSETTEMPLATE,IFCPROPERTYTEMPLATEDEFINITION,IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCPREDEFINEDPROPERTYSET,IFCELEMENTQUANTITY,IFCQUANTITYSET,IFCPROPERTYSETDEFINITION,IFCPROPERTYDEFINITION,IFCASSET,IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILDINGSYSTEM,IFCZONE,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCWORKCALENDAR,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCDISTRIBUTIONPORT,IFCPORT,IFCGRID,IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSANITARYTERMINAL,IFCOUTLET,IFCMEDICALDEVICE,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBEAMSTANDARDCASE,IFCBEAM,IFCWINDOWSTANDARDCASE,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALLELEMENTEDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLABSTANDARDCASE,IFCSLABELEMENTEDCASE,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATESTANDARDCASE,IFCPLATE,IFCPILE,IFCMEMBERSTANDARDCASE,IFCMEMBER,IFCFOOTING,IFCDOORSTANDARDCASE,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMNSTANDARDCASE,IFCCOLUMN,IFCCHIMNEY,IFCBUILDINGELEMENTPROXY,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCVOIDINGFEATURE,IFCOPENINGSTANDARDCASE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALELEMENT,IFCPROXY,IFCPRODUCT,IFCPROCEDURE,IFCEVENT,IFCTASK,IFCPROCESS,IFCOBJECT,IFCPROJECTLIBRARY,IFCPROJECT,IFCCONTEXT,IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE,IFCCONSTRUCTIONRESOURCETYPE,IFCTYPERESOURCE,IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALELEMENTTYPE,IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMEDICALDEVICETYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCPILETYPE,IFCMEMBERTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCDOORSTYLE,IFCWINDOWSTYLE,IFCTYPEPRODUCT,IFCTASKTYPE,IFCPROCEDURETYPE,IFCEVENTTYPE,IFCTYPEPROCESS,IFCTYPEOBJECT,IFCOBJECTDEFINITION];
FromRawLineData['IFC4'][IFCSIUNIT] = (d: RawLineData) => { new IFC4.IfcSIUnit(d.ID, d.arguments[0], d.arguments[1], d.arguments[2]); }
Constructors['IFC4'][IFCSIUNIT] = (expressID:number, args: any[]) => { return new IFC4.IfcSIUnit(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSIUNIT] = (i:IFC4.IfcSIUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Prefix, i.Name]; }
FromRawLineData['IFC4'][IFCSCHEDULINGTIME] = (d: RawLineData) => { new IFC4.IfcSchedulingTime(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCSCHEDULINGTIME] = (expressID:number, args: any[]) => { return new IFC4.IfcSchedulingTime(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSCHEDULINGTIME] = (i:IFC4.IfcSchedulingTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin]; }
InheritanceDef['IFC4'][IFCSCHEDULINGTIME] = [IFCRESOURCETIME,IFCLAGTIME,IFCEVENTTIME,IFCWORKTIME,IFCTASKTIMERECURRING,IFCTASKTIME];
FromRawLineData['IFC4'][IFCSHAPEASPECT] = (d: RawLineData) => { new IFC4.IfcShapeAspect(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcShapeModel>(p.value)), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcText(d.arguments[2].value), new IFC4.IfcLogical(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value)); }
Constructors['IFC4'][IFCSHAPEASPECT] = (expressID:number, args: any[]) => { return new IFC4.IfcShapeAspect(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCSHAPEASPECT] = (i:IFC4.IfcShapeAspect):unknown[] => { return [i.ShapeRepresentations, i.Name, i.Description, i.ProductDefinitional, i.PartOfProductDefinitionShape]; }
FromRawLineData['IFC4'][IFCSHAPEMODEL] = (d: RawLineData) => { new IFC4.IfcShapeModel(d.ID, new Reference<IFC4.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcRepresentationItem>(p.value))); }
Constructors['IFC4'][IFCSHAPEMODEL] = (expressID:number, args: any[]) => { return new IFC4.IfcShapeModel(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSHAPEMODEL] = (i:IFC4.IfcShapeModel):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC4'][IFCSHAPEMODEL] = [IFCTOPOLOGYREPRESENTATION,IFCSHAPEREPRESENTATION];
InversePropertyDef['IFC4'][IFCSHAPEMODEL] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC4'][IFCSHAPEREPRESENTATION] = (d: RawLineData) => { new IFC4.IfcShapeRepresentation(d.ID, new Reference<IFC4.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcRepresentationItem>(p.value))); }
Constructors['IFC4'][IFCSHAPEREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4.IfcShapeRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSHAPEREPRESENTATION] = (i:IFC4.IfcShapeRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC4'][IFCSHAPEREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALCONNECTIONCONDITION] = (d: RawLineData) => { new IFC4.IfcStructuralConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCSTRUCTURALCONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralConnectionCondition(expressID, args[0]); }
ToRawLineData['IFC4'][IFCSTRUCTURALCONNECTIONCONDITION] = (i:IFC4.IfcStructuralConnectionCondition):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCSTRUCTURALCONNECTIONCONDITION] = [IFCSLIPPAGECONNECTIONCONDITION,IFCFAILURECONNECTIONCONDITION];
FromRawLineData['IFC4'][IFCSTRUCTURALLOAD] = (d: RawLineData) => { new IFC4.IfcStructuralLoad(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOAD] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoad(expressID, args[0]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOAD] = (i:IFC4.IfcStructuralLoad):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCSTRUCTURALLOAD] = [IFCSURFACEREINFORCEMENTAREA,IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADTEMPERATURE,IFCSTRUCTURALLOADSTATIC,IFCSTRUCTURALLOADORRESULT,IFCSTRUCTURALLOADCONFIGURATION];
FromRawLineData['IFC4'][IFCSTRUCTURALLOADCONFIGURATION] = (d: RawLineData) => { new IFC4.IfcStructuralLoadConfiguration(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcStructuralLoadOrResult>(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4.IfcLengthMeasure(p.value))); }
Constructors['IFC4'][IFCSTRUCTURALLOADCONFIGURATION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadConfiguration(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADCONFIGURATION] = (i:IFC4.IfcStructuralLoadConfiguration):unknown[] => { return [i.Name, i.Values, i.Locations]; }
FromRawLineData['IFC4'][IFCSTRUCTURALLOADORRESULT] = (d: RawLineData) => { new IFC4.IfcStructuralLoadOrResult(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADORRESULT] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadOrResult(expressID, args[0]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADORRESULT] = (i:IFC4.IfcStructuralLoadOrResult):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCSTRUCTURALLOADORRESULT] = [IFCSURFACEREINFORCEMENTAREA,IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADTEMPERATURE,IFCSTRUCTURALLOADSTATIC];
FromRawLineData['IFC4'][IFCSTRUCTURALLOADSTATIC] = (d: RawLineData) => { new IFC4.IfcStructuralLoadStatic(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADSTATIC] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadStatic(expressID, args[0]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADSTATIC] = (i:IFC4.IfcStructuralLoadStatic):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCSTRUCTURALLOADSTATIC] = [IFCSTRUCTURALLOADSINGLEFORCEWARPING,IFCSTRUCTURALLOADSINGLEFORCE,IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION,IFCSTRUCTURALLOADSINGLEDISPLACEMENT,IFCSTRUCTURALLOADPLANARFORCE,IFCSTRUCTURALLOADLINEARFORCE,IFCSTRUCTURALLOADTEMPERATURE];
FromRawLineData['IFC4'][IFCSTRUCTURALLOADTEMPERATURE] = (d: RawLineData) => { new IFC4.IfcStructuralLoadTemperature(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcThermodynamicTemperatureMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcThermodynamicTemperatureMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcThermodynamicTemperatureMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADTEMPERATURE] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadTemperature(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADTEMPERATURE] = (i:IFC4.IfcStructuralLoadTemperature):unknown[] => { return [i.Name, i.DeltaTConstant, i.DeltaTY, i.DeltaTZ]; }
FromRawLineData['IFC4'][IFCSTYLEMODEL] = (d: RawLineData) => { new IFC4.IfcStyleModel(d.ID, new Reference<IFC4.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcRepresentationItem>(p.value))); }
Constructors['IFC4'][IFCSTYLEMODEL] = (expressID:number, args: any[]) => { return new IFC4.IfcStyleModel(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSTYLEMODEL] = (i:IFC4.IfcStyleModel):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InheritanceDef['IFC4'][IFCSTYLEMODEL] = [IFCSTYLEDREPRESENTATION];
InversePropertyDef['IFC4'][IFCSTYLEMODEL] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC4'][IFCSTYLEDITEM] = (d: RawLineData) => { new IFC4.IfcStyledItem(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcRepresentationItem>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value)), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCSTYLEDITEM] = (expressID:number, args: any[]) => { return new IFC4.IfcStyledItem(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSTYLEDITEM] = (i:IFC4.IfcStyledItem):unknown[] => { return [i.Item, i.Styles, i.Name]; }
InversePropertyDef['IFC4'][IFCSTYLEDITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSTYLEDREPRESENTATION] = (d: RawLineData) => { new IFC4.IfcStyledRepresentation(d.ID, new Reference<IFC4.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcRepresentationItem>(p.value))); }
Constructors['IFC4'][IFCSTYLEDREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4.IfcStyledRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSTYLEDREPRESENTATION] = (i:IFC4.IfcStyledRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC4'][IFCSTYLEDREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],];
FromRawLineData['IFC4'][IFCSURFACEREINFORCEMENTAREA] = (d: RawLineData) => { new IFC4.IfcSurfaceReinforcementArea(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC4.IfcLengthMeasure(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4.IfcLengthMeasure(p.value)), !d.arguments[3] ? null :new IFC4.IfcRatioMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCSURFACEREINFORCEMENTAREA] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceReinforcementArea(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSURFACEREINFORCEMENTAREA] = (i:IFC4.IfcSurfaceReinforcementArea):unknown[] => { return [i.Name, i.SurfaceReinforcement1, i.SurfaceReinforcement2, i.ShearReinforcement]; }
FromRawLineData['IFC4'][IFCSURFACESTYLE] = (d: RawLineData) => { new IFC4.IfcSurfaceStyle(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1], d.arguments[2].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCSURFACESTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSURFACESTYLE] = (i:IFC4.IfcSurfaceStyle):unknown[] => { return [i.Name, i.Side, i.Styles]; }
FromRawLineData['IFC4'][IFCSURFACESTYLELIGHTING] = (d: RawLineData) => { new IFC4.IfcSurfaceStyleLighting(d.ID, new Reference<IFC4.IfcColourRgb>(d.arguments[0].value), new Reference<IFC4.IfcColourRgb>(d.arguments[1].value), new Reference<IFC4.IfcColourRgb>(d.arguments[2].value), new Reference<IFC4.IfcColourRgb>(d.arguments[3].value)); }
Constructors['IFC4'][IFCSURFACESTYLELIGHTING] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceStyleLighting(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSURFACESTYLELIGHTING] = (i:IFC4.IfcSurfaceStyleLighting):unknown[] => { return [i.DiffuseTransmissionColour, i.DiffuseReflectionColour, i.TransmissionColour, i.ReflectanceColour]; }
FromRawLineData['IFC4'][IFCSURFACESTYLEREFRACTION] = (d: RawLineData) => { new IFC4.IfcSurfaceStyleRefraction(d.ID, !d.arguments[0] ? null :new IFC4.IfcReal(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcReal(d.arguments[1].value)); }
Constructors['IFC4'][IFCSURFACESTYLEREFRACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceStyleRefraction(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCSURFACESTYLEREFRACTION] = (i:IFC4.IfcSurfaceStyleRefraction):unknown[] => { return [i.RefractionIndex, i.DispersionFactor]; }
FromRawLineData['IFC4'][IFCSURFACESTYLESHADING] = (d: RawLineData) => { new IFC4.IfcSurfaceStyleShading(d.ID, new Reference<IFC4.IfcColourRgb>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[1].value)); }
Constructors['IFC4'][IFCSURFACESTYLESHADING] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceStyleShading(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCSURFACESTYLESHADING] = (i:IFC4.IfcSurfaceStyleShading):unknown[] => { return [i.SurfaceColour, i.Transparency]; }
InheritanceDef['IFC4'][IFCSURFACESTYLESHADING] = [IFCSURFACESTYLERENDERING];
FromRawLineData['IFC4'][IFCSURFACESTYLEWITHTEXTURES] = (d: RawLineData) => { new IFC4.IfcSurfaceStyleWithTextures(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcSurfaceTexture>(p.value))); }
Constructors['IFC4'][IFCSURFACESTYLEWITHTEXTURES] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceStyleWithTextures(expressID, args[0]); }
ToRawLineData['IFC4'][IFCSURFACESTYLEWITHTEXTURES] = (i:IFC4.IfcSurfaceStyleWithTextures):unknown[] => { return [i.Textures]; }
FromRawLineData['IFC4'][IFCSURFACETEXTURE] = (d: RawLineData) => { new IFC4.IfcSurfaceTexture(d.ID, new IFC4.IfcBoolean(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4.IfcIdentifier(p.value))); }
Constructors['IFC4'][IFCSURFACETEXTURE] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceTexture(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCSURFACETEXTURE] = (i:IFC4.IfcSurfaceTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.Mode, i.TextureTransform, i.Parameter]; }
InheritanceDef['IFC4'][IFCSURFACETEXTURE] = [IFCPIXELTEXTURE,IFCIMAGETEXTURE,IFCBLOBTEXTURE];
InversePropertyDef['IFC4'][IFCSURFACETEXTURE] = [['IsMappedBy',IFCTEXTURECOORDINATE,0,true],['UsedInStyles',IFCSURFACESTYLEWITHTEXTURES,0,true],];
FromRawLineData['IFC4'][IFCTABLE] = (d: RawLineData) => { new IFC4.IfcTable(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new Reference<IFC4.IfcTableRow>(p.value)), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new Reference<IFC4.IfcTableColumn>(p.value))); }
Constructors['IFC4'][IFCTABLE] = (expressID:number, args: any[]) => { return new IFC4.IfcTable(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCTABLE] = (i:IFC4.IfcTable):unknown[] => { return [i.Name, i.Rows, i.Columns]; }
FromRawLineData['IFC4'][IFCTABLECOLUMN] = (d: RawLineData) => { new IFC4.IfcTableColumn(d.ID, !d.arguments[0] ? null :new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcText(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4.IfcReference>(d.arguments[4].value)); }
Constructors['IFC4'][IFCTABLECOLUMN] = (expressID:number, args: any[]) => { return new IFC4.IfcTableColumn(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCTABLECOLUMN] = (i:IFC4.IfcTableColumn):unknown[] => { return [i.Identifier, i.Name, i.Description, i.Unit, i.ReferencePath]; }
FromRawLineData['IFC4'][IFCTABLEROW] = (d: RawLineData) => { new IFC4.IfcTableRow(d.ID, !d.arguments[0] ? null :d.arguments[0].map((p:any) => TypeInitialiser('IFC4',p)), !d.arguments[1] ? null :new IFC4.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4'][IFCTABLEROW] = (expressID:number, args: any[]) => { return new IFC4.IfcTableRow(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCTABLEROW] = (i:IFC4.IfcTableRow):unknown[] => { return [!i.RowCells ? null :i.RowCells.map((p:any) => Labelise(p)), i.IsHeading]; }
FromRawLineData['IFC4'][IFCTASKTIME] = (d: RawLineData) => { new IFC4.IfcTaskTime(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), d.arguments[3], !d.arguments[4] ? null :new IFC4.IfcDuration(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcDateTime(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcDateTime(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcDateTime(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcDateTime(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcDuration(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcDuration(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcBoolean(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcDateTime(d.arguments[14].value), !d.arguments[15] ? null :new IFC4.IfcDuration(d.arguments[15].value), !d.arguments[16] ? null :new IFC4.IfcDateTime(d.arguments[16].value), !d.arguments[17] ? null :new IFC4.IfcDateTime(d.arguments[17].value), !d.arguments[18] ? null :new IFC4.IfcDuration(d.arguments[18].value), !d.arguments[19] ? null :new IFC4.IfcPositiveRatioMeasure(d.arguments[19].value)); }
Constructors['IFC4'][IFCTASKTIME] = (expressID:number, args: any[]) => { return new IFC4.IfcTaskTime(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19]); }
ToRawLineData['IFC4'][IFCTASKTIME] = (i:IFC4.IfcTaskTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.DurationType, i.ScheduleDuration, i.ScheduleStart, i.ScheduleFinish, i.EarlyStart, i.EarlyFinish, i.LateStart, i.LateFinish, i.FreeFloat, i.TotalFloat, i.IsCritical, i.StatusTime, i.ActualDuration, i.ActualStart, i.ActualFinish, i.RemainingTime, i.Completion]; }
InheritanceDef['IFC4'][IFCTASKTIME] = [IFCTASKTIMERECURRING];
FromRawLineData['IFC4'][IFCTASKTIMERECURRING] = (d: RawLineData) => { new IFC4.IfcTaskTimeRecurring(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), d.arguments[3], !d.arguments[4] ? null :new IFC4.IfcDuration(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcDateTime(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcDateTime(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcDateTime(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcDateTime(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcDuration(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcDuration(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcBoolean(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcDateTime(d.arguments[14].value), !d.arguments[15] ? null :new IFC4.IfcDuration(d.arguments[15].value), !d.arguments[16] ? null :new IFC4.IfcDateTime(d.arguments[16].value), !d.arguments[17] ? null :new IFC4.IfcDateTime(d.arguments[17].value), !d.arguments[18] ? null :new IFC4.IfcDuration(d.arguments[18].value), !d.arguments[19] ? null :new IFC4.IfcPositiveRatioMeasure(d.arguments[19].value), new Reference<IFC4.IfcRecurrencePattern>(d.arguments[20].value)); }
Constructors['IFC4'][IFCTASKTIMERECURRING] = (expressID:number, args: any[]) => { return new IFC4.IfcTaskTimeRecurring(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19], args[20]); }
ToRawLineData['IFC4'][IFCTASKTIMERECURRING] = (i:IFC4.IfcTaskTimeRecurring):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.DurationType, i.ScheduleDuration, i.ScheduleStart, i.ScheduleFinish, i.EarlyStart, i.EarlyFinish, i.LateStart, i.LateFinish, i.FreeFloat, i.TotalFloat, i.IsCritical, i.StatusTime, i.ActualDuration, i.ActualStart, i.ActualFinish, i.RemainingTime, i.Completion, i.Recurrence]; }
FromRawLineData['IFC4'][IFCTELECOMADDRESS] = (d: RawLineData) => { new IFC4.IfcTelecomAddress(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4.IfcLabel(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4.IfcLabel(p.value)), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new IFC4.IfcLabel(p.value)), !d.arguments[7] ? null :new IFC4.IfcURIReference(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new IFC4.IfcURIReference(p.value))); }
Constructors['IFC4'][IFCTELECOMADDRESS] = (expressID:number, args: any[]) => { return new IFC4.IfcTelecomAddress(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCTELECOMADDRESS] = (i:IFC4.IfcTelecomAddress):unknown[] => { return [i.Purpose, i.Description, i.UserDefinedPurpose, i.TelephoneNumbers, i.FacsimileNumbers, i.PagerNumber, i.ElectronicMailAddresses, i.WWWHomePageURL, i.MessagingIDs]; }
InversePropertyDef['IFC4'][IFCTELECOMADDRESS] = [['OfPerson',IFCPERSON,7,true],['OfOrganization',IFCORGANIZATION,4,true],];
FromRawLineData['IFC4'][IFCTEXTSTYLE] = (d: RawLineData) => { new IFC4.IfcTextStyle(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcTextStyleForDefinedFont>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcTextStyleTextModel>(d.arguments[2].value), new Reference(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcBoolean(d.arguments[4].value)); }
Constructors['IFC4'][IFCTEXTSTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcTextStyle(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCTEXTSTYLE] = (i:IFC4.IfcTextStyle):unknown[] => { return [i.Name, i.TextCharacterAppearance, i.TextStyle, i.TextFontStyle, i.ModelOrDraughting]; }
FromRawLineData['IFC4'][IFCTEXTSTYLEFORDEFINEDFONT] = (d: RawLineData) => { new IFC4.IfcTextStyleForDefinedFont(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4'][IFCTEXTSTYLEFORDEFINEDFONT] = (expressID:number, args: any[]) => { return new IFC4.IfcTextStyleForDefinedFont(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCTEXTSTYLEFORDEFINEDFONT] = (i:IFC4.IfcTextStyleForDefinedFont):unknown[] => { return [i.Colour, i.BackgroundColour]; }
FromRawLineData['IFC4'][IFCTEXTSTYLETEXTMODEL] = (d: RawLineData) => { new IFC4.IfcTextStyleTextModel(d.ID, !d.arguments[0] ? null :TypeInitialiser('IFC4',d.arguments[0]), !d.arguments[1] ? null :new IFC4.IfcTextAlignment(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcTextDecoration(d.arguments[2].value), !d.arguments[3] ? null :TypeInitialiser('IFC4',d.arguments[3]), !d.arguments[4] ? null :TypeInitialiser('IFC4',d.arguments[4]), !d.arguments[5] ? null :new IFC4.IfcTextTransformation(d.arguments[5].value), !d.arguments[6] ? null :TypeInitialiser('IFC4',d.arguments[6])); }
Constructors['IFC4'][IFCTEXTSTYLETEXTMODEL] = (expressID:number, args: any[]) => { return new IFC4.IfcTextStyleTextModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCTEXTSTYLETEXTMODEL] = (i:IFC4.IfcTextStyleTextModel):unknown[] => { return [!i.TextIndent ? null :Labelise(i.TextIndent), i.TextAlign, i.TextDecoration, !i.LetterSpacing ? null :Labelise(i.LetterSpacing), !i.WordSpacing ? null :Labelise(i.WordSpacing), i.TextTransform, !i.LineHeight ? null :Labelise(i.LineHeight)]; }
FromRawLineData['IFC4'][IFCTEXTURECOORDINATE] = (d: RawLineData) => { new IFC4.IfcTextureCoordinate(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcSurfaceTexture>(p.value))); }
Constructors['IFC4'][IFCTEXTURECOORDINATE] = (expressID:number, args: any[]) => { return new IFC4.IfcTextureCoordinate(expressID, args[0]); }
ToRawLineData['IFC4'][IFCTEXTURECOORDINATE] = (i:IFC4.IfcTextureCoordinate):unknown[] => { return [i.Maps]; }
InheritanceDef['IFC4'][IFCTEXTURECOORDINATE] = [IFCINDEXEDTRIANGLETEXTUREMAP,IFCINDEXEDTEXTUREMAP,IFCTEXTUREMAP,IFCTEXTURECOORDINATEGENERATOR];
FromRawLineData['IFC4'][IFCTEXTURECOORDINATEGENERATOR] = (d: RawLineData) => { new IFC4.IfcTextureCoordinateGenerator(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcSurfaceTexture>(p.value)), new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new IFC4.IfcReal(p.value))); }
Constructors['IFC4'][IFCTEXTURECOORDINATEGENERATOR] = (expressID:number, args: any[]) => { return new IFC4.IfcTextureCoordinateGenerator(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCTEXTURECOORDINATEGENERATOR] = (i:IFC4.IfcTextureCoordinateGenerator):unknown[] => { return [i.Maps, i.Mode, i.Parameter]; }
FromRawLineData['IFC4'][IFCTEXTUREMAP] = (d: RawLineData) => { new IFC4.IfcTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcSurfaceTexture>(p.value)), d.arguments[1].map((p:any) => new Reference<IFC4.IfcTextureVertex>(p.value)), new Reference<IFC4.IfcFace>(d.arguments[2].value)); }
Constructors['IFC4'][IFCTEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC4.IfcTextureMap(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCTEXTUREMAP] = (i:IFC4.IfcTextureMap):unknown[] => { return [i.Maps, i.Vertices, i.MappedTo]; }
FromRawLineData['IFC4'][IFCTEXTUREVERTEX] = (d: RawLineData) => { new IFC4.IfcTextureVertex(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcParameterValue(p.value))); }
Constructors['IFC4'][IFCTEXTUREVERTEX] = (expressID:number, args: any[]) => { return new IFC4.IfcTextureVertex(expressID, args[0]); }
ToRawLineData['IFC4'][IFCTEXTUREVERTEX] = (i:IFC4.IfcTextureVertex):unknown[] => { return [i.Coordinates]; }
FromRawLineData['IFC4'][IFCTEXTUREVERTEXLIST] = (d: RawLineData) => { new IFC4.IfcTextureVertexList(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcParameterValue(p.value))); }
Constructors['IFC4'][IFCTEXTUREVERTEXLIST] = (expressID:number, args: any[]) => { return new IFC4.IfcTextureVertexList(expressID, args[0]); }
ToRawLineData['IFC4'][IFCTEXTUREVERTEXLIST] = (i:IFC4.IfcTextureVertexList):unknown[] => { return [i.TexCoordsList]; }
FromRawLineData['IFC4'][IFCTIMEPERIOD] = (d: RawLineData) => { new IFC4.IfcTimePeriod(d.ID, new IFC4.IfcTime(d.arguments[0].value), new IFC4.IfcTime(d.arguments[1].value)); }
Constructors['IFC4'][IFCTIMEPERIOD] = (expressID:number, args: any[]) => { return new IFC4.IfcTimePeriod(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCTIMEPERIOD] = (i:IFC4.IfcTimePeriod):unknown[] => { return [i.StartTime, i.EndTime]; }
FromRawLineData['IFC4'][IFCTIMESERIES] = (d: RawLineData) => { new IFC4.IfcTimeSeries(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new IFC4.IfcDateTime(d.arguments[2].value), new IFC4.IfcDateTime(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value)); }
Constructors['IFC4'][IFCTIMESERIES] = (expressID:number, args: any[]) => { return new IFC4.IfcTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCTIMESERIES] = (i:IFC4.IfcTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit]; }
InheritanceDef['IFC4'][IFCTIMESERIES] = [IFCREGULARTIMESERIES,IFCIRREGULARTIMESERIES];
InversePropertyDef['IFC4'][IFCTIMESERIES] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCTIMESERIESVALUE] = (d: RawLineData) => { new IFC4.IfcTimeSeriesValue(d.ID, d.arguments[0].map((p:any) => TypeInitialiser('IFC4',p))); }
Constructors['IFC4'][IFCTIMESERIESVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcTimeSeriesValue(expressID, args[0]); }
ToRawLineData['IFC4'][IFCTIMESERIESVALUE] = (i:IFC4.IfcTimeSeriesValue):unknown[] => { return [i.ListValues.map((p:any) => Labelise(p))]; }
FromRawLineData['IFC4'][IFCTOPOLOGICALREPRESENTATIONITEM] = (d: RawLineData) => { new IFC4.IfcTopologicalRepresentationItem(d.ID, ); }
Constructors['IFC4'][IFCTOPOLOGICALREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC4.IfcTopologicalRepresentationItem(expressID, ); }
ToRawLineData['IFC4'][IFCTOPOLOGICALREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCTOPOLOGICALREPRESENTATIONITEM] = [IFCPATH,IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP,IFCLOOP,IFCFACEOUTERBOUND,IFCFACEBOUND,IFCADVANCEDFACE,IFCFACESURFACE,IFCFACE,IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE,IFCEDGE,IFCCLOSEDSHELL,IFCOPENSHELL,IFCCONNECTEDFACESET,IFCVERTEXPOINT,IFCVERTEX];
InversePropertyDef['IFC4'][IFCTOPOLOGICALREPRESENTATIONITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCTOPOLOGYREPRESENTATION] = (d: RawLineData) => { new IFC4.IfcTopologyRepresentation(d.ID, new Reference<IFC4.IfcRepresentationContext>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcRepresentationItem>(p.value))); }
Constructors['IFC4'][IFCTOPOLOGYREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4.IfcTopologyRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCTOPOLOGYREPRESENTATION] = (i:IFC4.IfcTopologyRepresentation):unknown[] => { return [i.ContextOfItems, i.RepresentationIdentifier, i.RepresentationType, i.Items]; }
InversePropertyDef['IFC4'][IFCTOPOLOGYREPRESENTATION] = [['RepresentationMap',IFCREPRESENTATIONMAP,1,true],['LayerAssignments',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['OfProductRepresentation',IFCPRODUCTREPRESENTATION,2,true],['OfShapeAspect',IFCSHAPEASPECT,0,true],];
FromRawLineData['IFC4'][IFCUNITASSIGNMENT] = (d: RawLineData) => { new IFC4.IfcUnitAssignment(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCUNITASSIGNMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcUnitAssignment(expressID, args[0]); }
ToRawLineData['IFC4'][IFCUNITASSIGNMENT] = (i:IFC4.IfcUnitAssignment):unknown[] => { return [i.Units]; }
FromRawLineData['IFC4'][IFCVERTEX] = (d: RawLineData) => { new IFC4.IfcVertex(d.ID, ); }
Constructors['IFC4'][IFCVERTEX] = (expressID:number, _:any) => { return new IFC4.IfcVertex(expressID, ); }
ToRawLineData['IFC4'][IFCVERTEX] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCVERTEX] = [IFCVERTEXPOINT];
InversePropertyDef['IFC4'][IFCVERTEX] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCVERTEXPOINT] = (d: RawLineData) => { new IFC4.IfcVertexPoint(d.ID, new Reference<IFC4.IfcPoint>(d.arguments[0].value)); }
Constructors['IFC4'][IFCVERTEXPOINT] = (expressID:number, args: any[]) => { return new IFC4.IfcVertexPoint(expressID, args[0]); }
ToRawLineData['IFC4'][IFCVERTEXPOINT] = (i:IFC4.IfcVertexPoint):unknown[] => { return [i.VertexGeometry]; }
InversePropertyDef['IFC4'][IFCVERTEXPOINT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCVIRTUALGRIDINTERSECTION] = (d: RawLineData) => { new IFC4.IfcVirtualGridIntersection(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcGridAxis>(p.value)), d.arguments[1].map((p:any) => new IFC4.IfcLengthMeasure(p.value))); }
Constructors['IFC4'][IFCVIRTUALGRIDINTERSECTION] = (expressID:number, args: any[]) => { return new IFC4.IfcVirtualGridIntersection(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCVIRTUALGRIDINTERSECTION] = (i:IFC4.IfcVirtualGridIntersection):unknown[] => { return [i.IntersectingAxes, i.OffsetDistances]; }
FromRawLineData['IFC4'][IFCWORKTIME] = (d: RawLineData) => { new IFC4.IfcWorkTime(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4.IfcRecurrencePattern>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcDate(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDate(d.arguments[5].value)); }
Constructors['IFC4'][IFCWORKTIME] = (expressID:number, args: any[]) => { return new IFC4.IfcWorkTime(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCWORKTIME] = (i:IFC4.IfcWorkTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.RecurrencePattern, i.Start, i.Finish]; }
FromRawLineData['IFC4'][IFCAPPROVALRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcApprovalRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcApproval>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcApproval>(p.value))); }
Constructors['IFC4'][IFCAPPROVALRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcApprovalRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCAPPROVALRELATIONSHIP] = (i:IFC4.IfcApprovalRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingApproval, i.RelatedApprovals]; }
FromRawLineData['IFC4'][IFCARBITRARYCLOSEDPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcArbitraryClosedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), new Reference<IFC4.IfcCurve>(d.arguments[2].value)); }
Constructors['IFC4'][IFCARBITRARYCLOSEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcArbitraryClosedProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCARBITRARYCLOSEDPROFILEDEF] = (i:IFC4.IfcArbitraryClosedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.OuterCurve]; }
InheritanceDef['IFC4'][IFCARBITRARYCLOSEDPROFILEDEF] = [IFCARBITRARYPROFILEDEFWITHVOIDS];
InversePropertyDef['IFC4'][IFCARBITRARYCLOSEDPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCARBITRARYOPENPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcArbitraryOpenProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), new Reference<IFC4.IfcBoundedCurve>(d.arguments[2].value)); }
Constructors['IFC4'][IFCARBITRARYOPENPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcArbitraryOpenProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCARBITRARYOPENPROFILEDEF] = (i:IFC4.IfcArbitraryOpenProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Curve]; }
InheritanceDef['IFC4'][IFCARBITRARYOPENPROFILEDEF] = [IFCCENTERLINEPROFILEDEF];
InversePropertyDef['IFC4'][IFCARBITRARYOPENPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (d: RawLineData) => { new IFC4.IfcArbitraryProfileDefWithVoids(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), new Reference<IFC4.IfcCurve>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcCurve>(p.value))); }
Constructors['IFC4'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4.IfcArbitraryProfileDefWithVoids(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCARBITRARYPROFILEDEFWITHVOIDS] = (i:IFC4.IfcArbitraryProfileDefWithVoids):unknown[] => { return [i.ProfileType, i.ProfileName, i.OuterCurve, i.InnerCurves]; }
InversePropertyDef['IFC4'][IFCARBITRARYPROFILEDEFWITHVOIDS] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCBLOBTEXTURE] = (d: RawLineData) => { new IFC4.IfcBlobTexture(d.ID, new IFC4.IfcBoolean(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4.IfcIdentifier(p.value)), new IFC4.IfcIdentifier(d.arguments[5].value), new IFC4.IfcBinary(d.arguments[6].value)); }
Constructors['IFC4'][IFCBLOBTEXTURE] = (expressID:number, args: any[]) => { return new IFC4.IfcBlobTexture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCBLOBTEXTURE] = (i:IFC4.IfcBlobTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.Mode, i.TextureTransform, i.Parameter, i.RasterFormat, i.RasterCode]; }
InversePropertyDef['IFC4'][IFCBLOBTEXTURE] = [['IsMappedBy',IFCTEXTURECOORDINATE,0,true],['UsedInStyles',IFCSURFACESTYLEWITHTEXTURES,0,true],];
FromRawLineData['IFC4'][IFCCENTERLINEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcCenterLineProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), new Reference<IFC4.IfcBoundedCurve>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCCENTERLINEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcCenterLineProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCENTERLINEPROFILEDEF] = (i:IFC4.IfcCenterLineProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Curve, i.Thickness]; }
InversePropertyDef['IFC4'][IFCCENTERLINEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCCLASSIFICATION] = (d: RawLineData) => { new IFC4.IfcClassification(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcDate(d.arguments[2].value), new IFC4.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcURIReference(d.arguments[5].value), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new IFC4.IfcIdentifier(p.value))); }
Constructors['IFC4'][IFCCLASSIFICATION] = (expressID:number, args: any[]) => { return new IFC4.IfcClassification(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCCLASSIFICATION] = (i:IFC4.IfcClassification):unknown[] => { return [i.Source, i.Edition, i.EditionDate, i.Name, i.Description, i.Location, i.ReferenceTokens]; }
InversePropertyDef['IFC4'][IFCCLASSIFICATION] = [['ClassificationForObjects',IFCRELASSOCIATESCLASSIFICATION,5,true],['HasReferences',IFCCLASSIFICATIONREFERENCE,3,true],];
FromRawLineData['IFC4'][IFCCLASSIFICATIONREFERENCE] = (d: RawLineData) => { new IFC4.IfcClassificationReference(d.ID, !d.arguments[0] ? null :new IFC4.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value)); }
Constructors['IFC4'][IFCCLASSIFICATIONREFERENCE] = (expressID:number, args: any[]) => { return new IFC4.IfcClassificationReference(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCCLASSIFICATIONREFERENCE] = (i:IFC4.IfcClassificationReference):unknown[] => { return [i.Location, i.Identification, i.Name, i.ReferencedSource, i.Description, i.Sort]; }
InversePropertyDef['IFC4'][IFCCLASSIFICATIONREFERENCE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],['ClassificationRefForObjects',IFCRELASSOCIATESCLASSIFICATION,5,true],['HasReferences',IFCCLASSIFICATIONREFERENCE,3,true],];
FromRawLineData['IFC4'][IFCCOLOURRGBLIST] = (d: RawLineData) => { new IFC4.IfcColourRgbList(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcNormalisedRatioMeasure(p.value))); }
Constructors['IFC4'][IFCCOLOURRGBLIST] = (expressID:number, args: any[]) => { return new IFC4.IfcColourRgbList(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCOLOURRGBLIST] = (i:IFC4.IfcColourRgbList):unknown[] => { return [i.ColourList]; }
FromRawLineData['IFC4'][IFCCOLOURSPECIFICATION] = (d: RawLineData) => { new IFC4.IfcColourSpecification(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCCOLOURSPECIFICATION] = (expressID:number, args: any[]) => { return new IFC4.IfcColourSpecification(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCOLOURSPECIFICATION] = (i:IFC4.IfcColourSpecification):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCCOLOURSPECIFICATION] = [IFCCOLOURRGB];
FromRawLineData['IFC4'][IFCCOMPOSITEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcCompositeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcProfileDef>(p.value)), !d.arguments[3] ? null :new IFC4.IfcLabel(d.arguments[3].value)); }
Constructors['IFC4'][IFCCOMPOSITEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcCompositeProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCOMPOSITEPROFILEDEF] = (i:IFC4.IfcCompositeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Profiles, i.Label]; }
InversePropertyDef['IFC4'][IFCCOMPOSITEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCCONNECTEDFACESET] = (d: RawLineData) => { new IFC4.IfcConnectedFaceSet(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcFace>(p.value))); }
Constructors['IFC4'][IFCCONNECTEDFACESET] = (expressID:number, args: any[]) => { return new IFC4.IfcConnectedFaceSet(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCONNECTEDFACESET] = (i:IFC4.IfcConnectedFaceSet):unknown[] => { return [i.CfsFaces]; }
InheritanceDef['IFC4'][IFCCONNECTEDFACESET] = [IFCCLOSEDSHELL,IFCOPENSHELL];
InversePropertyDef['IFC4'][IFCCONNECTEDFACESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCONNECTIONCURVEGEOMETRY] = (d: RawLineData) => { new IFC4.IfcConnectionCurveGeometry(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4'][IFCCONNECTIONCURVEGEOMETRY] = (expressID:number, args: any[]) => { return new IFC4.IfcConnectionCurveGeometry(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCONNECTIONCURVEGEOMETRY] = (i:IFC4.IfcConnectionCurveGeometry):unknown[] => { return [i.CurveOnRelatingElement, i.CurveOnRelatedElement]; }
FromRawLineData['IFC4'][IFCCONNECTIONPOINTECCENTRICITY] = (d: RawLineData) => { new IFC4.IfcConnectionPointEccentricity(d.ID, new Reference(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4'][IFCCONNECTIONPOINTECCENTRICITY] = (expressID:number, args: any[]) => { return new IFC4.IfcConnectionPointEccentricity(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCCONNECTIONPOINTECCENTRICITY] = (i:IFC4.IfcConnectionPointEccentricity):unknown[] => { return [i.PointOnRelatingElement, i.PointOnRelatedElement, i.EccentricityInX, i.EccentricityInY, i.EccentricityInZ]; }
FromRawLineData['IFC4'][IFCCONTEXTDEPENDENTUNIT] = (d: RawLineData) => { new IFC4.IfcContextDependentUnit(d.ID, new Reference<IFC4.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCCONTEXTDEPENDENTUNIT] = (expressID:number, args: any[]) => { return new IFC4.IfcContextDependentUnit(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCCONTEXTDEPENDENTUNIT] = (i:IFC4.IfcContextDependentUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Name]; }
InversePropertyDef['IFC4'][IFCCONTEXTDEPENDENTUNIT] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCCONVERSIONBASEDUNIT] = (d: RawLineData) => { new IFC4.IfcConversionBasedUnit(d.ID, new Reference<IFC4.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], new IFC4.IfcLabel(d.arguments[2].value), new Reference<IFC4.IfcMeasureWithUnit>(d.arguments[3].value)); }
Constructors['IFC4'][IFCCONVERSIONBASEDUNIT] = (expressID:number, args: any[]) => { return new IFC4.IfcConversionBasedUnit(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCONVERSIONBASEDUNIT] = (i:IFC4.IfcConversionBasedUnit):unknown[] => { return [i.Dimensions, i.UnitType, i.Name, i.ConversionFactor]; }
InheritanceDef['IFC4'][IFCCONVERSIONBASEDUNIT] = [IFCCONVERSIONBASEDUNITWITHOFFSET];
InversePropertyDef['IFC4'][IFCCONVERSIONBASEDUNIT] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCCONVERSIONBASEDUNITWITHOFFSET] = (d: RawLineData) => { new IFC4.IfcConversionBasedUnitWithOffset(d.ID, new Reference<IFC4.IfcDimensionalExponents>(d.arguments[0].value), d.arguments[1], new IFC4.IfcLabel(d.arguments[2].value), new Reference<IFC4.IfcMeasureWithUnit>(d.arguments[3].value), new IFC4.IfcReal(d.arguments[4].value)); }
Constructors['IFC4'][IFCCONVERSIONBASEDUNITWITHOFFSET] = (expressID:number, args: any[]) => { return new IFC4.IfcConversionBasedUnitWithOffset(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCCONVERSIONBASEDUNITWITHOFFSET] = (i:IFC4.IfcConversionBasedUnitWithOffset):unknown[] => { return [i.Dimensions, i.UnitType, i.Name, i.ConversionFactor, i.ConversionOffset]; }
InversePropertyDef['IFC4'][IFCCONVERSIONBASEDUNITWITHOFFSET] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCCURRENCYRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcCurrencyRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcMonetaryUnit>(d.arguments[2].value), new Reference<IFC4.IfcMonetaryUnit>(d.arguments[3].value), new IFC4.IfcPositiveRatioMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcLibraryInformation>(d.arguments[6].value)); }
Constructors['IFC4'][IFCCURRENCYRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcCurrencyRelationship(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCCURRENCYRELATIONSHIP] = (i:IFC4.IfcCurrencyRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingMonetaryUnit, i.RelatedMonetaryUnit, i.ExchangeRate, i.RateDateTime, i.RateSource]; }
FromRawLineData['IFC4'][IFCCURVESTYLE] = (d: RawLineData) => { new IFC4.IfcCurveStyle(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC4',d.arguments[2]), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcBoolean(d.arguments[4].value)); }
Constructors['IFC4'][IFCCURVESTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcCurveStyle(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCCURVESTYLE] = (i:IFC4.IfcCurveStyle):unknown[] => { return [i.Name, i.CurveFont, !i.CurveWidth ? null :Labelise(i.CurveWidth), i.CurveColour, i.ModelOrDraughting]; }
FromRawLineData['IFC4'][IFCCURVESTYLEFONT] = (d: RawLineData) => { new IFC4.IfcCurveStyleFont(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcCurveStyleFontPattern>(p.value))); }
Constructors['IFC4'][IFCCURVESTYLEFONT] = (expressID:number, args: any[]) => { return new IFC4.IfcCurveStyleFont(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCURVESTYLEFONT] = (i:IFC4.IfcCurveStyleFont):unknown[] => { return [i.Name, i.PatternList]; }
FromRawLineData['IFC4'][IFCCURVESTYLEFONTANDSCALING] = (d: RawLineData) => { new IFC4.IfcCurveStyleFontAndScaling(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new Reference(d.arguments[1].value), new IFC4.IfcPositiveRatioMeasure(d.arguments[2].value)); }
Constructors['IFC4'][IFCCURVESTYLEFONTANDSCALING] = (expressID:number, args: any[]) => { return new IFC4.IfcCurveStyleFontAndScaling(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCCURVESTYLEFONTANDSCALING] = (i:IFC4.IfcCurveStyleFontAndScaling):unknown[] => { return [i.Name, i.CurveFont, i.CurveFontScaling]; }
FromRawLineData['IFC4'][IFCCURVESTYLEFONTPATTERN] = (d: RawLineData) => { new IFC4.IfcCurveStyleFontPattern(d.ID, new IFC4.IfcLengthMeasure(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4'][IFCCURVESTYLEFONTPATTERN] = (expressID:number, args: any[]) => { return new IFC4.IfcCurveStyleFontPattern(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCURVESTYLEFONTPATTERN] = (i:IFC4.IfcCurveStyleFontPattern):unknown[] => { return [i.VisibleSegmentLength, i.InvisibleSegmentLength]; }
FromRawLineData['IFC4'][IFCDERIVEDPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcDerivedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), new Reference<IFC4.IfcProfileDef>(d.arguments[2].value), new Reference<IFC4.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCDERIVEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcDerivedProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCDERIVEDPROFILEDEF] = (i:IFC4.IfcDerivedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.ParentProfile, i.Operator, i.Label]; }
InheritanceDef['IFC4'][IFCDERIVEDPROFILEDEF] = [IFCMIRROREDPROFILEDEF];
InversePropertyDef['IFC4'][IFCDERIVEDPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCDOCUMENTINFORMATION] = (d: RawLineData) => { new IFC4.IfcDocumentInformation(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcText(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcURIReference(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcText(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new Reference(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference(p.value)), !d.arguments[10] ? null :new IFC4.IfcDateTime(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcDateTime(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcIdentifier(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcDate(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcDate(d.arguments[14].value), d.arguments[15], d.arguments[16]); }
Constructors['IFC4'][IFCDOCUMENTINFORMATION] = (expressID:number, args: any[]) => { return new IFC4.IfcDocumentInformation(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC4'][IFCDOCUMENTINFORMATION] = (i:IFC4.IfcDocumentInformation):unknown[] => { return [i.Identification, i.Name, i.Description, i.Location, i.Purpose, i.IntendedUse, i.Scope, i.Revision, i.DocumentOwner, i.Editors, i.CreationTime, i.LastRevisionTime, i.ElectronicFormat, i.ValidFrom, i.ValidUntil, i.Confidentiality, i.Status]; }
InversePropertyDef['IFC4'][IFCDOCUMENTINFORMATION] = [['DocumentInfoForObjects',IFCRELASSOCIATESDOCUMENT,5,true],['HasDocumentReferences',IFCDOCUMENTREFERENCE,4,true],['IsPointedTo',IFCDOCUMENTINFORMATIONRELATIONSHIP,3,true],['IsPointer',IFCDOCUMENTINFORMATIONRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcDocumentInformationRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcDocumentInformation>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcDocumentInformation>(p.value)), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcDocumentInformationRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCDOCUMENTINFORMATIONRELATIONSHIP] = (i:IFC4.IfcDocumentInformationRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingDocument, i.RelatedDocuments, i.RelationshipType]; }
FromRawLineData['IFC4'][IFCDOCUMENTREFERENCE] = (d: RawLineData) => { new IFC4.IfcDocumentReference(d.ID, !d.arguments[0] ? null :new IFC4.IfcURIReference(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcIdentifier(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4.IfcDocumentInformation>(d.arguments[4].value)); }
Constructors['IFC4'][IFCDOCUMENTREFERENCE] = (expressID:number, args: any[]) => { return new IFC4.IfcDocumentReference(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCDOCUMENTREFERENCE] = (i:IFC4.IfcDocumentReference):unknown[] => { return [i.Location, i.Identification, i.Name, i.Description, i.ReferencedDocument]; }
InversePropertyDef['IFC4'][IFCDOCUMENTREFERENCE] = [['ExternalReferenceForResources',IFCEXTERNALREFERENCERELATIONSHIP,2,true],['DocumentRefForObjects',IFCRELASSOCIATESDOCUMENT,5,true],];
FromRawLineData['IFC4'][IFCEDGE] = (d: RawLineData) => { new IFC4.IfcEdge(d.ID, new Reference<IFC4.IfcVertex>(d.arguments[0].value), new Reference<IFC4.IfcVertex>(d.arguments[1].value)); }
Constructors['IFC4'][IFCEDGE] = (expressID:number, args: any[]) => { return new IFC4.IfcEdge(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCEDGE] = (i:IFC4.IfcEdge):unknown[] => { return [i.EdgeStart, i.EdgeEnd]; }
InheritanceDef['IFC4'][IFCEDGE] = [IFCSUBEDGE,IFCORIENTEDEDGE,IFCEDGECURVE];
InversePropertyDef['IFC4'][IFCEDGE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCEDGECURVE] = (d: RawLineData) => { new IFC4.IfcEdgeCurve(d.ID, new Reference<IFC4.IfcVertex>(d.arguments[0].value), new Reference<IFC4.IfcVertex>(d.arguments[1].value), new Reference<IFC4.IfcCurve>(d.arguments[2].value), new IFC4.IfcBoolean(d.arguments[3].value)); }
Constructors['IFC4'][IFCEDGECURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcEdgeCurve(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCEDGECURVE] = (i:IFC4.IfcEdgeCurve):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.EdgeGeometry, i.SameSense]; }
InversePropertyDef['IFC4'][IFCEDGECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCEVENTTIME] = (d: RawLineData) => { new IFC4.IfcEventTime(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcDateTime(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcDateTime(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcDateTime(d.arguments[6].value)); }
Constructors['IFC4'][IFCEVENTTIME] = (expressID:number, args: any[]) => { return new IFC4.IfcEventTime(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCEVENTTIME] = (i:IFC4.IfcEventTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.ActualDate, i.EarlyDate, i.LateDate, i.ScheduleDate]; }
FromRawLineData['IFC4'][IFCEXTENDEDPROPERTIES] = (d: RawLineData) => { new IFC4.IfcExtendedProperties(d.ID, !d.arguments[0] ? null :new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcProperty>(p.value))); }
Constructors['IFC4'][IFCEXTENDEDPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcExtendedProperties(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCEXTENDEDPROPERTIES] = (i:IFC4.IfcExtendedProperties):unknown[] => { return [i.Name, i.Description, i.Properties]; }
InheritanceDef['IFC4'][IFCEXTENDEDPROPERTIES] = [IFCPROFILEPROPERTIES,IFCMATERIALPROPERTIES];
InversePropertyDef['IFC4'][IFCEXTENDEDPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCEXTERNALREFERENCERELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcExternalReferenceRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcExternalReference>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCEXTERNALREFERENCERELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcExternalReferenceRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCEXTERNALREFERENCERELATIONSHIP] = (i:IFC4.IfcExternalReferenceRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingReference, i.RelatedResourceObjects]; }
FromRawLineData['IFC4'][IFCFACE] = (d: RawLineData) => { new IFC4.IfcFace(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcFaceBound>(p.value))); }
Constructors['IFC4'][IFCFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcFace(expressID, args[0]); }
ToRawLineData['IFC4'][IFCFACE] = (i:IFC4.IfcFace):unknown[] => { return [i.Bounds]; }
InheritanceDef['IFC4'][IFCFACE] = [IFCADVANCEDFACE,IFCFACESURFACE];
InversePropertyDef['IFC4'][IFCFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasTextureMaps',IFCTEXTUREMAP,2,true],];
FromRawLineData['IFC4'][IFCFACEBOUND] = (d: RawLineData) => { new IFC4.IfcFaceBound(d.ID, new Reference<IFC4.IfcLoop>(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4'][IFCFACEBOUND] = (expressID:number, args: any[]) => { return new IFC4.IfcFaceBound(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCFACEBOUND] = (i:IFC4.IfcFaceBound):unknown[] => { return [i.Bound, i.Orientation]; }
InheritanceDef['IFC4'][IFCFACEBOUND] = [IFCFACEOUTERBOUND];
InversePropertyDef['IFC4'][IFCFACEBOUND] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFACEOUTERBOUND] = (d: RawLineData) => { new IFC4.IfcFaceOuterBound(d.ID, new Reference<IFC4.IfcLoop>(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4'][IFCFACEOUTERBOUND] = (expressID:number, args: any[]) => { return new IFC4.IfcFaceOuterBound(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCFACEOUTERBOUND] = (i:IFC4.IfcFaceOuterBound):unknown[] => { return [i.Bound, i.Orientation]; }
InversePropertyDef['IFC4'][IFCFACEOUTERBOUND] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFACESURFACE] = (d: RawLineData) => { new IFC4.IfcFaceSurface(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcFaceBound>(p.value)), new Reference<IFC4.IfcSurface>(d.arguments[1].value), new IFC4.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4'][IFCFACESURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcFaceSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCFACESURFACE] = (i:IFC4.IfcFaceSurface):unknown[] => { return [i.Bounds, i.FaceSurface, i.SameSense]; }
InheritanceDef['IFC4'][IFCFACESURFACE] = [IFCADVANCEDFACE];
InversePropertyDef['IFC4'][IFCFACESURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasTextureMaps',IFCTEXTUREMAP,2,true],];
FromRawLineData['IFC4'][IFCFAILURECONNECTIONCONDITION] = (d: RawLineData) => { new IFC4.IfcFailureConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcForceMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcForceMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcForceMeasure(d.arguments[6].value)); }
Constructors['IFC4'][IFCFAILURECONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC4.IfcFailureConnectionCondition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCFAILURECONNECTIONCONDITION] = (i:IFC4.IfcFailureConnectionCondition):unknown[] => { return [i.Name, i.TensionFailureX, i.TensionFailureY, i.TensionFailureZ, i.CompressionFailureX, i.CompressionFailureY, i.CompressionFailureZ]; }
FromRawLineData['IFC4'][IFCFILLAREASTYLE] = (d: RawLineData) => { new IFC4.IfcFillAreaStyle(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value)), !d.arguments[2] ? null :new IFC4.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4'][IFCFILLAREASTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcFillAreaStyle(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCFILLAREASTYLE] = (i:IFC4.IfcFillAreaStyle):unknown[] => { return [i.Name, i.FillStyles, i.ModelorDraughting]; }
FromRawLineData['IFC4'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (d: RawLineData) => { new IFC4.IfcGeometricRepresentationContext(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), new IFC4.IfcDimensionCount(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcReal(d.arguments[3].value), new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcDirection>(d.arguments[5].value)); }
Constructors['IFC4'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (expressID:number, args: any[]) => { return new IFC4.IfcGeometricRepresentationContext(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCGEOMETRICREPRESENTATIONCONTEXT] = (i:IFC4.IfcGeometricRepresentationContext):unknown[] => { return [i.ContextIdentifier, i.ContextType, i.CoordinateSpaceDimension, i.Precision, i.WorldCoordinateSystem, i.TrueNorth]; }
InheritanceDef['IFC4'][IFCGEOMETRICREPRESENTATIONCONTEXT] = [IFCGEOMETRICREPRESENTATIONSUBCONTEXT];
InversePropertyDef['IFC4'][IFCGEOMETRICREPRESENTATIONCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],['HasSubContexts',IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],['HasCoordinateOperation',IFCCOORDINATEOPERATION,0,true],];
FromRawLineData['IFC4'][IFCGEOMETRICREPRESENTATIONITEM] = (d: RawLineData) => { new IFC4.IfcGeometricRepresentationItem(d.ID, ); }
Constructors['IFC4'][IFCGEOMETRICREPRESENTATIONITEM] = (expressID:number, _:any) => { return new IFC4.IfcGeometricRepresentationItem(expressID, ); }
ToRawLineData['IFC4'][IFCGEOMETRICREPRESENTATIONITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCGEOMETRICREPRESENTATIONITEM] = [IFCFILLAREASTYLETILES,IFCFILLAREASTYLEHATCHING,IFCFACEBASEDSURFACEMODEL,IFCDIRECTION,IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFCINDEXEDPOLYCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCSEAMCURVE,IFCINTERSECTIONCURVE,IFCSURFACECURVE,IFCPCURVE,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCLINE,IFCCURVE,IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID,IFCCSGPRIMITIVE3D,IFCREPARAMETRISEDCOMPOSITECURVESEGMENT,IFCCOMPOSITECURVESEGMENT,IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D,IFCCARTESIANTRANSFORMATIONOPERATOR,IFCCARTESIANPOINTLIST3D,IFCCARTESIANPOINTLIST2D,IFCCARTESIANPOINTLIST,IFCBOUNDINGBOX,IFCBOOLEANCLIPPINGRESULT,IFCBOOLEANRESULT,IFCANNOTATIONFILLAREA,IFCVECTOR,IFCTEXTLITERALWITHEXTENT,IFCTEXTLITERAL,IFCPOLYGONALFACESET,IFCTRIANGULATEDFACESET,IFCTESSELLATEDFACESET,IFCINDEXEDPOLYGONALFACEWITHVOIDS,IFCINDEXEDPOLYGONALFACE,IFCTESSELLATEDITEM,IFCCYLINDRICALSURFACE,IFCTOROIDALSURFACE,IFCSPHERICALSURFACE,IFCPLANE,IFCELEMENTARYSURFACE,IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE,IFCSURFACE,IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLIDPOLYGONAL,IFCSWEPTDISKSOLID,IFCSURFACECURVESWEPTAREASOLID,IFCREVOLVEDAREASOLIDTAPERED,IFCREVOLVEDAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED,IFCEXTRUDEDAREASOLID,IFCSWEPTAREASOLID,IFCSOLIDMODEL,IFCSHELLBASEDSURFACEMODEL,IFCSECTIONEDSPINE,IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE,IFCPOINT,IFCPLANARBOX,IFCPLANAREXTENT,IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT,IFCPLACEMENT,IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT,IFCLIGHTSOURCE,IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE,IFCHALFSPACESOLID,IFCGEOMETRICCURVESET,IFCGEOMETRICSET];
InversePropertyDef['IFC4'][IFCGEOMETRICREPRESENTATIONITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (d: RawLineData) => { new IFC4.IfcGeometricRepresentationSubContext(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), new Reference<IFC4.IfcGeometricRepresentationContext>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcPositiveRatioMeasure(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value)); }
Constructors['IFC4'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (expressID:number, args: any[]) => { return new IFC4.IfcGeometricRepresentationSubContext(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = (i:IFC4.IfcGeometricRepresentationSubContext):unknown[] => { return [i.ContextIdentifier, i.ContextType, i.CoordinateSpaceDimension, i.Precision, i.WorldCoordinateSystem, i.TrueNorth, i.ParentContext, i.TargetScale, i.TargetView, i.UserDefinedTargetView]; }
InversePropertyDef['IFC4'][IFCGEOMETRICREPRESENTATIONSUBCONTEXT] = [['RepresentationsInContext',IFCREPRESENTATION,0,true],['HasSubContexts',IFCGEOMETRICREPRESENTATIONSUBCONTEXT,6,true],['HasCoordinateOperation',IFCCOORDINATEOPERATION,0,true],];
FromRawLineData['IFC4'][IFCGEOMETRICSET] = (d: RawLineData) => { new IFC4.IfcGeometricSet(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCGEOMETRICSET] = (expressID:number, args: any[]) => { return new IFC4.IfcGeometricSet(expressID, args[0]); }
ToRawLineData['IFC4'][IFCGEOMETRICSET] = (i:IFC4.IfcGeometricSet):unknown[] => { return [i.Elements]; }
InheritanceDef['IFC4'][IFCGEOMETRICSET] = [IFCGEOMETRICCURVESET];
InversePropertyDef['IFC4'][IFCGEOMETRICSET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCGRIDPLACEMENT] = (d: RawLineData) => { new IFC4.IfcGridPlacement(d.ID, new Reference<IFC4.IfcVirtualGridIntersection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference(d.arguments[1].value)); }
Constructors['IFC4'][IFCGRIDPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcGridPlacement(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCGRIDPLACEMENT] = (i:IFC4.IfcGridPlacement):unknown[] => { return [i.PlacementLocation, i.PlacementRefDirection]; }
InversePropertyDef['IFC4'][IFCGRIDPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCLOCALPLACEMENT,0,true],];
FromRawLineData['IFC4'][IFCHALFSPACESOLID] = (d: RawLineData) => { new IFC4.IfcHalfSpaceSolid(d.ID, new Reference<IFC4.IfcSurface>(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4'][IFCHALFSPACESOLID] = (expressID:number, args: any[]) => { return new IFC4.IfcHalfSpaceSolid(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCHALFSPACESOLID] = (i:IFC4.IfcHalfSpaceSolid):unknown[] => { return [i.BaseSurface, i.AgreementFlag]; }
InheritanceDef['IFC4'][IFCHALFSPACESOLID] = [IFCBOXEDHALFSPACE,IFCPOLYGONALBOUNDEDHALFSPACE];
InversePropertyDef['IFC4'][IFCHALFSPACESOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCIMAGETEXTURE] = (d: RawLineData) => { new IFC4.IfcImageTexture(d.ID, new IFC4.IfcBoolean(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4.IfcIdentifier(p.value)), new IFC4.IfcURIReference(d.arguments[5].value)); }
Constructors['IFC4'][IFCIMAGETEXTURE] = (expressID:number, args: any[]) => { return new IFC4.IfcImageTexture(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCIMAGETEXTURE] = (i:IFC4.IfcImageTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.Mode, i.TextureTransform, i.Parameter, i.URLReference]; }
InversePropertyDef['IFC4'][IFCIMAGETEXTURE] = [['IsMappedBy',IFCTEXTURECOORDINATE,0,true],['UsedInStyles',IFCSURFACESTYLEWITHTEXTURES,0,true],];
FromRawLineData['IFC4'][IFCINDEXEDCOLOURMAP] = (d: RawLineData) => { new IFC4.IfcIndexedColourMap(d.ID, new Reference<IFC4.IfcTessellatedFaceSet>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[1].value), new Reference<IFC4.IfcColourRgbList>(d.arguments[2].value), d.arguments[3].map((p:any) => new IFC4.IfcPositiveInteger(p.value))); }
Constructors['IFC4'][IFCINDEXEDCOLOURMAP] = (expressID:number, args: any[]) => { return new IFC4.IfcIndexedColourMap(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCINDEXEDCOLOURMAP] = (i:IFC4.IfcIndexedColourMap):unknown[] => { return [i.MappedTo, i.Opacity, i.Colours, i.ColourIndex]; }
FromRawLineData['IFC4'][IFCINDEXEDTEXTUREMAP] = (d: RawLineData) => { new IFC4.IfcIndexedTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcSurfaceTexture>(p.value)), new Reference<IFC4.IfcTessellatedFaceSet>(d.arguments[1].value), new Reference<IFC4.IfcTextureVertexList>(d.arguments[2].value)); }
Constructors['IFC4'][IFCINDEXEDTEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC4.IfcIndexedTextureMap(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCINDEXEDTEXTUREMAP] = (i:IFC4.IfcIndexedTextureMap):unknown[] => { return [i.Maps, i.MappedTo, i.TexCoords]; }
InheritanceDef['IFC4'][IFCINDEXEDTEXTUREMAP] = [IFCINDEXEDTRIANGLETEXTUREMAP];
FromRawLineData['IFC4'][IFCINDEXEDTRIANGLETEXTUREMAP] = (d: RawLineData) => { new IFC4.IfcIndexedTriangleTextureMap(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcSurfaceTexture>(p.value)), new Reference<IFC4.IfcTessellatedFaceSet>(d.arguments[1].value), new Reference<IFC4.IfcTextureVertexList>(d.arguments[2].value), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4.IfcPositiveInteger(p.value))); }
Constructors['IFC4'][IFCINDEXEDTRIANGLETEXTUREMAP] = (expressID:number, args: any[]) => { return new IFC4.IfcIndexedTriangleTextureMap(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCINDEXEDTRIANGLETEXTUREMAP] = (i:IFC4.IfcIndexedTriangleTextureMap):unknown[] => { return [i.Maps, i.MappedTo, i.TexCoords, i.TexCoordIndex]; }
FromRawLineData['IFC4'][IFCIRREGULARTIMESERIES] = (d: RawLineData) => { new IFC4.IfcIrregularTimeSeries(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new IFC4.IfcDateTime(d.arguments[2].value), new IFC4.IfcDateTime(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), d.arguments[8].map((p:any) => new Reference<IFC4.IfcIrregularTimeSeriesValue>(p.value))); }
Constructors['IFC4'][IFCIRREGULARTIMESERIES] = (expressID:number, args: any[]) => { return new IFC4.IfcIrregularTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCIRREGULARTIMESERIES] = (i:IFC4.IfcIrregularTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit, i.Values]; }
InversePropertyDef['IFC4'][IFCIRREGULARTIMESERIES] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCLAGTIME] = (d: RawLineData) => { new IFC4.IfcLagTime(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), TypeInitialiser('IFC4',d.arguments[3]), d.arguments[4]); }
Constructors['IFC4'][IFCLAGTIME] = (expressID:number, args: any[]) => { return new IFC4.IfcLagTime(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCLAGTIME] = (i:IFC4.IfcLagTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, Labelise(i.LagValue), i.DurationType]; }
FromRawLineData['IFC4'][IFCLIGHTSOURCE] = (d: RawLineData) => { new IFC4.IfcLightSource(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new Reference<IFC4.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCLIGHTSOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcLightSource(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCLIGHTSOURCE] = (i:IFC4.IfcLightSource):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity]; }
InheritanceDef['IFC4'][IFCLIGHTSOURCE] = [IFCLIGHTSOURCESPOT,IFCLIGHTSOURCEPOSITIONAL,IFCLIGHTSOURCEGONIOMETRIC,IFCLIGHTSOURCEDIRECTIONAL,IFCLIGHTSOURCEAMBIENT];
InversePropertyDef['IFC4'][IFCLIGHTSOURCE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCLIGHTSOURCEAMBIENT] = (d: RawLineData) => { new IFC4.IfcLightSourceAmbient(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new Reference<IFC4.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCLIGHTSOURCEAMBIENT] = (expressID:number, args: any[]) => { return new IFC4.IfcLightSourceAmbient(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCLIGHTSOURCEAMBIENT] = (i:IFC4.IfcLightSourceAmbient):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity]; }
InversePropertyDef['IFC4'][IFCLIGHTSOURCEAMBIENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCLIGHTSOURCEDIRECTIONAL] = (d: RawLineData) => { new IFC4.IfcLightSourceDirectional(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new Reference<IFC4.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC4.IfcDirection>(d.arguments[4].value)); }
Constructors['IFC4'][IFCLIGHTSOURCEDIRECTIONAL] = (expressID:number, args: any[]) => { return new IFC4.IfcLightSourceDirectional(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCLIGHTSOURCEDIRECTIONAL] = (i:IFC4.IfcLightSourceDirectional):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Orientation]; }
InversePropertyDef['IFC4'][IFCLIGHTSOURCEDIRECTIONAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCLIGHTSOURCEGONIOMETRIC] = (d: RawLineData) => { new IFC4.IfcLightSourceGoniometric(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new Reference<IFC4.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcColourRgb>(d.arguments[5].value), new IFC4.IfcThermodynamicTemperatureMeasure(d.arguments[6].value), new IFC4.IfcLuminousFluxMeasure(d.arguments[7].value), d.arguments[8], new Reference(d.arguments[9].value)); }
Constructors['IFC4'][IFCLIGHTSOURCEGONIOMETRIC] = (expressID:number, args: any[]) => { return new IFC4.IfcLightSourceGoniometric(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCLIGHTSOURCEGONIOMETRIC] = (i:IFC4.IfcLightSourceGoniometric):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.ColourAppearance, i.ColourTemperature, i.LuminousFlux, i.LightEmissionSource, i.LightDistributionDataSource]; }
InversePropertyDef['IFC4'][IFCLIGHTSOURCEGONIOMETRIC] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCLIGHTSOURCEPOSITIONAL] = (d: RawLineData) => { new IFC4.IfcLightSourcePositional(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new Reference<IFC4.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC4.IfcCartesianPoint>(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcReal(d.arguments[6].value), new IFC4.IfcReal(d.arguments[7].value), new IFC4.IfcReal(d.arguments[8].value)); }
Constructors['IFC4'][IFCLIGHTSOURCEPOSITIONAL] = (expressID:number, args: any[]) => { return new IFC4.IfcLightSourcePositional(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCLIGHTSOURCEPOSITIONAL] = (i:IFC4.IfcLightSourcePositional):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.Radius, i.ConstantAttenuation, i.DistanceAttenuation, i.QuadricAttenuation]; }
InheritanceDef['IFC4'][IFCLIGHTSOURCEPOSITIONAL] = [IFCLIGHTSOURCESPOT];
InversePropertyDef['IFC4'][IFCLIGHTSOURCEPOSITIONAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCLIGHTSOURCESPOT] = (d: RawLineData) => { new IFC4.IfcLightSourceSpot(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new Reference<IFC4.IfcColourRgb>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[3].value), new Reference<IFC4.IfcCartesianPoint>(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcReal(d.arguments[6].value), new IFC4.IfcReal(d.arguments[7].value), new IFC4.IfcReal(d.arguments[8].value), new Reference<IFC4.IfcDirection>(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcReal(d.arguments[10].value), new IFC4.IfcPositivePlaneAngleMeasure(d.arguments[11].value), new IFC4.IfcPositivePlaneAngleMeasure(d.arguments[12].value)); }
Constructors['IFC4'][IFCLIGHTSOURCESPOT] = (expressID:number, args: any[]) => { return new IFC4.IfcLightSourceSpot(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCLIGHTSOURCESPOT] = (i:IFC4.IfcLightSourceSpot):unknown[] => { return [i.Name, i.LightColour, i.AmbientIntensity, i.Intensity, i.Position, i.Radius, i.ConstantAttenuation, i.DistanceAttenuation, i.QuadricAttenuation, i.Orientation, i.ConcentrationExponent, i.SpreadAngle, i.BeamWidthAngle]; }
InversePropertyDef['IFC4'][IFCLIGHTSOURCESPOT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCLOCALPLACEMENT] = (d: RawLineData) => { new IFC4.IfcLocalPlacement(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[0].value), new Reference(d.arguments[1].value)); }
Constructors['IFC4'][IFCLOCALPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcLocalPlacement(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCLOCALPLACEMENT] = (i:IFC4.IfcLocalPlacement):unknown[] => { return [i.PlacementRelTo, i.RelativePlacement]; }
InversePropertyDef['IFC4'][IFCLOCALPLACEMENT] = [['PlacesObject',IFCPRODUCT,5,true],['ReferencedByPlacements',IFCLOCALPLACEMENT,0,true],];
FromRawLineData['IFC4'][IFCLOOP] = (d: RawLineData) => { new IFC4.IfcLoop(d.ID, ); }
Constructors['IFC4'][IFCLOOP] = (expressID:number, _:any) => { return new IFC4.IfcLoop(expressID, ); }
ToRawLineData['IFC4'][IFCLOOP] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCLOOP] = [IFCEDGELOOP,IFCVERTEXLOOP,IFCPOLYLOOP];
InversePropertyDef['IFC4'][IFCLOOP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCMAPPEDITEM] = (d: RawLineData) => { new IFC4.IfcMappedItem(d.ID, new Reference<IFC4.IfcRepresentationMap>(d.arguments[0].value), new Reference<IFC4.IfcCartesianTransformationOperator>(d.arguments[1].value)); }
Constructors['IFC4'][IFCMAPPEDITEM] = (expressID:number, args: any[]) => { return new IFC4.IfcMappedItem(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCMAPPEDITEM] = (i:IFC4.IfcMappedItem):unknown[] => { return [i.MappingSource, i.MappingTarget]; }
InversePropertyDef['IFC4'][IFCMAPPEDITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCMATERIAL] = (d: RawLineData) => { new IFC4.IfcMaterial(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value)); }
Constructors['IFC4'][IFCMATERIAL] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterial(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCMATERIAL] = (i:IFC4.IfcMaterial):unknown[] => { return [i.Name, i.Description, i.Category]; }
InversePropertyDef['IFC4'][IFCMATERIAL] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['HasRepresentation',IFCMATERIALDEFINITIONREPRESENTATION,3,true],['IsRelatedWith',IFCMATERIALRELATIONSHIP,3,true],['RelatesTo',IFCMATERIALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCMATERIALCONSTITUENT] = (d: RawLineData) => { new IFC4.IfcMaterialConstituent(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcMaterial>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCMATERIALCONSTITUENT] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialConstituent(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCMATERIALCONSTITUENT] = (i:IFC4.IfcMaterialConstituent):unknown[] => { return [i.Name, i.Description, i.Material, i.Fraction, i.Category]; }
InversePropertyDef['IFC4'][IFCMATERIALCONSTITUENT] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],['ToMaterialConstituentSet',IFCMATERIALCONSTITUENTSET,2,false],];
FromRawLineData['IFC4'][IFCMATERIALCONSTITUENTSET] = (d: RawLineData) => { new IFC4.IfcMaterialConstituentSet(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => new Reference<IFC4.IfcMaterialConstituent>(p.value))); }
Constructors['IFC4'][IFCMATERIALCONSTITUENTSET] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialConstituentSet(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCMATERIALCONSTITUENTSET] = (i:IFC4.IfcMaterialConstituentSet):unknown[] => { return [i.Name, i.Description, i.MaterialConstituents]; }
InversePropertyDef['IFC4'][IFCMATERIALCONSTITUENTSET] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCMATERIALPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCMATERIALDEFINITIONREPRESENTATION] = (d: RawLineData) => { new IFC4.IfcMaterialDefinitionRepresentation(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcRepresentation>(p.value)), new Reference<IFC4.IfcMaterial>(d.arguments[3].value)); }
Constructors['IFC4'][IFCMATERIALDEFINITIONREPRESENTATION] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialDefinitionRepresentation(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCMATERIALDEFINITIONREPRESENTATION] = (i:IFC4.IfcMaterialDefinitionRepresentation):unknown[] => { return [i.Name, i.Description, i.Representations, i.RepresentedMaterial]; }
FromRawLineData['IFC4'][IFCMATERIALLAYERSETUSAGE] = (d: RawLineData) => { new IFC4.IfcMaterialLayerSetUsage(d.ID, new Reference<IFC4.IfcMaterialLayerSet>(d.arguments[0].value), d.arguments[1], d.arguments[2], new IFC4.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4'][IFCMATERIALLAYERSETUSAGE] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialLayerSetUsage(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCMATERIALLAYERSETUSAGE] = (i:IFC4.IfcMaterialLayerSetUsage):unknown[] => { return [i.ForLayerSet, i.LayerSetDirection, i.DirectionSense, i.OffsetFromReferenceLine, i.ReferenceExtent]; }
InversePropertyDef['IFC4'][IFCMATERIALLAYERSETUSAGE] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],];
FromRawLineData['IFC4'][IFCMATERIALPROFILESETUSAGE] = (d: RawLineData) => { new IFC4.IfcMaterialProfileSetUsage(d.ID, new Reference<IFC4.IfcMaterialProfileSet>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcCardinalPointReference(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4'][IFCMATERIALPROFILESETUSAGE] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialProfileSetUsage(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCMATERIALPROFILESETUSAGE] = (i:IFC4.IfcMaterialProfileSetUsage):unknown[] => { return [i.ForProfileSet, i.CardinalPoint, i.ReferenceExtent]; }
InheritanceDef['IFC4'][IFCMATERIALPROFILESETUSAGE] = [IFCMATERIALPROFILESETUSAGETAPERING];
InversePropertyDef['IFC4'][IFCMATERIALPROFILESETUSAGE] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],];
FromRawLineData['IFC4'][IFCMATERIALPROFILESETUSAGETAPERING] = (d: RawLineData) => { new IFC4.IfcMaterialProfileSetUsageTapering(d.ID, new Reference<IFC4.IfcMaterialProfileSet>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcCardinalPointReference(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value), new Reference<IFC4.IfcMaterialProfileSet>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcCardinalPointReference(d.arguments[4].value)); }
Constructors['IFC4'][IFCMATERIALPROFILESETUSAGETAPERING] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialProfileSetUsageTapering(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCMATERIALPROFILESETUSAGETAPERING] = (i:IFC4.IfcMaterialProfileSetUsageTapering):unknown[] => { return [i.ForProfileSet, i.CardinalPoint, i.ReferenceExtent, i.ForProfileEndSet, i.CardinalEndPoint]; }
InversePropertyDef['IFC4'][IFCMATERIALPROFILESETUSAGETAPERING] = [['AssociatedTo',IFCRELASSOCIATESMATERIAL,5,true],];
FromRawLineData['IFC4'][IFCMATERIALPROPERTIES] = (d: RawLineData) => { new IFC4.IfcMaterialProperties(d.ID, !d.arguments[0] ? null :new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcProperty>(p.value)), new Reference<IFC4.IfcMaterialDefinition>(d.arguments[3].value)); }
Constructors['IFC4'][IFCMATERIALPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialProperties(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCMATERIALPROPERTIES] = (i:IFC4.IfcMaterialProperties):unknown[] => { return [i.Name, i.Description, i.Properties, i.Material]; }
InversePropertyDef['IFC4'][IFCMATERIALPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCMATERIALRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcMaterialRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcMaterial>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcMaterial>(p.value)), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCMATERIALRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcMaterialRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCMATERIALRELATIONSHIP] = (i:IFC4.IfcMaterialRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingMaterial, i.RelatedMaterials, i.Expression]; }
FromRawLineData['IFC4'][IFCMIRROREDPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcMirroredProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), new Reference<IFC4.IfcProfileDef>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLabel(d.arguments[3].value)); }
Constructors['IFC4'][IFCMIRROREDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcMirroredProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCMIRROREDPROFILEDEF] = (i:IFC4.IfcMirroredProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.ParentProfile, i.Operator, i.Label]; }
InversePropertyDef['IFC4'][IFCMIRROREDPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCOBJECTDEFINITION] = (d: RawLineData) => { new IFC4.IfcObjectDefinition(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCOBJECTDEFINITION] = (expressID:number, args: any[]) => { return new IFC4.IfcObjectDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCOBJECTDEFINITION] = (i:IFC4.IfcObjectDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCOBJECTDEFINITION] = [IFCASSET,IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILDINGSYSTEM,IFCZONE,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCWORKCALENDAR,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCDISTRIBUTIONPORT,IFCPORT,IFCGRID,IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSANITARYTERMINAL,IFCOUTLET,IFCMEDICALDEVICE,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBEAMSTANDARDCASE,IFCBEAM,IFCWINDOWSTANDARDCASE,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALLELEMENTEDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLABSTANDARDCASE,IFCSLABELEMENTEDCASE,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATESTANDARDCASE,IFCPLATE,IFCPILE,IFCMEMBERSTANDARDCASE,IFCMEMBER,IFCFOOTING,IFCDOORSTANDARDCASE,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMNSTANDARDCASE,IFCCOLUMN,IFCCHIMNEY,IFCBUILDINGELEMENTPROXY,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCVOIDINGFEATURE,IFCOPENINGSTANDARDCASE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALELEMENT,IFCPROXY,IFCPRODUCT,IFCPROCEDURE,IFCEVENT,IFCTASK,IFCPROCESS,IFCOBJECT,IFCPROJECTLIBRARY,IFCPROJECT,IFCCONTEXT,IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE,IFCCONSTRUCTIONRESOURCETYPE,IFCTYPERESOURCE,IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALELEMENTTYPE,IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMEDICALDEVICETYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCPILETYPE,IFCMEMBERTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCDOORSTYLE,IFCWINDOWSTYLE,IFCTYPEPRODUCT,IFCTASKTYPE,IFCPROCEDURETYPE,IFCEVENTTYPE,IFCTYPEPROCESS,IFCTYPEOBJECT];
InversePropertyDef['IFC4'][IFCOBJECTDEFINITION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],];
FromRawLineData['IFC4'][IFCOPENSHELL] = (d: RawLineData) => { new IFC4.IfcOpenShell(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcFace>(p.value))); }
Constructors['IFC4'][IFCOPENSHELL] = (expressID:number, args: any[]) => { return new IFC4.IfcOpenShell(expressID, args[0]); }
ToRawLineData['IFC4'][IFCOPENSHELL] = (i:IFC4.IfcOpenShell):unknown[] => { return [i.CfsFaces]; }
InversePropertyDef['IFC4'][IFCOPENSHELL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCORGANIZATIONRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcOrganizationRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcOrganization>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcOrganization>(p.value))); }
Constructors['IFC4'][IFCORGANIZATIONRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcOrganizationRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCORGANIZATIONRELATIONSHIP] = (i:IFC4.IfcOrganizationRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingOrganization, i.RelatedOrganizations]; }
FromRawLineData['IFC4'][IFCORIENTEDEDGE] = (d: RawLineData) => { new IFC4.IfcOrientedEdge(d.ID, new Reference<IFC4.IfcEdge>(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value)); }
Constructors['IFC4'][IFCORIENTEDEDGE] = (expressID:number, args: any[]) => { return new IFC4.IfcOrientedEdge(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCORIENTEDEDGE] = (i:IFC4.IfcOrientedEdge):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.EdgeElement, i.Orientation]; }
InversePropertyDef['IFC4'][IFCORIENTEDEDGE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPARAMETERIZEDPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcParameterizedProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value)); }
Constructors['IFC4'][IFCPARAMETERIZEDPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcParameterizedProfileDef(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCPARAMETERIZEDPROFILEDEF] = (i:IFC4.IfcParameterizedProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position]; }
InheritanceDef['IFC4'][IFCPARAMETERIZEDPROFILEDEF] = [IFCLSHAPEPROFILEDEF,IFCISHAPEPROFILEDEF,IFCELLIPSEPROFILEDEF,IFCCIRCLEHOLLOWPROFILEDEF,IFCCIRCLEPROFILEDEF,IFCCSHAPEPROFILEDEF,IFCASYMMETRICISHAPEPROFILEDEF,IFCZSHAPEPROFILEDEF,IFCUSHAPEPROFILEDEF,IFCTRAPEZIUMPROFILEDEF,IFCTSHAPEPROFILEDEF,IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF,IFCRECTANGLEPROFILEDEF];
InversePropertyDef['IFC4'][IFCPARAMETERIZEDPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCPATH] = (d: RawLineData) => { new IFC4.IfcPath(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcOrientedEdge>(p.value))); }
Constructors['IFC4'][IFCPATH] = (expressID:number, args: any[]) => { return new IFC4.IfcPath(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPATH] = (i:IFC4.IfcPath):unknown[] => { return [i.EdgeList]; }
InversePropertyDef['IFC4'][IFCPATH] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPHYSICALCOMPLEXQUANTITY] = (d: RawLineData) => { new IFC4.IfcPhysicalComplexQuantity(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcPhysicalQuantity>(p.value)), new IFC4.IfcLabel(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value)); }
Constructors['IFC4'][IFCPHYSICALCOMPLEXQUANTITY] = (expressID:number, args: any[]) => { return new IFC4.IfcPhysicalComplexQuantity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCPHYSICALCOMPLEXQUANTITY] = (i:IFC4.IfcPhysicalComplexQuantity):unknown[] => { return [i.Name, i.Description, i.HasQuantities, i.Discrimination, i.Quality, i.Usage]; }
InversePropertyDef['IFC4'][IFCPHYSICALCOMPLEXQUANTITY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfComplex',IFCPHYSICALCOMPLEXQUANTITY,2,true],];
FromRawLineData['IFC4'][IFCPIXELTEXTURE] = (d: RawLineData) => { new IFC4.IfcPixelTexture(d.ID, new IFC4.IfcBoolean(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcIdentifier(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4.IfcCartesianTransformationOperator2D>(d.arguments[3].value), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4.IfcIdentifier(p.value)), new IFC4.IfcInteger(d.arguments[5].value), new IFC4.IfcInteger(d.arguments[6].value), new IFC4.IfcInteger(d.arguments[7].value), d.arguments[8].map((p:any) => new IFC4.IfcBinary(p.value))); }
Constructors['IFC4'][IFCPIXELTEXTURE] = (expressID:number, args: any[]) => { return new IFC4.IfcPixelTexture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPIXELTEXTURE] = (i:IFC4.IfcPixelTexture):unknown[] => { return [i.RepeatS, i.RepeatT, i.Mode, i.TextureTransform, i.Parameter, i.Width, i.Height, i.ColourComponents, i.Pixel]; }
InversePropertyDef['IFC4'][IFCPIXELTEXTURE] = [['IsMappedBy',IFCTEXTURECOORDINATE,0,true],['UsedInStyles',IFCSURFACESTYLEWITHTEXTURES,0,true],];
FromRawLineData['IFC4'][IFCPLACEMENT] = (d: RawLineData) => { new IFC4.IfcPlacement(d.ID, new Reference<IFC4.IfcCartesianPoint>(d.arguments[0].value)); }
Constructors['IFC4'][IFCPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcPlacement(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPLACEMENT] = (i:IFC4.IfcPlacement):unknown[] => { return [i.Location]; }
InheritanceDef['IFC4'][IFCPLACEMENT] = [IFCAXIS2PLACEMENT3D,IFCAXIS2PLACEMENT2D,IFCAXIS1PLACEMENT];
InversePropertyDef['IFC4'][IFCPLACEMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPLANAREXTENT] = (d: RawLineData) => { new IFC4.IfcPlanarExtent(d.ID, new IFC4.IfcLengthMeasure(d.arguments[0].value), new IFC4.IfcLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4'][IFCPLANAREXTENT] = (expressID:number, args: any[]) => { return new IFC4.IfcPlanarExtent(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCPLANAREXTENT] = (i:IFC4.IfcPlanarExtent):unknown[] => { return [i.SizeInX, i.SizeInY]; }
InheritanceDef['IFC4'][IFCPLANAREXTENT] = [IFCPLANARBOX];
InversePropertyDef['IFC4'][IFCPLANAREXTENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPOINT] = (d: RawLineData) => { new IFC4.IfcPoint(d.ID, ); }
Constructors['IFC4'][IFCPOINT] = (expressID:number, _:any) => { return new IFC4.IfcPoint(expressID, ); }
ToRawLineData['IFC4'][IFCPOINT] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCPOINT] = [IFCCARTESIANPOINT,IFCPOINTONSURFACE,IFCPOINTONCURVE];
InversePropertyDef['IFC4'][IFCPOINT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPOINTONCURVE] = (d: RawLineData) => { new IFC4.IfcPointOnCurve(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), new IFC4.IfcParameterValue(d.arguments[1].value)); }
Constructors['IFC4'][IFCPOINTONCURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcPointOnCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCPOINTONCURVE] = (i:IFC4.IfcPointOnCurve):unknown[] => { return [i.BasisCurve, i.PointParameter]; }
InversePropertyDef['IFC4'][IFCPOINTONCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPOINTONSURFACE] = (d: RawLineData) => { new IFC4.IfcPointOnSurface(d.ID, new Reference<IFC4.IfcSurface>(d.arguments[0].value), new IFC4.IfcParameterValue(d.arguments[1].value), new IFC4.IfcParameterValue(d.arguments[2].value)); }
Constructors['IFC4'][IFCPOINTONSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcPointOnSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCPOINTONSURFACE] = (i:IFC4.IfcPointOnSurface):unknown[] => { return [i.BasisSurface, i.PointParameterU, i.PointParameterV]; }
InversePropertyDef['IFC4'][IFCPOINTONSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPOLYLOOP] = (d: RawLineData) => { new IFC4.IfcPolyLoop(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcCartesianPoint>(p.value))); }
Constructors['IFC4'][IFCPOLYLOOP] = (expressID:number, args: any[]) => { return new IFC4.IfcPolyLoop(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPOLYLOOP] = (i:IFC4.IfcPolyLoop):unknown[] => { return [i.Polygon]; }
InversePropertyDef['IFC4'][IFCPOLYLOOP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPOLYGONALBOUNDEDHALFSPACE] = (d: RawLineData) => { new IFC4.IfcPolygonalBoundedHalfSpace(d.ID, new Reference<IFC4.IfcSurface>(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value), new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[2].value), new Reference<IFC4.IfcBoundedCurve>(d.arguments[3].value)); }
Constructors['IFC4'][IFCPOLYGONALBOUNDEDHALFSPACE] = (expressID:number, args: any[]) => { return new IFC4.IfcPolygonalBoundedHalfSpace(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPOLYGONALBOUNDEDHALFSPACE] = (i:IFC4.IfcPolygonalBoundedHalfSpace):unknown[] => { return [i.BaseSurface, i.AgreementFlag, i.Position, i.PolygonalBoundary]; }
InversePropertyDef['IFC4'][IFCPOLYGONALBOUNDEDHALFSPACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPREDEFINEDITEM] = (d: RawLineData) => { new IFC4.IfcPreDefinedItem(d.ID, new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCPREDEFINEDITEM] = (expressID:number, args: any[]) => { return new IFC4.IfcPreDefinedItem(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPREDEFINEDITEM] = (i:IFC4.IfcPreDefinedItem):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCPREDEFINEDITEM] = [IFCDRAUGHTINGPREDEFINEDCURVEFONT,IFCPREDEFINEDCURVEFONT,IFCDRAUGHTINGPREDEFINEDCOLOUR,IFCPREDEFINEDCOLOUR,IFCTEXTSTYLEFONTMODEL,IFCPREDEFINEDTEXTFONT];
FromRawLineData['IFC4'][IFCPREDEFINEDPROPERTIES] = (d: RawLineData) => { new IFC4.IfcPreDefinedProperties(d.ID, ); }
Constructors['IFC4'][IFCPREDEFINEDPROPERTIES] = (expressID:number, _:any) => { return new IFC4.IfcPreDefinedProperties(expressID, ); }
ToRawLineData['IFC4'][IFCPREDEFINEDPROPERTIES] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCPREDEFINEDPROPERTIES] = [IFCSECTIONREINFORCEMENTPROPERTIES,IFCSECTIONPROPERTIES,IFCREINFORCEMENTBARPROPERTIES];
InversePropertyDef['IFC4'][IFCPREDEFINEDPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCPREDEFINEDTEXTFONT] = (d: RawLineData) => { new IFC4.IfcPreDefinedTextFont(d.ID, new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCPREDEFINEDTEXTFONT] = (expressID:number, args: any[]) => { return new IFC4.IfcPreDefinedTextFont(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPREDEFINEDTEXTFONT] = (i:IFC4.IfcPreDefinedTextFont):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCPREDEFINEDTEXTFONT] = [IFCTEXTSTYLEFONTMODEL];
FromRawLineData['IFC4'][IFCPRODUCTDEFINITIONSHAPE] = (d: RawLineData) => { new IFC4.IfcProductDefinitionShape(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcRepresentation>(p.value))); }
Constructors['IFC4'][IFCPRODUCTDEFINITIONSHAPE] = (expressID:number, args: any[]) => { return new IFC4.IfcProductDefinitionShape(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCPRODUCTDEFINITIONSHAPE] = (i:IFC4.IfcProductDefinitionShape):unknown[] => { return [i.Name, i.Description, i.Representations]; }
InversePropertyDef['IFC4'][IFCPRODUCTDEFINITIONSHAPE] = [['ShapeOfProduct',IFCPRODUCT,6,true],['HasShapeAspects',IFCSHAPEASPECT,4,true],];
FromRawLineData['IFC4'][IFCPROFILEPROPERTIES] = (d: RawLineData) => { new IFC4.IfcProfileProperties(d.ID, !d.arguments[0] ? null :new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcProperty>(p.value)), new Reference<IFC4.IfcProfileDef>(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROFILEPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcProfileProperties(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROFILEPROPERTIES] = (i:IFC4.IfcProfileProperties):unknown[] => { return [i.Name, i.Description, i.Properties, i.ProfileDefinition]; }
InversePropertyDef['IFC4'][IFCPROFILEPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCPROPERTY] = (d: RawLineData) => { new IFC4.IfcProperty(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value)); }
Constructors['IFC4'][IFCPROPERTY] = (expressID:number, args: any[]) => { return new IFC4.IfcProperty(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCPROPERTY] = (i:IFC4.IfcProperty):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCPROPERTY] = [IFCCOMPLEXPROPERTY,IFCPROPERTYTABLEVALUE,IFCPROPERTYSINGLEVALUE,IFCPROPERTYREFERENCEVALUE,IFCPROPERTYLISTVALUE,IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYBOUNDEDVALUE,IFCSIMPLEPROPERTY];
InversePropertyDef['IFC4'][IFCPROPERTY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCPROPERTYDEFINITION] = (d: RawLineData) => { new IFC4.IfcPropertyDefinition(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROPERTYDEFINITION] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROPERTYDEFINITION] = (i:IFC4.IfcPropertyDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCPROPERTYDEFINITION] = [IFCCOMPLEXPROPERTYTEMPLATE,IFCSIMPLEPROPERTYTEMPLATE,IFCPROPERTYTEMPLATE,IFCPROPERTYSETTEMPLATE,IFCPROPERTYTEMPLATEDEFINITION,IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCPREDEFINEDPROPERTYSET,IFCELEMENTQUANTITY,IFCQUANTITYSET,IFCPROPERTYSETDEFINITION];
InversePropertyDef['IFC4'][IFCPROPERTYDEFINITION] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],];
FromRawLineData['IFC4'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcPropertyDependencyRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcProperty>(d.arguments[2].value), new Reference<IFC4.IfcProperty>(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcText(d.arguments[4].value)); }
Constructors['IFC4'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyDependencyRelationship(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCPROPERTYDEPENDENCYRELATIONSHIP] = (i:IFC4.IfcPropertyDependencyRelationship):unknown[] => { return [i.Name, i.Description, i.DependingProperty, i.DependantProperty, i.Expression]; }
FromRawLineData['IFC4'][IFCPROPERTYSETDEFINITION] = (d: RawLineData) => { new IFC4.IfcPropertySetDefinition(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROPERTYSETDEFINITION] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertySetDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROPERTYSETDEFINITION] = (i:IFC4.IfcPropertySetDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCPROPERTYSETDEFINITION] = [IFCPROPERTYSET,IFCPERMEABLECOVERINGPROPERTIES,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES,IFCPREDEFINEDPROPERTYSET,IFCELEMENTQUANTITY,IFCQUANTITYSET];
InversePropertyDef['IFC4'][IFCPROPERTYSETDEFINITION] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCPROPERTYTEMPLATEDEFINITION] = (d: RawLineData) => { new IFC4.IfcPropertyTemplateDefinition(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROPERTYTEMPLATEDEFINITION] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyTemplateDefinition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROPERTYTEMPLATEDEFINITION] = (i:IFC4.IfcPropertyTemplateDefinition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCPROPERTYTEMPLATEDEFINITION] = [IFCCOMPLEXPROPERTYTEMPLATE,IFCSIMPLEPROPERTYTEMPLATE,IFCPROPERTYTEMPLATE,IFCPROPERTYSETTEMPLATE];
InversePropertyDef['IFC4'][IFCPROPERTYTEMPLATEDEFINITION] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],];
FromRawLineData['IFC4'][IFCQUANTITYSET] = (d: RawLineData) => { new IFC4.IfcQuantitySet(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCQUANTITYSET] = (expressID:number, args: any[]) => { return new IFC4.IfcQuantitySet(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCQUANTITYSET] = (i:IFC4.IfcQuantitySet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCQUANTITYSET] = [IFCELEMENTQUANTITY];
InversePropertyDef['IFC4'][IFCQUANTITYSET] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCRECTANGLEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcRectangleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4'][IFCRECTANGLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcRectangleProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCRECTANGLEPROFILEDEF] = (i:IFC4.IfcRectangleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim]; }
InheritanceDef['IFC4'][IFCRECTANGLEPROFILEDEF] = [IFCRECTANGLEHOLLOWPROFILEDEF,IFCROUNDEDRECTANGLEPROFILEDEF];
InversePropertyDef['IFC4'][IFCRECTANGLEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCREGULARTIMESERIES] = (d: RawLineData) => { new IFC4.IfcRegularTimeSeries(d.ID, new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new IFC4.IfcDateTime(d.arguments[2].value), new IFC4.IfcDateTime(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference(d.arguments[7].value), new IFC4.IfcTimeMeasure(d.arguments[8].value), d.arguments[9].map((p:any) => new Reference<IFC4.IfcTimeSeriesValue>(p.value))); }
Constructors['IFC4'][IFCREGULARTIMESERIES] = (expressID:number, args: any[]) => { return new IFC4.IfcRegularTimeSeries(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCREGULARTIMESERIES] = (i:IFC4.IfcRegularTimeSeries):unknown[] => { return [i.Name, i.Description, i.StartTime, i.EndTime, i.TimeSeriesDataType, i.DataOrigin, i.UserDefinedDataOrigin, i.Unit, i.TimeStep, i.Values]; }
InversePropertyDef['IFC4'][IFCREGULARTIMESERIES] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCREINFORCEMENTBARPROPERTIES] = (d: RawLineData) => { new IFC4.IfcReinforcementBarProperties(d.ID, new IFC4.IfcAreaMeasure(d.arguments[0].value), new IFC4.IfcLabel(d.arguments[1].value), d.arguments[2], !d.arguments[3] ? null :new IFC4.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcCountMeasure(d.arguments[5].value)); }
Constructors['IFC4'][IFCREINFORCEMENTBARPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcReinforcementBarProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCREINFORCEMENTBARPROPERTIES] = (i:IFC4.IfcReinforcementBarProperties):unknown[] => { return [i.TotalCrossSectionArea, i.SteelGrade, i.BarSurface, i.EffectiveDepth, i.NominalBarDiameter, i.BarCount]; }
InversePropertyDef['IFC4'][IFCREINFORCEMENTBARPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcRelationship(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCRELATIONSHIP] = (i:IFC4.IfcRelationship):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCRELATIONSHIP] = [IFCRELDEFINESBYTYPE,IFCRELDEFINESBYTEMPLATE,IFCRELDEFINESBYPROPERTIES,IFCRELDEFINESBYOBJECT,IFCRELDEFINES,IFCRELAGGREGATES,IFCRELVOIDSELEMENT,IFCRELPROJECTSELEMENT,IFCRELNESTS,IFCRELDECOMPOSES,IFCRELDECLARES,IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELSPACEBOUNDARY1STLEVEL,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELINTERFERESELEMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS,IFCRELCONNECTS,IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL,IFCRELASSOCIATES,IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUPBYFACTOR,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTOCONTROL,IFCRELASSIGNSTOACTOR,IFCRELASSIGNS];
FromRawLineData['IFC4'][IFCRESOURCEAPPROVALRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcResourceApprovalRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference(p.value)), new Reference<IFC4.IfcApproval>(d.arguments[3].value)); }
Constructors['IFC4'][IFCRESOURCEAPPROVALRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcResourceApprovalRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCRESOURCEAPPROVALRELATIONSHIP] = (i:IFC4.IfcResourceApprovalRelationship):unknown[] => { return [i.Name, i.Description, i.RelatedResourceObjects, i.RelatingApproval]; }
FromRawLineData['IFC4'][IFCRESOURCECONSTRAINTRELATIONSHIP] = (d: RawLineData) => { new IFC4.IfcResourceConstraintRelationship(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new Reference<IFC4.IfcConstraint>(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCRESOURCECONSTRAINTRELATIONSHIP] = (expressID:number, args: any[]) => { return new IFC4.IfcResourceConstraintRelationship(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCRESOURCECONSTRAINTRELATIONSHIP] = (i:IFC4.IfcResourceConstraintRelationship):unknown[] => { return [i.Name, i.Description, i.RelatingConstraint, i.RelatedResourceObjects]; }
FromRawLineData['IFC4'][IFCRESOURCETIME] = (d: RawLineData) => { new IFC4.IfcResourceTime(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1], !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcDuration(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPositiveRatioMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcDateTime(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcDuration(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcBoolean(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcDateTime(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcDuration(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcPositiveRatioMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcDateTime(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcDateTime(d.arguments[14].value), !d.arguments[15] ? null :new IFC4.IfcDuration(d.arguments[15].value), !d.arguments[16] ? null :new IFC4.IfcPositiveRatioMeasure(d.arguments[16].value), !d.arguments[17] ? null :new IFC4.IfcPositiveRatioMeasure(d.arguments[17].value)); }
Constructors['IFC4'][IFCRESOURCETIME] = (expressID:number, args: any[]) => { return new IFC4.IfcResourceTime(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17]); }
ToRawLineData['IFC4'][IFCRESOURCETIME] = (i:IFC4.IfcResourceTime):unknown[] => { return [i.Name, i.DataOrigin, i.UserDefinedDataOrigin, i.ScheduleWork, i.ScheduleUsage, i.ScheduleStart, i.ScheduleFinish, i.ScheduleContour, i.LevelingDelay, i.IsOverAllocated, i.StatusTime, i.ActualWork, i.ActualUsage, i.ActualStart, i.ActualFinish, i.RemainingWork, i.RemainingUsage, i.Completion]; }
FromRawLineData['IFC4'][IFCROUNDEDRECTANGLEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcRoundedRectangleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value)); }
Constructors['IFC4'][IFCROUNDEDRECTANGLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcRoundedRectangleProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCROUNDEDRECTANGLEPROFILEDEF] = (i:IFC4.IfcRoundedRectangleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim, i.RoundingRadius]; }
InversePropertyDef['IFC4'][IFCROUNDEDRECTANGLEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCSECTIONPROPERTIES] = (d: RawLineData) => { new IFC4.IfcSectionProperties(d.ID, d.arguments[0], new Reference<IFC4.IfcProfileDef>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcProfileDef>(d.arguments[2].value)); }
Constructors['IFC4'][IFCSECTIONPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcSectionProperties(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSECTIONPROPERTIES] = (i:IFC4.IfcSectionProperties):unknown[] => { return [i.SectionType, i.StartProfile, i.EndProfile]; }
InversePropertyDef['IFC4'][IFCSECTIONPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCSECTIONREINFORCEMENTPROPERTIES] = (d: RawLineData) => { new IFC4.IfcSectionReinforcementProperties(d.ID, new IFC4.IfcLengthMeasure(d.arguments[0].value), new IFC4.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLengthMeasure(d.arguments[2].value), d.arguments[3], new Reference<IFC4.IfcSectionProperties>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4.IfcReinforcementBarProperties>(p.value))); }
Constructors['IFC4'][IFCSECTIONREINFORCEMENTPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcSectionReinforcementProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCSECTIONREINFORCEMENTPROPERTIES] = (i:IFC4.IfcSectionReinforcementProperties):unknown[] => { return [i.LongitudinalStartPosition, i.LongitudinalEndPosition, i.TransversePosition, i.ReinforcementRole, i.SectionDefinition, i.CrossSectionReinforcementDefinitions]; }
InversePropertyDef['IFC4'][IFCSECTIONREINFORCEMENTPROPERTIES] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],];
FromRawLineData['IFC4'][IFCSECTIONEDSPINE] = (d: RawLineData) => { new IFC4.IfcSectionedSpine(d.ID, new Reference<IFC4.IfcCompositeCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcProfileDef>(p.value)), d.arguments[2].map((p:any) => new Reference<IFC4.IfcAxis2Placement3D>(p.value))); }
Constructors['IFC4'][IFCSECTIONEDSPINE] = (expressID:number, args: any[]) => { return new IFC4.IfcSectionedSpine(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSECTIONEDSPINE] = (i:IFC4.IfcSectionedSpine):unknown[] => { return [i.SpineCurve, i.CrossSections, i.CrossSectionPositions]; }
InversePropertyDef['IFC4'][IFCSECTIONEDSPINE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSHELLBASEDSURFACEMODEL] = (d: RawLineData) => { new IFC4.IfcShellBasedSurfaceModel(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCSHELLBASEDSURFACEMODEL] = (expressID:number, args: any[]) => { return new IFC4.IfcShellBasedSurfaceModel(expressID, args[0]); }
ToRawLineData['IFC4'][IFCSHELLBASEDSURFACEMODEL] = (i:IFC4.IfcShellBasedSurfaceModel):unknown[] => { return [i.SbsmBoundary]; }
InversePropertyDef['IFC4'][IFCSHELLBASEDSURFACEMODEL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSIMPLEPROPERTY] = (d: RawLineData) => { new IFC4.IfcSimpleProperty(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value)); }
Constructors['IFC4'][IFCSIMPLEPROPERTY] = (expressID:number, args: any[]) => { return new IFC4.IfcSimpleProperty(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCSIMPLEPROPERTY] = (i:IFC4.IfcSimpleProperty):unknown[] => { return [i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCSIMPLEPROPERTY] = [IFCPROPERTYTABLEVALUE,IFCPROPERTYSINGLEVALUE,IFCPROPERTYREFERENCEVALUE,IFCPROPERTYLISTVALUE,IFCPROPERTYENUMERATEDVALUE,IFCPROPERTYBOUNDEDVALUE];
InversePropertyDef['IFC4'][IFCSIMPLEPROPERTY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCSLIPPAGECONNECTIONCONDITION] = (d: RawLineData) => { new IFC4.IfcSlippageConnectionCondition(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCSLIPPAGECONNECTIONCONDITION] = (expressID:number, args: any[]) => { return new IFC4.IfcSlippageConnectionCondition(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSLIPPAGECONNECTIONCONDITION] = (i:IFC4.IfcSlippageConnectionCondition):unknown[] => { return [i.Name, i.SlippageX, i.SlippageY, i.SlippageZ]; }
FromRawLineData['IFC4'][IFCSOLIDMODEL] = (d: RawLineData) => { new IFC4.IfcSolidModel(d.ID, ); }
Constructors['IFC4'][IFCSOLIDMODEL] = (expressID:number, _:any) => { return new IFC4.IfcSolidModel(expressID, ); }
ToRawLineData['IFC4'][IFCSOLIDMODEL] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCSOLIDMODEL] = [IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDBREP,IFCMANIFOLDSOLIDBREP,IFCCSGSOLID,IFCSWEPTDISKSOLIDPOLYGONAL,IFCSWEPTDISKSOLID,IFCSURFACECURVESWEPTAREASOLID,IFCREVOLVEDAREASOLIDTAPERED,IFCREVOLVEDAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED,IFCEXTRUDEDAREASOLID,IFCSWEPTAREASOLID];
InversePropertyDef['IFC4'][IFCSOLIDMODEL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALLOADLINEARFORCE] = (d: RawLineData) => { new IFC4.IfcStructuralLoadLinearForce(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLinearForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLinearForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLinearForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLinearMomentMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLinearMomentMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLinearMomentMeasure(d.arguments[6].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADLINEARFORCE] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadLinearForce(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADLINEARFORCE] = (i:IFC4.IfcStructuralLoadLinearForce):unknown[] => { return [i.Name, i.LinearForceX, i.LinearForceY, i.LinearForceZ, i.LinearMomentX, i.LinearMomentY, i.LinearMomentZ]; }
FromRawLineData['IFC4'][IFCSTRUCTURALLOADPLANARFORCE] = (d: RawLineData) => { new IFC4.IfcStructuralLoadPlanarForce(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcPlanarForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcPlanarForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcPlanarForceMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADPLANARFORCE] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadPlanarForce(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADPLANARFORCE] = (i:IFC4.IfcStructuralLoadPlanarForce):unknown[] => { return [i.Name, i.PlanarForceX, i.PlanarForceY, i.PlanarForceZ]; }
FromRawLineData['IFC4'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (d: RawLineData) => { new IFC4.IfcStructuralLoadSingleDisplacement(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[6].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadSingleDisplacement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = (i:IFC4.IfcStructuralLoadSingleDisplacement):unknown[] => { return [i.Name, i.DisplacementX, i.DisplacementY, i.DisplacementZ, i.RotationalDisplacementRX, i.RotationalDisplacementRY, i.RotationalDisplacementRZ]; }
InheritanceDef['IFC4'][IFCSTRUCTURALLOADSINGLEDISPLACEMENT] = [IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION];
FromRawLineData['IFC4'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (d: RawLineData) => { new IFC4.IfcStructuralLoadSingleDisplacementDistortion(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcCurvatureMeasure(d.arguments[7].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadSingleDisplacementDistortion(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION] = (i:IFC4.IfcStructuralLoadSingleDisplacementDistortion):unknown[] => { return [i.Name, i.DisplacementX, i.DisplacementY, i.DisplacementZ, i.RotationalDisplacementRX, i.RotationalDisplacementRY, i.RotationalDisplacementRZ, i.Distortion]; }
FromRawLineData['IFC4'][IFCSTRUCTURALLOADSINGLEFORCE] = (d: RawLineData) => { new IFC4.IfcStructuralLoadSingleForce(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcTorqueMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcTorqueMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcTorqueMeasure(d.arguments[6].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADSINGLEFORCE] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadSingleForce(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADSINGLEFORCE] = (i:IFC4.IfcStructuralLoadSingleForce):unknown[] => { return [i.Name, i.ForceX, i.ForceY, i.ForceZ, i.MomentX, i.MomentY, i.MomentZ]; }
InheritanceDef['IFC4'][IFCSTRUCTURALLOADSINGLEFORCE] = [IFCSTRUCTURALLOADSINGLEFORCEWARPING];
FromRawLineData['IFC4'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (d: RawLineData) => { new IFC4.IfcStructuralLoadSingleForceWarping(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcForceMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcForceMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcForceMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcTorqueMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcTorqueMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcTorqueMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcWarpingMomentMeasure(d.arguments[7].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadSingleForceWarping(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADSINGLEFORCEWARPING] = (i:IFC4.IfcStructuralLoadSingleForceWarping):unknown[] => { return [i.Name, i.ForceX, i.ForceY, i.ForceZ, i.MomentX, i.MomentY, i.MomentZ, i.WarpingMoment]; }
FromRawLineData['IFC4'][IFCSUBEDGE] = (d: RawLineData) => { new IFC4.IfcSubedge(d.ID, new Reference<IFC4.IfcVertex>(d.arguments[0].value), new Reference<IFC4.IfcVertex>(d.arguments[1].value), new Reference<IFC4.IfcEdge>(d.arguments[2].value)); }
Constructors['IFC4'][IFCSUBEDGE] = (expressID:number, args: any[]) => { return new IFC4.IfcSubedge(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSUBEDGE] = (i:IFC4.IfcSubedge):unknown[] => { return [i.EdgeStart, i.EdgeEnd, i.ParentEdge]; }
InversePropertyDef['IFC4'][IFCSUBEDGE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSURFACE] = (d: RawLineData) => { new IFC4.IfcSurface(d.ID, ); }
Constructors['IFC4'][IFCSURFACE] = (expressID:number, _:any) => { return new IFC4.IfcSurface(expressID, ); }
ToRawLineData['IFC4'][IFCSURFACE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCSURFACE] = [IFCCYLINDRICALSURFACE,IFCTOROIDALSURFACE,IFCSPHERICALSURFACE,IFCPLANE,IFCELEMENTARYSURFACE,IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDSURFACE,IFCCURVEBOUNDEDPLANE,IFCBOUNDEDSURFACE,IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION,IFCSWEPTSURFACE];
InversePropertyDef['IFC4'][IFCSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSURFACESTYLERENDERING] = (d: RawLineData) => { new IFC4.IfcSurfaceStyleRendering(d.ID, new Reference<IFC4.IfcColourRgb>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[1].value), !d.arguments[2] ? null :new Reference(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference(d.arguments[6].value), !d.arguments[7] ? null :TypeInitialiser('IFC4',d.arguments[7]), d.arguments[8]); }
Constructors['IFC4'][IFCSURFACESTYLERENDERING] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceStyleRendering(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSURFACESTYLERENDERING] = (i:IFC4.IfcSurfaceStyleRendering):unknown[] => { return [i.SurfaceColour, i.Transparency, i.DiffuseColour, i.TransmissionColour, i.DiffuseTransmissionColour, i.ReflectionColour, i.SpecularColour, !i.SpecularHighlight ? null :Labelise(i.SpecularHighlight), i.ReflectanceMethod]; }
FromRawLineData['IFC4'][IFCSWEPTAREASOLID] = (d: RawLineData) => { new IFC4.IfcSweptAreaSolid(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value)); }
Constructors['IFC4'][IFCSWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC4.IfcSweptAreaSolid(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCSWEPTAREASOLID] = (i:IFC4.IfcSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position]; }
InheritanceDef['IFC4'][IFCSWEPTAREASOLID] = [IFCSURFACECURVESWEPTAREASOLID,IFCREVOLVEDAREASOLIDTAPERED,IFCREVOLVEDAREASOLID,IFCFIXEDREFERENCESWEPTAREASOLID,IFCEXTRUDEDAREASOLIDTAPERED,IFCEXTRUDEDAREASOLID];
InversePropertyDef['IFC4'][IFCSWEPTAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSWEPTDISKSOLID] = (d: RawLineData) => { new IFC4.IfcSweptDiskSolid(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcParameterValue(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcParameterValue(d.arguments[4].value)); }
Constructors['IFC4'][IFCSWEPTDISKSOLID] = (expressID:number, args: any[]) => { return new IFC4.IfcSweptDiskSolid(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCSWEPTDISKSOLID] = (i:IFC4.IfcSweptDiskSolid):unknown[] => { return [i.Directrix, i.Radius, i.InnerRadius, i.StartParam, i.EndParam]; }
InheritanceDef['IFC4'][IFCSWEPTDISKSOLID] = [IFCSWEPTDISKSOLIDPOLYGONAL];
InversePropertyDef['IFC4'][IFCSWEPTDISKSOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSWEPTDISKSOLIDPOLYGONAL] = (d: RawLineData) => { new IFC4.IfcSweptDiskSolidPolygonal(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcParameterValue(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcParameterValue(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value)); }
Constructors['IFC4'][IFCSWEPTDISKSOLIDPOLYGONAL] = (expressID:number, args: any[]) => { return new IFC4.IfcSweptDiskSolidPolygonal(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCSWEPTDISKSOLIDPOLYGONAL] = (i:IFC4.IfcSweptDiskSolidPolygonal):unknown[] => { return [i.Directrix, i.Radius, i.InnerRadius, i.StartParam, i.EndParam, i.FilletRadius]; }
InversePropertyDef['IFC4'][IFCSWEPTDISKSOLIDPOLYGONAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSWEPTSURFACE] = (d: RawLineData) => { new IFC4.IfcSweptSurface(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value)); }
Constructors['IFC4'][IFCSWEPTSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcSweptSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCSWEPTSURFACE] = (i:IFC4.IfcSweptSurface):unknown[] => { return [i.SweptCurve, i.Position]; }
InheritanceDef['IFC4'][IFCSWEPTSURFACE] = [IFCSURFACEOFREVOLUTION,IFCSURFACEOFLINEAREXTRUSION];
InversePropertyDef['IFC4'][IFCSWEPTSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCTSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcTShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[11].value)); }
Constructors['IFC4'][IFCTSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcTShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCTSHAPEPROFILEDEF] = (i:IFC4.IfcTShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.FlangeEdgeRadius, i.WebEdgeRadius, i.WebSlope, i.FlangeSlope]; }
InversePropertyDef['IFC4'][IFCTSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCTESSELLATEDITEM] = (d: RawLineData) => { new IFC4.IfcTessellatedItem(d.ID, ); }
Constructors['IFC4'][IFCTESSELLATEDITEM] = (expressID:number, _:any) => { return new IFC4.IfcTessellatedItem(expressID, ); }
ToRawLineData['IFC4'][IFCTESSELLATEDITEM] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCTESSELLATEDITEM] = [IFCPOLYGONALFACESET,IFCTRIANGULATEDFACESET,IFCTESSELLATEDFACESET,IFCINDEXEDPOLYGONALFACEWITHVOIDS,IFCINDEXEDPOLYGONALFACE];
InversePropertyDef['IFC4'][IFCTESSELLATEDITEM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCTEXTLITERAL] = (d: RawLineData) => { new IFC4.IfcTextLiteral(d.ID, new IFC4.IfcPresentableText(d.arguments[0].value), new Reference(d.arguments[1].value), d.arguments[2]); }
Constructors['IFC4'][IFCTEXTLITERAL] = (expressID:number, args: any[]) => { return new IFC4.IfcTextLiteral(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCTEXTLITERAL] = (i:IFC4.IfcTextLiteral):unknown[] => { return [i.Literal, i.Placement, i.Path]; }
InheritanceDef['IFC4'][IFCTEXTLITERAL] = [IFCTEXTLITERALWITHEXTENT];
InversePropertyDef['IFC4'][IFCTEXTLITERAL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCTEXTLITERALWITHEXTENT] = (d: RawLineData) => { new IFC4.IfcTextLiteralWithExtent(d.ID, new IFC4.IfcPresentableText(d.arguments[0].value), new Reference(d.arguments[1].value), d.arguments[2], new Reference<IFC4.IfcPlanarExtent>(d.arguments[3].value), new IFC4.IfcBoxAlignment(d.arguments[4].value)); }
Constructors['IFC4'][IFCTEXTLITERALWITHEXTENT] = (expressID:number, args: any[]) => { return new IFC4.IfcTextLiteralWithExtent(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCTEXTLITERALWITHEXTENT] = (i:IFC4.IfcTextLiteralWithExtent):unknown[] => { return [i.Literal, i.Placement, i.Path, i.Extent, i.BoxAlignment]; }
InversePropertyDef['IFC4'][IFCTEXTLITERALWITHEXTENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCTEXTSTYLEFONTMODEL] = (d: RawLineData) => { new IFC4.IfcTextStyleFontModel(d.ID, new IFC4.IfcLabel(d.arguments[0].value), d.arguments[1].map((p:any) => new IFC4.IfcTextFontName(p.value)), !d.arguments[2] ? null :new IFC4.IfcFontStyle(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcFontVariant(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcFontWeight(d.arguments[4].value), TypeInitialiser('IFC4',d.arguments[5])); }
Constructors['IFC4'][IFCTEXTSTYLEFONTMODEL] = (expressID:number, args: any[]) => { return new IFC4.IfcTextStyleFontModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCTEXTSTYLEFONTMODEL] = (i:IFC4.IfcTextStyleFontModel):unknown[] => { return [i.Name, i.FontFamily, i.FontStyle, i.FontVariant, i.FontWeight, Labelise(i.FontSize)]; }
FromRawLineData['IFC4'][IFCTRAPEZIUMPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcTrapeziumProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcLengthMeasure(d.arguments[6].value)); }
Constructors['IFC4'][IFCTRAPEZIUMPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcTrapeziumProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCTRAPEZIUMPROFILEDEF] = (i:IFC4.IfcTrapeziumProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.BottomXDim, i.TopXDim, i.YDim, i.TopXOffset]; }
InversePropertyDef['IFC4'][IFCTRAPEZIUMPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCTYPEOBJECT] = (d: RawLineData) => { new IFC4.IfcTypeObject(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value))); }
Constructors['IFC4'][IFCTYPEOBJECT] = (expressID:number, args: any[]) => { return new IFC4.IfcTypeObject(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCTYPEOBJECT] = (i:IFC4.IfcTypeObject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets]; }
InheritanceDef['IFC4'][IFCTYPEOBJECT] = [IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE,IFCCONSTRUCTIONRESOURCETYPE,IFCTYPERESOURCE,IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALELEMENTTYPE,IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMEDICALDEVICETYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCPILETYPE,IFCMEMBERTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCDOORSTYLE,IFCWINDOWSTYLE,IFCTYPEPRODUCT,IFCTASKTYPE,IFCPROCEDURETYPE,IFCEVENTTYPE,IFCTYPEPROCESS];
InversePropertyDef['IFC4'][IFCTYPEOBJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],];
FromRawLineData['IFC4'][IFCTYPEPROCESS] = (d: RawLineData) => { new IFC4.IfcTypeProcess(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCTYPEPROCESS] = (expressID:number, args: any[]) => { return new IFC4.IfcTypeProcess(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCTYPEPROCESS] = (i:IFC4.IfcTypeProcess):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ProcessType]; }
InheritanceDef['IFC4'][IFCTYPEPROCESS] = [IFCTASKTYPE,IFCPROCEDURETYPE,IFCEVENTTYPE];
InversePropertyDef['IFC4'][IFCTYPEPROCESS] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4'][IFCTYPEPRODUCT] = (d: RawLineData) => { new IFC4.IfcTypeProduct(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value)); }
Constructors['IFC4'][IFCTYPEPRODUCT] = (expressID:number, args: any[]) => { return new IFC4.IfcTypeProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCTYPEPRODUCT] = (i:IFC4.IfcTypeProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag]; }
InheritanceDef['IFC4'][IFCTYPEPRODUCT] = [IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE,IFCSPATIALELEMENTTYPE,IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMEDICALDEVICETYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCPILETYPE,IFCMEMBERTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE,IFCELEMENTTYPE,IFCDOORSTYLE,IFCWINDOWSTYLE];
InversePropertyDef['IFC4'][IFCTYPEPRODUCT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCTYPERESOURCE] = (d: RawLineData) => { new IFC4.IfcTypeResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCTYPERESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcTypeResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCTYPERESOURCE] = (i:IFC4.IfcTypeResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType]; }
InheritanceDef['IFC4'][IFCTYPERESOURCE] = [IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE,IFCCONSTRUCTIONRESOURCETYPE];
InversePropertyDef['IFC4'][IFCTYPERESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCUSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcUShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[9].value)); }
Constructors['IFC4'][IFCUSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcUShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCUSHAPEPROFILEDEF] = (i:IFC4.IfcUShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.EdgeRadius, i.FlangeSlope]; }
InversePropertyDef['IFC4'][IFCUSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCVECTOR] = (d: RawLineData) => { new IFC4.IfcVector(d.ID, new Reference<IFC4.IfcDirection>(d.arguments[0].value), new IFC4.IfcLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4'][IFCVECTOR] = (expressID:number, args: any[]) => { return new IFC4.IfcVector(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCVECTOR] = (i:IFC4.IfcVector):unknown[] => { return [i.Orientation, i.Magnitude]; }
InversePropertyDef['IFC4'][IFCVECTOR] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCVERTEXLOOP] = (d: RawLineData) => { new IFC4.IfcVertexLoop(d.ID, new Reference<IFC4.IfcVertex>(d.arguments[0].value)); }
Constructors['IFC4'][IFCVERTEXLOOP] = (expressID:number, args: any[]) => { return new IFC4.IfcVertexLoop(expressID, args[0]); }
ToRawLineData['IFC4'][IFCVERTEXLOOP] = (i:IFC4.IfcVertexLoop):unknown[] => { return [i.LoopVertex]; }
InversePropertyDef['IFC4'][IFCVERTEXLOOP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCWINDOWSTYLE] = (d: RawLineData) => { new IFC4.IfcWindowStyle(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], new IFC4.IfcBoolean(d.arguments[10].value), new IFC4.IfcBoolean(d.arguments[11].value)); }
Constructors['IFC4'][IFCWINDOWSTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcWindowStyle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCWINDOWSTYLE] = (i:IFC4.IfcWindowStyle):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ConstructionType, i.OperationType, i.ParameterTakesPrecedence, i.Sizeable]; }
InversePropertyDef['IFC4'][IFCWINDOWSTYLE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCZSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcZShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4'][IFCZSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcZShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCZSHAPEPROFILEDEF] = (i:IFC4.IfcZShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.FlangeWidth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.EdgeRadius]; }
InversePropertyDef['IFC4'][IFCZSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCADVANCEDFACE] = (d: RawLineData) => { new IFC4.IfcAdvancedFace(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcFaceBound>(p.value)), new Reference<IFC4.IfcSurface>(d.arguments[1].value), new IFC4.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4'][IFCADVANCEDFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcAdvancedFace(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCADVANCEDFACE] = (i:IFC4.IfcAdvancedFace):unknown[] => { return [i.Bounds, i.FaceSurface, i.SameSense]; }
InversePropertyDef['IFC4'][IFCADVANCEDFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasTextureMaps',IFCTEXTUREMAP,2,true],];
FromRawLineData['IFC4'][IFCANNOTATIONFILLAREA] = (d: RawLineData) => { new IFC4.IfcAnnotationFillArea(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new Reference<IFC4.IfcCurve>(p.value))); }
Constructors['IFC4'][IFCANNOTATIONFILLAREA] = (expressID:number, args: any[]) => { return new IFC4.IfcAnnotationFillArea(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCANNOTATIONFILLAREA] = (i:IFC4.IfcAnnotationFillArea):unknown[] => { return [i.OuterBoundary, i.InnerBoundaries]; }
InversePropertyDef['IFC4'][IFCANNOTATIONFILLAREA] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCASYMMETRICISHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcAsymmetricIShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[14].value)); }
Constructors['IFC4'][IFCASYMMETRICISHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcAsymmetricIShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14]); }
ToRawLineData['IFC4'][IFCASYMMETRICISHAPEPROFILEDEF] = (i:IFC4.IfcAsymmetricIShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.BottomFlangeWidth, i.OverallDepth, i.WebThickness, i.BottomFlangeThickness, i.BottomFlangeFilletRadius, i.TopFlangeWidth, i.TopFlangeThickness, i.TopFlangeFilletRadius, i.BottomFlangeEdgeRadius, i.BottomFlangeSlope, i.TopFlangeEdgeRadius, i.TopFlangeSlope]; }
InversePropertyDef['IFC4'][IFCASYMMETRICISHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCAXIS1PLACEMENT] = (d: RawLineData) => { new IFC4.IfcAxis1Placement(d.ID, new Reference<IFC4.IfcCartesianPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcDirection>(d.arguments[1].value)); }
Constructors['IFC4'][IFCAXIS1PLACEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcAxis1Placement(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCAXIS1PLACEMENT] = (i:IFC4.IfcAxis1Placement):unknown[] => { return [i.Location, i.Axis]; }
InversePropertyDef['IFC4'][IFCAXIS1PLACEMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCAXIS2PLACEMENT2D] = (d: RawLineData) => { new IFC4.IfcAxis2Placement2D(d.ID, new Reference<IFC4.IfcCartesianPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcDirection>(d.arguments[1].value)); }
Constructors['IFC4'][IFCAXIS2PLACEMENT2D] = (expressID:number, args: any[]) => { return new IFC4.IfcAxis2Placement2D(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCAXIS2PLACEMENT2D] = (i:IFC4.IfcAxis2Placement2D):unknown[] => { return [i.Location, i.RefDirection]; }
InversePropertyDef['IFC4'][IFCAXIS2PLACEMENT2D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCAXIS2PLACEMENT3D] = (d: RawLineData) => { new IFC4.IfcAxis2Placement3D(d.ID, new Reference<IFC4.IfcCartesianPoint>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcDirection>(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcDirection>(d.arguments[2].value)); }
Constructors['IFC4'][IFCAXIS2PLACEMENT3D] = (expressID:number, args: any[]) => { return new IFC4.IfcAxis2Placement3D(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCAXIS2PLACEMENT3D] = (i:IFC4.IfcAxis2Placement3D):unknown[] => { return [i.Location, i.Axis, i.RefDirection]; }
InversePropertyDef['IFC4'][IFCAXIS2PLACEMENT3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBOOLEANRESULT] = (d: RawLineData) => { new IFC4.IfcBooleanResult(d.ID, d.arguments[0], new Reference(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC4'][IFCBOOLEANRESULT] = (expressID:number, args: any[]) => { return new IFC4.IfcBooleanResult(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCBOOLEANRESULT] = (i:IFC4.IfcBooleanResult):unknown[] => { return [i.Operator, i.FirstOperand, i.SecondOperand]; }
InheritanceDef['IFC4'][IFCBOOLEANRESULT] = [IFCBOOLEANCLIPPINGRESULT];
InversePropertyDef['IFC4'][IFCBOOLEANRESULT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBOUNDEDSURFACE] = (d: RawLineData) => { new IFC4.IfcBoundedSurface(d.ID, ); }
Constructors['IFC4'][IFCBOUNDEDSURFACE] = (expressID:number, _:any) => { return new IFC4.IfcBoundedSurface(expressID, ); }
ToRawLineData['IFC4'][IFCBOUNDEDSURFACE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCBOUNDEDSURFACE] = [IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACE,IFCRECTANGULARTRIMMEDSURFACE,IFCCURVEBOUNDEDSURFACE,IFCCURVEBOUNDEDPLANE];
InversePropertyDef['IFC4'][IFCBOUNDEDSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBOUNDINGBOX] = (d: RawLineData) => { new IFC4.IfcBoundingBox(d.ID, new Reference<IFC4.IfcCartesianPoint>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCBOUNDINGBOX] = (expressID:number, args: any[]) => { return new IFC4.IfcBoundingBox(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCBOUNDINGBOX] = (i:IFC4.IfcBoundingBox):unknown[] => { return [i.Corner, i.XDim, i.YDim, i.ZDim]; }
InversePropertyDef['IFC4'][IFCBOUNDINGBOX] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBOXEDHALFSPACE] = (d: RawLineData) => { new IFC4.IfcBoxedHalfSpace(d.ID, new Reference<IFC4.IfcSurface>(d.arguments[0].value), new IFC4.IfcBoolean(d.arguments[1].value), new Reference<IFC4.IfcBoundingBox>(d.arguments[2].value)); }
Constructors['IFC4'][IFCBOXEDHALFSPACE] = (expressID:number, args: any[]) => { return new IFC4.IfcBoxedHalfSpace(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCBOXEDHALFSPACE] = (i:IFC4.IfcBoxedHalfSpace):unknown[] => { return [i.BaseSurface, i.AgreementFlag, i.Enclosure]; }
InversePropertyDef['IFC4'][IFCBOXEDHALFSPACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcCShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value)); }
Constructors['IFC4'][IFCCSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcCShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCCSHAPEPROFILEDEF] = (i:IFC4.IfcCShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.Width, i.WallThickness, i.Girth, i.InternalFilletRadius]; }
InversePropertyDef['IFC4'][IFCCSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCCARTESIANPOINT] = (d: RawLineData) => { new IFC4.IfcCartesianPoint(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcLengthMeasure(p.value))); }
Constructors['IFC4'][IFCCARTESIANPOINT] = (expressID:number, args: any[]) => { return new IFC4.IfcCartesianPoint(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCARTESIANPOINT] = (i:IFC4.IfcCartesianPoint):unknown[] => { return [i.Coordinates]; }
InversePropertyDef['IFC4'][IFCCARTESIANPOINT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCARTESIANPOINTLIST] = (d: RawLineData) => { new IFC4.IfcCartesianPointList(d.ID, ); }
Constructors['IFC4'][IFCCARTESIANPOINTLIST] = (expressID:number, _:any) => { return new IFC4.IfcCartesianPointList(expressID, ); }
ToRawLineData['IFC4'][IFCCARTESIANPOINTLIST] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCCARTESIANPOINTLIST] = [IFCCARTESIANPOINTLIST3D,IFCCARTESIANPOINTLIST2D];
InversePropertyDef['IFC4'][IFCCARTESIANPOINTLIST] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCARTESIANPOINTLIST2D] = (d: RawLineData) => { new IFC4.IfcCartesianPointList2D(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcLengthMeasure(p.value))); }
Constructors['IFC4'][IFCCARTESIANPOINTLIST2D] = (expressID:number, args: any[]) => { return new IFC4.IfcCartesianPointList2D(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCARTESIANPOINTLIST2D] = (i:IFC4.IfcCartesianPointList2D):unknown[] => { return [i.CoordList]; }
InversePropertyDef['IFC4'][IFCCARTESIANPOINTLIST2D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCARTESIANPOINTLIST3D] = (d: RawLineData) => { new IFC4.IfcCartesianPointList3D(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcLengthMeasure(p.value))); }
Constructors['IFC4'][IFCCARTESIANPOINTLIST3D] = (expressID:number, args: any[]) => { return new IFC4.IfcCartesianPointList3D(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCARTESIANPOINTLIST3D] = (i:IFC4.IfcCartesianPointList3D):unknown[] => { return [i.CoordList]; }
InversePropertyDef['IFC4'][IFCCARTESIANPOINTLIST3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (d: RawLineData) => { new IFC4.IfcCartesianTransformationOperator(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcDirection>(d.arguments[1].value), new Reference<IFC4.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcReal(d.arguments[3].value)); }
Constructors['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (expressID:number, args: any[]) => { return new IFC4.IfcCartesianTransformationOperator(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR] = (i:IFC4.IfcCartesianTransformationOperator):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale]; }
InheritanceDef['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR] = [IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR3D,IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM,IFCCARTESIANTRANSFORMATIONOPERATOR2D];
InversePropertyDef['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (d: RawLineData) => { new IFC4.IfcCartesianTransformationOperator2D(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcDirection>(d.arguments[1].value), new Reference<IFC4.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcReal(d.arguments[3].value)); }
Constructors['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (expressID:number, args: any[]) => { return new IFC4.IfcCartesianTransformationOperator2D(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = (i:IFC4.IfcCartesianTransformationOperator2D):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale]; }
InheritanceDef['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM];
InversePropertyDef['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (d: RawLineData) => { new IFC4.IfcCartesianTransformationOperator2DnonUniform(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcDirection>(d.arguments[1].value), new Reference<IFC4.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcReal(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcReal(d.arguments[4].value)); }
Constructors['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (expressID:number, args: any[]) => { return new IFC4.IfcCartesianTransformationOperator2DnonUniform(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = (i:IFC4.IfcCartesianTransformationOperator2DnonUniform):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Scale2]; }
InversePropertyDef['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (d: RawLineData) => { new IFC4.IfcCartesianTransformationOperator3D(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcDirection>(d.arguments[1].value), new Reference<IFC4.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcReal(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4.IfcDirection>(d.arguments[4].value)); }
Constructors['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (expressID:number, args: any[]) => { return new IFC4.IfcCartesianTransformationOperator3D(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = (i:IFC4.IfcCartesianTransformationOperator3D):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Axis3]; }
InheritanceDef['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM];
InversePropertyDef['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (d: RawLineData) => { new IFC4.IfcCartesianTransformationOperator3DnonUniform(d.ID, !d.arguments[0] ? null :new Reference<IFC4.IfcDirection>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcDirection>(d.arguments[1].value), new Reference<IFC4.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcReal(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4.IfcDirection>(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcReal(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcReal(d.arguments[6].value)); }
Constructors['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (expressID:number, args: any[]) => { return new IFC4.IfcCartesianTransformationOperator3DnonUniform(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = (i:IFC4.IfcCartesianTransformationOperator3DnonUniform):unknown[] => { return [i.Axis1, i.Axis2, i.LocalOrigin, i.Scale, i.Axis3, i.Scale2, i.Scale3]; }
InversePropertyDef['IFC4'][IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCIRCLEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcCircleProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCCIRCLEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcCircleProfileDef(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCIRCLEPROFILEDEF] = (i:IFC4.IfcCircleProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Radius]; }
InheritanceDef['IFC4'][IFCCIRCLEPROFILEDEF] = [IFCCIRCLEHOLLOWPROFILEDEF];
InversePropertyDef['IFC4'][IFCCIRCLEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCCLOSEDSHELL] = (d: RawLineData) => { new IFC4.IfcClosedShell(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcFace>(p.value))); }
Constructors['IFC4'][IFCCLOSEDSHELL] = (expressID:number, args: any[]) => { return new IFC4.IfcClosedShell(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCLOSEDSHELL] = (i:IFC4.IfcClosedShell):unknown[] => { return [i.CfsFaces]; }
InversePropertyDef['IFC4'][IFCCLOSEDSHELL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCOLOURRGB] = (d: RawLineData) => { new IFC4.IfcColourRgb(d.ID, !d.arguments[0] ? null :new IFC4.IfcLabel(d.arguments[0].value), new IFC4.IfcNormalisedRatioMeasure(d.arguments[1].value), new IFC4.IfcNormalisedRatioMeasure(d.arguments[2].value), new IFC4.IfcNormalisedRatioMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCCOLOURRGB] = (expressID:number, args: any[]) => { return new IFC4.IfcColourRgb(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCOLOURRGB] = (i:IFC4.IfcColourRgb):unknown[] => { return [i.Name, i.Red, i.Green, i.Blue]; }
FromRawLineData['IFC4'][IFCCOMPLEXPROPERTY] = (d: RawLineData) => { new IFC4.IfcComplexProperty(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), new IFC4.IfcIdentifier(d.arguments[2].value), d.arguments[3].map((p:any) => new Reference<IFC4.IfcProperty>(p.value))); }
Constructors['IFC4'][IFCCOMPLEXPROPERTY] = (expressID:number, args: any[]) => { return new IFC4.IfcComplexProperty(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCCOMPLEXPROPERTY] = (i:IFC4.IfcComplexProperty):unknown[] => { return [i.Name, i.Description, i.UsageName, i.HasProperties]; }
InversePropertyDef['IFC4'][IFCCOMPLEXPROPERTY] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCCOMPOSITECURVESEGMENT] = (d: RawLineData) => { new IFC4.IfcCompositeCurveSegment(d.ID, d.arguments[0], new IFC4.IfcBoolean(d.arguments[1].value), new Reference<IFC4.IfcCurve>(d.arguments[2].value)); }
Constructors['IFC4'][IFCCOMPOSITECURVESEGMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcCompositeCurveSegment(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCCOMPOSITECURVESEGMENT] = (i:IFC4.IfcCompositeCurveSegment):unknown[] => { return [i.Transition, i.SameSense, i.ParentCurve]; }
InheritanceDef['IFC4'][IFCCOMPOSITECURVESEGMENT] = [IFCREPARAMETRISEDCOMPOSITECURVESEGMENT];
InversePropertyDef['IFC4'][IFCCOMPOSITECURVESEGMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['UsingCurves',IFCCOMPOSITECURVE,0,true],];
FromRawLineData['IFC4'][IFCCONSTRUCTIONRESOURCETYPE] = (d: RawLineData) => { new IFC4.IfcConstructionResourceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[10].value)); }
Constructors['IFC4'][IFCCONSTRUCTIONRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcConstructionResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCCONSTRUCTIONRESOURCETYPE] = (i:IFC4.IfcConstructionResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity]; }
InheritanceDef['IFC4'][IFCCONSTRUCTIONRESOURCETYPE] = [IFCCONSTRUCTIONPRODUCTRESOURCETYPE,IFCCONSTRUCTIONMATERIALRESOURCETYPE,IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE,IFCSUBCONTRACTRESOURCETYPE,IFCLABORRESOURCETYPE,IFCCREWRESOURCETYPE];
InversePropertyDef['IFC4'][IFCCONSTRUCTIONRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCONTEXT] = (d: RawLineData) => { new IFC4.IfcContext(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcRepresentationContext>(p.value)), !d.arguments[8] ? null :new Reference<IFC4.IfcUnitAssignment>(d.arguments[8].value)); }
Constructors['IFC4'][IFCCONTEXT] = (expressID:number, args: any[]) => { return new IFC4.IfcContext(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCONTEXT] = (i:IFC4.IfcContext):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.Phase, i.RepresentationContexts, i.UnitsInContext]; }
InheritanceDef['IFC4'][IFCCONTEXT] = [IFCPROJECTLIBRARY,IFCPROJECT];
InversePropertyDef['IFC4'][IFCCONTEXT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Declares',IFCRELDECLARES,4,true],];
FromRawLineData['IFC4'][IFCCREWRESOURCETYPE] = (d: RawLineData) => { new IFC4.IfcCrewResourceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4'][IFCCREWRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCrewResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCCREWRESOURCETYPE] = (i:IFC4.IfcCrewResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCREWRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCSGPRIMITIVE3D] = (d: RawLineData) => { new IFC4.IfcCsgPrimitive3D(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC4'][IFCCSGPRIMITIVE3D] = (expressID:number, args: any[]) => { return new IFC4.IfcCsgPrimitive3D(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCSGPRIMITIVE3D] = (i:IFC4.IfcCsgPrimitive3D):unknown[] => { return [i.Position]; }
InheritanceDef['IFC4'][IFCCSGPRIMITIVE3D] = [IFCBLOCK,IFCSPHERE,IFCRIGHTCIRCULARCYLINDER,IFCRIGHTCIRCULARCONE,IFCRECTANGULARPYRAMID];
InversePropertyDef['IFC4'][IFCCSGPRIMITIVE3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCSGSOLID] = (d: RawLineData) => { new IFC4.IfcCsgSolid(d.ID, new Reference(d.arguments[0].value)); }
Constructors['IFC4'][IFCCSGSOLID] = (expressID:number, args: any[]) => { return new IFC4.IfcCsgSolid(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCSGSOLID] = (i:IFC4.IfcCsgSolid):unknown[] => { return [i.TreeRootExpression]; }
InversePropertyDef['IFC4'][IFCCSGSOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCURVE] = (d: RawLineData) => { new IFC4.IfcCurve(d.ID, ); }
Constructors['IFC4'][IFCCURVE] = (expressID:number, _:any) => { return new IFC4.IfcCurve(expressID, ); }
ToRawLineData['IFC4'][IFCCURVE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCCURVE] = [IFCCIRCLE,IFCELLIPSE,IFCCONIC,IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFCINDEXEDPOLYCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVE,IFCBOUNDEDCURVE,IFCSEAMCURVE,IFCINTERSECTIONCURVE,IFCSURFACECURVE,IFCPCURVE,IFCOFFSETCURVE3D,IFCOFFSETCURVE2D,IFCLINE];
InversePropertyDef['IFC4'][IFCCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCURVEBOUNDEDPLANE] = (d: RawLineData) => { new IFC4.IfcCurveBoundedPlane(d.ID, new Reference<IFC4.IfcPlane>(d.arguments[0].value), new Reference<IFC4.IfcCurve>(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcCurve>(p.value))); }
Constructors['IFC4'][IFCCURVEBOUNDEDPLANE] = (expressID:number, args: any[]) => { return new IFC4.IfcCurveBoundedPlane(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCCURVEBOUNDEDPLANE] = (i:IFC4.IfcCurveBoundedPlane):unknown[] => { return [i.BasisSurface, i.OuterBoundary, i.InnerBoundaries]; }
InversePropertyDef['IFC4'][IFCCURVEBOUNDEDPLANE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCURVEBOUNDEDSURFACE] = (d: RawLineData) => { new IFC4.IfcCurveBoundedSurface(d.ID, new Reference<IFC4.IfcSurface>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcBoundaryCurve>(p.value)), new IFC4.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4'][IFCCURVEBOUNDEDSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcCurveBoundedSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCCURVEBOUNDEDSURFACE] = (i:IFC4.IfcCurveBoundedSurface):unknown[] => { return [i.BasisSurface, i.Boundaries, i.ImplicitOuter]; }
InversePropertyDef['IFC4'][IFCCURVEBOUNDEDSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCDIRECTION] = (d: RawLineData) => { new IFC4.IfcDirection(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcReal(p.value))); }
Constructors['IFC4'][IFCDIRECTION] = (expressID:number, args: any[]) => { return new IFC4.IfcDirection(expressID, args[0]); }
ToRawLineData['IFC4'][IFCDIRECTION] = (i:IFC4.IfcDirection):unknown[] => { return [i.DirectionRatios]; }
InversePropertyDef['IFC4'][IFCDIRECTION] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCDOORSTYLE] = (d: RawLineData) => { new IFC4.IfcDoorStyle(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], new IFC4.IfcBoolean(d.arguments[10].value), new IFC4.IfcBoolean(d.arguments[11].value)); }
Constructors['IFC4'][IFCDOORSTYLE] = (expressID:number, args: any[]) => { return new IFC4.IfcDoorStyle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCDOORSTYLE] = (i:IFC4.IfcDoorStyle):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.OperationType, i.ConstructionType, i.ParameterTakesPrecedence, i.Sizeable]; }
InversePropertyDef['IFC4'][IFCDOORSTYLE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCEDGELOOP] = (d: RawLineData) => { new IFC4.IfcEdgeLoop(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcOrientedEdge>(p.value))); }
Constructors['IFC4'][IFCEDGELOOP] = (expressID:number, args: any[]) => { return new IFC4.IfcEdgeLoop(expressID, args[0]); }
ToRawLineData['IFC4'][IFCEDGELOOP] = (i:IFC4.IfcEdgeLoop):unknown[] => { return [i.EdgeList]; }
InversePropertyDef['IFC4'][IFCEDGELOOP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCELEMENTQUANTITY] = (d: RawLineData) => { new IFC4.IfcElementQuantity(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4.IfcPhysicalQuantity>(p.value))); }
Constructors['IFC4'][IFCELEMENTQUANTITY] = (expressID:number, args: any[]) => { return new IFC4.IfcElementQuantity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCELEMENTQUANTITY] = (i:IFC4.IfcElementQuantity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.MethodOfMeasurement, i.Quantities]; }
InversePropertyDef['IFC4'][IFCELEMENTQUANTITY] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCELEMENTTYPE] = (i:IFC4.IfcElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCELEMENTTYPE] = [IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE,IFCELEMENTCOMPONENTTYPE,IFCELEMENTASSEMBLYTYPE,IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMEDICALDEVICETYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE,IFCDISTRIBUTIONELEMENTTYPE,IFCCIVILELEMENTTYPE,IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCPILETYPE,IFCMEMBERTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE,IFCBUILDINGELEMENTTYPE,IFCTRANSPORTELEMENTTYPE,IFCGEOGRAPHICELEMENTTYPE,IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE,IFCFURNISHINGELEMENTTYPE];
InversePropertyDef['IFC4'][IFCELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELEMENTARYSURFACE] = (d: RawLineData) => { new IFC4.IfcElementarySurface(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC4'][IFCELEMENTARYSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcElementarySurface(expressID, args[0]); }
ToRawLineData['IFC4'][IFCELEMENTARYSURFACE] = (i:IFC4.IfcElementarySurface):unknown[] => { return [i.Position]; }
InheritanceDef['IFC4'][IFCELEMENTARYSURFACE] = [IFCCYLINDRICALSURFACE,IFCTOROIDALSURFACE,IFCSPHERICALSURFACE,IFCPLANE];
InversePropertyDef['IFC4'][IFCELEMENTARYSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCELLIPSEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcEllipseProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4'][IFCELLIPSEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcEllipseProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCELLIPSEPROFILEDEF] = (i:IFC4.IfcEllipseProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.SemiAxis1, i.SemiAxis2]; }
InversePropertyDef['IFC4'][IFCELLIPSEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCEVENTTYPE] = (d: RawLineData) => { new IFC4.IfcEventType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], d.arguments[10], !d.arguments[11] ? null :new IFC4.IfcLabel(d.arguments[11].value)); }
Constructors['IFC4'][IFCEVENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcEventType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCEVENTTYPE] = (i:IFC4.IfcEventType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ProcessType, i.PredefinedType, i.EventTriggerType, i.UserDefinedEventTriggerType]; }
InversePropertyDef['IFC4'][IFCEVENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4'][IFCEXTRUDEDAREASOLID] = (d: RawLineData) => { new IFC4.IfcExtrudedAreaSolid(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4.IfcDirection>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCEXTRUDEDAREASOLID] = (expressID:number, args: any[]) => { return new IFC4.IfcExtrudedAreaSolid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCEXTRUDEDAREASOLID] = (i:IFC4.IfcExtrudedAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.ExtrudedDirection, i.Depth]; }
InheritanceDef['IFC4'][IFCEXTRUDEDAREASOLID] = [IFCEXTRUDEDAREASOLIDTAPERED];
InversePropertyDef['IFC4'][IFCEXTRUDEDAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCEXTRUDEDAREASOLIDTAPERED] = (d: RawLineData) => { new IFC4.IfcExtrudedAreaSolidTapered(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4.IfcDirection>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new Reference<IFC4.IfcProfileDef>(d.arguments[4].value)); }
Constructors['IFC4'][IFCEXTRUDEDAREASOLIDTAPERED] = (expressID:number, args: any[]) => { return new IFC4.IfcExtrudedAreaSolidTapered(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCEXTRUDEDAREASOLIDTAPERED] = (i:IFC4.IfcExtrudedAreaSolidTapered):unknown[] => { return [i.SweptArea, i.Position, i.ExtrudedDirection, i.Depth, i.EndSweptArea]; }
InversePropertyDef['IFC4'][IFCEXTRUDEDAREASOLIDTAPERED] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFACEBASEDSURFACEMODEL] = (d: RawLineData) => { new IFC4.IfcFaceBasedSurfaceModel(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcConnectedFaceSet>(p.value))); }
Constructors['IFC4'][IFCFACEBASEDSURFACEMODEL] = (expressID:number, args: any[]) => { return new IFC4.IfcFaceBasedSurfaceModel(expressID, args[0]); }
ToRawLineData['IFC4'][IFCFACEBASEDSURFACEMODEL] = (i:IFC4.IfcFaceBasedSurfaceModel):unknown[] => { return [i.FbsmFaces]; }
InversePropertyDef['IFC4'][IFCFACEBASEDSURFACEMODEL] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFILLAREASTYLEHATCHING] = (d: RawLineData) => { new IFC4.IfcFillAreaStyleHatching(d.ID, new Reference<IFC4.IfcCurveStyle>(d.arguments[0].value), new Reference(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcCartesianPoint>(d.arguments[2].value), !d.arguments[3] ? null :new Reference<IFC4.IfcCartesianPoint>(d.arguments[3].value), new IFC4.IfcPlaneAngleMeasure(d.arguments[4].value)); }
Constructors['IFC4'][IFCFILLAREASTYLEHATCHING] = (expressID:number, args: any[]) => { return new IFC4.IfcFillAreaStyleHatching(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCFILLAREASTYLEHATCHING] = (i:IFC4.IfcFillAreaStyleHatching):unknown[] => { return [i.HatchLineAppearance, i.StartOfNextHatchLine, i.PointOfReferenceHatchLine, i.PatternStart, i.HatchLineAngle]; }
InversePropertyDef['IFC4'][IFCFILLAREASTYLEHATCHING] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFILLAREASTYLETILES] = (d: RawLineData) => { new IFC4.IfcFillAreaStyleTiles(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcVector>(p.value)), d.arguments[1].map((p:any) => new Reference<IFC4.IfcStyledItem>(p.value)), new IFC4.IfcPositiveRatioMeasure(d.arguments[2].value)); }
Constructors['IFC4'][IFCFILLAREASTYLETILES] = (expressID:number, args: any[]) => { return new IFC4.IfcFillAreaStyleTiles(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCFILLAREASTYLETILES] = (i:IFC4.IfcFillAreaStyleTiles):unknown[] => { return [i.TilingPattern, i.Tiles, i.TilingScale]; }
InversePropertyDef['IFC4'][IFCFILLAREASTYLETILES] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFIXEDREFERENCESWEPTAREASOLID] = (d: RawLineData) => { new IFC4.IfcFixedReferenceSweptAreaSolid(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4.IfcCurve>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcParameterValue(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcParameterValue(d.arguments[4].value), new Reference<IFC4.IfcDirection>(d.arguments[5].value)); }
Constructors['IFC4'][IFCFIXEDREFERENCESWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC4.IfcFixedReferenceSweptAreaSolid(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCFIXEDREFERENCESWEPTAREASOLID] = (i:IFC4.IfcFixedReferenceSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Directrix, i.StartParam, i.EndParam, i.FixedReference]; }
InversePropertyDef['IFC4'][IFCFIXEDREFERENCESWEPTAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFURNISHINGELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcFurnishingElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCFURNISHINGELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFurnishingElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFURNISHINGELEMENTTYPE] = (i:IFC4.IfcFurnishingElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCFURNISHINGELEMENTTYPE] = [IFCSYSTEMFURNITUREELEMENTTYPE,IFCFURNITURETYPE];
InversePropertyDef['IFC4'][IFCFURNISHINGELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFURNITURETYPE] = (d: RawLineData) => { new IFC4.IfcFurnitureType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], d.arguments[10]); }
Constructors['IFC4'][IFCFURNITURETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFurnitureType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCFURNITURETYPE] = (i:IFC4.IfcFurnitureType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.AssemblyPlace, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFURNITURETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCGEOGRAPHICELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcGeographicElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCGEOGRAPHICELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcGeographicElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCGEOGRAPHICELEMENTTYPE] = (i:IFC4.IfcGeographicElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCGEOGRAPHICELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCGEOMETRICCURVESET] = (d: RawLineData) => { new IFC4.IfcGeometricCurveSet(d.ID, d.arguments[0].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCGEOMETRICCURVESET] = (expressID:number, args: any[]) => { return new IFC4.IfcGeometricCurveSet(expressID, args[0]); }
ToRawLineData['IFC4'][IFCGEOMETRICCURVESET] = (i:IFC4.IfcGeometricCurveSet):unknown[] => { return [i.Elements]; }
InversePropertyDef['IFC4'][IFCGEOMETRICCURVESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCISHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcIShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[9].value)); }
Constructors['IFC4'][IFCISHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcIShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCISHAPEPROFILEDEF] = (i:IFC4.IfcIShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.OverallWidth, i.OverallDepth, i.WebThickness, i.FlangeThickness, i.FilletRadius, i.FlangeEdgeRadius, i.FlangeSlope]; }
InversePropertyDef['IFC4'][IFCISHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCINDEXEDPOLYGONALFACE] = (d: RawLineData) => { new IFC4.IfcIndexedPolygonalFace(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcPositiveInteger(p.value))); }
Constructors['IFC4'][IFCINDEXEDPOLYGONALFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcIndexedPolygonalFace(expressID, args[0]); }
ToRawLineData['IFC4'][IFCINDEXEDPOLYGONALFACE] = (i:IFC4.IfcIndexedPolygonalFace):unknown[] => { return [i.CoordIndex]; }
InheritanceDef['IFC4'][IFCINDEXEDPOLYGONALFACE] = [IFCINDEXEDPOLYGONALFACEWITHVOIDS];
InversePropertyDef['IFC4'][IFCINDEXEDPOLYGONALFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['ToFaceSet',IFCPOLYGONALFACESET,2,true],];
FromRawLineData['IFC4'][IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (d: RawLineData) => { new IFC4.IfcIndexedPolygonalFaceWithVoids(d.ID, d.arguments[0].map((p:any) => new IFC4.IfcPositiveInteger(p.value)), d.arguments[1].map((p:any) => new IFC4.IfcPositiveInteger(p.value))); }
Constructors['IFC4'][IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4.IfcIndexedPolygonalFaceWithVoids(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCINDEXEDPOLYGONALFACEWITHVOIDS] = (i:IFC4.IfcIndexedPolygonalFaceWithVoids):unknown[] => { return [i.CoordIndex, i.InnerCoordIndices]; }
InversePropertyDef['IFC4'][IFCINDEXEDPOLYGONALFACEWITHVOIDS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['ToFaceSet',IFCPOLYGONALFACESET,2,true],];
FromRawLineData['IFC4'][IFCLSHAPEPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcLShapeProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcPlaneAngleMeasure(d.arguments[8].value)); }
Constructors['IFC4'][IFCLSHAPEPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcLShapeProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCLSHAPEPROFILEDEF] = (i:IFC4.IfcLShapeProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Depth, i.Width, i.Thickness, i.FilletRadius, i.EdgeRadius, i.LegSlope]; }
InversePropertyDef['IFC4'][IFCLSHAPEPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCLABORRESOURCETYPE] = (d: RawLineData) => { new IFC4.IfcLaborResourceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4'][IFCLABORRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcLaborResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCLABORRESOURCETYPE] = (i:IFC4.IfcLaborResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCLABORRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCLINE] = (d: RawLineData) => { new IFC4.IfcLine(d.ID, new Reference<IFC4.IfcCartesianPoint>(d.arguments[0].value), new Reference<IFC4.IfcVector>(d.arguments[1].value)); }
Constructors['IFC4'][IFCLINE] = (expressID:number, args: any[]) => { return new IFC4.IfcLine(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCLINE] = (i:IFC4.IfcLine):unknown[] => { return [i.Pnt, i.Dir]; }
InversePropertyDef['IFC4'][IFCLINE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCMANIFOLDSOLIDBREP] = (d: RawLineData) => { new IFC4.IfcManifoldSolidBrep(d.ID, new Reference<IFC4.IfcClosedShell>(d.arguments[0].value)); }
Constructors['IFC4'][IFCMANIFOLDSOLIDBREP] = (expressID:number, args: any[]) => { return new IFC4.IfcManifoldSolidBrep(expressID, args[0]); }
ToRawLineData['IFC4'][IFCMANIFOLDSOLIDBREP] = (i:IFC4.IfcManifoldSolidBrep):unknown[] => { return [i.Outer]; }
InheritanceDef['IFC4'][IFCMANIFOLDSOLIDBREP] = [IFCFACETEDBREPWITHVOIDS,IFCFACETEDBREP,IFCADVANCEDBREPWITHVOIDS,IFCADVANCEDBREP];
InversePropertyDef['IFC4'][IFCMANIFOLDSOLIDBREP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCOBJECT] = (d: RawLineData) => { new IFC4.IfcObject(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCOBJECT] = (expressID:number, args: any[]) => { return new IFC4.IfcObject(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCOBJECT] = (i:IFC4.IfcObject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC4'][IFCOBJECT] = [IFCASSET,IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILDINGSYSTEM,IFCZONE,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADGROUP,IFCINVENTORY,IFCGROUP,IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCWORKCALENDAR,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCCOSTSCHEDULE,IFCCOSTITEM,IFCCONTROL,IFCOCCUPANT,IFCACTOR,IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE,IFCRESOURCE,IFCDISTRIBUTIONPORT,IFCPORT,IFCGRID,IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSANITARYTERMINAL,IFCOUTLET,IFCMEDICALDEVICE,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBEAMSTANDARDCASE,IFCBEAM,IFCWINDOWSTANDARDCASE,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALLELEMENTEDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLABSTANDARDCASE,IFCSLABELEMENTEDCASE,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATESTANDARDCASE,IFCPLATE,IFCPILE,IFCMEMBERSTANDARDCASE,IFCMEMBER,IFCFOOTING,IFCDOORSTANDARDCASE,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMNSTANDARDCASE,IFCCOLUMN,IFCCHIMNEY,IFCBUILDINGELEMENTPROXY,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCVOIDINGFEATURE,IFCOPENINGSTANDARDCASE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALELEMENT,IFCPROXY,IFCPRODUCT,IFCPROCEDURE,IFCEVENT,IFCTASK,IFCPROCESS];
InversePropertyDef['IFC4'][IFCOBJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],];
FromRawLineData['IFC4'][IFCOFFSETCURVE2D] = (d: RawLineData) => { new IFC4.IfcOffsetCurve2D(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), new IFC4.IfcLengthMeasure(d.arguments[1].value), new IFC4.IfcLogical(d.arguments[2].value)); }
Constructors['IFC4'][IFCOFFSETCURVE2D] = (expressID:number, args: any[]) => { return new IFC4.IfcOffsetCurve2D(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCOFFSETCURVE2D] = (i:IFC4.IfcOffsetCurve2D):unknown[] => { return [i.BasisCurve, i.Distance, i.SelfIntersect]; }
InversePropertyDef['IFC4'][IFCOFFSETCURVE2D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCOFFSETCURVE3D] = (d: RawLineData) => { new IFC4.IfcOffsetCurve3D(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), new IFC4.IfcLengthMeasure(d.arguments[1].value), new IFC4.IfcLogical(d.arguments[2].value), new Reference<IFC4.IfcDirection>(d.arguments[3].value)); }
Constructors['IFC4'][IFCOFFSETCURVE3D] = (expressID:number, args: any[]) => { return new IFC4.IfcOffsetCurve3D(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCOFFSETCURVE3D] = (i:IFC4.IfcOffsetCurve3D):unknown[] => { return [i.BasisCurve, i.Distance, i.SelfIntersect, i.RefDirection]; }
InversePropertyDef['IFC4'][IFCOFFSETCURVE3D] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPCURVE] = (d: RawLineData) => { new IFC4.IfcPcurve(d.ID, new Reference<IFC4.IfcSurface>(d.arguments[0].value), new Reference<IFC4.IfcCurve>(d.arguments[1].value)); }
Constructors['IFC4'][IFCPCURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcPcurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCPCURVE] = (i:IFC4.IfcPcurve):unknown[] => { return [i.BasisSurface, i.ReferenceCurve]; }
InversePropertyDef['IFC4'][IFCPCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPLANARBOX] = (d: RawLineData) => { new IFC4.IfcPlanarBox(d.ID, new IFC4.IfcLengthMeasure(d.arguments[0].value), new IFC4.IfcLengthMeasure(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC4'][IFCPLANARBOX] = (expressID:number, args: any[]) => { return new IFC4.IfcPlanarBox(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCPLANARBOX] = (i:IFC4.IfcPlanarBox):unknown[] => { return [i.SizeInX, i.SizeInY, i.Placement]; }
InversePropertyDef['IFC4'][IFCPLANARBOX] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPLANE] = (d: RawLineData) => { new IFC4.IfcPlane(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value)); }
Constructors['IFC4'][IFCPLANE] = (expressID:number, args: any[]) => { return new IFC4.IfcPlane(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPLANE] = (i:IFC4.IfcPlane):unknown[] => { return [i.Position]; }
InversePropertyDef['IFC4'][IFCPLANE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPREDEFINEDCOLOUR] = (d: RawLineData) => { new IFC4.IfcPreDefinedColour(d.ID, new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCPREDEFINEDCOLOUR] = (expressID:number, args: any[]) => { return new IFC4.IfcPreDefinedColour(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPREDEFINEDCOLOUR] = (i:IFC4.IfcPreDefinedColour):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCPREDEFINEDCOLOUR] = [IFCDRAUGHTINGPREDEFINEDCOLOUR];
FromRawLineData['IFC4'][IFCPREDEFINEDCURVEFONT] = (d: RawLineData) => { new IFC4.IfcPreDefinedCurveFont(d.ID, new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCPREDEFINEDCURVEFONT] = (expressID:number, args: any[]) => { return new IFC4.IfcPreDefinedCurveFont(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPREDEFINEDCURVEFONT] = (i:IFC4.IfcPreDefinedCurveFont):unknown[] => { return [i.Name]; }
InheritanceDef['IFC4'][IFCPREDEFINEDCURVEFONT] = [IFCDRAUGHTINGPREDEFINEDCURVEFONT];
FromRawLineData['IFC4'][IFCPREDEFINEDPROPERTYSET] = (d: RawLineData) => { new IFC4.IfcPreDefinedPropertySet(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCPREDEFINEDPROPERTYSET] = (expressID:number, args: any[]) => { return new IFC4.IfcPreDefinedPropertySet(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPREDEFINEDPROPERTYSET] = (i:IFC4.IfcPreDefinedPropertySet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCPREDEFINEDPROPERTYSET] = [IFCPERMEABLECOVERINGPROPERTIES,IFCDOORPANELPROPERTIES,IFCDOORLININGPROPERTIES,IFCWINDOWPANELPROPERTIES,IFCWINDOWLININGPROPERTIES,IFCREINFORCEMENTDEFINITIONPROPERTIES];
InversePropertyDef['IFC4'][IFCPREDEFINEDPROPERTYSET] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCPROCEDURETYPE] = (d: RawLineData) => { new IFC4.IfcProcedureType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCPROCEDURETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcProcedureType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPROCEDURETYPE] = (i:IFC4.IfcProcedureType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ProcessType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPROCEDURETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4'][IFCPROCESS] = (d: RawLineData) => { new IFC4.IfcProcess(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value)); }
Constructors['IFC4'][IFCPROCESS] = (expressID:number, args: any[]) => { return new IFC4.IfcProcess(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCPROCESS] = (i:IFC4.IfcProcess):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription]; }
InheritanceDef['IFC4'][IFCPROCESS] = [IFCPROCEDURE,IFCEVENT,IFCTASK];
InversePropertyDef['IFC4'][IFCPROCESS] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4'][IFCPRODUCT] = (d: RawLineData) => { new IFC4.IfcProduct(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4'][IFCPRODUCT] = (expressID:number, args: any[]) => { return new IFC4.IfcProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCPRODUCT] = (i:IFC4.IfcProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4'][IFCPRODUCT] = [IFCDISTRIBUTIONPORT,IFCPORT,IFCGRID,IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSANITARYTERMINAL,IFCOUTLET,IFCMEDICALDEVICE,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBEAMSTANDARDCASE,IFCBEAM,IFCWINDOWSTANDARDCASE,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALLELEMENTEDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLABSTANDARDCASE,IFCSLABELEMENTEDCASE,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATESTANDARDCASE,IFCPLATE,IFCPILE,IFCMEMBERSTANDARDCASE,IFCMEMBER,IFCFOOTING,IFCDOORSTANDARDCASE,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMNSTANDARDCASE,IFCCOLUMN,IFCCHIMNEY,IFCBUILDINGELEMENTPROXY,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCVOIDINGFEATURE,IFCOPENINGSTANDARDCASE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY,IFCELEMENT,IFCANNOTATION,IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER,IFCSTRUCTURALITEM,IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION,IFCSTRUCTURALACTIVITY,IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT,IFCSPATIALELEMENT,IFCPROXY];
InversePropertyDef['IFC4'][IFCPRODUCT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCPROJECT] = (d: RawLineData) => { new IFC4.IfcProject(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcRepresentationContext>(p.value)), !d.arguments[8] ? null :new Reference<IFC4.IfcUnitAssignment>(d.arguments[8].value)); }
Constructors['IFC4'][IFCPROJECT] = (expressID:number, args: any[]) => { return new IFC4.IfcProject(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPROJECT] = (i:IFC4.IfcProject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.Phase, i.RepresentationContexts, i.UnitsInContext]; }
InversePropertyDef['IFC4'][IFCPROJECT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Declares',IFCRELDECLARES,4,true],];
FromRawLineData['IFC4'][IFCPROJECTLIBRARY] = (d: RawLineData) => { new IFC4.IfcProjectLibrary(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcRepresentationContext>(p.value)), !d.arguments[8] ? null :new Reference<IFC4.IfcUnitAssignment>(d.arguments[8].value)); }
Constructors['IFC4'][IFCPROJECTLIBRARY] = (expressID:number, args: any[]) => { return new IFC4.IfcProjectLibrary(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPROJECTLIBRARY] = (i:IFC4.IfcProjectLibrary):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.Phase, i.RepresentationContexts, i.UnitsInContext]; }
InversePropertyDef['IFC4'][IFCPROJECTLIBRARY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Declares',IFCRELDECLARES,4,true],];
FromRawLineData['IFC4'][IFCPROPERTYBOUNDEDVALUE] = (d: RawLineData) => { new IFC4.IfcPropertyBoundedValue(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC4',d.arguments[2]), !d.arguments[3] ? null :TypeInitialiser('IFC4',d.arguments[3]), !d.arguments[4] ? null :new Reference(d.arguments[4].value), !d.arguments[5] ? null :TypeInitialiser('IFC4',d.arguments[5])); }
Constructors['IFC4'][IFCPROPERTYBOUNDEDVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyBoundedValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCPROPERTYBOUNDEDVALUE] = (i:IFC4.IfcPropertyBoundedValue):unknown[] => { return [i.Name, i.Description, !i.UpperBoundValue ? null :Labelise(i.UpperBoundValue), !i.LowerBoundValue ? null :Labelise(i.LowerBoundValue), i.Unit, !i.SetPointValue ? null :Labelise(i.SetPointValue)]; }
InversePropertyDef['IFC4'][IFCPROPERTYBOUNDEDVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCPROPERTYENUMERATEDVALUE] = (d: RawLineData) => { new IFC4.IfcPropertyEnumeratedValue(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => TypeInitialiser('IFC4',p)), !d.arguments[3] ? null :new Reference<IFC4.IfcPropertyEnumeration>(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROPERTYENUMERATEDVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyEnumeratedValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROPERTYENUMERATEDVALUE] = (i:IFC4.IfcPropertyEnumeratedValue):unknown[] => { return [i.Name, i.Description, !i.EnumerationValues ? null :i.EnumerationValues.map((p:any) => Labelise(p)), i.EnumerationReference]; }
InversePropertyDef['IFC4'][IFCPROPERTYENUMERATEDVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCPROPERTYLISTVALUE] = (d: RawLineData) => { new IFC4.IfcPropertyListValue(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => TypeInitialiser('IFC4',p)), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROPERTYLISTVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyListValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROPERTYLISTVALUE] = (i:IFC4.IfcPropertyListValue):unknown[] => { return [i.Name, i.Description, !i.ListValues ? null :i.ListValues.map((p:any) => Labelise(p)), i.Unit]; }
InversePropertyDef['IFC4'][IFCPROPERTYLISTVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCPROPERTYREFERENCEVALUE] = (d: RawLineData) => { new IFC4.IfcPropertyReferenceValue(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcText(d.arguments[2].value), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROPERTYREFERENCEVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyReferenceValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROPERTYREFERENCEVALUE] = (i:IFC4.IfcPropertyReferenceValue):unknown[] => { return [i.Name, i.Description, i.UsageName, i.PropertyReference]; }
InversePropertyDef['IFC4'][IFCPROPERTYREFERENCEVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCPROPERTYSET] = (d: RawLineData) => { new IFC4.IfcPropertySet(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcProperty>(p.value))); }
Constructors['IFC4'][IFCPROPERTYSET] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertySet(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCPROPERTYSET] = (i:IFC4.IfcPropertySet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.HasProperties]; }
InversePropertyDef['IFC4'][IFCPROPERTYSET] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCPROPERTYSETTEMPLATE] = (d: RawLineData) => { new IFC4.IfcPropertySetTemplate(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), d.arguments[6].map((p:any) => new Reference<IFC4.IfcPropertyTemplate>(p.value))); }
Constructors['IFC4'][IFCPROPERTYSETTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertySetTemplate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCPROPERTYSETTEMPLATE] = (i:IFC4.IfcPropertySetTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.TemplateType, i.ApplicableEntity, i.HasPropertyTemplates]; }
InversePropertyDef['IFC4'][IFCPROPERTYSETTEMPLATE] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Defines',IFCRELDEFINESBYTEMPLATE,5,true],];
FromRawLineData['IFC4'][IFCPROPERTYSINGLEVALUE] = (d: RawLineData) => { new IFC4.IfcPropertySingleValue(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :TypeInitialiser('IFC4',d.arguments[2]), !d.arguments[3] ? null :new Reference(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROPERTYSINGLEVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertySingleValue(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROPERTYSINGLEVALUE] = (i:IFC4.IfcPropertySingleValue):unknown[] => { return [i.Name, i.Description, !i.NominalValue ? null :Labelise(i.NominalValue), i.Unit]; }
InversePropertyDef['IFC4'][IFCPROPERTYSINGLEVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCPROPERTYTABLEVALUE] = (d: RawLineData) => { new IFC4.IfcPropertyTableValue(d.ID, new IFC4.IfcIdentifier(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcText(d.arguments[1].value), !d.arguments[2] ? null :d.arguments[2].map((p:any) => TypeInitialiser('IFC4',p)), !d.arguments[3] ? null :d.arguments[3].map((p:any) => TypeInitialiser('IFC4',p)), !d.arguments[4] ? null :new IFC4.IfcText(d.arguments[4].value), !d.arguments[5] ? null :new Reference(d.arguments[5].value), !d.arguments[6] ? null :new Reference(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4'][IFCPROPERTYTABLEVALUE] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyTableValue(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCPROPERTYTABLEVALUE] = (i:IFC4.IfcPropertyTableValue):unknown[] => { return [i.Name, i.Description, !i.DefiningValues ? null :i.DefiningValues.map((p:any) => Labelise(p)), !i.DefinedValues ? null :i.DefinedValues.map((p:any) => Labelise(p)), i.Expression, i.DefiningUnit, i.DefinedUnit, i.CurveInterpolation]; }
InversePropertyDef['IFC4'][IFCPROPERTYTABLEVALUE] = [['HasExternalReferences',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['PartOfPset',IFCPROPERTYSET,4,true],['PropertyForDependance',IFCPROPERTYDEPENDENCYRELATIONSHIP,2,true],['PropertyDependsOn',IFCPROPERTYDEPENDENCYRELATIONSHIP,3,true],['PartOfComplex',IFCCOMPLEXPROPERTY,3,true],['HasConstraints',IFCRESOURCECONSTRAINTRELATIONSHIP,3,true],['HasApprovals',IFCRESOURCEAPPROVALRELATIONSHIP,2,true],];
FromRawLineData['IFC4'][IFCPROPERTYTEMPLATE] = (d: RawLineData) => { new IFC4.IfcPropertyTemplate(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCPROPERTYTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4.IfcPropertyTemplate(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPROPERTYTEMPLATE] = (i:IFC4.IfcPropertyTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCPROPERTYTEMPLATE] = [IFCCOMPLEXPROPERTYTEMPLATE,IFCSIMPLEPROPERTYTEMPLATE];
InversePropertyDef['IFC4'][IFCPROPERTYTEMPLATE] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['PartOfComplexTemplate',IFCCOMPLEXPROPERTYTEMPLATE,6,true],['PartOfPsetTemplate',IFCPROPERTYSETTEMPLATE,6,true],];
FromRawLineData['IFC4'][IFCPROXY] = (d: RawLineData) => { new IFC4.IfcProxy(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCPROXY] = (expressID:number, args: any[]) => { return new IFC4.IfcProxy(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPROXY] = (i:IFC4.IfcProxy):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.ProxyType, i.Tag]; }
InversePropertyDef['IFC4'][IFCPROXY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCRECTANGLEHOLLOWPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcRectangleHollowProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value)); }
Constructors['IFC4'][IFCRECTANGLEHOLLOWPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcRectangleHollowProfileDef(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCRECTANGLEHOLLOWPROFILEDEF] = (i:IFC4.IfcRectangleHollowProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.XDim, i.YDim, i.WallThickness, i.InnerFilletRadius, i.OuterFilletRadius]; }
InversePropertyDef['IFC4'][IFCRECTANGLEHOLLOWPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCRECTANGULARPYRAMID] = (d: RawLineData) => { new IFC4.IfcRectangularPyramid(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCRECTANGULARPYRAMID] = (expressID:number, args: any[]) => { return new IFC4.IfcRectangularPyramid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCRECTANGULARPYRAMID] = (i:IFC4.IfcRectangularPyramid):unknown[] => { return [i.Position, i.XLength, i.YLength, i.Height]; }
InversePropertyDef['IFC4'][IFCRECTANGULARPYRAMID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCRECTANGULARTRIMMEDSURFACE] = (d: RawLineData) => { new IFC4.IfcRectangularTrimmedSurface(d.ID, new Reference<IFC4.IfcSurface>(d.arguments[0].value), new IFC4.IfcParameterValue(d.arguments[1].value), new IFC4.IfcParameterValue(d.arguments[2].value), new IFC4.IfcParameterValue(d.arguments[3].value), new IFC4.IfcParameterValue(d.arguments[4].value), new IFC4.IfcBoolean(d.arguments[5].value), new IFC4.IfcBoolean(d.arguments[6].value)); }
Constructors['IFC4'][IFCRECTANGULARTRIMMEDSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcRectangularTrimmedSurface(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRECTANGULARTRIMMEDSURFACE] = (i:IFC4.IfcRectangularTrimmedSurface):unknown[] => { return [i.BasisSurface, i.U1, i.V1, i.U2, i.V2, i.Usense, i.Vsense]; }
InversePropertyDef['IFC4'][IFCRECTANGULARTRIMMEDSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (d: RawLineData) => { new IFC4.IfcReinforcementDefinitionProperties(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4.IfcSectionReinforcementProperties>(p.value))); }
Constructors['IFC4'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcReinforcementDefinitionProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = (i:IFC4.IfcReinforcementDefinitionProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.DefinitionType, i.ReinforcementSectionDefinitions]; }
InversePropertyDef['IFC4'][IFCREINFORCEMENTDEFINITIONPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCRELASSIGNS] = (d: RawLineData) => { new IFC4.IfcRelAssigns(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), d.arguments[5]); }
Constructors['IFC4'][IFCRELASSIGNS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssigns(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELASSIGNS] = (i:IFC4.IfcRelAssigns):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType]; }
InheritanceDef['IFC4'][IFCRELASSIGNS] = [IFCRELASSIGNSTORESOURCE,IFCRELASSIGNSTOPRODUCT,IFCRELASSIGNSTOPROCESS,IFCRELASSIGNSTOGROUPBYFACTOR,IFCRELASSIGNSTOGROUP,IFCRELASSIGNSTOCONTROL,IFCRELASSIGNSTOACTOR];
FromRawLineData['IFC4'][IFCRELASSIGNSTOACTOR] = (d: RawLineData) => { new IFC4.IfcRelAssignsToActor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC4.IfcActor>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcActorRole>(d.arguments[7].value)); }
Constructors['IFC4'][IFCRELASSIGNSTOACTOR] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssignsToActor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCRELASSIGNSTOACTOR] = (i:IFC4.IfcRelAssignsToActor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingActor, i.ActingRole]; }
FromRawLineData['IFC4'][IFCRELASSIGNSTOCONTROL] = (d: RawLineData) => { new IFC4.IfcRelAssignsToControl(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC4.IfcControl>(d.arguments[6].value)); }
Constructors['IFC4'][IFCRELASSIGNSTOCONTROL] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssignsToControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRELASSIGNSTOCONTROL] = (i:IFC4.IfcRelAssignsToControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingControl]; }
FromRawLineData['IFC4'][IFCRELASSIGNSTOGROUP] = (d: RawLineData) => { new IFC4.IfcRelAssignsToGroup(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC4.IfcGroup>(d.arguments[6].value)); }
Constructors['IFC4'][IFCRELASSIGNSTOGROUP] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssignsToGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRELASSIGNSTOGROUP] = (i:IFC4.IfcRelAssignsToGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingGroup]; }
InheritanceDef['IFC4'][IFCRELASSIGNSTOGROUP] = [IFCRELASSIGNSTOGROUPBYFACTOR];
FromRawLineData['IFC4'][IFCRELASSIGNSTOGROUPBYFACTOR] = (d: RawLineData) => { new IFC4.IfcRelAssignsToGroupByFactor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference<IFC4.IfcGroup>(d.arguments[6].value), new IFC4.IfcRatioMeasure(d.arguments[7].value)); }
Constructors['IFC4'][IFCRELASSIGNSTOGROUPBYFACTOR] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssignsToGroupByFactor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCRELASSIGNSTOGROUPBYFACTOR] = (i:IFC4.IfcRelAssignsToGroupByFactor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingGroup, i.Factor]; }
FromRawLineData['IFC4'][IFCRELASSIGNSTOPROCESS] = (d: RawLineData) => { new IFC4.IfcRelAssignsToProcess(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcMeasureWithUnit>(d.arguments[7].value)); }
Constructors['IFC4'][IFCRELASSIGNSTOPROCESS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssignsToProcess(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCRELASSIGNSTOPROCESS] = (i:IFC4.IfcRelAssignsToProcess):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingProcess, i.QuantityInProcess]; }
FromRawLineData['IFC4'][IFCRELASSIGNSTOPRODUCT] = (d: RawLineData) => { new IFC4.IfcRelAssignsToProduct(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference(d.arguments[6].value)); }
Constructors['IFC4'][IFCRELASSIGNSTOPRODUCT] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssignsToProduct(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRELASSIGNSTOPRODUCT] = (i:IFC4.IfcRelAssignsToProduct):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingProduct]; }
FromRawLineData['IFC4'][IFCRELASSIGNSTORESOURCE] = (d: RawLineData) => { new IFC4.IfcRelAssignsToResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), d.arguments[5], new Reference(d.arguments[6].value)); }
Constructors['IFC4'][IFCRELASSIGNSTORESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssignsToResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRELASSIGNSTORESOURCE] = (i:IFC4.IfcRelAssignsToResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatedObjectsType, i.RelatingResource]; }
FromRawLineData['IFC4'][IFCRELASSOCIATES] = (d: RawLineData) => { new IFC4.IfcRelAssociates(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCRELASSOCIATES] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssociates(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCRELASSOCIATES] = (i:IFC4.IfcRelAssociates):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects]; }
InheritanceDef['IFC4'][IFCRELASSOCIATES] = [IFCRELASSOCIATESMATERIAL,IFCRELASSOCIATESLIBRARY,IFCRELASSOCIATESDOCUMENT,IFCRELASSOCIATESCONSTRAINT,IFCRELASSOCIATESCLASSIFICATION,IFCRELASSOCIATESAPPROVAL];
FromRawLineData['IFC4'][IFCRELASSOCIATESAPPROVAL] = (d: RawLineData) => { new IFC4.IfcRelAssociatesApproval(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference<IFC4.IfcApproval>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELASSOCIATESAPPROVAL] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssociatesApproval(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELASSOCIATESAPPROVAL] = (i:IFC4.IfcRelAssociatesApproval):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingApproval]; }
FromRawLineData['IFC4'][IFCRELASSOCIATESCLASSIFICATION] = (d: RawLineData) => { new IFC4.IfcRelAssociatesClassification(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELASSOCIATESCLASSIFICATION] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssociatesClassification(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELASSOCIATESCLASSIFICATION] = (i:IFC4.IfcRelAssociatesClassification):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingClassification]; }
FromRawLineData['IFC4'][IFCRELASSOCIATESCONSTRAINT] = (d: RawLineData) => { new IFC4.IfcRelAssociatesConstraint(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), new Reference<IFC4.IfcConstraint>(d.arguments[6].value)); }
Constructors['IFC4'][IFCRELASSOCIATESCONSTRAINT] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssociatesConstraint(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRELASSOCIATESCONSTRAINT] = (i:IFC4.IfcRelAssociatesConstraint):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.Intent, i.RelatingConstraint]; }
FromRawLineData['IFC4'][IFCRELASSOCIATESDOCUMENT] = (d: RawLineData) => { new IFC4.IfcRelAssociatesDocument(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELASSOCIATESDOCUMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssociatesDocument(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELASSOCIATESDOCUMENT] = (i:IFC4.IfcRelAssociatesDocument):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingDocument]; }
FromRawLineData['IFC4'][IFCRELASSOCIATESLIBRARY] = (d: RawLineData) => { new IFC4.IfcRelAssociatesLibrary(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELASSOCIATESLIBRARY] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssociatesLibrary(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELASSOCIATESLIBRARY] = (i:IFC4.IfcRelAssociatesLibrary):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingLibrary]; }
FromRawLineData['IFC4'][IFCRELASSOCIATESMATERIAL] = (d: RawLineData) => { new IFC4.IfcRelAssociatesMaterial(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELASSOCIATESMATERIAL] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAssociatesMaterial(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELASSOCIATESMATERIAL] = (i:IFC4.IfcRelAssociatesMaterial):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingMaterial]; }
FromRawLineData['IFC4'][IFCRELCONNECTS] = (d: RawLineData) => { new IFC4.IfcRelConnects(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCRELCONNECTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnects(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCRELCONNECTS] = (i:IFC4.IfcRelConnects):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCRELCONNECTS] = [IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELSPACEBOUNDARY1STLEVEL,IFCRELSPACEBOUNDARY,IFCRELSERVICESBUILDINGS,IFCRELSEQUENCE,IFCRELREFERENCEDINSPATIALSTRUCTURE,IFCRELINTERFERESELEMENTS,IFCRELFLOWCONTROLELEMENTS,IFCRELFILLSELEMENT,IFCRELCOVERSSPACES,IFCRELCOVERSBLDGELEMENTS,IFCRELCONTAINEDINSPATIALSTRUCTURE,IFCRELCONNECTSWITHECCENTRICITY,IFCRELCONNECTSSTRUCTURALMEMBER,IFCRELCONNECTSSTRUCTURALACTIVITY,IFCRELCONNECTSPORTS,IFCRELCONNECTSPORTTOELEMENT,IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS,IFCRELCONNECTSELEMENTS];
FromRawLineData['IFC4'][IFCRELCONNECTSELEMENTS] = (d: RawLineData) => { new IFC4.IfcRelConnectsElements(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC4.IfcElement>(d.arguments[5].value), new Reference<IFC4.IfcElement>(d.arguments[6].value)); }
Constructors['IFC4'][IFCRELCONNECTSELEMENTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnectsElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRELCONNECTSELEMENTS] = (i:IFC4.IfcRelConnectsElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement]; }
InheritanceDef['IFC4'][IFCRELCONNECTSELEMENTS] = [IFCRELCONNECTSWITHREALIZINGELEMENTS,IFCRELCONNECTSPATHELEMENTS];
FromRawLineData['IFC4'][IFCRELCONNECTSPATHELEMENTS] = (d: RawLineData) => { new IFC4.IfcRelConnectsPathElements(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC4.IfcElement>(d.arguments[5].value), new Reference<IFC4.IfcElement>(d.arguments[6].value), d.arguments[7].map((p:any) => new IFC4.IfcInteger(p.value)), d.arguments[8].map((p:any) => new IFC4.IfcInteger(p.value)), d.arguments[9], d.arguments[10]); }
Constructors['IFC4'][IFCRELCONNECTSPATHELEMENTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnectsPathElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCRELCONNECTSPATHELEMENTS] = (i:IFC4.IfcRelConnectsPathElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement, i.RelatingPriorities, i.RelatedPriorities, i.RelatedConnectionType, i.RelatingConnectionType]; }
FromRawLineData['IFC4'][IFCRELCONNECTSPORTTOELEMENT] = (d: RawLineData) => { new IFC4.IfcRelConnectsPortToElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcPort>(d.arguments[4].value), new Reference<IFC4.IfcDistributionElement>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELCONNECTSPORTTOELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnectsPortToElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELCONNECTSPORTTOELEMENT] = (i:IFC4.IfcRelConnectsPortToElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingPort, i.RelatedElement]; }
FromRawLineData['IFC4'][IFCRELCONNECTSPORTS] = (d: RawLineData) => { new IFC4.IfcRelConnectsPorts(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcPort>(d.arguments[4].value), new Reference<IFC4.IfcPort>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcElement>(d.arguments[6].value)); }
Constructors['IFC4'][IFCRELCONNECTSPORTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnectsPorts(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRELCONNECTSPORTS] = (i:IFC4.IfcRelConnectsPorts):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingPort, i.RelatedPort, i.RealizingElement]; }
FromRawLineData['IFC4'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (d: RawLineData) => { new IFC4.IfcRelConnectsStructuralActivity(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC4.IfcStructuralActivity>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnectsStructuralActivity(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELCONNECTSSTRUCTURALACTIVITY] = (i:IFC4.IfcRelConnectsStructuralActivity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedStructuralActivity]; }
FromRawLineData['IFC4'][IFCRELCONNECTSSTRUCTURALMEMBER] = (d: RawLineData) => { new IFC4.IfcRelConnectsStructuralMember(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcStructuralMember>(d.arguments[4].value), new Reference<IFC4.IfcStructuralConnection>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcBoundaryCondition>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcStructuralConnectionCondition>(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[9].value)); }
Constructors['IFC4'][IFCRELCONNECTSSTRUCTURALMEMBER] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnectsStructuralMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCRELCONNECTSSTRUCTURALMEMBER] = (i:IFC4.IfcRelConnectsStructuralMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingStructuralMember, i.RelatedStructuralConnection, i.AppliedCondition, i.AdditionalConditions, i.SupportedLength, i.ConditionCoordinateSystem]; }
InheritanceDef['IFC4'][IFCRELCONNECTSSTRUCTURALMEMBER] = [IFCRELCONNECTSWITHECCENTRICITY];
FromRawLineData['IFC4'][IFCRELCONNECTSWITHECCENTRICITY] = (d: RawLineData) => { new IFC4.IfcRelConnectsWithEccentricity(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcStructuralMember>(d.arguments[4].value), new Reference<IFC4.IfcStructuralConnection>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcBoundaryCondition>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcStructuralConnectionCondition>(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[9].value), new Reference<IFC4.IfcConnectionGeometry>(d.arguments[10].value)); }
Constructors['IFC4'][IFCRELCONNECTSWITHECCENTRICITY] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnectsWithEccentricity(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCRELCONNECTSWITHECCENTRICITY] = (i:IFC4.IfcRelConnectsWithEccentricity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingStructuralMember, i.RelatedStructuralConnection, i.AppliedCondition, i.AdditionalConditions, i.SupportedLength, i.ConditionCoordinateSystem, i.ConnectionConstraint]; }
FromRawLineData['IFC4'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (d: RawLineData) => { new IFC4.IfcRelConnectsWithRealizingElements(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new Reference<IFC4.IfcConnectionGeometry>(d.arguments[4].value), new Reference<IFC4.IfcElement>(d.arguments[5].value), new Reference<IFC4.IfcElement>(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC4.IfcElement>(p.value)), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelConnectsWithRealizingElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCRELCONNECTSWITHREALIZINGELEMENTS] = (i:IFC4.IfcRelConnectsWithRealizingElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ConnectionGeometry, i.RelatingElement, i.RelatedElement, i.RealizingElements, i.ConnectionType]; }
FromRawLineData['IFC4'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (d: RawLineData) => { new IFC4.IfcRelContainedInSpatialStructure(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcProduct>(p.value)), new Reference<IFC4.IfcSpatialElement>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (expressID:number, args: any[]) => { return new IFC4.IfcRelContainedInSpatialStructure(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELCONTAINEDINSPATIALSTRUCTURE] = (i:IFC4.IfcRelContainedInSpatialStructure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedElements, i.RelatingStructure]; }
FromRawLineData['IFC4'][IFCRELCOVERSBLDGELEMENTS] = (d: RawLineData) => { new IFC4.IfcRelCoversBldgElements(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcElement>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4.IfcCovering>(p.value))); }
Constructors['IFC4'][IFCRELCOVERSBLDGELEMENTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelCoversBldgElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELCOVERSBLDGELEMENTS] = (i:IFC4.IfcRelCoversBldgElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingBuildingElement, i.RelatedCoverings]; }
FromRawLineData['IFC4'][IFCRELCOVERSSPACES] = (d: RawLineData) => { new IFC4.IfcRelCoversSpaces(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcSpace>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4.IfcCovering>(p.value))); }
Constructors['IFC4'][IFCRELCOVERSSPACES] = (expressID:number, args: any[]) => { return new IFC4.IfcRelCoversSpaces(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELCOVERSSPACES] = (i:IFC4.IfcRelCoversSpaces):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedCoverings]; }
FromRawLineData['IFC4'][IFCRELDECLARES] = (d: RawLineData) => { new IFC4.IfcRelDeclares(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcContext>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference(p.value))); }
Constructors['IFC4'][IFCRELDECLARES] = (expressID:number, args: any[]) => { return new IFC4.IfcRelDeclares(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELDECLARES] = (i:IFC4.IfcRelDeclares):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingContext, i.RelatedDefinitions]; }
FromRawLineData['IFC4'][IFCRELDECOMPOSES] = (d: RawLineData) => { new IFC4.IfcRelDecomposes(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCRELDECOMPOSES] = (expressID:number, args: any[]) => { return new IFC4.IfcRelDecomposes(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCRELDECOMPOSES] = (i:IFC4.IfcRelDecomposes):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCRELDECOMPOSES] = [IFCRELAGGREGATES,IFCRELVOIDSELEMENT,IFCRELPROJECTSELEMENT,IFCRELNESTS];
FromRawLineData['IFC4'][IFCRELDEFINES] = (d: RawLineData) => { new IFC4.IfcRelDefines(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value)); }
Constructors['IFC4'][IFCRELDEFINES] = (expressID:number, args: any[]) => { return new IFC4.IfcRelDefines(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCRELDEFINES] = (i:IFC4.IfcRelDefines):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description]; }
InheritanceDef['IFC4'][IFCRELDEFINES] = [IFCRELDEFINESBYTYPE,IFCRELDEFINESBYTEMPLATE,IFCRELDEFINESBYPROPERTIES,IFCRELDEFINESBYOBJECT];
FromRawLineData['IFC4'][IFCRELDEFINESBYOBJECT] = (d: RawLineData) => { new IFC4.IfcRelDefinesByObject(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObject>(p.value)), new Reference<IFC4.IfcObject>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELDEFINESBYOBJECT] = (expressID:number, args: any[]) => { return new IFC4.IfcRelDefinesByObject(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELDEFINESBYOBJECT] = (i:IFC4.IfcRelDefinesByObject):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingObject]; }
FromRawLineData['IFC4'][IFCRELDEFINESBYPROPERTIES] = (d: RawLineData) => { new IFC4.IfcRelDefinesByProperties(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value)), new Reference(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELDEFINESBYPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcRelDefinesByProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELDEFINESBYPROPERTIES] = (i:IFC4.IfcRelDefinesByProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingPropertyDefinition]; }
FromRawLineData['IFC4'][IFCRELDEFINESBYTEMPLATE] = (d: RawLineData) => { new IFC4.IfcRelDefinesByTemplate(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), new Reference<IFC4.IfcPropertySetTemplate>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELDEFINESBYTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4.IfcRelDefinesByTemplate(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELDEFINESBYTEMPLATE] = (i:IFC4.IfcRelDefinesByTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedPropertySets, i.RelatingTemplate]; }
FromRawLineData['IFC4'][IFCRELDEFINESBYTYPE] = (d: RawLineData) => { new IFC4.IfcRelDefinesByType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcObject>(p.value)), new Reference<IFC4.IfcTypeObject>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELDEFINESBYTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcRelDefinesByType(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELDEFINESBYTYPE] = (i:IFC4.IfcRelDefinesByType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedObjects, i.RelatingType]; }
FromRawLineData['IFC4'][IFCRELFILLSELEMENT] = (d: RawLineData) => { new IFC4.IfcRelFillsElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcOpeningElement>(d.arguments[4].value), new Reference<IFC4.IfcElement>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELFILLSELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcRelFillsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELFILLSELEMENT] = (i:IFC4.IfcRelFillsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingOpeningElement, i.RelatedBuildingElement]; }
FromRawLineData['IFC4'][IFCRELFLOWCONTROLELEMENTS] = (d: RawLineData) => { new IFC4.IfcRelFlowControlElements(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcDistributionControlElement>(p.value)), new Reference<IFC4.IfcDistributionFlowElement>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELFLOWCONTROLELEMENTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelFlowControlElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELFLOWCONTROLELEMENTS] = (i:IFC4.IfcRelFlowControlElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedControlElements, i.RelatingFlowElement]; }
FromRawLineData['IFC4'][IFCRELINTERFERESELEMENTS] = (d: RawLineData) => { new IFC4.IfcRelInterferesElements(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcElement>(d.arguments[4].value), new Reference<IFC4.IfcElement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcConnectionGeometry>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8].value); }
Constructors['IFC4'][IFCRELINTERFERESELEMENTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelInterferesElements(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCRELINTERFERESELEMENTS] = (i:IFC4.IfcRelInterferesElements):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedElement, i.InterferenceGeometry, i.InterferenceType, i.ImpliedOrder]; }
FromRawLineData['IFC4'][IFCRELNESTS] = (d: RawLineData) => { new IFC4.IfcRelNests(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcObjectDefinition>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value))); }
Constructors['IFC4'][IFCRELNESTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelNests(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELNESTS] = (i:IFC4.IfcRelNests):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingObject, i.RelatedObjects]; }
FromRawLineData['IFC4'][IFCRELPROJECTSELEMENT] = (d: RawLineData) => { new IFC4.IfcRelProjectsElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcElement>(d.arguments[4].value), new Reference<IFC4.IfcFeatureElementAddition>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELPROJECTSELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcRelProjectsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELPROJECTSELEMENT] = (i:IFC4.IfcRelProjectsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingElement, i.RelatedFeatureElement]; }
FromRawLineData['IFC4'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (d: RawLineData) => { new IFC4.IfcRelReferencedInSpatialStructure(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4].map((p:any) => new Reference<IFC4.IfcProduct>(p.value)), new Reference<IFC4.IfcSpatialElement>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (expressID:number, args: any[]) => { return new IFC4.IfcRelReferencedInSpatialStructure(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELREFERENCEDINSPATIALSTRUCTURE] = (i:IFC4.IfcRelReferencedInSpatialStructure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatedElements, i.RelatingStructure]; }
FromRawLineData['IFC4'][IFCRELSEQUENCE] = (d: RawLineData) => { new IFC4.IfcRelSequence(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcProcess>(d.arguments[4].value), new Reference<IFC4.IfcProcess>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcLagTime>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCRELSEQUENCE] = (expressID:number, args: any[]) => { return new IFC4.IfcRelSequence(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCRELSEQUENCE] = (i:IFC4.IfcRelSequence):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingProcess, i.RelatedProcess, i.TimeLag, i.SequenceType, i.UserDefinedSequenceType]; }
FromRawLineData['IFC4'][IFCRELSERVICESBUILDINGS] = (d: RawLineData) => { new IFC4.IfcRelServicesBuildings(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcSystem>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4.IfcSpatialElement>(p.value))); }
Constructors['IFC4'][IFCRELSERVICESBUILDINGS] = (expressID:number, args: any[]) => { return new IFC4.IfcRelServicesBuildings(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELSERVICESBUILDINGS] = (i:IFC4.IfcRelServicesBuildings):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSystem, i.RelatedBuildings]; }
FromRawLineData['IFC4'][IFCRELSPACEBOUNDARY] = (d: RawLineData) => { new IFC4.IfcRelSpaceBoundary(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC4.IfcElement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcConnectionGeometry>(d.arguments[6].value), d.arguments[7], d.arguments[8]); }
Constructors['IFC4'][IFCRELSPACEBOUNDARY] = (expressID:number, args: any[]) => { return new IFC4.IfcRelSpaceBoundary(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCRELSPACEBOUNDARY] = (i:IFC4.IfcRelSpaceBoundary):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedBuildingElement, i.ConnectionGeometry, i.PhysicalOrVirtualBoundary, i.InternalOrExternalBoundary]; }
InheritanceDef['IFC4'][IFCRELSPACEBOUNDARY] = [IFCRELSPACEBOUNDARY2NDLEVEL,IFCRELSPACEBOUNDARY1STLEVEL];
FromRawLineData['IFC4'][IFCRELSPACEBOUNDARY1STLEVEL] = (d: RawLineData) => { new IFC4.IfcRelSpaceBoundary1stLevel(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC4.IfcElement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcConnectionGeometry>(d.arguments[6].value), d.arguments[7], d.arguments[8], !d.arguments[9] ? null :new Reference<IFC4.IfcRelSpaceBoundary1stLevel>(d.arguments[9].value)); }
Constructors['IFC4'][IFCRELSPACEBOUNDARY1STLEVEL] = (expressID:number, args: any[]) => { return new IFC4.IfcRelSpaceBoundary1stLevel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCRELSPACEBOUNDARY1STLEVEL] = (i:IFC4.IfcRelSpaceBoundary1stLevel):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedBuildingElement, i.ConnectionGeometry, i.PhysicalOrVirtualBoundary, i.InternalOrExternalBoundary, i.ParentBoundary]; }
InheritanceDef['IFC4'][IFCRELSPACEBOUNDARY1STLEVEL] = [IFCRELSPACEBOUNDARY2NDLEVEL];
InversePropertyDef['IFC4'][IFCRELSPACEBOUNDARY1STLEVEL] = [['InnerBoundaries',IFCRELSPACEBOUNDARY1STLEVEL,9,true],];
FromRawLineData['IFC4'][IFCRELSPACEBOUNDARY2NDLEVEL] = (d: RawLineData) => { new IFC4.IfcRelSpaceBoundary2ndLevel(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference(d.arguments[4].value), new Reference<IFC4.IfcElement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcConnectionGeometry>(d.arguments[6].value), d.arguments[7], d.arguments[8], !d.arguments[9] ? null :new Reference<IFC4.IfcRelSpaceBoundary1stLevel>(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC4.IfcRelSpaceBoundary2ndLevel>(d.arguments[10].value)); }
Constructors['IFC4'][IFCRELSPACEBOUNDARY2NDLEVEL] = (expressID:number, args: any[]) => { return new IFC4.IfcRelSpaceBoundary2ndLevel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCRELSPACEBOUNDARY2NDLEVEL] = (i:IFC4.IfcRelSpaceBoundary2ndLevel):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingSpace, i.RelatedBuildingElement, i.ConnectionGeometry, i.PhysicalOrVirtualBoundary, i.InternalOrExternalBoundary, i.ParentBoundary, i.CorrespondingBoundary]; }
InversePropertyDef['IFC4'][IFCRELSPACEBOUNDARY2NDLEVEL] = [['InnerBoundaries',IFCRELSPACEBOUNDARY1STLEVEL,9,true],['Corresponds',IFCRELSPACEBOUNDARY2NDLEVEL,10,true],];
FromRawLineData['IFC4'][IFCRELVOIDSELEMENT] = (d: RawLineData) => { new IFC4.IfcRelVoidsElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcElement>(d.arguments[4].value), new Reference<IFC4.IfcFeatureElementSubtraction>(d.arguments[5].value)); }
Constructors['IFC4'][IFCRELVOIDSELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcRelVoidsElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELVOIDSELEMENT] = (i:IFC4.IfcRelVoidsElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingBuildingElement, i.RelatedOpeningElement]; }
FromRawLineData['IFC4'][IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (d: RawLineData) => { new IFC4.IfcReparametrisedCompositeCurveSegment(d.ID, d.arguments[0], new IFC4.IfcBoolean(d.arguments[1].value), new Reference<IFC4.IfcCurve>(d.arguments[2].value), new IFC4.IfcParameterValue(d.arguments[3].value)); }
Constructors['IFC4'][IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcReparametrisedCompositeCurveSegment(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = (i:IFC4.IfcReparametrisedCompositeCurveSegment):unknown[] => { return [i.Transition, i.SameSense, i.ParentCurve, i.ParamLength]; }
InversePropertyDef['IFC4'][IFCREPARAMETRISEDCOMPOSITECURVESEGMENT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['UsingCurves',IFCCOMPOSITECURVE,0,true],];
FromRawLineData['IFC4'][IFCRESOURCE] = (d: RawLineData) => { new IFC4.IfcResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value)); }
Constructors['IFC4'][IFCRESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCRESOURCE] = (i:IFC4.IfcResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription]; }
InheritanceDef['IFC4'][IFCRESOURCE] = [IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE,IFCCONSTRUCTIONRESOURCE];
InversePropertyDef['IFC4'][IFCRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCREVOLVEDAREASOLID] = (d: RawLineData) => { new IFC4.IfcRevolvedAreaSolid(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4.IfcAxis1Placement>(d.arguments[2].value), new IFC4.IfcPlaneAngleMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCREVOLVEDAREASOLID] = (expressID:number, args: any[]) => { return new IFC4.IfcRevolvedAreaSolid(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCREVOLVEDAREASOLID] = (i:IFC4.IfcRevolvedAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Axis, i.Angle]; }
InheritanceDef['IFC4'][IFCREVOLVEDAREASOLID] = [IFCREVOLVEDAREASOLIDTAPERED];
InversePropertyDef['IFC4'][IFCREVOLVEDAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCREVOLVEDAREASOLIDTAPERED] = (d: RawLineData) => { new IFC4.IfcRevolvedAreaSolidTapered(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4.IfcAxis1Placement>(d.arguments[2].value), new IFC4.IfcPlaneAngleMeasure(d.arguments[3].value), new Reference<IFC4.IfcProfileDef>(d.arguments[4].value)); }
Constructors['IFC4'][IFCREVOLVEDAREASOLIDTAPERED] = (expressID:number, args: any[]) => { return new IFC4.IfcRevolvedAreaSolidTapered(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCREVOLVEDAREASOLIDTAPERED] = (i:IFC4.IfcRevolvedAreaSolidTapered):unknown[] => { return [i.SweptArea, i.Position, i.Axis, i.Angle, i.EndSweptArea]; }
InversePropertyDef['IFC4'][IFCREVOLVEDAREASOLIDTAPERED] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCRIGHTCIRCULARCONE] = (d: RawLineData) => { new IFC4.IfcRightCircularCone(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4'][IFCRIGHTCIRCULARCONE] = (expressID:number, args: any[]) => { return new IFC4.IfcRightCircularCone(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCRIGHTCIRCULARCONE] = (i:IFC4.IfcRightCircularCone):unknown[] => { return [i.Position, i.Height, i.BottomRadius]; }
InversePropertyDef['IFC4'][IFCRIGHTCIRCULARCONE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCRIGHTCIRCULARCYLINDER] = (d: RawLineData) => { new IFC4.IfcRightCircularCylinder(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4'][IFCRIGHTCIRCULARCYLINDER] = (expressID:number, args: any[]) => { return new IFC4.IfcRightCircularCylinder(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCRIGHTCIRCULARCYLINDER] = (i:IFC4.IfcRightCircularCylinder):unknown[] => { return [i.Position, i.Height, i.Radius]; }
InversePropertyDef['IFC4'][IFCRIGHTCIRCULARCYLINDER] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSIMPLEPROPERTYTEMPLATE] = (d: RawLineData) => { new IFC4.IfcSimplePropertyTemplate(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4], !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcPropertyEnumeration>(d.arguments[7].value), !d.arguments[8] ? null :new Reference(d.arguments[8].value), !d.arguments[9] ? null :new Reference(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcLabel(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4'][IFCSIMPLEPROPERTYTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4.IfcSimplePropertyTemplate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCSIMPLEPROPERTYTEMPLATE] = (i:IFC4.IfcSimplePropertyTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.TemplateType, i.PrimaryMeasureType, i.SecondaryMeasureType, i.Enumerators, i.PrimaryUnit, i.SecondaryUnit, i.Expression, i.AccessState]; }
InversePropertyDef['IFC4'][IFCSIMPLEPROPERTYTEMPLATE] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['PartOfComplexTemplate',IFCCOMPLEXPROPERTYTEMPLATE,6,true],['PartOfPsetTemplate',IFCPROPERTYSETTEMPLATE,6,true],];
FromRawLineData['IFC4'][IFCSPATIALELEMENT] = (d: RawLineData) => { new IFC4.IfcSpatialElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value)); }
Constructors['IFC4'][IFCSPATIALELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcSpatialElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCSPATIALELEMENT] = (i:IFC4.IfcSpatialElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName]; }
InheritanceDef['IFC4'][IFCSPATIALELEMENT] = [IFCEXTERNALSPATIALELEMENT,IFCEXTERNALSPATIALSTRUCTUREELEMENT,IFCSPATIALZONE,IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING,IFCSPATIALSTRUCTUREELEMENT];
InversePropertyDef['IFC4'][IFCSPATIALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC4'][IFCSPATIALELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcSpatialElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCSPATIALELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSpatialElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSPATIALELEMENTTYPE] = (i:IFC4.IfcSpatialElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCSPATIALELEMENTTYPE] = [IFCSPATIALZONETYPE,IFCSPACETYPE,IFCSPATIALSTRUCTUREELEMENTTYPE];
InversePropertyDef['IFC4'][IFCSPATIALELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSPATIALSTRUCTUREELEMENT] = (d: RawLineData) => { new IFC4.IfcSpatialStructureElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSPATIALSTRUCTUREELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcSpatialStructureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSPATIALSTRUCTUREELEMENT] = (i:IFC4.IfcSpatialStructureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType]; }
InheritanceDef['IFC4'][IFCSPATIALSTRUCTUREELEMENT] = [IFCSPACE,IFCSITE,IFCBUILDINGSTOREY,IFCBUILDING];
InversePropertyDef['IFC4'][IFCSPATIALSTRUCTUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC4'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcSpatialStructureElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSpatialStructureElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSPATIALSTRUCTUREELEMENTTYPE] = (i:IFC4.IfcSpatialStructureElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCSPATIALSTRUCTUREELEMENTTYPE] = [IFCSPACETYPE];
InversePropertyDef['IFC4'][IFCSPATIALSTRUCTUREELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSPATIALZONE] = (d: RawLineData) => { new IFC4.IfcSpatialZone(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSPATIALZONE] = (expressID:number, args: any[]) => { return new IFC4.IfcSpatialZone(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSPATIALZONE] = (i:IFC4.IfcSpatialZone):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSPATIALZONE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC4'][IFCSPATIALZONETYPE] = (d: RawLineData) => { new IFC4.IfcSpatialZoneType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcLabel(d.arguments[10].value)); }
Constructors['IFC4'][IFCSPATIALZONETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSpatialZoneType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCSPATIALZONETYPE] = (i:IFC4.IfcSpatialZoneType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.LongName]; }
InversePropertyDef['IFC4'][IFCSPATIALZONETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSPHERE] = (d: RawLineData) => { new IFC4.IfcSphere(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4'][IFCSPHERE] = (expressID:number, args: any[]) => { return new IFC4.IfcSphere(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCSPHERE] = (i:IFC4.IfcSphere):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC4'][IFCSPHERE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSPHERICALSURFACE] = (d: RawLineData) => { new IFC4.IfcSphericalSurface(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4'][IFCSPHERICALSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcSphericalSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCSPHERICALSURFACE] = (i:IFC4.IfcSphericalSurface):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC4'][IFCSPHERICALSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALACTIVITY] = (d: RawLineData) => { new IFC4.IfcStructuralActivity(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSTRUCTURALACTIVITY] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralActivity(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALACTIVITY] = (i:IFC4.IfcStructuralActivity):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InheritanceDef['IFC4'][IFCSTRUCTURALACTIVITY] = [IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION,IFCSTRUCTURALACTION,IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION,IFCSTRUCTURALREACTION];
InversePropertyDef['IFC4'][IFCSTRUCTURALACTIVITY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALITEM] = (d: RawLineData) => { new IFC4.IfcStructuralItem(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4'][IFCSTRUCTURALITEM] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralItem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCSTRUCTURALITEM] = (i:IFC4.IfcStructuralItem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4'][IFCSTRUCTURALITEM] = [IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION,IFCSTRUCTURALCONNECTION,IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER,IFCSTRUCTURALMEMBER];
InversePropertyDef['IFC4'][IFCSTRUCTURALITEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALMEMBER] = (d: RawLineData) => { new IFC4.IfcStructuralMember(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4'][IFCSTRUCTURALMEMBER] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCSTRUCTURALMEMBER] = (i:IFC4.IfcStructuralMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4'][IFCSTRUCTURALMEMBER] = [IFCSTRUCTURALCURVEMEMBERVARYING,IFCSTRUCTURALCURVEMEMBER,IFCSTRUCTURALSURFACEMEMBERVARYING,IFCSTRUCTURALSURFACEMEMBER];
InversePropertyDef['IFC4'][IFCSTRUCTURALMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALREACTION] = (d: RawLineData) => { new IFC4.IfcStructuralReaction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSTRUCTURALREACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALREACTION] = (i:IFC4.IfcStructuralReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InheritanceDef['IFC4'][IFCSTRUCTURALREACTION] = [IFCSTRUCTURALPOINTREACTION,IFCSTRUCTURALCURVEREACTION,IFCSTRUCTURALSURFACEREACTION];
InversePropertyDef['IFC4'][IFCSTRUCTURALREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALSURFACEMEMBER] = (d: RawLineData) => { new IFC4.IfcStructuralSurfaceMember(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4'][IFCSTRUCTURALSURFACEMEMBER] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralSurfaceMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALSURFACEMEMBER] = (i:IFC4.IfcStructuralSurfaceMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Thickness]; }
InheritanceDef['IFC4'][IFCSTRUCTURALSURFACEMEMBER] = [IFCSTRUCTURALSURFACEMEMBERVARYING];
InversePropertyDef['IFC4'][IFCSTRUCTURALSURFACEMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (d: RawLineData) => { new IFC4.IfcStructuralSurfaceMemberVarying(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[8].value)); }
Constructors['IFC4'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralSurfaceMemberVarying(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALSURFACEMEMBERVARYING] = (i:IFC4.IfcStructuralSurfaceMemberVarying):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Thickness]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALSURFACEMEMBERVARYING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALSURFACEREACTION] = (d: RawLineData) => { new IFC4.IfcStructuralSurfaceReaction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4'][IFCSTRUCTURALSURFACEREACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralSurfaceReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTRUCTURALSURFACEREACTION] = (i:IFC4.IfcStructuralSurfaceReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALSURFACEREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSUBCONTRACTRESOURCETYPE] = (d: RawLineData) => { new IFC4.IfcSubContractResourceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4'][IFCSUBCONTRACTRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSubContractResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCSUBCONTRACTRESOURCETYPE] = (i:IFC4.IfcSubContractResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSUBCONTRACTRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCSURFACECURVE] = (d: RawLineData) => { new IFC4.IfcSurfaceCurve(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcPcurve>(p.value)), d.arguments[2]); }
Constructors['IFC4'][IFCSURFACECURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSURFACECURVE] = (i:IFC4.IfcSurfaceCurve):unknown[] => { return [i.Curve3D, i.AssociatedGeometry, i.MasterRepresentation]; }
InheritanceDef['IFC4'][IFCSURFACECURVE] = [IFCSEAMCURVE,IFCINTERSECTIONCURVE];
InversePropertyDef['IFC4'][IFCSURFACECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSURFACECURVESWEPTAREASOLID] = (d: RawLineData) => { new IFC4.IfcSurfaceCurveSweptAreaSolid(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4.IfcCurve>(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcParameterValue(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcParameterValue(d.arguments[4].value), new Reference<IFC4.IfcSurface>(d.arguments[5].value)); }
Constructors['IFC4'][IFCSURFACECURVESWEPTAREASOLID] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceCurveSweptAreaSolid(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCSURFACECURVESWEPTAREASOLID] = (i:IFC4.IfcSurfaceCurveSweptAreaSolid):unknown[] => { return [i.SweptArea, i.Position, i.Directrix, i.StartParam, i.EndParam, i.ReferenceSurface]; }
InversePropertyDef['IFC4'][IFCSURFACECURVESWEPTAREASOLID] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSURFACEOFLINEAREXTRUSION] = (d: RawLineData) => { new IFC4.IfcSurfaceOfLinearExtrusion(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4.IfcDirection>(d.arguments[2].value), new IFC4.IfcLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCSURFACEOFLINEAREXTRUSION] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceOfLinearExtrusion(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCSURFACEOFLINEAREXTRUSION] = (i:IFC4.IfcSurfaceOfLinearExtrusion):unknown[] => { return [i.SweptCurve, i.Position, i.ExtrudedDirection, i.Depth]; }
InversePropertyDef['IFC4'][IFCSURFACEOFLINEAREXTRUSION] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSURFACEOFREVOLUTION] = (d: RawLineData) => { new IFC4.IfcSurfaceOfRevolution(d.ID, new Reference<IFC4.IfcProfileDef>(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[1].value), new Reference<IFC4.IfcAxis1Placement>(d.arguments[2].value)); }
Constructors['IFC4'][IFCSURFACEOFREVOLUTION] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceOfRevolution(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSURFACEOFREVOLUTION] = (i:IFC4.IfcSurfaceOfRevolution):unknown[] => { return [i.SweptCurve, i.Position, i.AxisPosition]; }
InversePropertyDef['IFC4'][IFCSURFACEOFREVOLUTION] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSYSTEMFURNITUREELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcSystemFurnitureElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSYSTEMFURNITUREELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSystemFurnitureElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSYSTEMFURNITUREELEMENTTYPE] = (i:IFC4.IfcSystemFurnitureElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSYSTEMFURNITUREELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCTASK] = (d: RawLineData) => { new IFC4.IfcTask(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), new IFC4.IfcBoolean(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcInteger(d.arguments[10].value), !d.arguments[11] ? null :new Reference<IFC4.IfcTaskTime>(d.arguments[11].value), d.arguments[12]); }
Constructors['IFC4'][IFCTASK] = (expressID:number, args: any[]) => { return new IFC4.IfcTask(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCTASK] = (i:IFC4.IfcTask):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Status, i.WorkMethod, i.IsMilestone, i.Priority, i.TaskTime, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTASK] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4'][IFCTASKTYPE] = (d: RawLineData) => { new IFC4.IfcTaskType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcLabel(d.arguments[10].value)); }
Constructors['IFC4'][IFCTASKTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcTaskType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCTASKTYPE] = (i:IFC4.IfcTaskType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ProcessType, i.PredefinedType, i.WorkMethod]; }
InversePropertyDef['IFC4'][IFCTASKTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4'][IFCTESSELLATEDFACESET] = (d: RawLineData) => { new IFC4.IfcTessellatedFaceSet(d.ID, new Reference<IFC4.IfcCartesianPointList3D>(d.arguments[0].value)); }
Constructors['IFC4'][IFCTESSELLATEDFACESET] = (expressID:number, args: any[]) => { return new IFC4.IfcTessellatedFaceSet(expressID, args[0]); }
ToRawLineData['IFC4'][IFCTESSELLATEDFACESET] = (i:IFC4.IfcTessellatedFaceSet):unknown[] => { return [i.Coordinates]; }
InheritanceDef['IFC4'][IFCTESSELLATEDFACESET] = [IFCPOLYGONALFACESET,IFCTRIANGULATEDFACESET];
InversePropertyDef['IFC4'][IFCTESSELLATEDFACESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasColours',IFCINDEXEDCOLOURMAP,0,true],['HasTextures',IFCINDEXEDTEXTUREMAP,1,true],];
FromRawLineData['IFC4'][IFCTOROIDALSURFACE] = (d: RawLineData) => { new IFC4.IfcToroidalSurface(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4'][IFCTOROIDALSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcToroidalSurface(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCTOROIDALSURFACE] = (i:IFC4.IfcToroidalSurface):unknown[] => { return [i.Position, i.MajorRadius, i.MinorRadius]; }
InversePropertyDef['IFC4'][IFCTOROIDALSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCTRANSPORTELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcTransportElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCTRANSPORTELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcTransportElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCTRANSPORTELEMENTTYPE] = (i:IFC4.IfcTransportElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTRANSPORTELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCTRIANGULATEDFACESET] = (d: RawLineData) => { new IFC4.IfcTriangulatedFaceSet(d.ID, new Reference<IFC4.IfcCartesianPointList3D>(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => new IFC4.IfcParameterValue(p.value)), !d.arguments[2] ? null :new IFC4.IfcBoolean(d.arguments[2].value), d.arguments[3].map((p:any) => new IFC4.IfcPositiveInteger(p.value)), !d.arguments[4] ? null :d.arguments[4].map((p:any) => new IFC4.IfcPositiveInteger(p.value))); }
Constructors['IFC4'][IFCTRIANGULATEDFACESET] = (expressID:number, args: any[]) => { return new IFC4.IfcTriangulatedFaceSet(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCTRIANGULATEDFACESET] = (i:IFC4.IfcTriangulatedFaceSet):unknown[] => { return [i.Coordinates, i.Normals, i.Closed, i.CoordIndex, i.PnIndex]; }
InversePropertyDef['IFC4'][IFCTRIANGULATEDFACESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasColours',IFCINDEXEDCOLOURMAP,0,true],['HasTextures',IFCINDEXEDTEXTUREMAP,1,true],];
FromRawLineData['IFC4'][IFCWINDOWLININGPROPERTIES] = (d: RawLineData) => { new IFC4.IfcWindowLiningProperties(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[11].value), !d.arguments[12] ? null :new Reference<IFC4.IfcShapeAspect>(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcLengthMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC4.IfcLengthMeasure(d.arguments[15].value)); }
Constructors['IFC4'][IFCWINDOWLININGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcWindowLiningProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15]); }
ToRawLineData['IFC4'][IFCWINDOWLININGPROPERTIES] = (i:IFC4.IfcWindowLiningProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.LiningDepth, i.LiningThickness, i.TransomThickness, i.MullionThickness, i.FirstTransomOffset, i.SecondTransomOffset, i.FirstMullionOffset, i.SecondMullionOffset, i.ShapeAspectStyle, i.LiningOffset, i.LiningToPanelOffsetX, i.LiningToPanelOffsetY]; }
InversePropertyDef['IFC4'][IFCWINDOWLININGPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCWINDOWPANELPROPERTIES] = (d: RawLineData) => { new IFC4.IfcWindowPanelProperties(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC4.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC4'][IFCWINDOWPANELPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcWindowPanelProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCWINDOWPANELPROPERTIES] = (i:IFC4.IfcWindowPanelProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.OperationType, i.PanelPosition, i.FrameDepth, i.FrameThickness, i.ShapeAspectStyle]; }
InversePropertyDef['IFC4'][IFCWINDOWPANELPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCACTOR] = (d: RawLineData) => { new IFC4.IfcActor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), new Reference(d.arguments[5].value)); }
Constructors['IFC4'][IFCACTOR] = (expressID:number, args: any[]) => { return new IFC4.IfcActor(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCACTOR] = (i:IFC4.IfcActor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheActor]; }
InheritanceDef['IFC4'][IFCACTOR] = [IFCOCCUPANT];
InversePropertyDef['IFC4'][IFCACTOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsActingUpon',IFCRELASSIGNSTOACTOR,6,true],];
FromRawLineData['IFC4'][IFCADVANCEDBREP] = (d: RawLineData) => { new IFC4.IfcAdvancedBrep(d.ID, new Reference<IFC4.IfcClosedShell>(d.arguments[0].value)); }
Constructors['IFC4'][IFCADVANCEDBREP] = (expressID:number, args: any[]) => { return new IFC4.IfcAdvancedBrep(expressID, args[0]); }
ToRawLineData['IFC4'][IFCADVANCEDBREP] = (i:IFC4.IfcAdvancedBrep):unknown[] => { return [i.Outer]; }
InheritanceDef['IFC4'][IFCADVANCEDBREP] = [IFCADVANCEDBREPWITHVOIDS];
InversePropertyDef['IFC4'][IFCADVANCEDBREP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCADVANCEDBREPWITHVOIDS] = (d: RawLineData) => { new IFC4.IfcAdvancedBrepWithVoids(d.ID, new Reference<IFC4.IfcClosedShell>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcClosedShell>(p.value))); }
Constructors['IFC4'][IFCADVANCEDBREPWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4.IfcAdvancedBrepWithVoids(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCADVANCEDBREPWITHVOIDS] = (i:IFC4.IfcAdvancedBrepWithVoids):unknown[] => { return [i.Outer, i.Voids]; }
InversePropertyDef['IFC4'][IFCADVANCEDBREPWITHVOIDS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCANNOTATION] = (d: RawLineData) => { new IFC4.IfcAnnotation(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4'][IFCANNOTATION] = (expressID:number, args: any[]) => { return new IFC4.IfcAnnotation(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCANNOTATION] = (i:IFC4.IfcAnnotation):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InversePropertyDef['IFC4'][IFCANNOTATION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4'][IFCBSPLINESURFACE] = (d: RawLineData) => { new IFC4.IfcBSplineSurface(d.ID, new IFC4.IfcInteger(d.arguments[0].value), new IFC4.IfcInteger(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcCartesianPoint>(p.value)), d.arguments[3], new IFC4.IfcLogical(d.arguments[4].value), new IFC4.IfcLogical(d.arguments[5].value), new IFC4.IfcLogical(d.arguments[6].value)); }
Constructors['IFC4'][IFCBSPLINESURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcBSplineSurface(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCBSPLINESURFACE] = (i:IFC4.IfcBSplineSurface):unknown[] => { return [i.UDegree, i.VDegree, i.ControlPointsList, i.SurfaceForm, i.UClosed, i.VClosed, i.SelfIntersect]; }
InheritanceDef['IFC4'][IFCBSPLINESURFACE] = [IFCRATIONALBSPLINESURFACEWITHKNOTS,IFCBSPLINESURFACEWITHKNOTS];
InversePropertyDef['IFC4'][IFCBSPLINESURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBSPLINESURFACEWITHKNOTS] = (d: RawLineData) => { new IFC4.IfcBSplineSurfaceWithKnots(d.ID, new IFC4.IfcInteger(d.arguments[0].value), new IFC4.IfcInteger(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcCartesianPoint>(p.value)), d.arguments[3], new IFC4.IfcLogical(d.arguments[4].value), new IFC4.IfcLogical(d.arguments[5].value), new IFC4.IfcLogical(d.arguments[6].value), d.arguments[7].map((p:any) => new IFC4.IfcInteger(p.value)), d.arguments[8].map((p:any) => new IFC4.IfcInteger(p.value)), d.arguments[9].map((p:any) => new IFC4.IfcParameterValue(p.value)), d.arguments[10].map((p:any) => new IFC4.IfcParameterValue(p.value)), d.arguments[11]); }
Constructors['IFC4'][IFCBSPLINESURFACEWITHKNOTS] = (expressID:number, args: any[]) => { return new IFC4.IfcBSplineSurfaceWithKnots(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCBSPLINESURFACEWITHKNOTS] = (i:IFC4.IfcBSplineSurfaceWithKnots):unknown[] => { return [i.UDegree, i.VDegree, i.ControlPointsList, i.SurfaceForm, i.UClosed, i.VClosed, i.SelfIntersect, i.UMultiplicities, i.VMultiplicities, i.UKnots, i.VKnots, i.KnotSpec]; }
InheritanceDef['IFC4'][IFCBSPLINESURFACEWITHKNOTS] = [IFCRATIONALBSPLINESURFACEWITHKNOTS];
InversePropertyDef['IFC4'][IFCBSPLINESURFACEWITHKNOTS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBLOCK] = (d: RawLineData) => { new IFC4.IfcBlock(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value)); }
Constructors['IFC4'][IFCBLOCK] = (expressID:number, args: any[]) => { return new IFC4.IfcBlock(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCBLOCK] = (i:IFC4.IfcBlock):unknown[] => { return [i.Position, i.XLength, i.YLength, i.ZLength]; }
InversePropertyDef['IFC4'][IFCBLOCK] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBOOLEANCLIPPINGRESULT] = (d: RawLineData) => { new IFC4.IfcBooleanClippingResult(d.ID, d.arguments[0], new Reference(d.arguments[1].value), new Reference(d.arguments[2].value)); }
Constructors['IFC4'][IFCBOOLEANCLIPPINGRESULT] = (expressID:number, args: any[]) => { return new IFC4.IfcBooleanClippingResult(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCBOOLEANCLIPPINGRESULT] = (i:IFC4.IfcBooleanClippingResult):unknown[] => { return [i.Operator, i.FirstOperand, i.SecondOperand]; }
InversePropertyDef['IFC4'][IFCBOOLEANCLIPPINGRESULT] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBOUNDEDCURVE] = (d: RawLineData) => { new IFC4.IfcBoundedCurve(d.ID, ); }
Constructors['IFC4'][IFCBOUNDEDCURVE] = (expressID:number, _:any) => { return new IFC4.IfcBoundedCurve(expressID, ); }
ToRawLineData['IFC4'][IFCBOUNDEDCURVE] = (_:any):unknown[] => { return []; }
InheritanceDef['IFC4'][IFCBOUNDEDCURVE] = [IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS,IFCBSPLINECURVE,IFCTRIMMEDCURVE,IFCPOLYLINE,IFCINDEXEDPOLYCURVE,IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE,IFCCOMPOSITECURVE];
InversePropertyDef['IFC4'][IFCBOUNDEDCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBUILDING] = (d: RawLineData) => { new IFC4.IfcBuilding(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new Reference<IFC4.IfcPostalAddress>(d.arguments[11].value)); }
Constructors['IFC4'][IFCBUILDING] = (expressID:number, args: any[]) => { return new IFC4.IfcBuilding(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCBUILDING] = (i:IFC4.IfcBuilding):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.ElevationOfRefHeight, i.ElevationOfTerrain, i.BuildingAddress]; }
InversePropertyDef['IFC4'][IFCBUILDING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC4'][IFCBUILDINGELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcBuildingElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCBUILDINGELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcBuildingElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCBUILDINGELEMENTTYPE] = (i:IFC4.IfcBuildingElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCBUILDINGELEMENTTYPE] = [IFCBUILDINGELEMENTPROXYTYPE,IFCBEAMTYPE,IFCWINDOWTYPE,IFCWALLTYPE,IFCSTAIRTYPE,IFCSTAIRFLIGHTTYPE,IFCSLABTYPE,IFCSHADINGDEVICETYPE,IFCROOFTYPE,IFCRAMPTYPE,IFCRAMPFLIGHTTYPE,IFCRAILINGTYPE,IFCPLATETYPE,IFCPILETYPE,IFCMEMBERTYPE,IFCFOOTINGTYPE,IFCDOORTYPE,IFCCURTAINWALLTYPE,IFCCOVERINGTYPE,IFCCOLUMNTYPE,IFCCHIMNEYTYPE];
InversePropertyDef['IFC4'][IFCBUILDINGELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCBUILDINGSTOREY] = (d: RawLineData) => { new IFC4.IfcBuildingStorey(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcLengthMeasure(d.arguments[9].value)); }
Constructors['IFC4'][IFCBUILDINGSTOREY] = (expressID:number, args: any[]) => { return new IFC4.IfcBuildingStorey(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCBUILDINGSTOREY] = (i:IFC4.IfcBuildingStorey):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.Elevation]; }
InversePropertyDef['IFC4'][IFCBUILDINGSTOREY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC4'][IFCCHIMNEYTYPE] = (d: RawLineData) => { new IFC4.IfcChimneyType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCHIMNEYTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcChimneyType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCHIMNEYTYPE] = (i:IFC4.IfcChimneyType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCHIMNEYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCIRCLEHOLLOWPROFILEDEF] = (d: RawLineData) => { new IFC4.IfcCircleHollowProfileDef(d.ID, d.arguments[0], !d.arguments[1] ? null :new IFC4.IfcLabel(d.arguments[1].value), !d.arguments[2] ? null :new Reference<IFC4.IfcAxis2Placement2D>(d.arguments[2].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[3].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value)); }
Constructors['IFC4'][IFCCIRCLEHOLLOWPROFILEDEF] = (expressID:number, args: any[]) => { return new IFC4.IfcCircleHollowProfileDef(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCCIRCLEHOLLOWPROFILEDEF] = (i:IFC4.IfcCircleHollowProfileDef):unknown[] => { return [i.ProfileType, i.ProfileName, i.Position, i.Radius, i.WallThickness]; }
InversePropertyDef['IFC4'][IFCCIRCLEHOLLOWPROFILEDEF] = [['HasExternalReference',IFCEXTERNALREFERENCERELATIONSHIP,3,true],['HasProperties',IFCPROFILEPROPERTIES,3,true],];
FromRawLineData['IFC4'][IFCCIVILELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcCivilElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCCIVILELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCivilElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCIVILELEMENTTYPE] = (i:IFC4.IfcCivilElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InversePropertyDef['IFC4'][IFCCIVILELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCOLUMNTYPE] = (d: RawLineData) => { new IFC4.IfcColumnType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCOLUMNTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcColumnType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOLUMNTYPE] = (i:IFC4.IfcColumnType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOLUMNTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCOMPLEXPROPERTYTEMPLATE] = (d: RawLineData) => { new IFC4.IfcComplexPropertyTemplate(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcPropertyTemplate>(p.value))); }
Constructors['IFC4'][IFCCOMPLEXPROPERTYTEMPLATE] = (expressID:number, args: any[]) => { return new IFC4.IfcComplexPropertyTemplate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCCOMPLEXPROPERTYTEMPLATE] = (i:IFC4.IfcComplexPropertyTemplate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.UsageName, i.TemplateType, i.HasPropertyTemplates]; }
InversePropertyDef['IFC4'][IFCCOMPLEXPROPERTYTEMPLATE] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['PartOfComplexTemplate',IFCCOMPLEXPROPERTYTEMPLATE,6,true],['PartOfPsetTemplate',IFCPROPERTYSETTEMPLATE,6,true],];
FromRawLineData['IFC4'][IFCCOMPOSITECURVE] = (d: RawLineData) => { new IFC4.IfcCompositeCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcCompositeCurveSegment>(p.value)), new IFC4.IfcLogical(d.arguments[1].value)); }
Constructors['IFC4'][IFCCOMPOSITECURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcCompositeCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCOMPOSITECURVE] = (i:IFC4.IfcCompositeCurve):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InheritanceDef['IFC4'][IFCCOMPOSITECURVE] = [IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE,IFCCOMPOSITECURVEONSURFACE];
InversePropertyDef['IFC4'][IFCCOMPOSITECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCOMPOSITECURVEONSURFACE] = (d: RawLineData) => { new IFC4.IfcCompositeCurveOnSurface(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcCompositeCurveSegment>(p.value)), new IFC4.IfcLogical(d.arguments[1].value)); }
Constructors['IFC4'][IFCCOMPOSITECURVEONSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcCompositeCurveOnSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCOMPOSITECURVEONSURFACE] = (i:IFC4.IfcCompositeCurveOnSurface):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InheritanceDef['IFC4'][IFCCOMPOSITECURVEONSURFACE] = [IFCOUTERBOUNDARYCURVE,IFCBOUNDARYCURVE];
InversePropertyDef['IFC4'][IFCCOMPOSITECURVEONSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCONIC] = (d: RawLineData) => { new IFC4.IfcConic(d.ID, new Reference(d.arguments[0].value)); }
Constructors['IFC4'][IFCCONIC] = (expressID:number, args: any[]) => { return new IFC4.IfcConic(expressID, args[0]); }
ToRawLineData['IFC4'][IFCCONIC] = (i:IFC4.IfcConic):unknown[] => { return [i.Position]; }
InheritanceDef['IFC4'][IFCCONIC] = [IFCCIRCLE,IFCELLIPSE];
InversePropertyDef['IFC4'][IFCCONIC] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (d: RawLineData) => { new IFC4.IfcConstructionEquipmentResourceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4'][IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcConstructionEquipmentResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = (i:IFC4.IfcConstructionEquipmentResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (d: RawLineData) => { new IFC4.IfcConstructionMaterialResourceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4'][IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcConstructionMaterialResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCCONSTRUCTIONMATERIALRESOURCETYPE] = (i:IFC4.IfcConstructionMaterialResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONSTRUCTIONMATERIALRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (d: RawLineData) => { new IFC4.IfcConstructionProductResourceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :new IFC4.IfcIdentifier(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcText(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[10] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[10].value), d.arguments[11]); }
Constructors['IFC4'][IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcConstructionProductResourceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = (i:IFC4.IfcConstructionProductResourceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.Identification, i.LongDescription, i.ResourceType, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONSTRUCTIONPRODUCTRESOURCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCONSTRUCTIONRESOURCE] = (d: RawLineData) => { new IFC4.IfcConstructionResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[9].value)); }
Constructors['IFC4'][IFCCONSTRUCTIONRESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcConstructionResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCONSTRUCTIONRESOURCE] = (i:IFC4.IfcConstructionResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity]; }
InheritanceDef['IFC4'][IFCCONSTRUCTIONRESOURCE] = [IFCCONSTRUCTIONPRODUCTRESOURCE,IFCCONSTRUCTIONMATERIALRESOURCE,IFCCONSTRUCTIONEQUIPMENTRESOURCE,IFCSUBCONTRACTRESOURCE,IFCLABORRESOURCE,IFCCREWRESOURCE];
InversePropertyDef['IFC4'][IFCCONSTRUCTIONRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCONTROL] = (d: RawLineData) => { new IFC4.IfcControl(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value)); }
Constructors['IFC4'][IFCCONTROL] = (expressID:number, args: any[]) => { return new IFC4.IfcControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCCONTROL] = (i:IFC4.IfcControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification]; }
InheritanceDef['IFC4'][IFCCONTROL] = [IFCACTIONREQUEST,IFCWORKSCHEDULE,IFCWORKPLAN,IFCWORKCONTROL,IFCWORKCALENDAR,IFCPROJECTORDER,IFCPERMIT,IFCPERFORMANCEHISTORY,IFCCOSTSCHEDULE,IFCCOSTITEM];
InversePropertyDef['IFC4'][IFCCONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCCOSTITEM] = (d: RawLineData) => { new IFC4.IfcCostItem(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcCostValue>(p.value)), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcPhysicalQuantity>(p.value))); }
Constructors['IFC4'][IFCCOSTITEM] = (expressID:number, args: any[]) => { return new IFC4.IfcCostItem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOSTITEM] = (i:IFC4.IfcCostItem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.CostValues, i.CostQuantities]; }
InversePropertyDef['IFC4'][IFCCOSTITEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCCOSTSCHEDULE] = (d: RawLineData) => { new IFC4.IfcCostSchedule(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcDateTime(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcDateTime(d.arguments[9].value)); }
Constructors['IFC4'][IFCCOSTSCHEDULE] = (expressID:number, args: any[]) => { return new IFC4.IfcCostSchedule(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOSTSCHEDULE] = (i:IFC4.IfcCostSchedule):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.Status, i.SubmittedOn, i.UpdateDate]; }
InversePropertyDef['IFC4'][IFCCOSTSCHEDULE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCCOVERINGTYPE] = (d: RawLineData) => { new IFC4.IfcCoveringType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCOVERINGTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCoveringType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOVERINGTYPE] = (i:IFC4.IfcCoveringType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOVERINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCREWRESOURCE] = (d: RawLineData) => { new IFC4.IfcCrewResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4'][IFCCREWRESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcCrewResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCCREWRESOURCE] = (i:IFC4.IfcCrewResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCREWRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCURTAINWALLTYPE] = (d: RawLineData) => { new IFC4.IfcCurtainWallType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCURTAINWALLTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCurtainWallType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCURTAINWALLTYPE] = (i:IFC4.IfcCurtainWallType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCURTAINWALLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCYLINDRICALSURFACE] = (d: RawLineData) => { new IFC4.IfcCylindricalSurface(d.ID, new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4'][IFCCYLINDRICALSURFACE] = (expressID:number, args: any[]) => { return new IFC4.IfcCylindricalSurface(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCYLINDRICALSURFACE] = (i:IFC4.IfcCylindricalSurface):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC4'][IFCCYLINDRICALSURFACE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcDistributionElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCDISTRIBUTIONELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONELEMENTTYPE] = (i:IFC4.IfcDistributionElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCDISTRIBUTIONELEMENTTYPE] = [IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE,IFCDISTRIBUTIONCONTROLELEMENTTYPE,IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMEDICALDEVICETYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE,IFCDISTRIBUTIONFLOWELEMENTTYPE];
InversePropertyDef['IFC4'][IFCDISTRIBUTIONELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcDistributionFlowElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionFlowElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = (i:IFC4.IfcDistributionFlowElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = [IFCDISTRIBUTIONCHAMBERELEMENTTYPE,IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE,IFCFLOWTREATMENTDEVICETYPE,IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMEDICALDEVICETYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE,IFCFLOWTERMINALTYPE,IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE,IFCFLOWSTORAGEDEVICETYPE,IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE,IFCFLOWSEGMENTTYPE,IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE,IFCFLOWMOVINGDEVICETYPE,IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE,IFCFLOWFITTINGTYPE,IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE,IFCFLOWCONTROLLERTYPE,IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE,IFCENERGYCONVERSIONDEVICETYPE];
InversePropertyDef['IFC4'][IFCDISTRIBUTIONFLOWELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDOORLININGPROPERTIES] = (d: RawLineData) => { new IFC4.IfcDoorLiningProperties(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcNonNegativeLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new Reference<IFC4.IfcShapeAspect>(d.arguments[14].value), !d.arguments[15] ? null :new IFC4.IfcLengthMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC4.IfcLengthMeasure(d.arguments[16].value)); }
Constructors['IFC4'][IFCDOORLININGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcDoorLiningProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC4'][IFCDOORLININGPROPERTIES] = (i:IFC4.IfcDoorLiningProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.LiningDepth, i.LiningThickness, i.ThresholdDepth, i.ThresholdThickness, i.TransomThickness, i.TransomOffset, i.LiningOffset, i.ThresholdOffset, i.CasingThickness, i.CasingDepth, i.ShapeAspectStyle, i.LiningToPanelOffsetX, i.LiningToPanelOffsetY]; }
InversePropertyDef['IFC4'][IFCDOORLININGPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCDOORPANELPROPERTIES] = (d: RawLineData) => { new IFC4.IfcDoorPanelProperties(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[6].value), d.arguments[7], !d.arguments[8] ? null :new Reference<IFC4.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC4'][IFCDOORPANELPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcDoorPanelProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDOORPANELPROPERTIES] = (i:IFC4.IfcDoorPanelProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.PanelDepth, i.PanelOperation, i.PanelWidth, i.PanelPosition, i.ShapeAspectStyle]; }
InversePropertyDef['IFC4'][IFCDOORPANELPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCDOORTYPE] = (d: RawLineData) => { new IFC4.IfcDoorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], d.arguments[10], !d.arguments[11] ? null :new IFC4.IfcBoolean(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4'][IFCDOORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDoorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCDOORTYPE] = (i:IFC4.IfcDoorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.OperationType, i.ParameterTakesPrecedence, i.UserDefinedOperationType]; }
InversePropertyDef['IFC4'][IFCDOORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (d: RawLineData) => { new IFC4.IfcDraughtingPreDefinedColour(d.ID, new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (expressID:number, args: any[]) => { return new IFC4.IfcDraughtingPreDefinedColour(expressID, args[0]); }
ToRawLineData['IFC4'][IFCDRAUGHTINGPREDEFINEDCOLOUR] = (i:IFC4.IfcDraughtingPreDefinedColour):unknown[] => { return [i.Name]; }
FromRawLineData['IFC4'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (d: RawLineData) => { new IFC4.IfcDraughtingPreDefinedCurveFont(d.ID, new IFC4.IfcLabel(d.arguments[0].value)); }
Constructors['IFC4'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (expressID:number, args: any[]) => { return new IFC4.IfcDraughtingPreDefinedCurveFont(expressID, args[0]); }
ToRawLineData['IFC4'][IFCDRAUGHTINGPREDEFINEDCURVEFONT] = (i:IFC4.IfcDraughtingPreDefinedCurveFont):unknown[] => { return [i.Name]; }
FromRawLineData['IFC4'][IFCELEMENT] = (d: RawLineData) => { new IFC4.IfcElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCELEMENT] = (i:IFC4.IfcElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCELEMENT] = [IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSANITARYTERMINAL,IFCOUTLET,IFCMEDICALDEVICE,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT,IFCDISTRIBUTIONELEMENT,IFCCIVILELEMENT,IFCBEAMSTANDARDCASE,IFCBEAM,IFCWINDOWSTANDARDCASE,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALLELEMENTEDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLABSTANDARDCASE,IFCSLABELEMENTEDCASE,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATESTANDARDCASE,IFCPLATE,IFCPILE,IFCMEMBERSTANDARDCASE,IFCMEMBER,IFCFOOTING,IFCDOORSTANDARDCASE,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMNSTANDARDCASE,IFCCOLUMN,IFCCHIMNEY,IFCBUILDINGELEMENTPROXY,IFCBUILDINGELEMENT,IFCVIRTUALELEMENT,IFCTRANSPORTELEMENT,IFCGEOGRAPHICELEMENT,IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE,IFCFURNISHINGELEMENT,IFCSURFACEFEATURE,IFCVOIDINGFEATURE,IFCOPENINGSTANDARDCASE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION,IFCFEATUREELEMENT,IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCFASTENER,IFCELEMENTCOMPONENT,IFCELEMENTASSEMBLY];
InversePropertyDef['IFC4'][IFCELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCELEMENTASSEMBLY] = (d: RawLineData) => { new IFC4.IfcElementAssembly(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4'][IFCELEMENTASSEMBLY] = (expressID:number, args: any[]) => { return new IFC4.IfcElementAssembly(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCELEMENTASSEMBLY] = (i:IFC4.IfcElementAssembly):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.AssemblyPlace, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELEMENTASSEMBLY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCELEMENTASSEMBLYTYPE] = (d: RawLineData) => { new IFC4.IfcElementAssemblyType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCELEMENTASSEMBLYTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElementAssemblyType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCELEMENTASSEMBLYTYPE] = (i:IFC4.IfcElementAssemblyType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELEMENTASSEMBLYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELEMENTCOMPONENT] = (d: RawLineData) => { new IFC4.IfcElementComponent(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCELEMENTCOMPONENT] = (expressID:number, args: any[]) => { return new IFC4.IfcElementComponent(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCELEMENTCOMPONENT] = (i:IFC4.IfcElementComponent):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCELEMENTCOMPONENT] = [IFCDISCRETEACCESSORY,IFCBUILDINGELEMENTPART,IFCVIBRATIONISOLATOR,IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH,IFCREINFORCINGELEMENT,IFCMECHANICALFASTENER,IFCFASTENER];
InversePropertyDef['IFC4'][IFCELEMENTCOMPONENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCELEMENTCOMPONENTTYPE] = (d: RawLineData) => { new IFC4.IfcElementComponentType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCELEMENTCOMPONENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElementComponentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCELEMENTCOMPONENTTYPE] = (i:IFC4.IfcElementComponentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCELEMENTCOMPONENTTYPE] = [IFCDISCRETEACCESSORYTYPE,IFCBUILDINGELEMENTPARTTYPE,IFCVIBRATIONISOLATORTYPE,IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE,IFCREINFORCINGELEMENTTYPE,IFCMECHANICALFASTENERTYPE,IFCFASTENERTYPE];
InversePropertyDef['IFC4'][IFCELEMENTCOMPONENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELLIPSE] = (d: RawLineData) => { new IFC4.IfcEllipse(d.ID, new Reference(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[2].value)); }
Constructors['IFC4'][IFCELLIPSE] = (expressID:number, args: any[]) => { return new IFC4.IfcEllipse(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCELLIPSE] = (i:IFC4.IfcEllipse):unknown[] => { return [i.Position, i.SemiAxis1, i.SemiAxis2]; }
InversePropertyDef['IFC4'][IFCELLIPSE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCENERGYCONVERSIONDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcEnergyConversionDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCENERGYCONVERSIONDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcEnergyConversionDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCENERGYCONVERSIONDEVICETYPE] = (i:IFC4.IfcEnergyConversionDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCENERGYCONVERSIONDEVICETYPE] = [IFCELECTRICMOTORTYPE,IFCELECTRICGENERATORTYPE,IFCCOOLINGTOWERTYPE,IFCCOOLEDBEAMTYPE,IFCCONDENSERTYPE,IFCCOILTYPE,IFCCHILLERTYPE,IFCBURNERTYPE,IFCBOILERTYPE,IFCAIRTOAIRHEATRECOVERYTYPE,IFCUNITARYEQUIPMENTTYPE,IFCTUBEBUNDLETYPE,IFCTRANSFORMERTYPE,IFCSOLARDEVICETYPE,IFCMOTORCONNECTIONTYPE,IFCHUMIDIFIERTYPE,IFCHEATEXCHANGERTYPE,IFCEVAPORATORTYPE,IFCEVAPORATIVECOOLERTYPE,IFCENGINETYPE];
InversePropertyDef['IFC4'][IFCENERGYCONVERSIONDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCENGINETYPE] = (d: RawLineData) => { new IFC4.IfcEngineType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCENGINETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcEngineType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCENGINETYPE] = (i:IFC4.IfcEngineType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCENGINETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCEVAPORATIVECOOLERTYPE] = (d: RawLineData) => { new IFC4.IfcEvaporativeCoolerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCEVAPORATIVECOOLERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcEvaporativeCoolerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCEVAPORATIVECOOLERTYPE] = (i:IFC4.IfcEvaporativeCoolerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCEVAPORATIVECOOLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCEVAPORATORTYPE] = (d: RawLineData) => { new IFC4.IfcEvaporatorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCEVAPORATORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcEvaporatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCEVAPORATORTYPE] = (i:IFC4.IfcEvaporatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCEVAPORATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCEVENT] = (d: RawLineData) => { new IFC4.IfcEvent(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), d.arguments[7], d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcLabel(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC4.IfcEventTime>(d.arguments[10].value)); }
Constructors['IFC4'][IFCEVENT] = (expressID:number, args: any[]) => { return new IFC4.IfcEvent(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCEVENT] = (i:IFC4.IfcEvent):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.PredefinedType, i.EventTriggerType, i.UserDefinedEventTriggerType, i.EventOccurenceTime]; }
InversePropertyDef['IFC4'][IFCEVENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (d: RawLineData) => { new IFC4.IfcExternalSpatialStructureElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value)); }
Constructors['IFC4'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcExternalSpatialStructureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = (i:IFC4.IfcExternalSpatialStructureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName]; }
InheritanceDef['IFC4'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = [IFCEXTERNALSPATIALELEMENT];
InversePropertyDef['IFC4'][IFCEXTERNALSPATIALSTRUCTUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC4'][IFCFACETEDBREP] = (d: RawLineData) => { new IFC4.IfcFacetedBrep(d.ID, new Reference<IFC4.IfcClosedShell>(d.arguments[0].value)); }
Constructors['IFC4'][IFCFACETEDBREP] = (expressID:number, args: any[]) => { return new IFC4.IfcFacetedBrep(expressID, args[0]); }
ToRawLineData['IFC4'][IFCFACETEDBREP] = (i:IFC4.IfcFacetedBrep):unknown[] => { return [i.Outer]; }
InheritanceDef['IFC4'][IFCFACETEDBREP] = [IFCFACETEDBREPWITHVOIDS];
InversePropertyDef['IFC4'][IFCFACETEDBREP] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFACETEDBREPWITHVOIDS] = (d: RawLineData) => { new IFC4.IfcFacetedBrepWithVoids(d.ID, new Reference<IFC4.IfcClosedShell>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcClosedShell>(p.value))); }
Constructors['IFC4'][IFCFACETEDBREPWITHVOIDS] = (expressID:number, args: any[]) => { return new IFC4.IfcFacetedBrepWithVoids(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCFACETEDBREPWITHVOIDS] = (i:IFC4.IfcFacetedBrepWithVoids):unknown[] => { return [i.Outer, i.Voids]; }
InversePropertyDef['IFC4'][IFCFACETEDBREPWITHVOIDS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCFASTENER] = (d: RawLineData) => { new IFC4.IfcFastener(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCFASTENER] = (expressID:number, args: any[]) => { return new IFC4.IfcFastener(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFASTENER] = (i:IFC4.IfcFastener):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFASTENER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCFASTENERTYPE] = (d: RawLineData) => { new IFC4.IfcFastenerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCFASTENERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFastenerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCFASTENERTYPE] = (i:IFC4.IfcFastenerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFASTENERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFEATUREELEMENT] = (d: RawLineData) => { new IFC4.IfcFeatureElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFEATUREELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcFeatureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFEATUREELEMENT] = (i:IFC4.IfcFeatureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFEATUREELEMENT] = [IFCSURFACEFEATURE,IFCVOIDINGFEATURE,IFCOPENINGSTANDARDCASE,IFCOPENINGELEMENT,IFCFEATUREELEMENTSUBTRACTION,IFCPROJECTIONELEMENT,IFCFEATUREELEMENTADDITION];
InversePropertyDef['IFC4'][IFCFEATUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCFEATUREELEMENTADDITION] = (d: RawLineData) => { new IFC4.IfcFeatureElementAddition(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFEATUREELEMENTADDITION] = (expressID:number, args: any[]) => { return new IFC4.IfcFeatureElementAddition(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFEATUREELEMENTADDITION] = (i:IFC4.IfcFeatureElementAddition):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFEATUREELEMENTADDITION] = [IFCPROJECTIONELEMENT];
InversePropertyDef['IFC4'][IFCFEATUREELEMENTADDITION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['ProjectsElements',IFCRELPROJECTSELEMENT,5,false],];
FromRawLineData['IFC4'][IFCFEATUREELEMENTSUBTRACTION] = (d: RawLineData) => { new IFC4.IfcFeatureElementSubtraction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFEATUREELEMENTSUBTRACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcFeatureElementSubtraction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFEATUREELEMENTSUBTRACTION] = (i:IFC4.IfcFeatureElementSubtraction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFEATUREELEMENTSUBTRACTION] = [IFCVOIDINGFEATURE,IFCOPENINGSTANDARDCASE,IFCOPENINGELEMENT];
InversePropertyDef['IFC4'][IFCFEATUREELEMENTSUBTRACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC4'][IFCFLOWCONTROLLERTYPE] = (d: RawLineData) => { new IFC4.IfcFlowControllerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCFLOWCONTROLLERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowControllerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWCONTROLLERTYPE] = (i:IFC4.IfcFlowControllerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCFLOWCONTROLLERTYPE] = [IFCELECTRICTIMECONTROLTYPE,IFCELECTRICDISTRIBUTIONBOARDTYPE,IFCDAMPERTYPE,IFCAIRTERMINALBOXTYPE,IFCVALVETYPE,IFCSWITCHINGDEVICETYPE,IFCPROTECTIVEDEVICETYPE,IFCFLOWMETERTYPE];
InversePropertyDef['IFC4'][IFCFLOWCONTROLLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWFITTINGTYPE] = (d: RawLineData) => { new IFC4.IfcFlowFittingType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCFLOWFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWFITTINGTYPE] = (i:IFC4.IfcFlowFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCFLOWFITTINGTYPE] = [IFCDUCTFITTINGTYPE,IFCCABLEFITTINGTYPE,IFCCABLECARRIERFITTINGTYPE,IFCPIPEFITTINGTYPE,IFCJUNCTIONBOXTYPE];
InversePropertyDef['IFC4'][IFCFLOWFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWMETERTYPE] = (d: RawLineData) => { new IFC4.IfcFlowMeterType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCFLOWMETERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowMeterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCFLOWMETERTYPE] = (i:IFC4.IfcFlowMeterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFLOWMETERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWMOVINGDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcFlowMovingDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCFLOWMOVINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowMovingDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWMOVINGDEVICETYPE] = (i:IFC4.IfcFlowMovingDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCFLOWMOVINGDEVICETYPE] = [IFCFANTYPE,IFCCOMPRESSORTYPE,IFCPUMPTYPE];
InversePropertyDef['IFC4'][IFCFLOWMOVINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWSEGMENTTYPE] = (d: RawLineData) => { new IFC4.IfcFlowSegmentType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCFLOWSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWSEGMENTTYPE] = (i:IFC4.IfcFlowSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCFLOWSEGMENTTYPE] = [IFCDUCTSEGMENTTYPE,IFCCABLESEGMENTTYPE,IFCCABLECARRIERSEGMENTTYPE,IFCPIPESEGMENTTYPE];
InversePropertyDef['IFC4'][IFCFLOWSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcFlowStorageDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCFLOWSTORAGEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowStorageDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWSTORAGEDEVICETYPE] = (i:IFC4.IfcFlowStorageDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCFLOWSTORAGEDEVICETYPE] = [IFCELECTRICFLOWSTORAGEDEVICETYPE,IFCTANKTYPE];
InversePropertyDef['IFC4'][IFCFLOWSTORAGEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWTERMINALTYPE] = (d: RawLineData) => { new IFC4.IfcFlowTerminalType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCFLOWTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWTERMINALTYPE] = (i:IFC4.IfcFlowTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCFLOWTERMINALTYPE] = [IFCFIRESUPPRESSIONTERMINALTYPE,IFCELECTRICAPPLIANCETYPE,IFCCOMMUNICATIONSAPPLIANCETYPE,IFCAUDIOVISUALAPPLIANCETYPE,IFCAIRTERMINALTYPE,IFCWASTETERMINALTYPE,IFCSTACKTERMINALTYPE,IFCSPACEHEATERTYPE,IFCSANITARYTERMINALTYPE,IFCOUTLETTYPE,IFCMEDICALDEVICETYPE,IFCLIGHTFIXTURETYPE,IFCLAMPTYPE];
InversePropertyDef['IFC4'][IFCFLOWTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWTREATMENTDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcFlowTreatmentDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCFLOWTREATMENTDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowTreatmentDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWTREATMENTDEVICETYPE] = (i:IFC4.IfcFlowTreatmentDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCFLOWTREATMENTDEVICETYPE] = [IFCFILTERTYPE,IFCDUCTSILENCERTYPE,IFCINTERCEPTORTYPE];
InversePropertyDef['IFC4'][IFCFLOWTREATMENTDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFOOTINGTYPE] = (d: RawLineData) => { new IFC4.IfcFootingType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCFOOTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFootingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCFOOTINGTYPE] = (i:IFC4.IfcFootingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFOOTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFURNISHINGELEMENT] = (d: RawLineData) => { new IFC4.IfcFurnishingElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFURNISHINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcFurnishingElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFURNISHINGELEMENT] = (i:IFC4.IfcFurnishingElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFURNISHINGELEMENT] = [IFCSYSTEMFURNITUREELEMENT,IFCFURNITURE];
InversePropertyDef['IFC4'][IFCFURNISHINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCFURNITURE] = (d: RawLineData) => { new IFC4.IfcFurniture(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCFURNITURE] = (expressID:number, args: any[]) => { return new IFC4.IfcFurniture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFURNITURE] = (i:IFC4.IfcFurniture):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFURNITURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCGEOGRAPHICELEMENT] = (d: RawLineData) => { new IFC4.IfcGeographicElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCGEOGRAPHICELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcGeographicElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCGEOGRAPHICELEMENT] = (i:IFC4.IfcGeographicElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCGEOGRAPHICELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCGRID] = (d: RawLineData) => { new IFC4.IfcGrid(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7].map((p:any) => new Reference<IFC4.IfcGridAxis>(p.value)), d.arguments[8].map((p:any) => new Reference<IFC4.IfcGridAxis>(p.value)), !d.arguments[9] ? null :d.arguments[9].map((p:any) => new Reference<IFC4.IfcGridAxis>(p.value)), d.arguments[10]); }
Constructors['IFC4'][IFCGRID] = (expressID:number, args: any[]) => { return new IFC4.IfcGrid(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCGRID] = (i:IFC4.IfcGrid):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.UAxes, i.VAxes, i.WAxes, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCGRID] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],];
FromRawLineData['IFC4'][IFCGROUP] = (d: RawLineData) => { new IFC4.IfcGroup(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCGROUP] = (expressID:number, args: any[]) => { return new IFC4.IfcGroup(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCGROUP] = (i:IFC4.IfcGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC4'][IFCGROUP] = [IFCASSET,IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILDINGSYSTEM,IFCZONE,IFCSYSTEM,IFCSTRUCTURALRESULTGROUP,IFCSTRUCTURALLOADCASE,IFCSTRUCTURALLOADGROUP,IFCINVENTORY];
InversePropertyDef['IFC4'][IFCGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],];
FromRawLineData['IFC4'][IFCHEATEXCHANGERTYPE] = (d: RawLineData) => { new IFC4.IfcHeatExchangerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCHEATEXCHANGERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcHeatExchangerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCHEATEXCHANGERTYPE] = (i:IFC4.IfcHeatExchangerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCHEATEXCHANGERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCHUMIDIFIERTYPE] = (d: RawLineData) => { new IFC4.IfcHumidifierType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCHUMIDIFIERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcHumidifierType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCHUMIDIFIERTYPE] = (i:IFC4.IfcHumidifierType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCHUMIDIFIERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCINDEXEDPOLYCURVE] = (d: RawLineData) => { new IFC4.IfcIndexedPolyCurve(d.ID, new Reference<IFC4.IfcCartesianPointList>(d.arguments[0].value), !d.arguments[1] ? null :d.arguments[1].map((p:any) => TypeInitialiser('IFC4',p)), !d.arguments[2] ? null :new IFC4.IfcBoolean(d.arguments[2].value)); }
Constructors['IFC4'][IFCINDEXEDPOLYCURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcIndexedPolyCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCINDEXEDPOLYCURVE] = (i:IFC4.IfcIndexedPolyCurve):unknown[] => { return [i.Points, !i.Segments ? null :i.Segments.map((p:any) => Labelise(p)), i.SelfIntersect]; }
InversePropertyDef['IFC4'][IFCINDEXEDPOLYCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCINTERCEPTORTYPE] = (d: RawLineData) => { new IFC4.IfcInterceptorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCINTERCEPTORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcInterceptorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCINTERCEPTORTYPE] = (i:IFC4.IfcInterceptorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCINTERCEPTORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCINTERSECTIONCURVE] = (d: RawLineData) => { new IFC4.IfcIntersectionCurve(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcPcurve>(p.value)), d.arguments[2]); }
Constructors['IFC4'][IFCINTERSECTIONCURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcIntersectionCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCINTERSECTIONCURVE] = (i:IFC4.IfcIntersectionCurve):unknown[] => { return [i.Curve3D, i.AssociatedGeometry, i.MasterRepresentation]; }
InversePropertyDef['IFC4'][IFCINTERSECTIONCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCINVENTORY] = (d: RawLineData) => { new IFC4.IfcInventory(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new Reference(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC4.IfcDate(d.arguments[8].value), !d.arguments[9] ? null :new Reference<IFC4.IfcCostValue>(d.arguments[9].value), !d.arguments[10] ? null :new Reference<IFC4.IfcCostValue>(d.arguments[10].value)); }
Constructors['IFC4'][IFCINVENTORY] = (expressID:number, args: any[]) => { return new IFC4.IfcInventory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCINVENTORY] = (i:IFC4.IfcInventory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.Jurisdiction, i.ResponsiblePersons, i.LastUpdateDate, i.CurrentValue, i.OriginalValue]; }
InversePropertyDef['IFC4'][IFCINVENTORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],];
FromRawLineData['IFC4'][IFCJUNCTIONBOXTYPE] = (d: RawLineData) => { new IFC4.IfcJunctionBoxType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCJUNCTIONBOXTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcJunctionBoxType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCJUNCTIONBOXTYPE] = (i:IFC4.IfcJunctionBoxType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCJUNCTIONBOXTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCLABORRESOURCE] = (d: RawLineData) => { new IFC4.IfcLaborResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4'][IFCLABORRESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcLaborResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCLABORRESOURCE] = (i:IFC4.IfcLaborResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCLABORRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCLAMPTYPE] = (d: RawLineData) => { new IFC4.IfcLampType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCLAMPTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcLampType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCLAMPTYPE] = (i:IFC4.IfcLampType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCLAMPTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCLIGHTFIXTURETYPE] = (d: RawLineData) => { new IFC4.IfcLightFixtureType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCLIGHTFIXTURETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcLightFixtureType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCLIGHTFIXTURETYPE] = (i:IFC4.IfcLightFixtureType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCLIGHTFIXTURETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCMECHANICALFASTENER] = (d: RawLineData) => { new IFC4.IfcMechanicalFastener(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4'][IFCMECHANICALFASTENER] = (expressID:number, args: any[]) => { return new IFC4.IfcMechanicalFastener(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCMECHANICALFASTENER] = (i:IFC4.IfcMechanicalFastener):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.NominalDiameter, i.NominalLength, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCMECHANICALFASTENER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCMECHANICALFASTENERTYPE] = (d: RawLineData) => { new IFC4.IfcMechanicalFastenerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[11].value)); }
Constructors['IFC4'][IFCMECHANICALFASTENERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcMechanicalFastenerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCMECHANICALFASTENERTYPE] = (i:IFC4.IfcMechanicalFastenerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.NominalDiameter, i.NominalLength]; }
InversePropertyDef['IFC4'][IFCMECHANICALFASTENERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCMEDICALDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcMedicalDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCMEDICALDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcMedicalDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCMEDICALDEVICETYPE] = (i:IFC4.IfcMedicalDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCMEDICALDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCMEMBERTYPE] = (d: RawLineData) => { new IFC4.IfcMemberType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCMEMBERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcMemberType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCMEMBERTYPE] = (i:IFC4.IfcMemberType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCMEMBERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCMOTORCONNECTIONTYPE] = (d: RawLineData) => { new IFC4.IfcMotorConnectionType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCMOTORCONNECTIONTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcMotorConnectionType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCMOTORCONNECTIONTYPE] = (i:IFC4.IfcMotorConnectionType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCMOTORCONNECTIONTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCOCCUPANT] = (d: RawLineData) => { new IFC4.IfcOccupant(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), new Reference(d.arguments[5].value), d.arguments[6]); }
Constructors['IFC4'][IFCOCCUPANT] = (expressID:number, args: any[]) => { return new IFC4.IfcOccupant(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCOCCUPANT] = (i:IFC4.IfcOccupant):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheActor, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCOCCUPANT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsActingUpon',IFCRELASSIGNSTOACTOR,6,true],];
FromRawLineData['IFC4'][IFCOPENINGELEMENT] = (d: RawLineData) => { new IFC4.IfcOpeningElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCOPENINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcOpeningElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCOPENINGELEMENT] = (i:IFC4.IfcOpeningElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCOPENINGELEMENT] = [IFCOPENINGSTANDARDCASE];
InversePropertyDef['IFC4'][IFCOPENINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],['HasFillings',IFCRELFILLSELEMENT,4,true],];
FromRawLineData['IFC4'][IFCOPENINGSTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcOpeningStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCOPENINGSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcOpeningStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCOPENINGSTANDARDCASE] = (i:IFC4.IfcOpeningStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCOPENINGSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],['HasFillings',IFCRELFILLSELEMENT,4,true],];
FromRawLineData['IFC4'][IFCOUTLETTYPE] = (d: RawLineData) => { new IFC4.IfcOutletType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCOUTLETTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcOutletType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCOUTLETTYPE] = (i:IFC4.IfcOutletType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCOUTLETTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCPERFORMANCEHISTORY] = (d: RawLineData) => { new IFC4.IfcPerformanceHistory(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), new IFC4.IfcLabel(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4'][IFCPERFORMANCEHISTORY] = (expressID:number, args: any[]) => { return new IFC4.IfcPerformanceHistory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCPERFORMANCEHISTORY] = (i:IFC4.IfcPerformanceHistory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LifeCyclePhase, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPERFORMANCEHISTORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCPERMEABLECOVERINGPROPERTIES] = (d: RawLineData) => { new IFC4.IfcPermeableCoveringProperties(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), d.arguments[4], d.arguments[5], !d.arguments[6] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC4.IfcShapeAspect>(d.arguments[8].value)); }
Constructors['IFC4'][IFCPERMEABLECOVERINGPROPERTIES] = (expressID:number, args: any[]) => { return new IFC4.IfcPermeableCoveringProperties(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPERMEABLECOVERINGPROPERTIES] = (i:IFC4.IfcPermeableCoveringProperties):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.OperationType, i.PanelPosition, i.FrameDepth, i.FrameThickness, i.ShapeAspectStyle]; }
InversePropertyDef['IFC4'][IFCPERMEABLECOVERINGPROPERTIES] = [['HasContext',IFCRELDECLARES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['DefinesType',IFCTYPEOBJECT,5,true],['IsDefinedBy',IFCRELDEFINESBYTEMPLATE,4,true],['DefinesOccurrence',IFCRELDEFINESBYPROPERTIES,5,true],];
FromRawLineData['IFC4'][IFCPERMIT] = (d: RawLineData) => { new IFC4.IfcPermit(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcText(d.arguments[8].value)); }
Constructors['IFC4'][IFCPERMIT] = (expressID:number, args: any[]) => { return new IFC4.IfcPermit(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPERMIT] = (i:IFC4.IfcPermit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.Status, i.LongDescription]; }
InversePropertyDef['IFC4'][IFCPERMIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCPILETYPE] = (d: RawLineData) => { new IFC4.IfcPileType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCPILETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcPileType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPILETYPE] = (i:IFC4.IfcPileType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPILETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCPIPEFITTINGTYPE] = (d: RawLineData) => { new IFC4.IfcPipeFittingType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCPIPEFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcPipeFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPIPEFITTINGTYPE] = (i:IFC4.IfcPipeFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPIPEFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCPIPESEGMENTTYPE] = (d: RawLineData) => { new IFC4.IfcPipeSegmentType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCPIPESEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcPipeSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPIPESEGMENTTYPE] = (i:IFC4.IfcPipeSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPIPESEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCPLATETYPE] = (d: RawLineData) => { new IFC4.IfcPlateType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCPLATETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcPlateType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPLATETYPE] = (i:IFC4.IfcPlateType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPLATETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCPOLYGONALFACESET] = (d: RawLineData) => { new IFC4.IfcPolygonalFaceSet(d.ID, new Reference<IFC4.IfcCartesianPointList3D>(d.arguments[0].value), !d.arguments[1] ? null :new IFC4.IfcBoolean(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcIndexedPolygonalFace>(p.value)), !d.arguments[3] ? null :d.arguments[3].map((p:any) => new IFC4.IfcPositiveInteger(p.value))); }
Constructors['IFC4'][IFCPOLYGONALFACESET] = (expressID:number, args: any[]) => { return new IFC4.IfcPolygonalFaceSet(expressID, args[0], args[1], args[2], args[3]); }
ToRawLineData['IFC4'][IFCPOLYGONALFACESET] = (i:IFC4.IfcPolygonalFaceSet):unknown[] => { return [i.Coordinates, i.Closed, i.Faces, i.PnIndex]; }
InversePropertyDef['IFC4'][IFCPOLYGONALFACESET] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],['HasColours',IFCINDEXEDCOLOURMAP,0,true],['HasTextures',IFCINDEXEDTEXTUREMAP,1,true],];
FromRawLineData['IFC4'][IFCPOLYLINE] = (d: RawLineData) => { new IFC4.IfcPolyline(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcCartesianPoint>(p.value))); }
Constructors['IFC4'][IFCPOLYLINE] = (expressID:number, args: any[]) => { return new IFC4.IfcPolyline(expressID, args[0]); }
ToRawLineData['IFC4'][IFCPOLYLINE] = (i:IFC4.IfcPolyline):unknown[] => { return [i.Points]; }
InversePropertyDef['IFC4'][IFCPOLYLINE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCPORT] = (d: RawLineData) => { new IFC4.IfcPort(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value)); }
Constructors['IFC4'][IFCPORT] = (expressID:number, args: any[]) => { return new IFC4.IfcPort(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCPORT] = (i:IFC4.IfcPort):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation]; }
InheritanceDef['IFC4'][IFCPORT] = [IFCDISTRIBUTIONPORT];
InversePropertyDef['IFC4'][IFCPORT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainedIn',IFCRELCONNECTSPORTTOELEMENT,4,true],['ConnectedFrom',IFCRELCONNECTSPORTS,5,true],['ConnectedTo',IFCRELCONNECTSPORTS,4,true],];
FromRawLineData['IFC4'][IFCPROCEDURE] = (d: RawLineData) => { new IFC4.IfcProcedure(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), d.arguments[7]); }
Constructors['IFC4'][IFCPROCEDURE] = (expressID:number, args: any[]) => { return new IFC4.IfcProcedure(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCPROCEDURE] = (i:IFC4.IfcProcedure):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPROCEDURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsPredecessorTo',IFCRELSEQUENCE,4,true],['IsSuccessorFrom',IFCRELSEQUENCE,5,true],['OperatesOn',IFCRELASSIGNSTOPROCESS,6,true],];
FromRawLineData['IFC4'][IFCPROJECTORDER] = (d: RawLineData) => { new IFC4.IfcProjectOrder(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcText(d.arguments[8].value)); }
Constructors['IFC4'][IFCPROJECTORDER] = (expressID:number, args: any[]) => { return new IFC4.IfcProjectOrder(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPROJECTORDER] = (i:IFC4.IfcProjectOrder):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.Status, i.LongDescription]; }
InversePropertyDef['IFC4'][IFCPROJECTORDER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCPROJECTIONELEMENT] = (d: RawLineData) => { new IFC4.IfcProjectionElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCPROJECTIONELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcProjectionElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPROJECTIONELEMENT] = (i:IFC4.IfcProjectionElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPROJECTIONELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['ProjectsElements',IFCRELPROJECTSELEMENT,5,false],];
FromRawLineData['IFC4'][IFCPROTECTIVEDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcProtectiveDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCPROTECTIVEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcProtectiveDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPROTECTIVEDEVICETYPE] = (i:IFC4.IfcProtectiveDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPROTECTIVEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCPUMPTYPE] = (d: RawLineData) => { new IFC4.IfcPumpType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCPUMPTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcPumpType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPUMPTYPE] = (i:IFC4.IfcPumpType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPUMPTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCRAILINGTYPE] = (d: RawLineData) => { new IFC4.IfcRailingType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCRAILINGTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcRailingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCRAILINGTYPE] = (i:IFC4.IfcRailingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCRAILINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCRAMPFLIGHTTYPE] = (d: RawLineData) => { new IFC4.IfcRampFlightType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCRAMPFLIGHTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcRampFlightType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCRAMPFLIGHTTYPE] = (i:IFC4.IfcRampFlightType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCRAMPFLIGHTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCRAMPTYPE] = (d: RawLineData) => { new IFC4.IfcRampType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCRAMPTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcRampType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCRAMPTYPE] = (i:IFC4.IfcRampType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCRAMPTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCRATIONALBSPLINESURFACEWITHKNOTS] = (d: RawLineData) => { new IFC4.IfcRationalBSplineSurfaceWithKnots(d.ID, new IFC4.IfcInteger(d.arguments[0].value), new IFC4.IfcInteger(d.arguments[1].value), d.arguments[2].map((p:any) => new Reference<IFC4.IfcCartesianPoint>(p.value)), d.arguments[3], new IFC4.IfcLogical(d.arguments[4].value), new IFC4.IfcLogical(d.arguments[5].value), new IFC4.IfcLogical(d.arguments[6].value), d.arguments[7].map((p:any) => new IFC4.IfcInteger(p.value)), d.arguments[8].map((p:any) => new IFC4.IfcInteger(p.value)), d.arguments[9].map((p:any) => new IFC4.IfcParameterValue(p.value)), d.arguments[10].map((p:any) => new IFC4.IfcParameterValue(p.value)), d.arguments[11], d.arguments[12].map((p:any) => new IFC4.IfcReal(p.value))); }
Constructors['IFC4'][IFCRATIONALBSPLINESURFACEWITHKNOTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRationalBSplineSurfaceWithKnots(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCRATIONALBSPLINESURFACEWITHKNOTS] = (i:IFC4.IfcRationalBSplineSurfaceWithKnots):unknown[] => { return [i.UDegree, i.VDegree, i.ControlPointsList, i.SurfaceForm, i.UClosed, i.VClosed, i.SelfIntersect, i.UMultiplicities, i.VMultiplicities, i.UKnots, i.VKnots, i.KnotSpec, i.WeightsData]; }
InversePropertyDef['IFC4'][IFCRATIONALBSPLINESURFACEWITHKNOTS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCREINFORCINGELEMENT] = (d: RawLineData) => { new IFC4.IfcReinforcingElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCREINFORCINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcReinforcingElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCREINFORCINGELEMENT] = (i:IFC4.IfcReinforcingElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade]; }
InheritanceDef['IFC4'][IFCREINFORCINGELEMENT] = [IFCREINFORCINGBAR,IFCTENDONANCHOR,IFCTENDON,IFCREINFORCINGMESH];
InversePropertyDef['IFC4'][IFCREINFORCINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCREINFORCINGELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcReinforcingElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCREINFORCINGELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcReinforcingElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCREINFORCINGELEMENTTYPE] = (i:IFC4.IfcReinforcingElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCREINFORCINGELEMENTTYPE] = [IFCREINFORCINGBARTYPE,IFCTENDONTYPE,IFCTENDONANCHORTYPE,IFCREINFORCINGMESHTYPE];
InversePropertyDef['IFC4'][IFCREINFORCINGELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCREINFORCINGMESH] = (d: RawLineData) => { new IFC4.IfcReinforcingMesh(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcAreaMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcAreaMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[16].value), d.arguments[17]); }
Constructors['IFC4'][IFCREINFORCINGMESH] = (expressID:number, args: any[]) => { return new IFC4.IfcReinforcingMesh(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17]); }
ToRawLineData['IFC4'][IFCREINFORCINGMESH] = (i:IFC4.IfcReinforcingMesh):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.MeshLength, i.MeshWidth, i.LongitudinalBarNominalDiameter, i.TransverseBarNominalDiameter, i.LongitudinalBarCrossSectionArea, i.TransverseBarCrossSectionArea, i.LongitudinalBarSpacing, i.TransverseBarSpacing, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCREINFORCINGMESH] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCREINFORCINGMESHTYPE] = (d: RawLineData) => { new IFC4.IfcReinforcingMeshType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcAreaMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC4.IfcAreaMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[16].value), !d.arguments[17] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[17].value), !d.arguments[18] ? null :new IFC4.IfcLabel(d.arguments[18].value), !d.arguments[19] ? null :d.arguments[19].map((p:any) => TypeInitialiser('IFC4',p))); }
Constructors['IFC4'][IFCREINFORCINGMESHTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcReinforcingMeshType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16], args[17], args[18], args[19]); }
ToRawLineData['IFC4'][IFCREINFORCINGMESHTYPE] = (i:IFC4.IfcReinforcingMeshType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.MeshLength, i.MeshWidth, i.LongitudinalBarNominalDiameter, i.TransverseBarNominalDiameter, i.LongitudinalBarCrossSectionArea, i.TransverseBarCrossSectionArea, i.LongitudinalBarSpacing, i.TransverseBarSpacing, i.BendingShapeCode, !i.BendingParameters ? null :i.BendingParameters.map((p:any) => Labelise(p))]; }
InversePropertyDef['IFC4'][IFCREINFORCINGMESHTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCRELAGGREGATES] = (d: RawLineData) => { new IFC4.IfcRelAggregates(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), new Reference<IFC4.IfcObjectDefinition>(d.arguments[4].value), d.arguments[5].map((p:any) => new Reference<IFC4.IfcObjectDefinition>(p.value))); }
Constructors['IFC4'][IFCRELAGGREGATES] = (expressID:number, args: any[]) => { return new IFC4.IfcRelAggregates(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCRELAGGREGATES] = (i:IFC4.IfcRelAggregates):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.RelatingObject, i.RelatedObjects]; }
FromRawLineData['IFC4'][IFCROOFTYPE] = (d: RawLineData) => { new IFC4.IfcRoofType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCROOFTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcRoofType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCROOFTYPE] = (i:IFC4.IfcRoofType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCROOFTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSANITARYTERMINALTYPE] = (d: RawLineData) => { new IFC4.IfcSanitaryTerminalType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSANITARYTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSanitaryTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSANITARYTERMINALTYPE] = (i:IFC4.IfcSanitaryTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSANITARYTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSEAMCURVE] = (d: RawLineData) => { new IFC4.IfcSeamCurve(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcPcurve>(p.value)), d.arguments[2]); }
Constructors['IFC4'][IFCSEAMCURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcSeamCurve(expressID, args[0], args[1], args[2]); }
ToRawLineData['IFC4'][IFCSEAMCURVE] = (i:IFC4.IfcSeamCurve):unknown[] => { return [i.Curve3D, i.AssociatedGeometry, i.MasterRepresentation]; }
InversePropertyDef['IFC4'][IFCSEAMCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCSHADINGDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcShadingDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSHADINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcShadingDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSHADINGDEVICETYPE] = (i:IFC4.IfcShadingDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSHADINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSITE] = (d: RawLineData) => { new IFC4.IfcSite(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcCompoundPlaneAngleMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcCompoundPlaneAngleMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcLengthMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcLabel(d.arguments[12].value), !d.arguments[13] ? null :new Reference<IFC4.IfcPostalAddress>(d.arguments[13].value)); }
Constructors['IFC4'][IFCSITE] = (expressID:number, args: any[]) => { return new IFC4.IfcSite(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4'][IFCSITE] = (i:IFC4.IfcSite):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.RefLatitude, i.RefLongitude, i.RefElevation, i.LandTitleNumber, i.SiteAddress]; }
InversePropertyDef['IFC4'][IFCSITE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],];
FromRawLineData['IFC4'][IFCSLABTYPE] = (d: RawLineData) => { new IFC4.IfcSlabType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSLABTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSlabType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSLABTYPE] = (i:IFC4.IfcSlabType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSLABTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSOLARDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcSolarDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSOLARDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSolarDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSOLARDEVICETYPE] = (i:IFC4.IfcSolarDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSOLARDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSPACE] = (d: RawLineData) => { new IFC4.IfcSpace(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8], d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcLengthMeasure(d.arguments[10].value)); }
Constructors['IFC4'][IFCSPACE] = (expressID:number, args: any[]) => { return new IFC4.IfcSpace(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCSPACE] = (i:IFC4.IfcSpace):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.CompositionType, i.PredefinedType, i.ElevationWithFlooring]; }
InversePropertyDef['IFC4'][IFCSPACE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['HasCoverings',IFCRELCOVERSSPACES,4,true],['BoundedBy',IFCRELSPACEBOUNDARY,4,true],];
FromRawLineData['IFC4'][IFCSPACEHEATERTYPE] = (d: RawLineData) => { new IFC4.IfcSpaceHeaterType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSPACEHEATERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSpaceHeaterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSPACEHEATERTYPE] = (i:IFC4.IfcSpaceHeaterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSPACEHEATERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSPACETYPE] = (d: RawLineData) => { new IFC4.IfcSpaceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcLabel(d.arguments[10].value)); }
Constructors['IFC4'][IFCSPACETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSpaceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCSPACETYPE] = (i:IFC4.IfcSpaceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.LongName]; }
InversePropertyDef['IFC4'][IFCSPACETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSTACKTERMINALTYPE] = (d: RawLineData) => { new IFC4.IfcStackTerminalType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSTACKTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcStackTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTACKTERMINALTYPE] = (i:IFC4.IfcStackTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTACKTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSTAIRFLIGHTTYPE] = (d: RawLineData) => { new IFC4.IfcStairFlightType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSTAIRFLIGHTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcStairFlightType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTAIRFLIGHTTYPE] = (i:IFC4.IfcStairFlightType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTAIRFLIGHTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSTAIRTYPE] = (d: RawLineData) => { new IFC4.IfcStairType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSTAIRTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcStairType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTAIRTYPE] = (i:IFC4.IfcStairType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTAIRTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALACTION] = (d: RawLineData) => { new IFC4.IfcStructuralAction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcBoolean(d.arguments[9].value)); }
Constructors['IFC4'][IFCSTRUCTURALACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTRUCTURALACTION] = (i:IFC4.IfcStructuralAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad]; }
InheritanceDef['IFC4'][IFCSTRUCTURALACTION] = [IFCSTRUCTURALPLANARACTION,IFCSTRUCTURALSURFACEACTION,IFCSTRUCTURALPOINTACTION,IFCSTRUCTURALLINEARACTION,IFCSTRUCTURALCURVEACTION];
InversePropertyDef['IFC4'][IFCSTRUCTURALACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALCONNECTION] = (d: RawLineData) => { new IFC4.IfcStructuralConnection(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcBoundaryCondition>(d.arguments[7].value)); }
Constructors['IFC4'][IFCSTRUCTURALCONNECTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCSTRUCTURALCONNECTION] = (i:IFC4.IfcStructuralConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition]; }
InheritanceDef['IFC4'][IFCSTRUCTURALCONNECTION] = [IFCSTRUCTURALSURFACECONNECTION,IFCSTRUCTURALPOINTCONNECTION,IFCSTRUCTURALCURVECONNECTION];
InversePropertyDef['IFC4'][IFCSTRUCTURALCONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALCURVEACTION] = (d: RawLineData) => { new IFC4.IfcStructuralCurveAction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcBoolean(d.arguments[9].value), d.arguments[10], d.arguments[11]); }
Constructors['IFC4'][IFCSTRUCTURALCURVEACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralCurveAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCSTRUCTURALCURVEACTION] = (i:IFC4.IfcStructuralCurveAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.ProjectedOrTrue, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCSTRUCTURALCURVEACTION] = [IFCSTRUCTURALLINEARACTION];
InversePropertyDef['IFC4'][IFCSTRUCTURALCURVEACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALCURVECONNECTION] = (d: RawLineData) => { new IFC4.IfcStructuralCurveConnection(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcBoundaryCondition>(d.arguments[7].value), new Reference<IFC4.IfcDirection>(d.arguments[8].value)); }
Constructors['IFC4'][IFCSTRUCTURALCURVECONNECTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralCurveConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALCURVECONNECTION] = (i:IFC4.IfcStructuralCurveConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition, i.Axis]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALCURVECONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALCURVEMEMBER] = (d: RawLineData) => { new IFC4.IfcStructuralCurveMember(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], new Reference<IFC4.IfcDirection>(d.arguments[8].value)); }
Constructors['IFC4'][IFCSTRUCTURALCURVEMEMBER] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralCurveMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALCURVEMEMBER] = (i:IFC4.IfcStructuralCurveMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Axis]; }
InheritanceDef['IFC4'][IFCSTRUCTURALCURVEMEMBER] = [IFCSTRUCTURALCURVEMEMBERVARYING];
InversePropertyDef['IFC4'][IFCSTRUCTURALCURVEMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALCURVEMEMBERVARYING] = (d: RawLineData) => { new IFC4.IfcStructuralCurveMemberVarying(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], new Reference<IFC4.IfcDirection>(d.arguments[8].value)); }
Constructors['IFC4'][IFCSTRUCTURALCURVEMEMBERVARYING] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralCurveMemberVarying(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALCURVEMEMBERVARYING] = (i:IFC4.IfcStructuralCurveMemberVarying):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.PredefinedType, i.Axis]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALCURVEMEMBERVARYING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectedBy',IFCRELCONNECTSSTRUCTURALMEMBER,4,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALCURVEREACTION] = (d: RawLineData) => { new IFC4.IfcStructuralCurveReaction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4'][IFCSTRUCTURALCURVEREACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralCurveReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTRUCTURALCURVEREACTION] = (i:IFC4.IfcStructuralCurveReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALCURVEREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALLINEARACTION] = (d: RawLineData) => { new IFC4.IfcStructuralLinearAction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcBoolean(d.arguments[9].value), d.arguments[10], d.arguments[11]); }
Constructors['IFC4'][IFCSTRUCTURALLINEARACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLinearAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLINEARACTION] = (i:IFC4.IfcStructuralLinearAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.ProjectedOrTrue, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALLINEARACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALLOADGROUP] = (d: RawLineData) => { new IFC4.IfcStructuralLoadGroup(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5], d.arguments[6], d.arguments[7], !d.arguments[8] ? null :new IFC4.IfcRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcLabel(d.arguments[9].value)); }
Constructors['IFC4'][IFCSTRUCTURALLOADGROUP] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADGROUP] = (i:IFC4.IfcStructuralLoadGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.ActionType, i.ActionSource, i.Coefficient, i.Purpose]; }
InheritanceDef['IFC4'][IFCSTRUCTURALLOADGROUP] = [IFCSTRUCTURALLOADCASE];
InversePropertyDef['IFC4'][IFCSTRUCTURALLOADGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['SourceOfResultGroup',IFCSTRUCTURALRESULTGROUP,6,true],['LoadGroupFor',IFCSTRUCTURALANALYSISMODEL,7,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALPOINTACTION] = (d: RawLineData) => { new IFC4.IfcStructuralPointAction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcBoolean(d.arguments[9].value)); }
Constructors['IFC4'][IFCSTRUCTURALPOINTACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralPointAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTRUCTURALPOINTACTION] = (i:IFC4.IfcStructuralPointAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALPOINTACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALPOINTCONNECTION] = (d: RawLineData) => { new IFC4.IfcStructuralPointConnection(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcBoundaryCondition>(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[8].value)); }
Constructors['IFC4'][IFCSTRUCTURALPOINTCONNECTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralPointConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALPOINTCONNECTION] = (i:IFC4.IfcStructuralPointConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition, i.ConditionCoordinateSystem]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALPOINTCONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALPOINTREACTION] = (d: RawLineData) => { new IFC4.IfcStructuralPointReaction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSTRUCTURALPOINTREACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralPointReaction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTRUCTURALPOINTREACTION] = (i:IFC4.IfcStructuralPointReaction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALPOINTREACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALRESULTGROUP] = (d: RawLineData) => { new IFC4.IfcStructuralResultGroup(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new Reference<IFC4.IfcStructuralLoadGroup>(d.arguments[6].value), new IFC4.IfcBoolean(d.arguments[7].value)); }
Constructors['IFC4'][IFCSTRUCTURALRESULTGROUP] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralResultGroup(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCSTRUCTURALRESULTGROUP] = (i:IFC4.IfcStructuralResultGroup):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.TheoryType, i.ResultForLoadGroup, i.IsLinear]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALRESULTGROUP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ResultGroupFor',IFCSTRUCTURALANALYSISMODEL,8,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALSURFACEACTION] = (d: RawLineData) => { new IFC4.IfcStructuralSurfaceAction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcBoolean(d.arguments[9].value), d.arguments[10], d.arguments[11]); }
Constructors['IFC4'][IFCSTRUCTURALSURFACEACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralSurfaceAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCSTRUCTURALSURFACEACTION] = (i:IFC4.IfcStructuralSurfaceAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.ProjectedOrTrue, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCSTRUCTURALSURFACEACTION] = [IFCSTRUCTURALPLANARACTION];
InversePropertyDef['IFC4'][IFCSTRUCTURALSURFACEACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALSURFACECONNECTION] = (d: RawLineData) => { new IFC4.IfcStructuralSurfaceConnection(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcBoundaryCondition>(d.arguments[7].value)); }
Constructors['IFC4'][IFCSTRUCTURALSURFACECONNECTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralSurfaceConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCSTRUCTURALSURFACECONNECTION] = (i:IFC4.IfcStructuralSurfaceConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedCondition]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALSURFACECONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedStructuralActivity',IFCRELCONNECTSSTRUCTURALACTIVITY,4,true],['ConnectsStructuralMembers',IFCRELCONNECTSSTRUCTURALMEMBER,5,true],];
FromRawLineData['IFC4'][IFCSUBCONTRACTRESOURCE] = (d: RawLineData) => { new IFC4.IfcSubContractResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4'][IFCSUBCONTRACTRESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcSubContractResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCSUBCONTRACTRESOURCE] = (i:IFC4.IfcSubContractResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSUBCONTRACTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCSURFACEFEATURE] = (d: RawLineData) => { new IFC4.IfcSurfaceFeature(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSURFACEFEATURE] = (expressID:number, args: any[]) => { return new IFC4.IfcSurfaceFeature(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSURFACEFEATURE] = (i:IFC4.IfcSurfaceFeature):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSURFACEFEATURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSWITCHINGDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcSwitchingDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSWITCHINGDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSwitchingDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSWITCHINGDEVICETYPE] = (i:IFC4.IfcSwitchingDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSWITCHINGDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSYSTEM] = (d: RawLineData) => { new IFC4.IfcSystem(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value)); }
Constructors['IFC4'][IFCSYSTEM] = (expressID:number, args: any[]) => { return new IFC4.IfcSystem(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCSYSTEM] = (i:IFC4.IfcSystem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType]; }
InheritanceDef['IFC4'][IFCSYSTEM] = [IFCSTRUCTURALANALYSISMODEL,IFCDISTRIBUTIONCIRCUIT,IFCDISTRIBUTIONSYSTEM,IFCBUILDINGSYSTEM,IFCZONE];
InversePropertyDef['IFC4'][IFCSYSTEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC4'][IFCSYSTEMFURNITUREELEMENT] = (d: RawLineData) => { new IFC4.IfcSystemFurnitureElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSYSTEMFURNITUREELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcSystemFurnitureElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSYSTEMFURNITUREELEMENT] = (i:IFC4.IfcSystemFurnitureElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSYSTEMFURNITUREELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCTANKTYPE] = (d: RawLineData) => { new IFC4.IfcTankType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCTANKTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcTankType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCTANKTYPE] = (i:IFC4.IfcTankType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTANKTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCTENDON] = (d: RawLineData) => { new IFC4.IfcTendon(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcAreaMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcForceMeasure(d.arguments[12].value), !d.arguments[13] ? null :new IFC4.IfcPressureMeasure(d.arguments[13].value), !d.arguments[14] ? null :new IFC4.IfcNormalisedRatioMeasure(d.arguments[14].value), !d.arguments[15] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[15].value), !d.arguments[16] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[16].value)); }
Constructors['IFC4'][IFCTENDON] = (expressID:number, args: any[]) => { return new IFC4.IfcTendon(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15], args[16]); }
ToRawLineData['IFC4'][IFCTENDON] = (i:IFC4.IfcTendon):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.PredefinedType, i.NominalDiameter, i.CrossSectionArea, i.TensionForce, i.PreStress, i.FrictionCoefficient, i.AnchorageSlip, i.MinCurvatureRadius]; }
InversePropertyDef['IFC4'][IFCTENDON] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCTENDONANCHOR] = (d: RawLineData) => { new IFC4.IfcTendonAnchor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCTENDONANCHOR] = (expressID:number, args: any[]) => { return new IFC4.IfcTendonAnchor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCTENDONANCHOR] = (i:IFC4.IfcTendonAnchor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTENDONANCHOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCTENDONANCHORTYPE] = (d: RawLineData) => { new IFC4.IfcTendonAnchorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCTENDONANCHORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcTendonAnchorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCTENDONANCHORTYPE] = (i:IFC4.IfcTendonAnchorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTENDONANCHORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCTENDONTYPE] = (d: RawLineData) => { new IFC4.IfcTendonType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcAreaMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[12].value)); }
Constructors['IFC4'][IFCTENDONTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcTendonType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCTENDONTYPE] = (i:IFC4.IfcTendonType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.NominalDiameter, i.CrossSectionArea, i.SheathDiameter]; }
InversePropertyDef['IFC4'][IFCTENDONTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCTRANSFORMERTYPE] = (d: RawLineData) => { new IFC4.IfcTransformerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCTRANSFORMERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcTransformerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCTRANSFORMERTYPE] = (i:IFC4.IfcTransformerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTRANSFORMERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCTRANSPORTELEMENT] = (d: RawLineData) => { new IFC4.IfcTransportElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCTRANSPORTELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcTransportElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCTRANSPORTELEMENT] = (i:IFC4.IfcTransportElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTRANSPORTELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCTRIMMEDCURVE] = (d: RawLineData) => { new IFC4.IfcTrimmedCurve(d.ID, new Reference<IFC4.IfcCurve>(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference(p.value)), d.arguments[2].map((p:any) => new Reference(p.value)), new IFC4.IfcBoolean(d.arguments[3].value), d.arguments[4]); }
Constructors['IFC4'][IFCTRIMMEDCURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcTrimmedCurve(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCTRIMMEDCURVE] = (i:IFC4.IfcTrimmedCurve):unknown[] => { return [i.BasisCurve, i.Trim1, i.Trim2, i.SenseAgreement, i.MasterRepresentation]; }
InversePropertyDef['IFC4'][IFCTRIMMEDCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCTUBEBUNDLETYPE] = (d: RawLineData) => { new IFC4.IfcTubeBundleType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCTUBEBUNDLETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcTubeBundleType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCTUBEBUNDLETYPE] = (i:IFC4.IfcTubeBundleType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTUBEBUNDLETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCUNITARYEQUIPMENTTYPE] = (d: RawLineData) => { new IFC4.IfcUnitaryEquipmentType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCUNITARYEQUIPMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcUnitaryEquipmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCUNITARYEQUIPMENTTYPE] = (i:IFC4.IfcUnitaryEquipmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCUNITARYEQUIPMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCVALVETYPE] = (d: RawLineData) => { new IFC4.IfcValveType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCVALVETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcValveType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCVALVETYPE] = (i:IFC4.IfcValveType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCVALVETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCVIBRATIONISOLATOR] = (d: RawLineData) => { new IFC4.IfcVibrationIsolator(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCVIBRATIONISOLATOR] = (expressID:number, args: any[]) => { return new IFC4.IfcVibrationIsolator(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCVIBRATIONISOLATOR] = (i:IFC4.IfcVibrationIsolator):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCVIBRATIONISOLATOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCVIBRATIONISOLATORTYPE] = (d: RawLineData) => { new IFC4.IfcVibrationIsolatorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCVIBRATIONISOLATORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcVibrationIsolatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCVIBRATIONISOLATORTYPE] = (i:IFC4.IfcVibrationIsolatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCVIBRATIONISOLATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCVIRTUALELEMENT] = (d: RawLineData) => { new IFC4.IfcVirtualElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCVIRTUALELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcVirtualElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCVIRTUALELEMENT] = (i:IFC4.IfcVirtualElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC4'][IFCVIRTUALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCVOIDINGFEATURE] = (d: RawLineData) => { new IFC4.IfcVoidingFeature(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCVOIDINGFEATURE] = (expressID:number, args: any[]) => { return new IFC4.IfcVoidingFeature(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCVOIDINGFEATURE] = (i:IFC4.IfcVoidingFeature):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCVOIDINGFEATURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['VoidsElements',IFCRELVOIDSELEMENT,5,false],];
FromRawLineData['IFC4'][IFCWALLTYPE] = (d: RawLineData) => { new IFC4.IfcWallType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCWALLTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcWallType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCWALLTYPE] = (i:IFC4.IfcWallType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCWALLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCWASTETERMINALTYPE] = (d: RawLineData) => { new IFC4.IfcWasteTerminalType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCWASTETERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcWasteTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCWASTETERMINALTYPE] = (i:IFC4.IfcWasteTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCWASTETERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCWINDOWTYPE] = (d: RawLineData) => { new IFC4.IfcWindowType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], d.arguments[10], !d.arguments[11] ? null :new IFC4.IfcBoolean(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4'][IFCWINDOWTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcWindowType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCWINDOWTYPE] = (i:IFC4.IfcWindowType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.PartitioningType, i.ParameterTakesPrecedence, i.UserDefinedPartitioningType]; }
InversePropertyDef['IFC4'][IFCWINDOWTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCWORKCALENDAR] = (d: RawLineData) => { new IFC4.IfcWorkCalendar(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcWorkTime>(p.value)), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcWorkTime>(p.value)), d.arguments[8]); }
Constructors['IFC4'][IFCWORKCALENDAR] = (expressID:number, args: any[]) => { return new IFC4.IfcWorkCalendar(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCWORKCALENDAR] = (i:IFC4.IfcWorkCalendar):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.WorkingTimes, i.ExceptionTimes, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCWORKCALENDAR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCWORKCONTROL] = (d: RawLineData) => { new IFC4.IfcWorkControl(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), new IFC4.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcDuration(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcDuration(d.arguments[10].value), new IFC4.IfcDateTime(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcDateTime(d.arguments[12].value)); }
Constructors['IFC4'][IFCWORKCONTROL] = (expressID:number, args: any[]) => { return new IFC4.IfcWorkControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCWORKCONTROL] = (i:IFC4.IfcWorkControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime]; }
InheritanceDef['IFC4'][IFCWORKCONTROL] = [IFCWORKSCHEDULE,IFCWORKPLAN];
InversePropertyDef['IFC4'][IFCWORKCONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCWORKPLAN] = (d: RawLineData) => { new IFC4.IfcWorkPlan(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), new IFC4.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcDuration(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcDuration(d.arguments[10].value), new IFC4.IfcDateTime(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcDateTime(d.arguments[12].value), d.arguments[13]); }
Constructors['IFC4'][IFCWORKPLAN] = (expressID:number, args: any[]) => { return new IFC4.IfcWorkPlan(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4'][IFCWORKPLAN] = (i:IFC4.IfcWorkPlan):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCWORKPLAN] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCWORKSCHEDULE] = (d: RawLineData) => { new IFC4.IfcWorkSchedule(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), new IFC4.IfcDateTime(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcPerson>(p.value)), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcDuration(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcDuration(d.arguments[10].value), new IFC4.IfcDateTime(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcDateTime(d.arguments[12].value), d.arguments[13]); }
Constructors['IFC4'][IFCWORKSCHEDULE] = (expressID:number, args: any[]) => { return new IFC4.IfcWorkSchedule(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4'][IFCWORKSCHEDULE] = (i:IFC4.IfcWorkSchedule):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.CreationDate, i.Creators, i.Purpose, i.Duration, i.TotalFloat, i.StartTime, i.FinishTime, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCWORKSCHEDULE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCZONE] = (d: RawLineData) => { new IFC4.IfcZone(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value)); }
Constructors['IFC4'][IFCZONE] = (expressID:number, args: any[]) => { return new IFC4.IfcZone(expressID, args[0], args[1], args[2], args[3], args[4], args[5]); }
ToRawLineData['IFC4'][IFCZONE] = (i:IFC4.IfcZone):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName]; }
InversePropertyDef['IFC4'][IFCZONE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC4'][IFCACTIONREQUEST] = (d: RawLineData) => { new IFC4.IfcActionRequest(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), d.arguments[6], !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcText(d.arguments[8].value)); }
Constructors['IFC4'][IFCACTIONREQUEST] = (expressID:number, args: any[]) => { return new IFC4.IfcActionRequest(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCACTIONREQUEST] = (i:IFC4.IfcActionRequest):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.PredefinedType, i.Status, i.LongDescription]; }
InversePropertyDef['IFC4'][IFCACTIONREQUEST] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['Controls',IFCRELASSIGNSTOCONTROL,6,true],];
FromRawLineData['IFC4'][IFCAIRTERMINALBOXTYPE] = (d: RawLineData) => { new IFC4.IfcAirTerminalBoxType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCAIRTERMINALBOXTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcAirTerminalBoxType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCAIRTERMINALBOXTYPE] = (i:IFC4.IfcAirTerminalBoxType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCAIRTERMINALBOXTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCAIRTERMINALTYPE] = (d: RawLineData) => { new IFC4.IfcAirTerminalType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCAIRTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcAirTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCAIRTERMINALTYPE] = (i:IFC4.IfcAirTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCAIRTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCAIRTOAIRHEATRECOVERYTYPE] = (d: RawLineData) => { new IFC4.IfcAirToAirHeatRecoveryType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCAIRTOAIRHEATRECOVERYTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcAirToAirHeatRecoveryType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCAIRTOAIRHEATRECOVERYTYPE] = (i:IFC4.IfcAirToAirHeatRecoveryType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCAIRTOAIRHEATRECOVERYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCASSET] = (d: RawLineData) => { new IFC4.IfcAsset(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcCostValue>(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcCostValue>(d.arguments[7].value), !d.arguments[8] ? null :new Reference<IFC4.IfcCostValue>(d.arguments[8].value), !d.arguments[9] ? null :new Reference(d.arguments[9].value), !d.arguments[10] ? null :new Reference(d.arguments[10].value), !d.arguments[11] ? null :new Reference<IFC4.IfcPerson>(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcDate(d.arguments[12].value), !d.arguments[13] ? null :new Reference<IFC4.IfcCostValue>(d.arguments[13].value)); }
Constructors['IFC4'][IFCASSET] = (expressID:number, args: any[]) => { return new IFC4.IfcAsset(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4'][IFCASSET] = (i:IFC4.IfcAsset):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.OriginalValue, i.CurrentValue, i.TotalReplacementCost, i.Owner, i.User, i.ResponsiblePerson, i.IncorporationDate, i.DepreciatedValue]; }
InversePropertyDef['IFC4'][IFCASSET] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],];
FromRawLineData['IFC4'][IFCAUDIOVISUALAPPLIANCETYPE] = (d: RawLineData) => { new IFC4.IfcAudioVisualApplianceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCAUDIOVISUALAPPLIANCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcAudioVisualApplianceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCAUDIOVISUALAPPLIANCETYPE] = (i:IFC4.IfcAudioVisualApplianceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCAUDIOVISUALAPPLIANCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCBSPLINECURVE] = (d: RawLineData) => { new IFC4.IfcBSplineCurve(d.ID, new IFC4.IfcInteger(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcCartesianPoint>(p.value)), d.arguments[2], new IFC4.IfcLogical(d.arguments[3].value), new IFC4.IfcLogical(d.arguments[4].value)); }
Constructors['IFC4'][IFCBSPLINECURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcBSplineCurve(expressID, args[0], args[1], args[2], args[3], args[4]); }
ToRawLineData['IFC4'][IFCBSPLINECURVE] = (i:IFC4.IfcBSplineCurve):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect]; }
InheritanceDef['IFC4'][IFCBSPLINECURVE] = [IFCRATIONALBSPLINECURVEWITHKNOTS,IFCBSPLINECURVEWITHKNOTS];
InversePropertyDef['IFC4'][IFCBSPLINECURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBSPLINECURVEWITHKNOTS] = (d: RawLineData) => { new IFC4.IfcBSplineCurveWithKnots(d.ID, new IFC4.IfcInteger(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcCartesianPoint>(p.value)), d.arguments[2], new IFC4.IfcLogical(d.arguments[3].value), new IFC4.IfcLogical(d.arguments[4].value), d.arguments[5].map((p:any) => new IFC4.IfcInteger(p.value)), d.arguments[6].map((p:any) => new IFC4.IfcParameterValue(p.value)), d.arguments[7]); }
Constructors['IFC4'][IFCBSPLINECURVEWITHKNOTS] = (expressID:number, args: any[]) => { return new IFC4.IfcBSplineCurveWithKnots(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCBSPLINECURVEWITHKNOTS] = (i:IFC4.IfcBSplineCurveWithKnots):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect, i.KnotMultiplicities, i.Knots, i.KnotSpec]; }
InheritanceDef['IFC4'][IFCBSPLINECURVEWITHKNOTS] = [IFCRATIONALBSPLINECURVEWITHKNOTS];
InversePropertyDef['IFC4'][IFCBSPLINECURVEWITHKNOTS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBEAMTYPE] = (d: RawLineData) => { new IFC4.IfcBeamType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCBEAMTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcBeamType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCBEAMTYPE] = (i:IFC4.IfcBeamType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBEAMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCBOILERTYPE] = (d: RawLineData) => { new IFC4.IfcBoilerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCBOILERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcBoilerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCBOILERTYPE] = (i:IFC4.IfcBoilerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBOILERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCBOUNDARYCURVE] = (d: RawLineData) => { new IFC4.IfcBoundaryCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcCompositeCurveSegment>(p.value)), new IFC4.IfcLogical(d.arguments[1].value)); }
Constructors['IFC4'][IFCBOUNDARYCURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcBoundaryCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCBOUNDARYCURVE] = (i:IFC4.IfcBoundaryCurve):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InheritanceDef['IFC4'][IFCBOUNDARYCURVE] = [IFCOUTERBOUNDARYCURVE];
InversePropertyDef['IFC4'][IFCBOUNDARYCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCBUILDINGELEMENT] = (d: RawLineData) => { new IFC4.IfcBuildingElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCBUILDINGELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcBuildingElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCBUILDINGELEMENT] = (i:IFC4.IfcBuildingElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCBUILDINGELEMENT] = [IFCBEAMSTANDARDCASE,IFCBEAM,IFCWINDOWSTANDARDCASE,IFCWINDOW,IFCWALLSTANDARDCASE,IFCWALLELEMENTEDCASE,IFCWALL,IFCSTAIRFLIGHT,IFCSTAIR,IFCSLABSTANDARDCASE,IFCSLABELEMENTEDCASE,IFCSLAB,IFCSHADINGDEVICE,IFCROOF,IFCRAMPFLIGHT,IFCRAMP,IFCRAILING,IFCPLATESTANDARDCASE,IFCPLATE,IFCPILE,IFCMEMBERSTANDARDCASE,IFCMEMBER,IFCFOOTING,IFCDOORSTANDARDCASE,IFCDOOR,IFCCURTAINWALL,IFCCOVERING,IFCCOLUMNSTANDARDCASE,IFCCOLUMN,IFCCHIMNEY,IFCBUILDINGELEMENTPROXY];
InversePropertyDef['IFC4'][IFCBUILDINGELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCBUILDINGELEMENTPART] = (d: RawLineData) => { new IFC4.IfcBuildingElementPart(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCBUILDINGELEMENTPART] = (expressID:number, args: any[]) => { return new IFC4.IfcBuildingElementPart(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCBUILDINGELEMENTPART] = (i:IFC4.IfcBuildingElementPart):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBUILDINGELEMENTPART] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCBUILDINGELEMENTPARTTYPE] = (d: RawLineData) => { new IFC4.IfcBuildingElementPartType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCBUILDINGELEMENTPARTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcBuildingElementPartType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCBUILDINGELEMENTPARTTYPE] = (i:IFC4.IfcBuildingElementPartType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBUILDINGELEMENTPARTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCBUILDINGELEMENTPROXY] = (d: RawLineData) => { new IFC4.IfcBuildingElementProxy(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCBUILDINGELEMENTPROXY] = (expressID:number, args: any[]) => { return new IFC4.IfcBuildingElementProxy(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCBUILDINGELEMENTPROXY] = (i:IFC4.IfcBuildingElementProxy):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBUILDINGELEMENTPROXY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCBUILDINGELEMENTPROXYTYPE] = (d: RawLineData) => { new IFC4.IfcBuildingElementProxyType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCBUILDINGELEMENTPROXYTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcBuildingElementProxyType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCBUILDINGELEMENTPROXYTYPE] = (i:IFC4.IfcBuildingElementProxyType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBUILDINGELEMENTPROXYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCBUILDINGSYSTEM] = (d: RawLineData) => { new IFC4.IfcBuildingSystem(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new IFC4.IfcLabel(d.arguments[6].value)); }
Constructors['IFC4'][IFCBUILDINGSYSTEM] = (expressID:number, args: any[]) => { return new IFC4.IfcBuildingSystem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCBUILDINGSYSTEM] = (i:IFC4.IfcBuildingSystem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.LongName]; }
InversePropertyDef['IFC4'][IFCBUILDINGSYSTEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC4'][IFCBURNERTYPE] = (d: RawLineData) => { new IFC4.IfcBurnerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCBURNERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcBurnerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCBURNERTYPE] = (i:IFC4.IfcBurnerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBURNERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCABLECARRIERFITTINGTYPE] = (d: RawLineData) => { new IFC4.IfcCableCarrierFittingType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCABLECARRIERFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCableCarrierFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCABLECARRIERFITTINGTYPE] = (i:IFC4.IfcCableCarrierFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCABLECARRIERFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCABLECARRIERSEGMENTTYPE] = (d: RawLineData) => { new IFC4.IfcCableCarrierSegmentType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCABLECARRIERSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCableCarrierSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCABLECARRIERSEGMENTTYPE] = (i:IFC4.IfcCableCarrierSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCABLECARRIERSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCABLEFITTINGTYPE] = (d: RawLineData) => { new IFC4.IfcCableFittingType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCABLEFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCableFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCABLEFITTINGTYPE] = (i:IFC4.IfcCableFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCABLEFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCABLESEGMENTTYPE] = (d: RawLineData) => { new IFC4.IfcCableSegmentType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCABLESEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCableSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCABLESEGMENTTYPE] = (i:IFC4.IfcCableSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCABLESEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCHILLERTYPE] = (d: RawLineData) => { new IFC4.IfcChillerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCHILLERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcChillerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCHILLERTYPE] = (i:IFC4.IfcChillerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCHILLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCHIMNEY] = (d: RawLineData) => { new IFC4.IfcChimney(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCHIMNEY] = (expressID:number, args: any[]) => { return new IFC4.IfcChimney(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCHIMNEY] = (i:IFC4.IfcChimney):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCHIMNEY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCCIRCLE] = (d: RawLineData) => { new IFC4.IfcCircle(d.ID, new Reference(d.arguments[0].value), new IFC4.IfcPositiveLengthMeasure(d.arguments[1].value)); }
Constructors['IFC4'][IFCCIRCLE] = (expressID:number, args: any[]) => { return new IFC4.IfcCircle(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCCIRCLE] = (i:IFC4.IfcCircle):unknown[] => { return [i.Position, i.Radius]; }
InversePropertyDef['IFC4'][IFCCIRCLE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCCIVILELEMENT] = (d: RawLineData) => { new IFC4.IfcCivilElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCCIVILELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcCivilElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCCIVILELEMENT] = (i:IFC4.IfcCivilElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InversePropertyDef['IFC4'][IFCCIVILELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCCOILTYPE] = (d: RawLineData) => { new IFC4.IfcCoilType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCOILTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCoilType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOILTYPE] = (i:IFC4.IfcCoilType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOILTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCOLUMN] = (d: RawLineData) => { new IFC4.IfcColumn(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCOLUMN] = (expressID:number, args: any[]) => { return new IFC4.IfcColumn(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOLUMN] = (i:IFC4.IfcColumn):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCCOLUMN] = [IFCCOLUMNSTANDARDCASE];
InversePropertyDef['IFC4'][IFCCOLUMN] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCCOLUMNSTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcColumnStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCOLUMNSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcColumnStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOLUMNSTANDARDCASE] = (i:IFC4.IfcColumnStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOLUMNSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCCOMMUNICATIONSAPPLIANCETYPE] = (d: RawLineData) => { new IFC4.IfcCommunicationsApplianceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCOMMUNICATIONSAPPLIANCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCommunicationsApplianceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOMMUNICATIONSAPPLIANCETYPE] = (i:IFC4.IfcCommunicationsApplianceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOMMUNICATIONSAPPLIANCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCOMPRESSORTYPE] = (d: RawLineData) => { new IFC4.IfcCompressorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCOMPRESSORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCompressorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOMPRESSORTYPE] = (i:IFC4.IfcCompressorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOMPRESSORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCONDENSERTYPE] = (d: RawLineData) => { new IFC4.IfcCondenserType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCONDENSERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCondenserType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCONDENSERTYPE] = (i:IFC4.IfcCondenserType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONDENSERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (d: RawLineData) => { new IFC4.IfcConstructionEquipmentResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcConstructionEquipmentResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = (i:IFC4.IfcConstructionEquipmentResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONSTRUCTIONEQUIPMENTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCONSTRUCTIONMATERIALRESOURCE] = (d: RawLineData) => { new IFC4.IfcConstructionMaterialResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4'][IFCCONSTRUCTIONMATERIALRESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcConstructionMaterialResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCCONSTRUCTIONMATERIALRESOURCE] = (i:IFC4.IfcConstructionMaterialResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONSTRUCTIONMATERIALRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (d: RawLineData) => { new IFC4.IfcConstructionProductResource(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcIdentifier(d.arguments[5].value), !d.arguments[6] ? null :new IFC4.IfcText(d.arguments[6].value), !d.arguments[7] ? null :new Reference<IFC4.IfcResourceTime>(d.arguments[7].value), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcAppliedValue>(p.value)), !d.arguments[9] ? null :new Reference<IFC4.IfcPhysicalQuantity>(d.arguments[9].value), d.arguments[10]); }
Constructors['IFC4'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (expressID:number, args: any[]) => { return new IFC4.IfcConstructionProductResource(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCCONSTRUCTIONPRODUCTRESOURCE] = (i:IFC4.IfcConstructionProductResource):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.Identification, i.LongDescription, i.Usage, i.BaseCosts, i.BaseQuantity, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONSTRUCTIONPRODUCTRESOURCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ResourceOf',IFCRELASSIGNSTORESOURCE,6,true],];
FromRawLineData['IFC4'][IFCCOOLEDBEAMTYPE] = (d: RawLineData) => { new IFC4.IfcCooledBeamType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCOOLEDBEAMTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCooledBeamType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOOLEDBEAMTYPE] = (i:IFC4.IfcCooledBeamType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOOLEDBEAMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCOOLINGTOWERTYPE] = (d: RawLineData) => { new IFC4.IfcCoolingTowerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCOOLINGTOWERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcCoolingTowerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCOOLINGTOWERTYPE] = (i:IFC4.IfcCoolingTowerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOOLINGTOWERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCOVERING] = (d: RawLineData) => { new IFC4.IfcCovering(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCOVERING] = (expressID:number, args: any[]) => { return new IFC4.IfcCovering(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOVERING] = (i:IFC4.IfcCovering):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOVERING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['CoversSpaces',IFCRELCOVERSSPACES,5,true],['CoversElements',IFCRELCOVERSBLDGELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCURTAINWALL] = (d: RawLineData) => { new IFC4.IfcCurtainWall(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCURTAINWALL] = (expressID:number, args: any[]) => { return new IFC4.IfcCurtainWall(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCURTAINWALL] = (i:IFC4.IfcCurtainWall):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCURTAINWALL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCDAMPERTYPE] = (d: RawLineData) => { new IFC4.IfcDamperType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCDAMPERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDamperType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCDAMPERTYPE] = (i:IFC4.IfcDamperType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDAMPERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDISCRETEACCESSORY] = (d: RawLineData) => { new IFC4.IfcDiscreteAccessory(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCDISCRETEACCESSORY] = (expressID:number, args: any[]) => { return new IFC4.IfcDiscreteAccessory(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDISCRETEACCESSORY] = (i:IFC4.IfcDiscreteAccessory):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDISCRETEACCESSORY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCDISCRETEACCESSORYTYPE] = (d: RawLineData) => { new IFC4.IfcDiscreteAccessoryType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCDISCRETEACCESSORYTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDiscreteAccessoryType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCDISCRETEACCESSORYTYPE] = (i:IFC4.IfcDiscreteAccessoryType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDISCRETEACCESSORYTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcDistributionChamberElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionChamberElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = (i:IFC4.IfcDistributionChamberElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDISTRIBUTIONCHAMBERELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcDistributionControlElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value)); }
Constructors['IFC4'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionControlElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = (i:IFC4.IfcDistributionControlElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType]; }
InheritanceDef['IFC4'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [IFCCONTROLLERTYPE,IFCALARMTYPE,IFCACTUATORTYPE,IFCUNITARYCONTROLELEMENTTYPE,IFCSENSORTYPE,IFCPROTECTIVEDEVICETRIPPINGUNITTYPE,IFCFLOWINSTRUMENTTYPE];
InversePropertyDef['IFC4'][IFCDISTRIBUTIONCONTROLELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONELEMENT] = (d: RawLineData) => { new IFC4.IfcDistributionElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCDISTRIBUTIONELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONELEMENT] = (i:IFC4.IfcDistributionElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCDISTRIBUTIONELEMENT] = [IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT,IFCDISTRIBUTIONCONTROLELEMENT,IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSANITARYTERMINAL,IFCOUTLET,IFCMEDICALDEVICE,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE,IFCDISTRIBUTIONFLOWELEMENT];
InversePropertyDef['IFC4'][IFCDISTRIBUTIONELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONFLOWELEMENT] = (d: RawLineData) => { new IFC4.IfcDistributionFlowElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCDISTRIBUTIONFLOWELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionFlowElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONFLOWELEMENT] = (i:IFC4.IfcDistributionFlowElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCDISTRIBUTIONFLOWELEMENT] = [IFCDISTRIBUTIONCHAMBERELEMENT,IFCFILTER,IFCDUCTSILENCER,IFCINTERCEPTOR,IFCFLOWTREATMENTDEVICE,IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSANITARYTERMINAL,IFCOUTLET,IFCMEDICALDEVICE,IFCLIGHTFIXTURE,IFCLAMP,IFCFLOWTERMINAL,IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK,IFCFLOWSTORAGEDEVICE,IFCDUCTSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT,IFCFLOWSEGMENT,IFCFAN,IFCCOMPRESSOR,IFCPUMP,IFCFLOWMOVINGDEVICE,IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX,IFCFLOWFITTING,IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER,IFCFLOWCONTROLLER,IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE,IFCENERGYCONVERSIONDEVICE];
InversePropertyDef['IFC4'][IFCDISTRIBUTIONFLOWELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONPORT] = (d: RawLineData) => { new IFC4.IfcDistributionPort(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), d.arguments[7], d.arguments[8], d.arguments[9]); }
Constructors['IFC4'][IFCDISTRIBUTIONPORT] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionPort(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONPORT] = (i:IFC4.IfcDistributionPort):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.FlowDirection, i.PredefinedType, i.SystemType]; }
InversePropertyDef['IFC4'][IFCDISTRIBUTIONPORT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainedIn',IFCRELCONNECTSPORTTOELEMENT,4,true],['ConnectedFrom',IFCRELCONNECTSPORTS,5,true],['ConnectedTo',IFCRELCONNECTSPORTS,4,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONSYSTEM] = (d: RawLineData) => { new IFC4.IfcDistributionSystem(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), d.arguments[6]); }
Constructors['IFC4'][IFCDISTRIBUTIONSYSTEM] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionSystem(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONSYSTEM] = (i:IFC4.IfcDistributionSystem):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCDISTRIBUTIONSYSTEM] = [IFCDISTRIBUTIONCIRCUIT];
InversePropertyDef['IFC4'][IFCDISTRIBUTIONSYSTEM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC4'][IFCDOOR] = (d: RawLineData) => { new IFC4.IfcDoor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[9].value), d.arguments[10], d.arguments[11], !d.arguments[12] ? null :new IFC4.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4'][IFCDOOR] = (expressID:number, args: any[]) => { return new IFC4.IfcDoor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCDOOR] = (i:IFC4.IfcDoor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OverallHeight, i.OverallWidth, i.PredefinedType, i.OperationType, i.UserDefinedOperationType]; }
InheritanceDef['IFC4'][IFCDOOR] = [IFCDOORSTANDARDCASE];
InversePropertyDef['IFC4'][IFCDOOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCDOORSTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcDoorStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[9].value), d.arguments[10], d.arguments[11], !d.arguments[12] ? null :new IFC4.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4'][IFCDOORSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcDoorStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCDOORSTANDARDCASE] = (i:IFC4.IfcDoorStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OverallHeight, i.OverallWidth, i.PredefinedType, i.OperationType, i.UserDefinedOperationType]; }
InversePropertyDef['IFC4'][IFCDOORSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCDUCTFITTINGTYPE] = (d: RawLineData) => { new IFC4.IfcDuctFittingType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCDUCTFITTINGTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDuctFittingType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCDUCTFITTINGTYPE] = (i:IFC4.IfcDuctFittingType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDUCTFITTINGTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDUCTSEGMENTTYPE] = (d: RawLineData) => { new IFC4.IfcDuctSegmentType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCDUCTSEGMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDuctSegmentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCDUCTSEGMENTTYPE] = (i:IFC4.IfcDuctSegmentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDUCTSEGMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCDUCTSILENCERTYPE] = (d: RawLineData) => { new IFC4.IfcDuctSilencerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCDUCTSILENCERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcDuctSilencerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCDUCTSILENCERTYPE] = (i:IFC4.IfcDuctSilencerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDUCTSILENCERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELECTRICAPPLIANCETYPE] = (d: RawLineData) => { new IFC4.IfcElectricApplianceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCELECTRICAPPLIANCETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricApplianceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCELECTRICAPPLIANCETYPE] = (i:IFC4.IfcElectricApplianceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICAPPLIANCETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELECTRICDISTRIBUTIONBOARDTYPE] = (d: RawLineData) => { new IFC4.IfcElectricDistributionBoardType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCELECTRICDISTRIBUTIONBOARDTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricDistributionBoardType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCELECTRICDISTRIBUTIONBOARDTYPE] = (i:IFC4.IfcElectricDistributionBoardType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICDISTRIBUTIONBOARDTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (d: RawLineData) => { new IFC4.IfcElectricFlowStorageDeviceType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricFlowStorageDeviceType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = (i:IFC4.IfcElectricFlowStorageDeviceType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICFLOWSTORAGEDEVICETYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELECTRICGENERATORTYPE] = (d: RawLineData) => { new IFC4.IfcElectricGeneratorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCELECTRICGENERATORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricGeneratorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCELECTRICGENERATORTYPE] = (i:IFC4.IfcElectricGeneratorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICGENERATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELECTRICMOTORTYPE] = (d: RawLineData) => { new IFC4.IfcElectricMotorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCELECTRICMOTORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricMotorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCELECTRICMOTORTYPE] = (i:IFC4.IfcElectricMotorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICMOTORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCELECTRICTIMECONTROLTYPE] = (d: RawLineData) => { new IFC4.IfcElectricTimeControlType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCELECTRICTIMECONTROLTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricTimeControlType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCELECTRICTIMECONTROLTYPE] = (i:IFC4.IfcElectricTimeControlType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICTIMECONTROLTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCENERGYCONVERSIONDEVICE] = (d: RawLineData) => { new IFC4.IfcEnergyConversionDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCENERGYCONVERSIONDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcEnergyConversionDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCENERGYCONVERSIONDEVICE] = (i:IFC4.IfcEnergyConversionDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCENERGYCONVERSIONDEVICE] = [IFCELECTRICMOTOR,IFCELECTRICGENERATOR,IFCCOOLINGTOWER,IFCCOOLEDBEAM,IFCCONDENSER,IFCCOIL,IFCCHILLER,IFCBURNER,IFCBOILER,IFCAIRTOAIRHEATRECOVERY,IFCUNITARYEQUIPMENT,IFCTUBEBUNDLE,IFCTRANSFORMER,IFCSOLARDEVICE,IFCMOTORCONNECTION,IFCHUMIDIFIER,IFCHEATEXCHANGER,IFCEVAPORATOR,IFCEVAPORATIVECOOLER,IFCENGINE];
InversePropertyDef['IFC4'][IFCENERGYCONVERSIONDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCENGINE] = (d: RawLineData) => { new IFC4.IfcEngine(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCENGINE] = (expressID:number, args: any[]) => { return new IFC4.IfcEngine(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCENGINE] = (i:IFC4.IfcEngine):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCENGINE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCEVAPORATIVECOOLER] = (d: RawLineData) => { new IFC4.IfcEvaporativeCooler(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCEVAPORATIVECOOLER] = (expressID:number, args: any[]) => { return new IFC4.IfcEvaporativeCooler(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCEVAPORATIVECOOLER] = (i:IFC4.IfcEvaporativeCooler):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCEVAPORATIVECOOLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCEVAPORATOR] = (d: RawLineData) => { new IFC4.IfcEvaporator(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCEVAPORATOR] = (expressID:number, args: any[]) => { return new IFC4.IfcEvaporator(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCEVAPORATOR] = (i:IFC4.IfcEvaporator):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCEVAPORATOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCEXTERNALSPATIALELEMENT] = (d: RawLineData) => { new IFC4.IfcExternalSpatialElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCEXTERNALSPATIALELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcExternalSpatialElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCEXTERNALSPATIALELEMENT] = (i:IFC4.IfcExternalSpatialElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.LongName, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCEXTERNALSPATIALELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['ContainsElements',IFCRELCONTAINEDINSPATIALSTRUCTURE,5,true],['ServicedBySystems',IFCRELSERVICESBUILDINGS,5,true],['ReferencesElements',IFCRELREFERENCEDINSPATIALSTRUCTURE,5,true],['BoundedBy',IFCRELSPACEBOUNDARY,4,true],];
FromRawLineData['IFC4'][IFCFANTYPE] = (d: RawLineData) => { new IFC4.IfcFanType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCFANTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFanType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCFANTYPE] = (i:IFC4.IfcFanType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFANTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFILTERTYPE] = (d: RawLineData) => { new IFC4.IfcFilterType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCFILTERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFilterType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCFILTERTYPE] = (i:IFC4.IfcFilterType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFILTERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFIRESUPPRESSIONTERMINALTYPE] = (d: RawLineData) => { new IFC4.IfcFireSuppressionTerminalType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCFIRESUPPRESSIONTERMINALTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFireSuppressionTerminalType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCFIRESUPPRESSIONTERMINALTYPE] = (i:IFC4.IfcFireSuppressionTerminalType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFIRESUPPRESSIONTERMINALTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWCONTROLLER] = (d: RawLineData) => { new IFC4.IfcFlowController(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFLOWCONTROLLER] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowController(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFLOWCONTROLLER] = (i:IFC4.IfcFlowController):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFLOWCONTROLLER] = [IFCELECTRICTIMECONTROL,IFCELECTRICDISTRIBUTIONBOARD,IFCDAMPER,IFCAIRTERMINALBOX,IFCVALVE,IFCSWITCHINGDEVICE,IFCPROTECTIVEDEVICE,IFCFLOWMETER];
InversePropertyDef['IFC4'][IFCFLOWCONTROLLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFLOWFITTING] = (d: RawLineData) => { new IFC4.IfcFlowFitting(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFLOWFITTING] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFLOWFITTING] = (i:IFC4.IfcFlowFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFLOWFITTING] = [IFCDUCTFITTING,IFCCABLEFITTING,IFCCABLECARRIERFITTING,IFCPIPEFITTING,IFCJUNCTIONBOX];
InversePropertyDef['IFC4'][IFCFLOWFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFLOWINSTRUMENTTYPE] = (d: RawLineData) => { new IFC4.IfcFlowInstrumentType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCFLOWINSTRUMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowInstrumentType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCFLOWINSTRUMENTTYPE] = (i:IFC4.IfcFlowInstrumentType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFLOWINSTRUMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCFLOWMETER] = (d: RawLineData) => { new IFC4.IfcFlowMeter(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCFLOWMETER] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowMeter(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWMETER] = (i:IFC4.IfcFlowMeter):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFLOWMETER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFLOWMOVINGDEVICE] = (d: RawLineData) => { new IFC4.IfcFlowMovingDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFLOWMOVINGDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowMovingDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFLOWMOVINGDEVICE] = (i:IFC4.IfcFlowMovingDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFLOWMOVINGDEVICE] = [IFCFAN,IFCCOMPRESSOR,IFCPUMP];
InversePropertyDef['IFC4'][IFCFLOWMOVINGDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFLOWSEGMENT] = (d: RawLineData) => { new IFC4.IfcFlowSegment(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFLOWSEGMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFLOWSEGMENT] = (i:IFC4.IfcFlowSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFLOWSEGMENT] = [IFCDUCTSEGMENT,IFCCABLESEGMENT,IFCCABLECARRIERSEGMENT,IFCPIPESEGMENT];
InversePropertyDef['IFC4'][IFCFLOWSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFLOWSTORAGEDEVICE] = (d: RawLineData) => { new IFC4.IfcFlowStorageDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFLOWSTORAGEDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowStorageDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFLOWSTORAGEDEVICE] = (i:IFC4.IfcFlowStorageDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFLOWSTORAGEDEVICE] = [IFCELECTRICFLOWSTORAGEDEVICE,IFCTANK];
InversePropertyDef['IFC4'][IFCFLOWSTORAGEDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFLOWTERMINAL] = (d: RawLineData) => { new IFC4.IfcFlowTerminal(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFLOWTERMINAL] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFLOWTERMINAL] = (i:IFC4.IfcFlowTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFLOWTERMINAL] = [IFCFIRESUPPRESSIONTERMINAL,IFCELECTRICAPPLIANCE,IFCCOMMUNICATIONSAPPLIANCE,IFCAUDIOVISUALAPPLIANCE,IFCAIRTERMINAL,IFCWASTETERMINAL,IFCSTACKTERMINAL,IFCSPACEHEATER,IFCSANITARYTERMINAL,IFCOUTLET,IFCMEDICALDEVICE,IFCLIGHTFIXTURE,IFCLAMP];
InversePropertyDef['IFC4'][IFCFLOWTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFLOWTREATMENTDEVICE] = (d: RawLineData) => { new IFC4.IfcFlowTreatmentDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCFLOWTREATMENTDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowTreatmentDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCFLOWTREATMENTDEVICE] = (i:IFC4.IfcFlowTreatmentDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCFLOWTREATMENTDEVICE] = [IFCFILTER,IFCDUCTSILENCER,IFCINTERCEPTOR];
InversePropertyDef['IFC4'][IFCFLOWTREATMENTDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFOOTING] = (d: RawLineData) => { new IFC4.IfcFooting(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCFOOTING] = (expressID:number, args: any[]) => { return new IFC4.IfcFooting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFOOTING] = (i:IFC4.IfcFooting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFOOTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCHEATEXCHANGER] = (d: RawLineData) => { new IFC4.IfcHeatExchanger(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCHEATEXCHANGER] = (expressID:number, args: any[]) => { return new IFC4.IfcHeatExchanger(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCHEATEXCHANGER] = (i:IFC4.IfcHeatExchanger):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCHEATEXCHANGER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCHUMIDIFIER] = (d: RawLineData) => { new IFC4.IfcHumidifier(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCHUMIDIFIER] = (expressID:number, args: any[]) => { return new IFC4.IfcHumidifier(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCHUMIDIFIER] = (i:IFC4.IfcHumidifier):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCHUMIDIFIER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCINTERCEPTOR] = (d: RawLineData) => { new IFC4.IfcInterceptor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCINTERCEPTOR] = (expressID:number, args: any[]) => { return new IFC4.IfcInterceptor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCINTERCEPTOR] = (i:IFC4.IfcInterceptor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCINTERCEPTOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCJUNCTIONBOX] = (d: RawLineData) => { new IFC4.IfcJunctionBox(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCJUNCTIONBOX] = (expressID:number, args: any[]) => { return new IFC4.IfcJunctionBox(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCJUNCTIONBOX] = (i:IFC4.IfcJunctionBox):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCJUNCTIONBOX] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCLAMP] = (d: RawLineData) => { new IFC4.IfcLamp(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCLAMP] = (expressID:number, args: any[]) => { return new IFC4.IfcLamp(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCLAMP] = (i:IFC4.IfcLamp):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCLAMP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCLIGHTFIXTURE] = (d: RawLineData) => { new IFC4.IfcLightFixture(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCLIGHTFIXTURE] = (expressID:number, args: any[]) => { return new IFC4.IfcLightFixture(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCLIGHTFIXTURE] = (i:IFC4.IfcLightFixture):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCLIGHTFIXTURE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCMEDICALDEVICE] = (d: RawLineData) => { new IFC4.IfcMedicalDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCMEDICALDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcMedicalDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCMEDICALDEVICE] = (i:IFC4.IfcMedicalDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCMEDICALDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCMEMBER] = (d: RawLineData) => { new IFC4.IfcMember(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCMEMBER] = (expressID:number, args: any[]) => { return new IFC4.IfcMember(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCMEMBER] = (i:IFC4.IfcMember):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCMEMBER] = [IFCMEMBERSTANDARDCASE];
InversePropertyDef['IFC4'][IFCMEMBER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCMEMBERSTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcMemberStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCMEMBERSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcMemberStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCMEMBERSTANDARDCASE] = (i:IFC4.IfcMemberStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCMEMBERSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCMOTORCONNECTION] = (d: RawLineData) => { new IFC4.IfcMotorConnection(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCMOTORCONNECTION] = (expressID:number, args: any[]) => { return new IFC4.IfcMotorConnection(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCMOTORCONNECTION] = (i:IFC4.IfcMotorConnection):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCMOTORCONNECTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCOUTERBOUNDARYCURVE] = (d: RawLineData) => { new IFC4.IfcOuterBoundaryCurve(d.ID, d.arguments[0].map((p:any) => new Reference<IFC4.IfcCompositeCurveSegment>(p.value)), new IFC4.IfcLogical(d.arguments[1].value)); }
Constructors['IFC4'][IFCOUTERBOUNDARYCURVE] = (expressID:number, args: any[]) => { return new IFC4.IfcOuterBoundaryCurve(expressID, args[0], args[1]); }
ToRawLineData['IFC4'][IFCOUTERBOUNDARYCURVE] = (i:IFC4.IfcOuterBoundaryCurve):unknown[] => { return [i.Segments, i.SelfIntersect]; }
InversePropertyDef['IFC4'][IFCOUTERBOUNDARYCURVE] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCOUTLET] = (d: RawLineData) => { new IFC4.IfcOutlet(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCOUTLET] = (expressID:number, args: any[]) => { return new IFC4.IfcOutlet(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCOUTLET] = (i:IFC4.IfcOutlet):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCOUTLET] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCPILE] = (d: RawLineData) => { new IFC4.IfcPile(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8], d.arguments[9]); }
Constructors['IFC4'][IFCPILE] = (expressID:number, args: any[]) => { return new IFC4.IfcPile(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPILE] = (i:IFC4.IfcPile):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType, i.ConstructionType]; }
InversePropertyDef['IFC4'][IFCPILE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCPIPEFITTING] = (d: RawLineData) => { new IFC4.IfcPipeFitting(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCPIPEFITTING] = (expressID:number, args: any[]) => { return new IFC4.IfcPipeFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPIPEFITTING] = (i:IFC4.IfcPipeFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPIPEFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCPIPESEGMENT] = (d: RawLineData) => { new IFC4.IfcPipeSegment(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCPIPESEGMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcPipeSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPIPESEGMENT] = (i:IFC4.IfcPipeSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPIPESEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCPLATE] = (d: RawLineData) => { new IFC4.IfcPlate(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCPLATE] = (expressID:number, args: any[]) => { return new IFC4.IfcPlate(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPLATE] = (i:IFC4.IfcPlate):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCPLATE] = [IFCPLATESTANDARDCASE];
InversePropertyDef['IFC4'][IFCPLATE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCPLATESTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcPlateStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCPLATESTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcPlateStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPLATESTANDARDCASE] = (i:IFC4.IfcPlateStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPLATESTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCPROTECTIVEDEVICE] = (d: RawLineData) => { new IFC4.IfcProtectiveDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCPROTECTIVEDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcProtectiveDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPROTECTIVEDEVICE] = (i:IFC4.IfcProtectiveDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPROTECTIVEDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (d: RawLineData) => { new IFC4.IfcProtectiveDeviceTrippingUnitType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcProtectiveDeviceTrippingUnitType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = (i:IFC4.IfcProtectiveDeviceTrippingUnitType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPROTECTIVEDEVICETRIPPINGUNITTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCPUMP] = (d: RawLineData) => { new IFC4.IfcPump(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCPUMP] = (expressID:number, args: any[]) => { return new IFC4.IfcPump(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPUMP] = (i:IFC4.IfcPump):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPUMP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCRAILING] = (d: RawLineData) => { new IFC4.IfcRailing(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCRAILING] = (expressID:number, args: any[]) => { return new IFC4.IfcRailing(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCRAILING] = (i:IFC4.IfcRailing):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCRAILING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCRAMP] = (d: RawLineData) => { new IFC4.IfcRamp(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCRAMP] = (expressID:number, args: any[]) => { return new IFC4.IfcRamp(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCRAMP] = (i:IFC4.IfcRamp):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCRAMP] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCRAMPFLIGHT] = (d: RawLineData) => { new IFC4.IfcRampFlight(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCRAMPFLIGHT] = (expressID:number, args: any[]) => { return new IFC4.IfcRampFlight(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCRAMPFLIGHT] = (i:IFC4.IfcRampFlight):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCRAMPFLIGHT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCRATIONALBSPLINECURVEWITHKNOTS] = (d: RawLineData) => { new IFC4.IfcRationalBSplineCurveWithKnots(d.ID, new IFC4.IfcInteger(d.arguments[0].value), d.arguments[1].map((p:any) => new Reference<IFC4.IfcCartesianPoint>(p.value)), d.arguments[2], new IFC4.IfcLogical(d.arguments[3].value), new IFC4.IfcLogical(d.arguments[4].value), d.arguments[5].map((p:any) => new IFC4.IfcInteger(p.value)), d.arguments[6].map((p:any) => new IFC4.IfcParameterValue(p.value)), d.arguments[7], d.arguments[8].map((p:any) => new IFC4.IfcReal(p.value))); }
Constructors['IFC4'][IFCRATIONALBSPLINECURVEWITHKNOTS] = (expressID:number, args: any[]) => { return new IFC4.IfcRationalBSplineCurveWithKnots(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCRATIONALBSPLINECURVEWITHKNOTS] = (i:IFC4.IfcRationalBSplineCurveWithKnots):unknown[] => { return [i.Degree, i.ControlPointsList, i.CurveForm, i.ClosedCurve, i.SelfIntersect, i.KnotMultiplicities, i.Knots, i.KnotSpec, i.WeightsData]; }
InversePropertyDef['IFC4'][IFCRATIONALBSPLINECURVEWITHKNOTS] = [['LayerAssignment',IFCPRESENTATIONLAYERASSIGNMENT,2,true],['StyledByItem',IFCSTYLEDITEM,0,true],];
FromRawLineData['IFC4'][IFCREINFORCINGBAR] = (d: RawLineData) => { new IFC4.IfcReinforcingBar(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcAreaMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[11].value), d.arguments[12], d.arguments[13]); }
Constructors['IFC4'][IFCREINFORCINGBAR] = (expressID:number, args: any[]) => { return new IFC4.IfcReinforcingBar(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13]); }
ToRawLineData['IFC4'][IFCREINFORCINGBAR] = (i:IFC4.IfcReinforcingBar):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.SteelGrade, i.NominalDiameter, i.CrossSectionArea, i.BarLength, i.PredefinedType, i.BarSurface]; }
InversePropertyDef['IFC4'][IFCREINFORCINGBAR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCREINFORCINGBARTYPE] = (d: RawLineData) => { new IFC4.IfcReinforcingBarType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9], !d.arguments[10] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcAreaMeasure(d.arguments[11].value), !d.arguments[12] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[12].value), d.arguments[13], !d.arguments[14] ? null :new IFC4.IfcLabel(d.arguments[14].value), !d.arguments[15] ? null :d.arguments[15].map((p:any) => TypeInitialiser('IFC4',p))); }
Constructors['IFC4'][IFCREINFORCINGBARTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcReinforcingBarType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15]); }
ToRawLineData['IFC4'][IFCREINFORCINGBARTYPE] = (i:IFC4.IfcReinforcingBarType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType, i.NominalDiameter, i.CrossSectionArea, i.BarLength, i.BarSurface, i.BendingShapeCode, !i.BendingParameters ? null :i.BendingParameters.map((p:any) => Labelise(p))]; }
InversePropertyDef['IFC4'][IFCREINFORCINGBARTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCROOF] = (d: RawLineData) => { new IFC4.IfcRoof(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCROOF] = (expressID:number, args: any[]) => { return new IFC4.IfcRoof(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCROOF] = (i:IFC4.IfcRoof):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCROOF] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSANITARYTERMINAL] = (d: RawLineData) => { new IFC4.IfcSanitaryTerminal(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSANITARYTERMINAL] = (expressID:number, args: any[]) => { return new IFC4.IfcSanitaryTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSANITARYTERMINAL] = (i:IFC4.IfcSanitaryTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSANITARYTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCSENSORTYPE] = (d: RawLineData) => { new IFC4.IfcSensorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCSENSORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcSensorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSENSORTYPE] = (i:IFC4.IfcSensorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSENSORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCSHADINGDEVICE] = (d: RawLineData) => { new IFC4.IfcShadingDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSHADINGDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcShadingDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSHADINGDEVICE] = (i:IFC4.IfcShadingDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSHADINGDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSLAB] = (d: RawLineData) => { new IFC4.IfcSlab(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSLAB] = (expressID:number, args: any[]) => { return new IFC4.IfcSlab(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSLAB] = (i:IFC4.IfcSlab):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCSLAB] = [IFCSLABSTANDARDCASE,IFCSLABELEMENTEDCASE];
InversePropertyDef['IFC4'][IFCSLAB] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSLABELEMENTEDCASE] = (d: RawLineData) => { new IFC4.IfcSlabElementedCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSLABELEMENTEDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcSlabElementedCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSLABELEMENTEDCASE] = (i:IFC4.IfcSlabElementedCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSLABELEMENTEDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSLABSTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcSlabStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSLABSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcSlabStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSLABSTANDARDCASE] = (i:IFC4.IfcSlabStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSLABSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSOLARDEVICE] = (d: RawLineData) => { new IFC4.IfcSolarDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSOLARDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcSolarDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSOLARDEVICE] = (i:IFC4.IfcSolarDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSOLARDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCSPACEHEATER] = (d: RawLineData) => { new IFC4.IfcSpaceHeater(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSPACEHEATER] = (expressID:number, args: any[]) => { return new IFC4.IfcSpaceHeater(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSPACEHEATER] = (i:IFC4.IfcSpaceHeater):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSPACEHEATER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCSTACKTERMINAL] = (d: RawLineData) => { new IFC4.IfcStackTerminal(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSTACKTERMINAL] = (expressID:number, args: any[]) => { return new IFC4.IfcStackTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTACKTERMINAL] = (i:IFC4.IfcStackTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTACKTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCSTAIR] = (d: RawLineData) => { new IFC4.IfcStair(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSTAIR] = (expressID:number, args: any[]) => { return new IFC4.IfcStair(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSTAIR] = (i:IFC4.IfcStair):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTAIR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSTAIRFLIGHT] = (d: RawLineData) => { new IFC4.IfcStairFlight(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcInteger(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcInteger(d.arguments[9].value), !d.arguments[10] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[10].value), !d.arguments[11] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[11].value), d.arguments[12]); }
Constructors['IFC4'][IFCSTAIRFLIGHT] = (expressID:number, args: any[]) => { return new IFC4.IfcStairFlight(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCSTAIRFLIGHT] = (i:IFC4.IfcStairFlight):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.NumberOfRisers, i.NumberOfTreads, i.RiserHeight, i.TreadLength, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTAIRFLIGHT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALANALYSISMODEL] = (d: RawLineData) => { new IFC4.IfcStructuralAnalysisModel(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5], !d.arguments[6] ? null :new Reference<IFC4.IfcAxis2Placement3D>(d.arguments[6].value), !d.arguments[7] ? null :d.arguments[7].map((p:any) => new Reference<IFC4.IfcStructuralLoadGroup>(p.value)), !d.arguments[8] ? null :d.arguments[8].map((p:any) => new Reference<IFC4.IfcStructuralResultGroup>(p.value)), !d.arguments[9] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[9].value)); }
Constructors['IFC4'][IFCSTRUCTURALANALYSISMODEL] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralAnalysisModel(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCSTRUCTURALANALYSISMODEL] = (i:IFC4.IfcStructuralAnalysisModel):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.OrientationOf2DPlane, i.LoadedBy, i.HasResults, i.SharedPlacement]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALANALYSISMODEL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALLOADCASE] = (d: RawLineData) => { new IFC4.IfcStructuralLoadCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), d.arguments[5], d.arguments[6], d.arguments[7], !d.arguments[8] ? null :new IFC4.IfcRatioMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcLabel(d.arguments[9].value), !d.arguments[10] ? null :d.arguments[10].map((p:any) => new IFC4.IfcRatioMeasure(p.value))); }
Constructors['IFC4'][IFCSTRUCTURALLOADCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralLoadCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]); }
ToRawLineData['IFC4'][IFCSTRUCTURALLOADCASE] = (i:IFC4.IfcStructuralLoadCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.PredefinedType, i.ActionType, i.ActionSource, i.Coefficient, i.Purpose, i.SelfWeightCoefficients]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALLOADCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['SourceOfResultGroup',IFCSTRUCTURALRESULTGROUP,6,true],['LoadGroupFor',IFCSTRUCTURALANALYSISMODEL,7,true],];
FromRawLineData['IFC4'][IFCSTRUCTURALPLANARACTION] = (d: RawLineData) => { new IFC4.IfcStructuralPlanarAction(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), new Reference<IFC4.IfcStructuralLoad>(d.arguments[7].value), d.arguments[8], !d.arguments[9] ? null :new IFC4.IfcBoolean(d.arguments[9].value), d.arguments[10], d.arguments[11]); }
Constructors['IFC4'][IFCSTRUCTURALPLANARACTION] = (expressID:number, args: any[]) => { return new IFC4.IfcStructuralPlanarAction(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11]); }
ToRawLineData['IFC4'][IFCSTRUCTURALPLANARACTION] = (i:IFC4.IfcStructuralPlanarAction):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.AppliedLoad, i.GlobalOrLocal, i.DestabilizingLoad, i.ProjectedOrTrue, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSTRUCTURALPLANARACTION] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['AssignedToStructuralItem',IFCRELCONNECTSSTRUCTURALACTIVITY,5,true],];
FromRawLineData['IFC4'][IFCSWITCHINGDEVICE] = (d: RawLineData) => { new IFC4.IfcSwitchingDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSWITCHINGDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcSwitchingDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSWITCHINGDEVICE] = (i:IFC4.IfcSwitchingDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSWITCHINGDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCTANK] = (d: RawLineData) => { new IFC4.IfcTank(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCTANK] = (expressID:number, args: any[]) => { return new IFC4.IfcTank(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCTANK] = (i:IFC4.IfcTank):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTANK] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCTRANSFORMER] = (d: RawLineData) => { new IFC4.IfcTransformer(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCTRANSFORMER] = (expressID:number, args: any[]) => { return new IFC4.IfcTransformer(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCTRANSFORMER] = (i:IFC4.IfcTransformer):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTRANSFORMER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCTUBEBUNDLE] = (d: RawLineData) => { new IFC4.IfcTubeBundle(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCTUBEBUNDLE] = (expressID:number, args: any[]) => { return new IFC4.IfcTubeBundle(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCTUBEBUNDLE] = (i:IFC4.IfcTubeBundle):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCTUBEBUNDLE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCUNITARYCONTROLELEMENTTYPE] = (d: RawLineData) => { new IFC4.IfcUnitaryControlElementType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCUNITARYCONTROLELEMENTTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcUnitaryControlElementType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCUNITARYCONTROLELEMENTTYPE] = (i:IFC4.IfcUnitaryControlElementType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCUNITARYCONTROLELEMENTTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCUNITARYEQUIPMENT] = (d: RawLineData) => { new IFC4.IfcUnitaryEquipment(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCUNITARYEQUIPMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcUnitaryEquipment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCUNITARYEQUIPMENT] = (i:IFC4.IfcUnitaryEquipment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCUNITARYEQUIPMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCVALVE] = (d: RawLineData) => { new IFC4.IfcValve(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCVALVE] = (expressID:number, args: any[]) => { return new IFC4.IfcValve(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCVALVE] = (i:IFC4.IfcValve):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCVALVE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCWALL] = (d: RawLineData) => { new IFC4.IfcWall(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCWALL] = (expressID:number, args: any[]) => { return new IFC4.IfcWall(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCWALL] = (i:IFC4.IfcWall):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCWALL] = [IFCWALLSTANDARDCASE,IFCWALLELEMENTEDCASE];
InversePropertyDef['IFC4'][IFCWALL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCWALLELEMENTEDCASE] = (d: RawLineData) => { new IFC4.IfcWallElementedCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCWALLELEMENTEDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcWallElementedCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCWALLELEMENTEDCASE] = (i:IFC4.IfcWallElementedCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCWALLELEMENTEDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCWALLSTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcWallStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCWALLSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcWallStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCWALLSTANDARDCASE] = (i:IFC4.IfcWallStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCWALLSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCWASTETERMINAL] = (d: RawLineData) => { new IFC4.IfcWasteTerminal(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCWASTETERMINAL] = (expressID:number, args: any[]) => { return new IFC4.IfcWasteTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCWASTETERMINAL] = (i:IFC4.IfcWasteTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCWASTETERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCWINDOW] = (d: RawLineData) => { new IFC4.IfcWindow(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[9].value), d.arguments[10], d.arguments[11], !d.arguments[12] ? null :new IFC4.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4'][IFCWINDOW] = (expressID:number, args: any[]) => { return new IFC4.IfcWindow(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCWINDOW] = (i:IFC4.IfcWindow):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OverallHeight, i.OverallWidth, i.PredefinedType, i.PartitioningType, i.UserDefinedPartitioningType]; }
InheritanceDef['IFC4'][IFCWINDOW] = [IFCWINDOWSTANDARDCASE];
InversePropertyDef['IFC4'][IFCWINDOW] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCWINDOWSTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcWindowStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[8].value), !d.arguments[9] ? null :new IFC4.IfcPositiveLengthMeasure(d.arguments[9].value), d.arguments[10], d.arguments[11], !d.arguments[12] ? null :new IFC4.IfcLabel(d.arguments[12].value)); }
Constructors['IFC4'][IFCWINDOWSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcWindowStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12]); }
ToRawLineData['IFC4'][IFCWINDOWSTANDARDCASE] = (i:IFC4.IfcWindowStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.OverallHeight, i.OverallWidth, i.PredefinedType, i.PartitioningType, i.UserDefinedPartitioningType]; }
InversePropertyDef['IFC4'][IFCWINDOWSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCACTUATORTYPE] = (d: RawLineData) => { new IFC4.IfcActuatorType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCACTUATORTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcActuatorType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCACTUATORTYPE] = (i:IFC4.IfcActuatorType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCACTUATORTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCAIRTERMINAL] = (d: RawLineData) => { new IFC4.IfcAirTerminal(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCAIRTERMINAL] = (expressID:number, args: any[]) => { return new IFC4.IfcAirTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCAIRTERMINAL] = (i:IFC4.IfcAirTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCAIRTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCAIRTERMINALBOX] = (d: RawLineData) => { new IFC4.IfcAirTerminalBox(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCAIRTERMINALBOX] = (expressID:number, args: any[]) => { return new IFC4.IfcAirTerminalBox(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCAIRTERMINALBOX] = (i:IFC4.IfcAirTerminalBox):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCAIRTERMINALBOX] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCAIRTOAIRHEATRECOVERY] = (d: RawLineData) => { new IFC4.IfcAirToAirHeatRecovery(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCAIRTOAIRHEATRECOVERY] = (expressID:number, args: any[]) => { return new IFC4.IfcAirToAirHeatRecovery(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCAIRTOAIRHEATRECOVERY] = (i:IFC4.IfcAirToAirHeatRecovery):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCAIRTOAIRHEATRECOVERY] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCALARMTYPE] = (d: RawLineData) => { new IFC4.IfcAlarmType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCALARMTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcAlarmType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCALARMTYPE] = (i:IFC4.IfcAlarmType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCALARMTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCAUDIOVISUALAPPLIANCE] = (d: RawLineData) => { new IFC4.IfcAudioVisualAppliance(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCAUDIOVISUALAPPLIANCE] = (expressID:number, args: any[]) => { return new IFC4.IfcAudioVisualAppliance(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCAUDIOVISUALAPPLIANCE] = (i:IFC4.IfcAudioVisualAppliance):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCAUDIOVISUALAPPLIANCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCBEAM] = (d: RawLineData) => { new IFC4.IfcBeam(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCBEAM] = (expressID:number, args: any[]) => { return new IFC4.IfcBeam(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCBEAM] = (i:IFC4.IfcBeam):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InheritanceDef['IFC4'][IFCBEAM] = [IFCBEAMSTANDARDCASE];
InversePropertyDef['IFC4'][IFCBEAM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCBEAMSTANDARDCASE] = (d: RawLineData) => { new IFC4.IfcBeamStandardCase(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCBEAMSTANDARDCASE] = (expressID:number, args: any[]) => { return new IFC4.IfcBeamStandardCase(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCBEAMSTANDARDCASE] = (i:IFC4.IfcBeamStandardCase):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBEAMSTANDARDCASE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCBOILER] = (d: RawLineData) => { new IFC4.IfcBoiler(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCBOILER] = (expressID:number, args: any[]) => { return new IFC4.IfcBoiler(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCBOILER] = (i:IFC4.IfcBoiler):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBOILER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCBURNER] = (d: RawLineData) => { new IFC4.IfcBurner(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCBURNER] = (expressID:number, args: any[]) => { return new IFC4.IfcBurner(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCBURNER] = (i:IFC4.IfcBurner):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCBURNER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCABLECARRIERFITTING] = (d: RawLineData) => { new IFC4.IfcCableCarrierFitting(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCABLECARRIERFITTING] = (expressID:number, args: any[]) => { return new IFC4.IfcCableCarrierFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCABLECARRIERFITTING] = (i:IFC4.IfcCableCarrierFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCABLECARRIERFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCABLECARRIERSEGMENT] = (d: RawLineData) => { new IFC4.IfcCableCarrierSegment(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCABLECARRIERSEGMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcCableCarrierSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCABLECARRIERSEGMENT] = (i:IFC4.IfcCableCarrierSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCABLECARRIERSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCABLEFITTING] = (d: RawLineData) => { new IFC4.IfcCableFitting(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCABLEFITTING] = (expressID:number, args: any[]) => { return new IFC4.IfcCableFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCABLEFITTING] = (i:IFC4.IfcCableFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCABLEFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCABLESEGMENT] = (d: RawLineData) => { new IFC4.IfcCableSegment(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCABLESEGMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcCableSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCABLESEGMENT] = (i:IFC4.IfcCableSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCABLESEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCHILLER] = (d: RawLineData) => { new IFC4.IfcChiller(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCHILLER] = (expressID:number, args: any[]) => { return new IFC4.IfcChiller(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCHILLER] = (i:IFC4.IfcChiller):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCHILLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCOIL] = (d: RawLineData) => { new IFC4.IfcCoil(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCOIL] = (expressID:number, args: any[]) => { return new IFC4.IfcCoil(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOIL] = (i:IFC4.IfcCoil):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOIL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCOMMUNICATIONSAPPLIANCE] = (d: RawLineData) => { new IFC4.IfcCommunicationsAppliance(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCOMMUNICATIONSAPPLIANCE] = (expressID:number, args: any[]) => { return new IFC4.IfcCommunicationsAppliance(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOMMUNICATIONSAPPLIANCE] = (i:IFC4.IfcCommunicationsAppliance):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOMMUNICATIONSAPPLIANCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCOMPRESSOR] = (d: RawLineData) => { new IFC4.IfcCompressor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCOMPRESSOR] = (expressID:number, args: any[]) => { return new IFC4.IfcCompressor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOMPRESSOR] = (i:IFC4.IfcCompressor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOMPRESSOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCONDENSER] = (d: RawLineData) => { new IFC4.IfcCondenser(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCONDENSER] = (expressID:number, args: any[]) => { return new IFC4.IfcCondenser(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCONDENSER] = (i:IFC4.IfcCondenser):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONDENSER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCONTROLLERTYPE] = (d: RawLineData) => { new IFC4.IfcControllerType(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcIdentifier(d.arguments[4].value), !d.arguments[5] ? null :d.arguments[5].map((p:any) => new Reference<IFC4.IfcPropertySetDefinition>(p.value)), !d.arguments[6] ? null :d.arguments[6].map((p:any) => new Reference<IFC4.IfcRepresentationMap>(p.value)), !d.arguments[7] ? null :new IFC4.IfcLabel(d.arguments[7].value), !d.arguments[8] ? null :new IFC4.IfcLabel(d.arguments[8].value), d.arguments[9]); }
Constructors['IFC4'][IFCCONTROLLERTYPE] = (expressID:number, args: any[]) => { return new IFC4.IfcControllerType(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]); }
ToRawLineData['IFC4'][IFCCONTROLLERTYPE] = (i:IFC4.IfcControllerType):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ApplicableOccurrence, i.HasPropertySets, i.RepresentationMaps, i.Tag, i.ElementType, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONTROLLERTYPE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['Types',IFCRELDEFINESBYTYPE,5,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],];
FromRawLineData['IFC4'][IFCCOOLEDBEAM] = (d: RawLineData) => { new IFC4.IfcCooledBeam(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCOOLEDBEAM] = (expressID:number, args: any[]) => { return new IFC4.IfcCooledBeam(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOOLEDBEAM] = (i:IFC4.IfcCooledBeam):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOOLEDBEAM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCCOOLINGTOWER] = (d: RawLineData) => { new IFC4.IfcCoolingTower(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCOOLINGTOWER] = (expressID:number, args: any[]) => { return new IFC4.IfcCoolingTower(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCOOLINGTOWER] = (i:IFC4.IfcCoolingTower):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCOOLINGTOWER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCDAMPER] = (d: RawLineData) => { new IFC4.IfcDamper(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCDAMPER] = (expressID:number, args: any[]) => { return new IFC4.IfcDamper(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDAMPER] = (i:IFC4.IfcDamper):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDAMPER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONCHAMBERELEMENT] = (d: RawLineData) => { new IFC4.IfcDistributionChamberElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCDISTRIBUTIONCHAMBERELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionChamberElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONCHAMBERELEMENT] = (i:IFC4.IfcDistributionChamberElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDISTRIBUTIONCHAMBERELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONCIRCUIT] = (d: RawLineData) => { new IFC4.IfcDistributionCircuit(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new IFC4.IfcLabel(d.arguments[5].value), d.arguments[6]); }
Constructors['IFC4'][IFCDISTRIBUTIONCIRCUIT] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionCircuit(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONCIRCUIT] = (i:IFC4.IfcDistributionCircuit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.LongName, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDISTRIBUTIONCIRCUIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['IsGroupedBy',IFCRELASSIGNSTOGROUP,6,true],['ServicesBuildings',IFCRELSERVICESBUILDINGS,4,true],];
FromRawLineData['IFC4'][IFCDISTRIBUTIONCONTROLELEMENT] = (d: RawLineData) => { new IFC4.IfcDistributionControlElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value)); }
Constructors['IFC4'][IFCDISTRIBUTIONCONTROLELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcDistributionControlElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]); }
ToRawLineData['IFC4'][IFCDISTRIBUTIONCONTROLELEMENT] = (i:IFC4.IfcDistributionControlElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag]; }
InheritanceDef['IFC4'][IFCDISTRIBUTIONCONTROLELEMENT] = [IFCCONTROLLER,IFCALARM,IFCACTUATOR,IFCUNITARYCONTROLELEMENT,IFCSENSOR,IFCPROTECTIVEDEVICETRIPPINGUNIT,IFCFLOWINSTRUMENT];
InversePropertyDef['IFC4'][IFCDISTRIBUTIONCONTROLELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCDUCTFITTING] = (d: RawLineData) => { new IFC4.IfcDuctFitting(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCDUCTFITTING] = (expressID:number, args: any[]) => { return new IFC4.IfcDuctFitting(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDUCTFITTING] = (i:IFC4.IfcDuctFitting):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDUCTFITTING] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCDUCTSEGMENT] = (d: RawLineData) => { new IFC4.IfcDuctSegment(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCDUCTSEGMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcDuctSegment(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDUCTSEGMENT] = (i:IFC4.IfcDuctSegment):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDUCTSEGMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCDUCTSILENCER] = (d: RawLineData) => { new IFC4.IfcDuctSilencer(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCDUCTSILENCER] = (expressID:number, args: any[]) => { return new IFC4.IfcDuctSilencer(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCDUCTSILENCER] = (i:IFC4.IfcDuctSilencer):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCDUCTSILENCER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCELECTRICAPPLIANCE] = (d: RawLineData) => { new IFC4.IfcElectricAppliance(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCELECTRICAPPLIANCE] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricAppliance(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCELECTRICAPPLIANCE] = (i:IFC4.IfcElectricAppliance):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICAPPLIANCE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCELECTRICDISTRIBUTIONBOARD] = (d: RawLineData) => { new IFC4.IfcElectricDistributionBoard(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCELECTRICDISTRIBUTIONBOARD] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricDistributionBoard(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCELECTRICDISTRIBUTIONBOARD] = (i:IFC4.IfcElectricDistributionBoard):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICDISTRIBUTIONBOARD] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCELECTRICFLOWSTORAGEDEVICE] = (d: RawLineData) => { new IFC4.IfcElectricFlowStorageDevice(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCELECTRICFLOWSTORAGEDEVICE] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricFlowStorageDevice(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCELECTRICFLOWSTORAGEDEVICE] = (i:IFC4.IfcElectricFlowStorageDevice):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICFLOWSTORAGEDEVICE] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCELECTRICGENERATOR] = (d: RawLineData) => { new IFC4.IfcElectricGenerator(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCELECTRICGENERATOR] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricGenerator(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCELECTRICGENERATOR] = (i:IFC4.IfcElectricGenerator):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICGENERATOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCELECTRICMOTOR] = (d: RawLineData) => { new IFC4.IfcElectricMotor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCELECTRICMOTOR] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricMotor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCELECTRICMOTOR] = (i:IFC4.IfcElectricMotor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICMOTOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCELECTRICTIMECONTROL] = (d: RawLineData) => { new IFC4.IfcElectricTimeControl(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCELECTRICTIMECONTROL] = (expressID:number, args: any[]) => { return new IFC4.IfcElectricTimeControl(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCELECTRICTIMECONTROL] = (i:IFC4.IfcElectricTimeControl):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCELECTRICTIMECONTROL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFAN] = (d: RawLineData) => { new IFC4.IfcFan(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCFAN] = (expressID:number, args: any[]) => { return new IFC4.IfcFan(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFAN] = (i:IFC4.IfcFan):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFAN] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFILTER] = (d: RawLineData) => { new IFC4.IfcFilter(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCFILTER] = (expressID:number, args: any[]) => { return new IFC4.IfcFilter(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFILTER] = (i:IFC4.IfcFilter):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFILTER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFIRESUPPRESSIONTERMINAL] = (d: RawLineData) => { new IFC4.IfcFireSuppressionTerminal(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCFIRESUPPRESSIONTERMINAL] = (expressID:number, args: any[]) => { return new IFC4.IfcFireSuppressionTerminal(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFIRESUPPRESSIONTERMINAL] = (i:IFC4.IfcFireSuppressionTerminal):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFIRESUPPRESSIONTERMINAL] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['HasControlElements',IFCRELFLOWCONTROLELEMENTS,5,true],];
FromRawLineData['IFC4'][IFCFLOWINSTRUMENT] = (d: RawLineData) => { new IFC4.IfcFlowInstrument(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCFLOWINSTRUMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcFlowInstrument(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCFLOWINSTRUMENT] = (i:IFC4.IfcFlowInstrument):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCFLOWINSTRUMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCPROTECTIVEDEVICETRIPPINGUNIT] = (d: RawLineData) => { new IFC4.IfcProtectiveDeviceTrippingUnit(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCPROTECTIVEDEVICETRIPPINGUNIT] = (expressID:number, args: any[]) => { return new IFC4.IfcProtectiveDeviceTrippingUnit(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCPROTECTIVEDEVICETRIPPINGUNIT] = (i:IFC4.IfcProtectiveDeviceTrippingUnit):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCPROTECTIVEDEVICETRIPPINGUNIT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCSENSOR] = (d: RawLineData) => { new IFC4.IfcSensor(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCSENSOR] = (expressID:number, args: any[]) => { return new IFC4.IfcSensor(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCSENSOR] = (i:IFC4.IfcSensor):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCSENSOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCUNITARYCONTROLELEMENT] = (d: RawLineData) => { new IFC4.IfcUnitaryControlElement(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCUNITARYCONTROLELEMENT] = (expressID:number, args: any[]) => { return new IFC4.IfcUnitaryControlElement(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCUNITARYCONTROLELEMENT] = (i:IFC4.IfcUnitaryControlElement):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCUNITARYCONTROLELEMENT] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCACTUATOR] = (d: RawLineData) => { new IFC4.IfcActuator(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCACTUATOR] = (expressID:number, args: any[]) => { return new IFC4.IfcActuator(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCACTUATOR] = (i:IFC4.IfcActuator):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCACTUATOR] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCALARM] = (d: RawLineData) => { new IFC4.IfcAlarm(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCALARM] = (expressID:number, args: any[]) => { return new IFC4.IfcAlarm(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCALARM] = (i:IFC4.IfcAlarm):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCALARM] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];
FromRawLineData['IFC4'][IFCCONTROLLER] = (d: RawLineData) => { new IFC4.IfcController(d.ID, new IFC4.IfcGloballyUniqueId(d.arguments[0].value), !d.arguments[1] ? null :new Reference<IFC4.IfcOwnerHistory>(d.arguments[1].value), !d.arguments[2] ? null :new IFC4.IfcLabel(d.arguments[2].value), !d.arguments[3] ? null :new IFC4.IfcText(d.arguments[3].value), !d.arguments[4] ? null :new IFC4.IfcLabel(d.arguments[4].value), !d.arguments[5] ? null :new Reference<IFC4.IfcObjectPlacement>(d.arguments[5].value), !d.arguments[6] ? null :new Reference<IFC4.IfcProductRepresentation>(d.arguments[6].value), !d.arguments[7] ? null :new IFC4.IfcIdentifier(d.arguments[7].value), d.arguments[8]); }
Constructors['IFC4'][IFCCONTROLLER] = (expressID:number, args: any[]) => { return new IFC4.IfcController(expressID, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]); }
ToRawLineData['IFC4'][IFCCONTROLLER] = (i:IFC4.IfcController):unknown[] => { return [i.GlobalId, i.OwnerHistory, i.Name, i.Description, i.ObjectType, i.ObjectPlacement, i.Representation, i.Tag, i.PredefinedType]; }
InversePropertyDef['IFC4'][IFCCONTROLLER] = [['HasAssignments',IFCRELASSIGNS,4,true],['Nests',IFCRELNESTS,5,true],['IsNestedBy',IFCRELNESTS,4,true],['HasContext',IFCRELDECLARES,5,true],['IsDecomposedBy',IFCRELAGGREGATES,4,true],['Decomposes',IFCRELAGGREGATES,5,true],['HasAssociations',IFCRELASSOCIATES,4,true],['IsDeclaredBy',IFCRELDEFINESBYOBJECT,4,true],['Declares',IFCRELDEFINESBYOBJECT,5,true],['IsTypedBy',IFCRELDEFINESBYTYPE,4,true],['IsDefinedBy',IFCRELDEFINESBYPROPERTIES,4,true],['ReferencedBy',IFCRELASSIGNSTOPRODUCT,6,true],['FillsVoids',IFCRELFILLSELEMENT,5,true],['ConnectedTo',IFCRELCONNECTSELEMENTS,5,true],['IsInterferedByElements',IFCRELINTERFERESELEMENTS,5,true],['InterferesElements',IFCRELINTERFERESELEMENTS,4,true],['HasProjections',IFCRELPROJECTSELEMENT,4,true],['ReferencedInStructures',IFCRELREFERENCEDINSPATIALSTRUCTURE,4,true],['HasOpenings',IFCRELVOIDSELEMENT,4,true],['IsConnectionRealization',IFCRELCONNECTSWITHREALIZINGELEMENTS,7,true],['ProvidesBoundaries',IFCRELSPACEBOUNDARY,5,true],['ConnectedFrom',IFCRELCONNECTSELEMENTS,6,true],['ContainedInStructure',IFCRELCONTAINEDINSPATIALSTRUCTURE,4,true],['HasCoverings',IFCRELCOVERSBLDGELEMENTS,4,true],['HasPorts',IFCRELCONNECTSPORTTOELEMENT,5,true],['AssignedToFlowElement',IFCRELFLOWCONTROLELEMENTS,4,true],];